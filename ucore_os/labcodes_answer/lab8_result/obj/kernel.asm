
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 f0 14 00       	mov    $0x14f000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 f0 14 c0       	mov    %eax,0xc014f000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba 04 53 15 c0       	mov    $0xc0155304,%edx
c0100041:	b8 00 10 15 c0       	mov    $0xc0151000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 10 15 c0       	push   $0xc0151000
c0100055:	e8 b6 39 01 00       	call   c0113a10 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 8f 1f 00 00       	call   c0101ff1 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 00 43 11 c0 	movl   $0xc0114300,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 1c 43 11 c0       	push   $0xc011431c
c0100074:	e8 06 03 00 00       	call   c010037f <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 74 0a 00 00       	call   c0100af5 <print_kerninfo>

    grade_backtrace();
c0100081:	e8 95 00 00 00       	call   c010011b <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 83 76 00 00       	call   c010770e <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 d3 20 00 00       	call   c0102163 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 34 22 00 00       	call   c01022c9 <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 35 3c 00 00       	call   c0103ccf <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 4b d6 00 00       	call   c010d6ea <sched_init>
    proc_init();                // init process table
c010009f:	e8 ab d2 00 00       	call   c010d34f <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 0d 0f 00 00       	call   c0100fb6 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 27 47 00 00       	call   c01047d5 <swap_init>
    fs_init();                  // init fs
c01000ae:	e8 21 b0 00 00       	call   c010b0d4 <fs_init>
    
    clock_init();               // init clock interrupt
c01000b3:	e8 e0 16 00 00       	call   c0101798 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b8:	e8 e3 21 00 00       	call   c01022a0 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000bd:	e8 77 d4 00 00       	call   c010d539 <cpu_idle>

c01000c2 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c2:	55                   	push   %ebp
c01000c3:	89 e5                	mov    %esp,%ebp
c01000c5:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c8:	83 ec 04             	sub    $0x4,%esp
c01000cb:	6a 00                	push   $0x0
c01000cd:	6a 00                	push   $0x0
c01000cf:	6a 00                	push   $0x0
c01000d1:	e8 74 0e 00 00       	call   c0100f4a <mon_backtrace>
c01000d6:	83 c4 10             	add    $0x10,%esp
}
c01000d9:	90                   	nop
c01000da:	c9                   	leave  
c01000db:	c3                   	ret    

c01000dc <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000dc:	55                   	push   %ebp
c01000dd:	89 e5                	mov    %esp,%ebp
c01000df:	53                   	push   %ebx
c01000e0:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e3:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e9:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ef:	51                   	push   %ecx
c01000f0:	52                   	push   %edx
c01000f1:	53                   	push   %ebx
c01000f2:	50                   	push   %eax
c01000f3:	e8 ca ff ff ff       	call   c01000c2 <grade_backtrace2>
c01000f8:	83 c4 10             	add    $0x10,%esp
}
c01000fb:	90                   	nop
c01000fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000ff:	c9                   	leave  
c0100100:	c3                   	ret    

c0100101 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100101:	55                   	push   %ebp
c0100102:	89 e5                	mov    %esp,%ebp
c0100104:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100107:	83 ec 08             	sub    $0x8,%esp
c010010a:	ff 75 10             	pushl  0x10(%ebp)
c010010d:	ff 75 08             	pushl  0x8(%ebp)
c0100110:	e8 c7 ff ff ff       	call   c01000dc <grade_backtrace1>
c0100115:	83 c4 10             	add    $0x10,%esp
}
c0100118:	90                   	nop
c0100119:	c9                   	leave  
c010011a:	c3                   	ret    

c010011b <grade_backtrace>:

void
grade_backtrace(void) {
c010011b:	55                   	push   %ebp
c010011c:	89 e5                	mov    %esp,%ebp
c010011e:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100121:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100126:	83 ec 04             	sub    $0x4,%esp
c0100129:	68 00 00 ff ff       	push   $0xffff0000
c010012e:	50                   	push   %eax
c010012f:	6a 00                	push   $0x0
c0100131:	e8 cb ff ff ff       	call   c0100101 <grade_backtrace0>
c0100136:	83 c4 10             	add    $0x10,%esp
}
c0100139:	90                   	nop
c010013a:	c9                   	leave  
c010013b:	c3                   	ret    

c010013c <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010013c:	55                   	push   %ebp
c010013d:	89 e5                	mov    %esp,%ebp
c010013f:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100142:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100145:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100148:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010014b:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010014e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100152:	0f b7 c0             	movzwl %ax,%eax
c0100155:	83 e0 03             	and    $0x3,%eax
c0100158:	89 c2                	mov    %eax,%edx
c010015a:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010015f:	83 ec 04             	sub    $0x4,%esp
c0100162:	52                   	push   %edx
c0100163:	50                   	push   %eax
c0100164:	68 21 43 11 c0       	push   $0xc0114321
c0100169:	e8 11 02 00 00       	call   c010037f <cprintf>
c010016e:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100175:	0f b7 d0             	movzwl %ax,%edx
c0100178:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010017d:	83 ec 04             	sub    $0x4,%esp
c0100180:	52                   	push   %edx
c0100181:	50                   	push   %eax
c0100182:	68 2f 43 11 c0       	push   $0xc011432f
c0100187:	e8 f3 01 00 00       	call   c010037f <cprintf>
c010018c:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100193:	0f b7 d0             	movzwl %ax,%edx
c0100196:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010019b:	83 ec 04             	sub    $0x4,%esp
c010019e:	52                   	push   %edx
c010019f:	50                   	push   %eax
c01001a0:	68 3d 43 11 c0       	push   $0xc011433d
c01001a5:	e8 d5 01 00 00       	call   c010037f <cprintf>
c01001aa:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001ad:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001b1:	0f b7 d0             	movzwl %ax,%edx
c01001b4:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001b9:	83 ec 04             	sub    $0x4,%esp
c01001bc:	52                   	push   %edx
c01001bd:	50                   	push   %eax
c01001be:	68 4b 43 11 c0       	push   $0xc011434b
c01001c3:	e8 b7 01 00 00       	call   c010037f <cprintf>
c01001c8:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001cb:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001cf:	0f b7 d0             	movzwl %ax,%edx
c01001d2:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001d7:	83 ec 04             	sub    $0x4,%esp
c01001da:	52                   	push   %edx
c01001db:	50                   	push   %eax
c01001dc:	68 59 43 11 c0       	push   $0xc0114359
c01001e1:	e8 99 01 00 00       	call   c010037f <cprintf>
c01001e6:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e9:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001ee:	83 c0 01             	add    $0x1,%eax
c01001f1:	a3 00 10 15 c0       	mov    %eax,0xc0151000
}
c01001f6:	90                   	nop
c01001f7:	c9                   	leave  
c01001f8:	c3                   	ret    

c01001f9 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f9:	55                   	push   %ebp
c01001fa:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c01001fc:	90                   	nop
c01001fd:	5d                   	pop    %ebp
c01001fe:	c3                   	ret    

c01001ff <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001ff:	55                   	push   %ebp
c0100200:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100202:	90                   	nop
c0100203:	5d                   	pop    %ebp
c0100204:	c3                   	ret    

c0100205 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100205:	55                   	push   %ebp
c0100206:	89 e5                	mov    %esp,%ebp
c0100208:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020b:	e8 2c ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100210:	83 ec 0c             	sub    $0xc,%esp
c0100213:	68 68 43 11 c0       	push   $0xc0114368
c0100218:	e8 62 01 00 00       	call   c010037f <cprintf>
c010021d:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100220:	e8 d4 ff ff ff       	call   c01001f9 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100225:	e8 12 ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022a:	83 ec 0c             	sub    $0xc,%esp
c010022d:	68 88 43 11 c0       	push   $0xc0114388
c0100232:	e8 48 01 00 00       	call   c010037f <cprintf>
c0100237:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023a:	e8 c0 ff ff ff       	call   c01001ff <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010023f:	e8 f8 fe ff ff       	call   c010013c <lab1_print_cur_status>
}
c0100244:	90                   	nop
c0100245:	c9                   	leave  
c0100246:	c3                   	ret    

c0100247 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100247:	55                   	push   %ebp
c0100248:	89 e5                	mov    %esp,%ebp
c010024a:	83 ec 18             	sub    $0x18,%esp
    char *dst;
    size_t len = strlen(src);
c010024d:	83 ec 0c             	sub    $0xc,%esp
c0100250:	ff 75 08             	pushl  0x8(%ebp)
c0100253:	e8 5e 34 01 00       	call   c01136b6 <strlen>
c0100258:	83 c4 10             	add    $0x10,%esp
c010025b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010025e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100261:	83 c0 01             	add    $0x1,%eax
c0100264:	83 ec 0c             	sub    $0xc,%esp
c0100267:	50                   	push   %eax
c0100268:	e8 e3 55 00 00       	call   c0105850 <kmalloc>
c010026d:	83 c4 10             	add    $0x10,%esp
c0100270:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100273:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100277:	74 1f                	je     c0100298 <strdup+0x51>
        memcpy(dst, src, len);
c0100279:	83 ec 04             	sub    $0x4,%esp
c010027c:	ff 75 f4             	pushl  -0xc(%ebp)
c010027f:	ff 75 08             	pushl  0x8(%ebp)
c0100282:	ff 75 f0             	pushl  -0x10(%ebp)
c0100285:	e8 69 38 01 00       	call   c0113af3 <memcpy>
c010028a:	83 c4 10             	add    $0x10,%esp
        dst[len] = '\0';
c010028d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100293:	01 d0                	add    %edx,%eax
c0100295:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100298:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010029b:	c9                   	leave  
c010029c:	c3                   	ret    

c010029d <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010029d:	55                   	push   %ebp
c010029e:	89 e5                	mov    %esp,%ebp
c01002a0:	83 ec 18             	sub    $0x18,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c01002a3:	83 ec 0c             	sub    $0xc,%esp
c01002a6:	ff 75 08             	pushl  0x8(%ebp)
c01002a9:	e8 08 34 01 00       	call   c01136b6 <strlen>
c01002ae:	83 c4 10             	add    $0x10,%esp
c01002b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002b4:	83 ec 0c             	sub    $0xc,%esp
c01002b7:	ff 75 0c             	pushl  0xc(%ebp)
c01002ba:	e8 f7 33 01 00       	call   c01136b6 <strlen>
c01002bf:	83 c4 10             	add    $0x10,%esp
c01002c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c01002c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cb:	01 d0                	add    %edx,%eax
c01002cd:	83 c0 01             	add    $0x1,%eax
c01002d0:	83 ec 0c             	sub    $0xc,%esp
c01002d3:	50                   	push   %eax
c01002d4:	e8 77 55 00 00       	call   c0105850 <kmalloc>
c01002d9:	83 c4 10             	add    $0x10,%esp
c01002dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01002df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01002e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01002e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01002e9:	74 3a                	je     c0100325 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01002eb:	83 ec 04             	sub    $0x4,%esp
c01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
c01002f1:	ff 75 08             	pushl  0x8(%ebp)
c01002f4:	ff 75 ec             	pushl  -0x14(%ebp)
c01002f7:	e8 f7 37 01 00       	call   c0113af3 <memcpy>
c01002fc:	83 c4 10             	add    $0x10,%esp
c01002ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100302:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c0100305:	83 ec 04             	sub    $0x4,%esp
c0100308:	ff 75 f0             	pushl  -0x10(%ebp)
c010030b:	ff 75 0c             	pushl  0xc(%ebp)
c010030e:	ff 75 ec             	pushl  -0x14(%ebp)
c0100311:	e8 dd 37 01 00       	call   c0113af3 <memcpy>
c0100316:	83 c4 10             	add    $0x10,%esp
c0100319:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010031c:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c010031f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100322:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c0100325:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100330:	83 ec 0c             	sub    $0xc,%esp
c0100333:	ff 75 08             	pushl  0x8(%ebp)
c0100336:	e8 e7 1c 00 00       	call   c0102022 <cons_putc>
c010033b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010033e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100341:	8b 00                	mov    (%eax),%eax
c0100343:	8d 50 01             	lea    0x1(%eax),%edx
c0100346:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100349:	89 10                	mov    %edx,(%eax)
}
c010034b:	90                   	nop
c010034c:	c9                   	leave  
c010034d:	c3                   	ret    

c010034e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010034e:	55                   	push   %ebp
c010034f:	89 e5                	mov    %esp,%ebp
c0100351:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100354:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c010035b:	83 ec 0c             	sub    $0xc,%esp
c010035e:	ff 75 0c             	pushl  0xc(%ebp)
c0100361:	ff 75 08             	pushl  0x8(%ebp)
c0100364:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100367:	50                   	push   %eax
c0100368:	68 d9 6a ff ff       	push   $0xffff6ad9
c010036d:	68 2a 03 10 c0       	push   $0xc010032a
c0100372:	e8 db 39 01 00       	call   c0113d52 <vprintfmt>
c0100377:	83 c4 20             	add    $0x20,%esp
    return cnt;
c010037a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037d:	c9                   	leave  
c010037e:	c3                   	ret    

c010037f <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c010037f:	55                   	push   %ebp
c0100380:	89 e5                	mov    %esp,%ebp
c0100382:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100385:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100388:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010038b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010038e:	83 ec 08             	sub    $0x8,%esp
c0100391:	50                   	push   %eax
c0100392:	ff 75 08             	pushl  0x8(%ebp)
c0100395:	e8 b4 ff ff ff       	call   c010034e <vcprintf>
c010039a:	83 c4 10             	add    $0x10,%esp
c010039d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01003a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003a3:	c9                   	leave  
c01003a4:	c3                   	ret    

c01003a5 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01003a5:	55                   	push   %ebp
c01003a6:	89 e5                	mov    %esp,%ebp
c01003a8:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01003ab:	83 ec 0c             	sub    $0xc,%esp
c01003ae:	ff 75 08             	pushl  0x8(%ebp)
c01003b1:	e8 6c 1c 00 00       	call   c0102022 <cons_putc>
c01003b6:	83 c4 10             	add    $0x10,%esp
}
c01003b9:	90                   	nop
c01003ba:	c9                   	leave  
c01003bb:	c3                   	ret    

c01003bc <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003bc:	55                   	push   %ebp
c01003bd:	89 e5                	mov    %esp,%ebp
c01003bf:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01003c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003c9:	eb 14                	jmp    c01003df <cputs+0x23>
        cputch(c, &cnt);
c01003cb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003cf:	83 ec 08             	sub    $0x8,%esp
c01003d2:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003d5:	52                   	push   %edx
c01003d6:	50                   	push   %eax
c01003d7:	e8 4e ff ff ff       	call   c010032a <cputch>
c01003dc:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003df:	8b 45 08             	mov    0x8(%ebp),%eax
c01003e2:	8d 50 01             	lea    0x1(%eax),%edx
c01003e5:	89 55 08             	mov    %edx,0x8(%ebp)
c01003e8:	0f b6 00             	movzbl (%eax),%eax
c01003eb:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003ee:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003f2:	75 d7                	jne    c01003cb <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003f4:	83 ec 08             	sub    $0x8,%esp
c01003f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003fa:	50                   	push   %eax
c01003fb:	6a 0a                	push   $0xa
c01003fd:	e8 28 ff ff ff       	call   c010032a <cputch>
c0100402:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100405:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100408:	c9                   	leave  
c0100409:	c3                   	ret    

c010040a <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010040a:	55                   	push   %ebp
c010040b:	89 e5                	mov    %esp,%ebp
c010040d:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100410:	e8 56 1c 00 00       	call   c010206b <cons_getc>
c0100415:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100418:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010041c:	74 f2                	je     c0100410 <getchar+0x6>
        /* do nothing */;
    return c;
c010041e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100421:	c9                   	leave  
c0100422:	c3                   	ret    

c0100423 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100423:	55                   	push   %ebp
c0100424:	89 e5                	mov    %esp,%ebp
c0100426:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100429:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010042d:	74 13                	je     c0100442 <readline+0x1f>
        cprintf("%s", prompt);
c010042f:	83 ec 08             	sub    $0x8,%esp
c0100432:	ff 75 08             	pushl  0x8(%ebp)
c0100435:	68 a7 43 11 c0       	push   $0xc01143a7
c010043a:	e8 40 ff ff ff       	call   c010037f <cprintf>
c010043f:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c0100442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100449:	e8 bc ff ff ff       	call   c010040a <getchar>
c010044e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100451:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100455:	79 0a                	jns    c0100461 <readline+0x3e>
            return NULL;
c0100457:	b8 00 00 00 00       	mov    $0x0,%eax
c010045c:	e9 82 00 00 00       	jmp    c01004e3 <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100461:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100465:	7e 2b                	jle    c0100492 <readline+0x6f>
c0100467:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010046e:	7f 22                	jg     c0100492 <readline+0x6f>
            cputchar(c);
c0100470:	83 ec 0c             	sub    $0xc,%esp
c0100473:	ff 75 f0             	pushl  -0x10(%ebp)
c0100476:	e8 2a ff ff ff       	call   c01003a5 <cputchar>
c010047b:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c010047e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100481:	8d 50 01             	lea    0x1(%eax),%edx
c0100484:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100487:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048a:	88 90 20 10 15 c0    	mov    %dl,-0x3feaefe0(%eax)
c0100490:	eb 4c                	jmp    c01004de <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c0100492:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c0100496:	75 1a                	jne    c01004b2 <readline+0x8f>
c0100498:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010049c:	7e 14                	jle    c01004b2 <readline+0x8f>
            cputchar(c);
c010049e:	83 ec 0c             	sub    $0xc,%esp
c01004a1:	ff 75 f0             	pushl  -0x10(%ebp)
c01004a4:	e8 fc fe ff ff       	call   c01003a5 <cputchar>
c01004a9:	83 c4 10             	add    $0x10,%esp
            i --;
c01004ac:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01004b0:	eb 2c                	jmp    c01004de <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01004b2:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01004b6:	74 06                	je     c01004be <readline+0x9b>
c01004b8:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01004bc:	75 8b                	jne    c0100449 <readline+0x26>
            cputchar(c);
c01004be:	83 ec 0c             	sub    $0xc,%esp
c01004c1:	ff 75 f0             	pushl  -0x10(%ebp)
c01004c4:	e8 dc fe ff ff       	call   c01003a5 <cputchar>
c01004c9:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01004cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004cf:	05 20 10 15 c0       	add    $0xc0151020,%eax
c01004d4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01004d7:	b8 20 10 15 c0       	mov    $0xc0151020,%eax
c01004dc:	eb 05                	jmp    c01004e3 <readline+0xc0>
        }
    }
c01004de:	e9 66 ff ff ff       	jmp    c0100449 <readline+0x26>
}
c01004e3:	c9                   	leave  
c01004e4:	c3                   	ret    

c01004e5 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01004e5:	55                   	push   %ebp
c01004e6:	89 e5                	mov    %esp,%ebp
c01004e8:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01004eb:	a1 20 14 15 c0       	mov    0xc0151420,%eax
c01004f0:	85 c0                	test   %eax,%eax
c01004f2:	75 5f                	jne    c0100553 <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c01004f4:	c7 05 20 14 15 c0 01 	movl   $0x1,0xc0151420
c01004fb:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c01004fe:	8d 45 14             	lea    0x14(%ebp),%eax
c0100501:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100504:	83 ec 04             	sub    $0x4,%esp
c0100507:	ff 75 0c             	pushl  0xc(%ebp)
c010050a:	ff 75 08             	pushl  0x8(%ebp)
c010050d:	68 aa 43 11 c0       	push   $0xc01143aa
c0100512:	e8 68 fe ff ff       	call   c010037f <cprintf>
c0100517:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010051a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010051d:	83 ec 08             	sub    $0x8,%esp
c0100520:	50                   	push   %eax
c0100521:	ff 75 10             	pushl  0x10(%ebp)
c0100524:	e8 25 fe ff ff       	call   c010034e <vcprintf>
c0100529:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010052c:	83 ec 0c             	sub    $0xc,%esp
c010052f:	68 c6 43 11 c0       	push   $0xc01143c6
c0100534:	e8 46 fe ff ff       	call   c010037f <cprintf>
c0100539:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c010053c:	83 ec 0c             	sub    $0xc,%esp
c010053f:	68 c8 43 11 c0       	push   $0xc01143c8
c0100544:	e8 36 fe ff ff       	call   c010037f <cprintf>
c0100549:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c010054c:	e8 ee 06 00 00       	call   c0100c3f <print_stackframe>
c0100551:	eb 01                	jmp    c0100554 <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100553:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100554:	e8 4e 1d 00 00       	call   c01022a7 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100559:	83 ec 0c             	sub    $0xc,%esp
c010055c:	6a 00                	push   $0x0
c010055e:	e8 0d 09 00 00       	call   c0100e70 <kmonitor>
c0100563:	83 c4 10             	add    $0x10,%esp
    }
c0100566:	eb f1                	jmp    c0100559 <__panic+0x74>

c0100568 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100568:	55                   	push   %ebp
c0100569:	89 e5                	mov    %esp,%ebp
c010056b:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c010056e:	8d 45 14             	lea    0x14(%ebp),%eax
c0100571:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100574:	83 ec 04             	sub    $0x4,%esp
c0100577:	ff 75 0c             	pushl  0xc(%ebp)
c010057a:	ff 75 08             	pushl  0x8(%ebp)
c010057d:	68 da 43 11 c0       	push   $0xc01143da
c0100582:	e8 f8 fd ff ff       	call   c010037f <cprintf>
c0100587:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010058a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010058d:	83 ec 08             	sub    $0x8,%esp
c0100590:	50                   	push   %eax
c0100591:	ff 75 10             	pushl  0x10(%ebp)
c0100594:	e8 b5 fd ff ff       	call   c010034e <vcprintf>
c0100599:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010059c:	83 ec 0c             	sub    $0xc,%esp
c010059f:	68 c6 43 11 c0       	push   $0xc01143c6
c01005a4:	e8 d6 fd ff ff       	call   c010037f <cprintf>
c01005a9:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01005ac:	90                   	nop
c01005ad:	c9                   	leave  
c01005ae:	c3                   	ret    

c01005af <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01005af:	55                   	push   %ebp
c01005b0:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01005b2:	a1 20 14 15 c0       	mov    0xc0151420,%eax
}
c01005b7:	5d                   	pop    %ebp
c01005b8:	c3                   	ret    

c01005b9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01005b9:	55                   	push   %ebp
c01005ba:	89 e5                	mov    %esp,%ebp
c01005bc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01005bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005c2:	8b 00                	mov    (%eax),%eax
c01005c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ca:	8b 00                	mov    (%eax),%eax
c01005cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01005d6:	e9 d2 00 00 00       	jmp    c01006ad <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01005db:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01005e1:	01 d0                	add    %edx,%eax
c01005e3:	89 c2                	mov    %eax,%edx
c01005e5:	c1 ea 1f             	shr    $0x1f,%edx
c01005e8:	01 d0                	add    %edx,%eax
c01005ea:	d1 f8                	sar    %eax
c01005ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005f2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005f5:	eb 04                	jmp    c01005fb <stab_binsearch+0x42>
            m --;
c01005f7:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100601:	7c 1f                	jl     c0100622 <stab_binsearch+0x69>
c0100603:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100606:	89 d0                	mov    %edx,%eax
c0100608:	01 c0                	add    %eax,%eax
c010060a:	01 d0                	add    %edx,%eax
c010060c:	c1 e0 02             	shl    $0x2,%eax
c010060f:	89 c2                	mov    %eax,%edx
c0100611:	8b 45 08             	mov    0x8(%ebp),%eax
c0100614:	01 d0                	add    %edx,%eax
c0100616:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010061a:	0f b6 c0             	movzbl %al,%eax
c010061d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100620:	75 d5                	jne    c01005f7 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100625:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100628:	7d 0b                	jge    c0100635 <stab_binsearch+0x7c>
            l = true_m + 1;
c010062a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010062d:	83 c0 01             	add    $0x1,%eax
c0100630:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100633:	eb 78                	jmp    c01006ad <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100635:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010063c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063f:	89 d0                	mov    %edx,%eax
c0100641:	01 c0                	add    %eax,%eax
c0100643:	01 d0                	add    %edx,%eax
c0100645:	c1 e0 02             	shl    $0x2,%eax
c0100648:	89 c2                	mov    %eax,%edx
c010064a:	8b 45 08             	mov    0x8(%ebp),%eax
c010064d:	01 d0                	add    %edx,%eax
c010064f:	8b 40 08             	mov    0x8(%eax),%eax
c0100652:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100655:	73 13                	jae    c010066a <stab_binsearch+0xb1>
            *region_left = m;
c0100657:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010065d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100662:	83 c0 01             	add    $0x1,%eax
c0100665:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100668:	eb 43                	jmp    c01006ad <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c010066a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010066d:	89 d0                	mov    %edx,%eax
c010066f:	01 c0                	add    %eax,%eax
c0100671:	01 d0                	add    %edx,%eax
c0100673:	c1 e0 02             	shl    $0x2,%eax
c0100676:	89 c2                	mov    %eax,%edx
c0100678:	8b 45 08             	mov    0x8(%ebp),%eax
c010067b:	01 d0                	add    %edx,%eax
c010067d:	8b 40 08             	mov    0x8(%eax),%eax
c0100680:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100683:	76 16                	jbe    c010069b <stab_binsearch+0xe2>
            *region_right = m - 1;
c0100685:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100688:	8d 50 ff             	lea    -0x1(%eax),%edx
c010068b:	8b 45 10             	mov    0x10(%ebp),%eax
c010068e:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c0100690:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100693:	83 e8 01             	sub    $0x1,%eax
c0100696:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100699:	eb 12                	jmp    c01006ad <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c010069b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010069e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006a1:	89 10                	mov    %edx,(%eax)
            l = m;
c01006a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01006a9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01006ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01006b0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01006b3:	0f 8e 22 ff ff ff    	jle    c01005db <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01006b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01006bd:	75 0f                	jne    c01006ce <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01006bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006c2:	8b 00                	mov    (%eax),%eax
c01006c4:	8d 50 ff             	lea    -0x1(%eax),%edx
c01006c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01006ca:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01006cc:	eb 3f                	jmp    c010070d <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01006ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d1:	8b 00                	mov    (%eax),%eax
c01006d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01006d6:	eb 04                	jmp    c01006dc <stab_binsearch+0x123>
c01006d8:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01006dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006df:	8b 00                	mov    (%eax),%eax
c01006e1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01006e4:	7d 1f                	jge    c0100705 <stab_binsearch+0x14c>
c01006e6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006e9:	89 d0                	mov    %edx,%eax
c01006eb:	01 c0                	add    %eax,%eax
c01006ed:	01 d0                	add    %edx,%eax
c01006ef:	c1 e0 02             	shl    $0x2,%eax
c01006f2:	89 c2                	mov    %eax,%edx
c01006f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f7:	01 d0                	add    %edx,%eax
c01006f9:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01006fd:	0f b6 c0             	movzbl %al,%eax
c0100700:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100703:	75 d3                	jne    c01006d8 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100705:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100708:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010070b:	89 10                	mov    %edx,(%eax)
    }
}
c010070d:	90                   	nop
c010070e:	c9                   	leave  
c010070f:	c3                   	ret    

c0100710 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100710:	55                   	push   %ebp
c0100711:	89 e5                	mov    %esp,%ebp
c0100713:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100716:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100719:	c7 00 f8 43 11 c0    	movl   $0xc01143f8,(%eax)
    info->eip_line = 0;
c010071f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100722:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100729:	8b 45 0c             	mov    0xc(%ebp),%eax
c010072c:	c7 40 08 f8 43 11 c0 	movl   $0xc01143f8,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100733:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100736:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010073d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100740:	8b 55 08             	mov    0x8(%ebp),%edx
c0100743:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100746:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100749:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100750:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100757:	76 21                	jbe    c010077a <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100759:	c7 45 f4 80 8a 11 c0 	movl   $0xc0118a80,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100760:	c7 45 f0 84 f0 13 c0 	movl   $0xc013f084,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100767:	c7 45 ec 85 f0 13 c0 	movl   $0xc013f085,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010076e:	c7 45 e8 89 b8 14 c0 	movl   $0xc014b889,-0x18(%ebp)
c0100775:	e9 c3 00 00 00       	jmp    c010083d <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c010077a:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100781:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0100786:	85 c0                	test   %eax,%eax
c0100788:	74 11                	je     c010079b <debuginfo_eip+0x8b>
c010078a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010078f:	8b 40 18             	mov    0x18(%eax),%eax
c0100792:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100795:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100799:	75 0a                	jne    c01007a5 <debuginfo_eip+0x95>
            return -1;
c010079b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007a0:	e9 4e 03 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01007a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007a8:	6a 00                	push   $0x0
c01007aa:	6a 10                	push   $0x10
c01007ac:	50                   	push   %eax
c01007ad:	ff 75 e0             	pushl  -0x20(%ebp)
c01007b0:	e8 93 3d 00 00       	call   c0104548 <user_mem_check>
c01007b5:	83 c4 10             	add    $0x10,%esp
c01007b8:	85 c0                	test   %eax,%eax
c01007ba:	75 0a                	jne    c01007c6 <debuginfo_eip+0xb6>
            return -1;
c01007bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007c1:	e9 2d 03 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01007c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007c9:	8b 00                	mov    (%eax),%eax
c01007cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01007ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007d1:	8b 40 04             	mov    0x4(%eax),%eax
c01007d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01007d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007da:	8b 40 08             	mov    0x8(%eax),%eax
c01007dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01007e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01007e6:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01007e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ef:	29 c2                	sub    %eax,%edx
c01007f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f4:	6a 00                	push   $0x0
c01007f6:	52                   	push   %edx
c01007f7:	50                   	push   %eax
c01007f8:	ff 75 e0             	pushl  -0x20(%ebp)
c01007fb:	e8 48 3d 00 00       	call   c0104548 <user_mem_check>
c0100800:	83 c4 10             	add    $0x10,%esp
c0100803:	85 c0                	test   %eax,%eax
c0100805:	75 0a                	jne    c0100811 <debuginfo_eip+0x101>
            return -1;
c0100807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010080c:	e9 e2 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100811:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100814:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100817:	29 c2                	sub    %eax,%edx
c0100819:	89 d0                	mov    %edx,%eax
c010081b:	89 c2                	mov    %eax,%edx
c010081d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100820:	6a 00                	push   $0x0
c0100822:	52                   	push   %edx
c0100823:	50                   	push   %eax
c0100824:	ff 75 e0             	pushl  -0x20(%ebp)
c0100827:	e8 1c 3d 00 00       	call   c0104548 <user_mem_check>
c010082c:	83 c4 10             	add    $0x10,%esp
c010082f:	85 c0                	test   %eax,%eax
c0100831:	75 0a                	jne    c010083d <debuginfo_eip+0x12d>
            return -1;
c0100833:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100838:	e9 b6 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010083d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100840:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100843:	76 0d                	jbe    c0100852 <debuginfo_eip+0x142>
c0100845:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100848:	83 e8 01             	sub    $0x1,%eax
c010084b:	0f b6 00             	movzbl (%eax),%eax
c010084e:	84 c0                	test   %al,%al
c0100850:	74 0a                	je     c010085c <debuginfo_eip+0x14c>
        return -1;
c0100852:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100857:	e9 97 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010085c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100863:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100866:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100869:	29 c2                	sub    %eax,%edx
c010086b:	89 d0                	mov    %edx,%eax
c010086d:	c1 f8 02             	sar    $0x2,%eax
c0100870:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100876:	83 e8 01             	sub    $0x1,%eax
c0100879:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010087c:	83 ec 0c             	sub    $0xc,%esp
c010087f:	ff 75 08             	pushl  0x8(%ebp)
c0100882:	6a 64                	push   $0x64
c0100884:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100887:	50                   	push   %eax
c0100888:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010088b:	50                   	push   %eax
c010088c:	ff 75 f4             	pushl  -0xc(%ebp)
c010088f:	e8 25 fd ff ff       	call   c01005b9 <stab_binsearch>
c0100894:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010089a:	85 c0                	test   %eax,%eax
c010089c:	75 0a                	jne    c01008a8 <debuginfo_eip+0x198>
        return -1;
c010089e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008a3:	e9 4b 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01008a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01008ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01008b4:	83 ec 0c             	sub    $0xc,%esp
c01008b7:	ff 75 08             	pushl  0x8(%ebp)
c01008ba:	6a 24                	push   $0x24
c01008bc:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01008bf:	50                   	push   %eax
c01008c0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01008c3:	50                   	push   %eax
c01008c4:	ff 75 f4             	pushl  -0xc(%ebp)
c01008c7:	e8 ed fc ff ff       	call   c01005b9 <stab_binsearch>
c01008cc:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01008cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01008d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008d5:	39 c2                	cmp    %eax,%edx
c01008d7:	7f 7c                	jg     c0100955 <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008dc:	89 c2                	mov    %eax,%edx
c01008de:	89 d0                	mov    %edx,%eax
c01008e0:	01 c0                	add    %eax,%eax
c01008e2:	01 d0                	add    %edx,%eax
c01008e4:	c1 e0 02             	shl    $0x2,%eax
c01008e7:	89 c2                	mov    %eax,%edx
c01008e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	8b 00                	mov    (%eax),%eax
c01008f0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01008f6:	29 d1                	sub    %edx,%ecx
c01008f8:	89 ca                	mov    %ecx,%edx
c01008fa:	39 d0                	cmp    %edx,%eax
c01008fc:	73 22                	jae    c0100920 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c01008fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100901:	89 c2                	mov    %eax,%edx
c0100903:	89 d0                	mov    %edx,%eax
c0100905:	01 c0                	add    %eax,%eax
c0100907:	01 d0                	add    %edx,%eax
c0100909:	c1 e0 02             	shl    $0x2,%eax
c010090c:	89 c2                	mov    %eax,%edx
c010090e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	8b 10                	mov    (%eax),%edx
c0100915:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100918:	01 c2                	add    %eax,%edx
c010091a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010091d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100920:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100923:	89 c2                	mov    %eax,%edx
c0100925:	89 d0                	mov    %edx,%eax
c0100927:	01 c0                	add    %eax,%eax
c0100929:	01 d0                	add    %edx,%eax
c010092b:	c1 e0 02             	shl    $0x2,%eax
c010092e:	89 c2                	mov    %eax,%edx
c0100930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100933:	01 d0                	add    %edx,%eax
c0100935:	8b 50 08             	mov    0x8(%eax),%edx
c0100938:	8b 45 0c             	mov    0xc(%ebp),%eax
c010093b:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 10             	mov    0x10(%eax),%eax
c0100944:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0100947:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010094a:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c010094d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100950:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0100953:	eb 15                	jmp    c010096a <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100955:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100958:	8b 55 08             	mov    0x8(%ebp),%edx
c010095b:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c010095e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100961:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0100964:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100967:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c010096a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010096d:	8b 40 08             	mov    0x8(%eax),%eax
c0100970:	83 ec 08             	sub    $0x8,%esp
c0100973:	6a 3a                	push   $0x3a
c0100975:	50                   	push   %eax
c0100976:	e8 09 2f 01 00       	call   c0113884 <strfind>
c010097b:	83 c4 10             	add    $0x10,%esp
c010097e:	89 c2                	mov    %eax,%edx
c0100980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100983:	8b 40 08             	mov    0x8(%eax),%eax
c0100986:	29 c2                	sub    %eax,%edx
c0100988:	8b 45 0c             	mov    0xc(%ebp),%eax
c010098b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010098e:	83 ec 0c             	sub    $0xc,%esp
c0100991:	ff 75 08             	pushl  0x8(%ebp)
c0100994:	6a 44                	push   $0x44
c0100996:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100999:	50                   	push   %eax
c010099a:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010099d:	50                   	push   %eax
c010099e:	ff 75 f4             	pushl  -0xc(%ebp)
c01009a1:	e8 13 fc ff ff       	call   c01005b9 <stab_binsearch>
c01009a6:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01009a9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009af:	39 c2                	cmp    %eax,%edx
c01009b1:	7f 24                	jg     c01009d7 <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01009b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009b6:	89 c2                	mov    %eax,%edx
c01009b8:	89 d0                	mov    %edx,%eax
c01009ba:	01 c0                	add    %eax,%eax
c01009bc:	01 d0                	add    %edx,%eax
c01009be:	c1 e0 02             	shl    $0x2,%eax
c01009c1:	89 c2                	mov    %eax,%edx
c01009c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009c6:	01 d0                	add    %edx,%eax
c01009c8:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01009cc:	0f b7 d0             	movzwl %ax,%edx
c01009cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d2:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009d5:	eb 13                	jmp    c01009ea <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01009d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01009dc:	e9 12 01 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01009e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e4:	83 e8 01             	sub    $0x1,%eax
c01009e7:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009ea:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009f0:	39 c2                	cmp    %eax,%edx
c01009f2:	7c 56                	jl     c0100a4a <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c01009f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	89 d0                	mov    %edx,%eax
c01009fb:	01 c0                	add    %eax,%eax
c01009fd:	01 d0                	add    %edx,%eax
c01009ff:	c1 e0 02             	shl    $0x2,%eax
c0100a02:	89 c2                	mov    %eax,%edx
c0100a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a07:	01 d0                	add    %edx,%eax
c0100a09:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a0d:	3c 84                	cmp    $0x84,%al
c0100a0f:	74 39                	je     c0100a4a <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100a11:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a14:	89 c2                	mov    %eax,%edx
c0100a16:	89 d0                	mov    %edx,%eax
c0100a18:	01 c0                	add    %eax,%eax
c0100a1a:	01 d0                	add    %edx,%eax
c0100a1c:	c1 e0 02             	shl    $0x2,%eax
c0100a1f:	89 c2                	mov    %eax,%edx
c0100a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a24:	01 d0                	add    %edx,%eax
c0100a26:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a2a:	3c 64                	cmp    $0x64,%al
c0100a2c:	75 b3                	jne    c01009e1 <debuginfo_eip+0x2d1>
c0100a2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a31:	89 c2                	mov    %eax,%edx
c0100a33:	89 d0                	mov    %edx,%eax
c0100a35:	01 c0                	add    %eax,%eax
c0100a37:	01 d0                	add    %edx,%eax
c0100a39:	c1 e0 02             	shl    $0x2,%eax
c0100a3c:	89 c2                	mov    %eax,%edx
c0100a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a41:	01 d0                	add    %edx,%eax
c0100a43:	8b 40 08             	mov    0x8(%eax),%eax
c0100a46:	85 c0                	test   %eax,%eax
c0100a48:	74 97                	je     c01009e1 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100a4a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a50:	39 c2                	cmp    %eax,%edx
c0100a52:	7c 46                	jl     c0100a9a <debuginfo_eip+0x38a>
c0100a54:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a57:	89 c2                	mov    %eax,%edx
c0100a59:	89 d0                	mov    %edx,%eax
c0100a5b:	01 c0                	add    %eax,%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	c1 e0 02             	shl    $0x2,%eax
c0100a62:	89 c2                	mov    %eax,%edx
c0100a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a67:	01 d0                	add    %edx,%eax
c0100a69:	8b 00                	mov    (%eax),%eax
c0100a6b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100a6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100a71:	29 d1                	sub    %edx,%ecx
c0100a73:	89 ca                	mov    %ecx,%edx
c0100a75:	39 d0                	cmp    %edx,%eax
c0100a77:	73 21                	jae    c0100a9a <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100a79:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a7c:	89 c2                	mov    %eax,%edx
c0100a7e:	89 d0                	mov    %edx,%eax
c0100a80:	01 c0                	add    %eax,%eax
c0100a82:	01 d0                	add    %edx,%eax
c0100a84:	c1 e0 02             	shl    $0x2,%eax
c0100a87:	89 c2                	mov    %eax,%edx
c0100a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a8c:	01 d0                	add    %edx,%eax
c0100a8e:	8b 10                	mov    (%eax),%edx
c0100a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a93:	01 c2                	add    %eax,%edx
c0100a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a98:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a9a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100aa0:	39 c2                	cmp    %eax,%edx
c0100aa2:	7d 4a                	jge    c0100aee <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c0100aa4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100aa7:	83 c0 01             	add    $0x1,%eax
c0100aaa:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100aad:	eb 18                	jmp    c0100ac7 <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ab2:	8b 40 14             	mov    0x14(%eax),%eax
c0100ab5:	8d 50 01             	lea    0x1(%eax),%edx
c0100ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100abb:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100abe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ac1:	83 c0 01             	add    $0x1,%eax
c0100ac4:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ac7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100aca:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100acd:	39 c2                	cmp    %eax,%edx
c0100acf:	7d 1d                	jge    c0100aee <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ad1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ad4:	89 c2                	mov    %eax,%edx
c0100ad6:	89 d0                	mov    %edx,%eax
c0100ad8:	01 c0                	add    %eax,%eax
c0100ada:	01 d0                	add    %edx,%eax
c0100adc:	c1 e0 02             	shl    $0x2,%eax
c0100adf:	89 c2                	mov    %eax,%edx
c0100ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae4:	01 d0                	add    %edx,%eax
c0100ae6:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100aea:	3c a0                	cmp    $0xa0,%al
c0100aec:	74 c1                	je     c0100aaf <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100aee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100af3:	c9                   	leave  
c0100af4:	c3                   	ret    

c0100af5 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100af5:	55                   	push   %ebp
c0100af6:	89 e5                	mov    %esp,%ebp
c0100af8:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100afb:	83 ec 0c             	sub    $0xc,%esp
c0100afe:	68 02 44 11 c0       	push   $0xc0114402
c0100b03:	e8 77 f8 ff ff       	call   c010037f <cprintf>
c0100b08:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b0b:	83 ec 08             	sub    $0x8,%esp
c0100b0e:	68 36 00 10 c0       	push   $0xc0100036
c0100b13:	68 1b 44 11 c0       	push   $0xc011441b
c0100b18:	e8 62 f8 ff ff       	call   c010037f <cprintf>
c0100b1d:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b20:	83 ec 08             	sub    $0x8,%esp
c0100b23:	68 e8 42 11 c0       	push   $0xc01142e8
c0100b28:	68 33 44 11 c0       	push   $0xc0114433
c0100b2d:	e8 4d f8 ff ff       	call   c010037f <cprintf>
c0100b32:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b35:	83 ec 08             	sub    $0x8,%esp
c0100b38:	68 00 10 15 c0       	push   $0xc0151000
c0100b3d:	68 4b 44 11 c0       	push   $0xc011444b
c0100b42:	e8 38 f8 ff ff       	call   c010037f <cprintf>
c0100b47:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100b4a:	83 ec 08             	sub    $0x8,%esp
c0100b4d:	68 04 53 15 c0       	push   $0xc0155304
c0100b52:	68 63 44 11 c0       	push   $0xc0114463
c0100b57:	e8 23 f8 ff ff       	call   c010037f <cprintf>
c0100b5c:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100b5f:	b8 04 53 15 c0       	mov    $0xc0155304,%eax
c0100b64:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100b69:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100b6e:	29 d0                	sub    %edx,%eax
c0100b70:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100b76:	85 c0                	test   %eax,%eax
c0100b78:	0f 48 c2             	cmovs  %edx,%eax
c0100b7b:	c1 f8 0a             	sar    $0xa,%eax
c0100b7e:	83 ec 08             	sub    $0x8,%esp
c0100b81:	50                   	push   %eax
c0100b82:	68 7c 44 11 c0       	push   $0xc011447c
c0100b87:	e8 f3 f7 ff ff       	call   c010037f <cprintf>
c0100b8c:	83 c4 10             	add    $0x10,%esp
}
c0100b8f:	90                   	nop
c0100b90:	c9                   	leave  
c0100b91:	c3                   	ret    

c0100b92 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b92:	55                   	push   %ebp
c0100b93:	89 e5                	mov    %esp,%ebp
c0100b95:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b9b:	83 ec 08             	sub    $0x8,%esp
c0100b9e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ba1:	50                   	push   %eax
c0100ba2:	ff 75 08             	pushl  0x8(%ebp)
c0100ba5:	e8 66 fb ff ff       	call   c0100710 <debuginfo_eip>
c0100baa:	83 c4 10             	add    $0x10,%esp
c0100bad:	85 c0                	test   %eax,%eax
c0100baf:	74 15                	je     c0100bc6 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100bb1:	83 ec 08             	sub    $0x8,%esp
c0100bb4:	ff 75 08             	pushl  0x8(%ebp)
c0100bb7:	68 a6 44 11 c0       	push   $0xc01144a6
c0100bbc:	e8 be f7 ff ff       	call   c010037f <cprintf>
c0100bc1:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100bc4:	eb 65                	jmp    c0100c2b <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100bc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100bcd:	eb 1c                	jmp    c0100beb <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100bcf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd5:	01 d0                	add    %edx,%eax
c0100bd7:	0f b6 00             	movzbl (%eax),%eax
c0100bda:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100be0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100be3:	01 ca                	add    %ecx,%edx
c0100be5:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100be7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100bf1:	7f dc                	jg     c0100bcf <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100bf3:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfc:	01 d0                	add    %edx,%eax
c0100bfe:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c04:	8b 55 08             	mov    0x8(%ebp),%edx
c0100c07:	89 d1                	mov    %edx,%ecx
c0100c09:	29 c1                	sub    %eax,%ecx
c0100c0b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100c0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100c11:	83 ec 0c             	sub    $0xc,%esp
c0100c14:	51                   	push   %ecx
c0100c15:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100c1b:	51                   	push   %ecx
c0100c1c:	52                   	push   %edx
c0100c1d:	50                   	push   %eax
c0100c1e:	68 c2 44 11 c0       	push   $0xc01144c2
c0100c23:	e8 57 f7 ff ff       	call   c010037f <cprintf>
c0100c28:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100c2b:	90                   	nop
c0100c2c:	c9                   	leave  
c0100c2d:	c3                   	ret    

c0100c2e <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100c2e:	55                   	push   %ebp
c0100c2f:	89 e5                	mov    %esp,%ebp
c0100c31:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100c34:	8b 45 04             	mov    0x4(%ebp),%eax
c0100c37:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100c3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100c3d:	c9                   	leave  
c0100c3e:	c3                   	ret    

c0100c3f <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100c3f:	55                   	push   %ebp
c0100c40:	89 e5                	mov    %esp,%ebp
c0100c42:	83 ec 28             	sub    $0x28,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100c45:	89 e8                	mov    %ebp,%eax
c0100c47:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100c4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100c50:	e8 d9 ff ff ff       	call   c0100c2e <read_eip>
c0100c55:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100c5f:	e9 8d 00 00 00       	jmp    c0100cf1 <print_stackframe+0xb2>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100c64:	83 ec 04             	sub    $0x4,%esp
c0100c67:	ff 75 f0             	pushl  -0x10(%ebp)
c0100c6a:	ff 75 f4             	pushl  -0xc(%ebp)
c0100c6d:	68 d4 44 11 c0       	push   $0xc01144d4
c0100c72:	e8 08 f7 ff ff       	call   c010037f <cprintf>
c0100c77:	83 c4 10             	add    $0x10,%esp
        uint32_t *args = (uint32_t *)ebp + 2;
c0100c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c7d:	83 c0 08             	add    $0x8,%eax
c0100c80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c83:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c8a:	eb 26                	jmp    c0100cb2 <print_stackframe+0x73>
            cprintf("0x%08x ", args[j]);
c0100c8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c8f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c99:	01 d0                	add    %edx,%eax
c0100c9b:	8b 00                	mov    (%eax),%eax
c0100c9d:	83 ec 08             	sub    $0x8,%esp
c0100ca0:	50                   	push   %eax
c0100ca1:	68 f0 44 11 c0       	push   $0xc01144f0
c0100ca6:	e8 d4 f6 ff ff       	call   c010037f <cprintf>
c0100cab:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100cae:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100cb2:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100cb6:	7e d4                	jle    c0100c8c <print_stackframe+0x4d>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100cb8:	83 ec 0c             	sub    $0xc,%esp
c0100cbb:	68 f8 44 11 c0       	push   $0xc01144f8
c0100cc0:	e8 ba f6 ff ff       	call   c010037f <cprintf>
c0100cc5:	83 c4 10             	add    $0x10,%esp
        print_debuginfo(eip - 1);
c0100cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ccb:	83 e8 01             	sub    $0x1,%eax
c0100cce:	83 ec 0c             	sub    $0xc,%esp
c0100cd1:	50                   	push   %eax
c0100cd2:	e8 bb fe ff ff       	call   c0100b92 <print_debuginfo>
c0100cd7:	83 c4 10             	add    $0x10,%esp
        eip = ((uint32_t *)ebp)[1];
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cdd:	83 c0 04             	add    $0x4,%eax
c0100ce0:	8b 00                	mov    (%eax),%eax
c0100ce2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce8:	8b 00                	mov    (%eax),%eax
c0100cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100ced:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100cf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100cf5:	74 0a                	je     c0100d01 <print_stackframe+0xc2>
c0100cf7:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100cfb:	0f 8e 63 ff ff ff    	jle    c0100c64 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100d01:	90                   	nop
c0100d02:	c9                   	leave  
c0100d03:	c3                   	ret    

c0100d04 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100d04:	55                   	push   %ebp
c0100d05:	89 e5                	mov    %esp,%ebp
c0100d07:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d11:	eb 0c                	jmp    c0100d1f <parse+0x1b>
            *buf ++ = '\0';
c0100d13:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d16:	8d 50 01             	lea    0x1(%eax),%edx
c0100d19:	89 55 08             	mov    %edx,0x8(%ebp)
c0100d1c:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d22:	0f b6 00             	movzbl (%eax),%eax
c0100d25:	84 c0                	test   %al,%al
c0100d27:	74 1e                	je     c0100d47 <parse+0x43>
c0100d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d2c:	0f b6 00             	movzbl (%eax),%eax
c0100d2f:	0f be c0             	movsbl %al,%eax
c0100d32:	83 ec 08             	sub    $0x8,%esp
c0100d35:	50                   	push   %eax
c0100d36:	68 7c 45 11 c0       	push   $0xc011457c
c0100d3b:	e8 11 2b 01 00       	call   c0113851 <strchr>
c0100d40:	83 c4 10             	add    $0x10,%esp
c0100d43:	85 c0                	test   %eax,%eax
c0100d45:	75 cc                	jne    c0100d13 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100d47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d4a:	0f b6 00             	movzbl (%eax),%eax
c0100d4d:	84 c0                	test   %al,%al
c0100d4f:	74 69                	je     c0100dba <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100d51:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100d55:	75 12                	jne    c0100d69 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100d57:	83 ec 08             	sub    $0x8,%esp
c0100d5a:	6a 10                	push   $0x10
c0100d5c:	68 81 45 11 c0       	push   $0xc0114581
c0100d61:	e8 19 f6 ff ff       	call   c010037f <cprintf>
c0100d66:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6c:	8d 50 01             	lea    0x1(%eax),%edx
c0100d6f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100d72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100d79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d7c:	01 c2                	add    %eax,%edx
c0100d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d81:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d83:	eb 04                	jmp    c0100d89 <parse+0x85>
            buf ++;
c0100d85:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d89:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d8c:	0f b6 00             	movzbl (%eax),%eax
c0100d8f:	84 c0                	test   %al,%al
c0100d91:	0f 84 7a ff ff ff    	je     c0100d11 <parse+0xd>
c0100d97:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d9a:	0f b6 00             	movzbl (%eax),%eax
c0100d9d:	0f be c0             	movsbl %al,%eax
c0100da0:	83 ec 08             	sub    $0x8,%esp
c0100da3:	50                   	push   %eax
c0100da4:	68 7c 45 11 c0       	push   $0xc011457c
c0100da9:	e8 a3 2a 01 00       	call   c0113851 <strchr>
c0100dae:	83 c4 10             	add    $0x10,%esp
c0100db1:	85 c0                	test   %eax,%eax
c0100db3:	74 d0                	je     c0100d85 <parse+0x81>
            buf ++;
        }
    }
c0100db5:	e9 57 ff ff ff       	jmp    c0100d11 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100dba:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100dbe:	c9                   	leave  
c0100dbf:	c3                   	ret    

c0100dc0 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100dc0:	55                   	push   %ebp
c0100dc1:	89 e5                	mov    %esp,%ebp
c0100dc3:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100dc6:	83 ec 08             	sub    $0x8,%esp
c0100dc9:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100dcc:	50                   	push   %eax
c0100dcd:	ff 75 08             	pushl  0x8(%ebp)
c0100dd0:	e8 2f ff ff ff       	call   c0100d04 <parse>
c0100dd5:	83 c4 10             	add    $0x10,%esp
c0100dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100ddb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100ddf:	75 0a                	jne    c0100deb <runcmd+0x2b>
        return 0;
c0100de1:	b8 00 00 00 00       	mov    $0x0,%eax
c0100de6:	e9 83 00 00 00       	jmp    c0100e6e <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100deb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100df2:	eb 59                	jmp    c0100e4d <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100df4:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100df7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100dfa:	89 d0                	mov    %edx,%eax
c0100dfc:	01 c0                	add    %eax,%eax
c0100dfe:	01 d0                	add    %edx,%eax
c0100e00:	c1 e0 02             	shl    $0x2,%eax
c0100e03:	05 00 e0 14 c0       	add    $0xc014e000,%eax
c0100e08:	8b 00                	mov    (%eax),%eax
c0100e0a:	83 ec 08             	sub    $0x8,%esp
c0100e0d:	51                   	push   %ecx
c0100e0e:	50                   	push   %eax
c0100e0f:	e8 9d 29 01 00       	call   c01137b1 <strcmp>
c0100e14:	83 c4 10             	add    $0x10,%esp
c0100e17:	85 c0                	test   %eax,%eax
c0100e19:	75 2e                	jne    c0100e49 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100e1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e1e:	89 d0                	mov    %edx,%eax
c0100e20:	01 c0                	add    %eax,%eax
c0100e22:	01 d0                	add    %edx,%eax
c0100e24:	c1 e0 02             	shl    $0x2,%eax
c0100e27:	05 08 e0 14 c0       	add    $0xc014e008,%eax
c0100e2c:	8b 10                	mov    (%eax),%edx
c0100e2e:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100e31:	83 c0 04             	add    $0x4,%eax
c0100e34:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100e37:	83 e9 01             	sub    $0x1,%ecx
c0100e3a:	83 ec 04             	sub    $0x4,%esp
c0100e3d:	ff 75 0c             	pushl  0xc(%ebp)
c0100e40:	50                   	push   %eax
c0100e41:	51                   	push   %ecx
c0100e42:	ff d2                	call   *%edx
c0100e44:	83 c4 10             	add    $0x10,%esp
c0100e47:	eb 25                	jmp    c0100e6e <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e49:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e50:	83 f8 02             	cmp    $0x2,%eax
c0100e53:	76 9f                	jbe    c0100df4 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100e55:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100e58:	83 ec 08             	sub    $0x8,%esp
c0100e5b:	50                   	push   %eax
c0100e5c:	68 9f 45 11 c0       	push   $0xc011459f
c0100e61:	e8 19 f5 ff ff       	call   c010037f <cprintf>
c0100e66:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100e69:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e6e:	c9                   	leave  
c0100e6f:	c3                   	ret    

c0100e70 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100e70:	55                   	push   %ebp
c0100e71:	89 e5                	mov    %esp,%ebp
c0100e73:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100e76:	83 ec 0c             	sub    $0xc,%esp
c0100e79:	68 b8 45 11 c0       	push   $0xc01145b8
c0100e7e:	e8 fc f4 ff ff       	call   c010037f <cprintf>
c0100e83:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100e86:	83 ec 0c             	sub    $0xc,%esp
c0100e89:	68 e0 45 11 c0       	push   $0xc01145e0
c0100e8e:	e8 ec f4 ff ff       	call   c010037f <cprintf>
c0100e93:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100e96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e9a:	74 0e                	je     c0100eaa <kmonitor+0x3a>
        print_trapframe(tf);
c0100e9c:	83 ec 0c             	sub    $0xc,%esp
c0100e9f:	ff 75 08             	pushl  0x8(%ebp)
c0100ea2:	e8 d8 15 00 00       	call   c010247f <print_trapframe>
c0100ea7:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100eaa:	83 ec 0c             	sub    $0xc,%esp
c0100ead:	68 05 46 11 c0       	push   $0xc0114605
c0100eb2:	e8 6c f5 ff ff       	call   c0100423 <readline>
c0100eb7:	83 c4 10             	add    $0x10,%esp
c0100eba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ebd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100ec1:	74 e7                	je     c0100eaa <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100ec3:	83 ec 08             	sub    $0x8,%esp
c0100ec6:	ff 75 08             	pushl  0x8(%ebp)
c0100ec9:	ff 75 f4             	pushl  -0xc(%ebp)
c0100ecc:	e8 ef fe ff ff       	call   c0100dc0 <runcmd>
c0100ed1:	83 c4 10             	add    $0x10,%esp
c0100ed4:	85 c0                	test   %eax,%eax
c0100ed6:	78 02                	js     c0100eda <kmonitor+0x6a>
                break;
            }
        }
    }
c0100ed8:	eb d0                	jmp    c0100eaa <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100eda:	90                   	nop
            }
        }
    }
}
c0100edb:	90                   	nop
c0100edc:	c9                   	leave  
c0100edd:	c3                   	ret    

c0100ede <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100ede:	55                   	push   %ebp
c0100edf:	89 e5                	mov    %esp,%ebp
c0100ee1:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ee4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100eeb:	eb 3c                	jmp    c0100f29 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100eed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ef0:	89 d0                	mov    %edx,%eax
c0100ef2:	01 c0                	add    %eax,%eax
c0100ef4:	01 d0                	add    %edx,%eax
c0100ef6:	c1 e0 02             	shl    $0x2,%eax
c0100ef9:	05 04 e0 14 c0       	add    $0xc014e004,%eax
c0100efe:	8b 08                	mov    (%eax),%ecx
c0100f00:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f03:	89 d0                	mov    %edx,%eax
c0100f05:	01 c0                	add    %eax,%eax
c0100f07:	01 d0                	add    %edx,%eax
c0100f09:	c1 e0 02             	shl    $0x2,%eax
c0100f0c:	05 00 e0 14 c0       	add    $0xc014e000,%eax
c0100f11:	8b 00                	mov    (%eax),%eax
c0100f13:	83 ec 04             	sub    $0x4,%esp
c0100f16:	51                   	push   %ecx
c0100f17:	50                   	push   %eax
c0100f18:	68 09 46 11 c0       	push   $0xc0114609
c0100f1d:	e8 5d f4 ff ff       	call   c010037f <cprintf>
c0100f22:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100f25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f2c:	83 f8 02             	cmp    $0x2,%eax
c0100f2f:	76 bc                	jbe    c0100eed <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100f31:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f36:	c9                   	leave  
c0100f37:	c3                   	ret    

c0100f38 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100f38:	55                   	push   %ebp
c0100f39:	89 e5                	mov    %esp,%ebp
c0100f3b:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100f3e:	e8 b2 fb ff ff       	call   c0100af5 <print_kerninfo>
    return 0;
c0100f43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f48:	c9                   	leave  
c0100f49:	c3                   	ret    

c0100f4a <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100f4a:	55                   	push   %ebp
c0100f4b:	89 e5                	mov    %esp,%ebp
c0100f4d:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100f50:	e8 ea fc ff ff       	call   c0100c3f <print_stackframe>
    return 0;
c0100f55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f5a:	c9                   	leave  
c0100f5b:	c3                   	ret    

c0100f5c <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100f5c:	55                   	push   %ebp
c0100f5d:	89 e5                	mov    %esp,%ebp
c0100f5f:	83 ec 14             	sub    $0x14,%esp
c0100f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f65:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100f69:	90                   	nop
c0100f6a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100f6e:	83 c0 07             	add    $0x7,%eax
c0100f71:	0f b7 c0             	movzwl %ax,%eax
c0100f74:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f78:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f7c:	89 c2                	mov    %eax,%edx
c0100f7e:	ec                   	in     (%dx),%al
c0100f7f:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100f82:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100f86:	0f b6 c0             	movzbl %al,%eax
c0100f89:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100f8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f8f:	25 80 00 00 00       	and    $0x80,%eax
c0100f94:	85 c0                	test   %eax,%eax
c0100f96:	75 d2                	jne    c0100f6a <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100f98:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100f9c:	74 11                	je     c0100faf <ide_wait_ready+0x53>
c0100f9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa1:	83 e0 21             	and    $0x21,%eax
c0100fa4:	85 c0                	test   %eax,%eax
c0100fa6:	74 07                	je     c0100faf <ide_wait_ready+0x53>
        return -1;
c0100fa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100fad:	eb 05                	jmp    c0100fb4 <ide_wait_ready+0x58>
    }
    return 0;
c0100faf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100fb4:	c9                   	leave  
c0100fb5:	c3                   	ret    

c0100fb6 <ide_init>:

void
ide_init(void) {
c0100fb6:	55                   	push   %ebp
c0100fb7:	89 e5                	mov    %esp,%ebp
c0100fb9:	57                   	push   %edi
c0100fba:	53                   	push   %ebx
c0100fbb:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100fc1:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100fc7:	e9 c1 02 00 00       	jmp    c010128d <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100fcc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fd0:	c1 e0 03             	shl    $0x3,%eax
c0100fd3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fda:	29 c2                	sub    %eax,%edx
c0100fdc:	89 d0                	mov    %edx,%eax
c0100fde:	05 40 14 15 c0       	add    $0xc0151440,%eax
c0100fe3:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100fe6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fea:	66 d1 e8             	shr    %ax
c0100fed:	0f b7 c0             	movzwl %ax,%eax
c0100ff0:	0f b7 04 85 14 46 11 	movzwl -0x3feeb9ec(,%eax,4),%eax
c0100ff7:	c0 
c0100ff8:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100ffc:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101000:	6a 00                	push   $0x0
c0101002:	50                   	push   %eax
c0101003:	e8 54 ff ff ff       	call   c0100f5c <ide_wait_ready>
c0101008:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010100b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010100f:	83 e0 01             	and    $0x1,%eax
c0101012:	c1 e0 04             	shl    $0x4,%eax
c0101015:	83 c8 e0             	or     $0xffffffe0,%eax
c0101018:	0f b6 c0             	movzbl %al,%eax
c010101b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010101f:	83 c2 06             	add    $0x6,%edx
c0101022:	0f b7 d2             	movzwl %dx,%edx
c0101025:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101029:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010102c:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0101030:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101034:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101035:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101039:	6a 00                	push   $0x0
c010103b:	50                   	push   %eax
c010103c:	e8 1b ff ff ff       	call   c0100f5c <ide_wait_ready>
c0101041:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101044:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101048:	83 c0 07             	add    $0x7,%eax
c010104b:	0f b7 c0             	movzwl %ax,%eax
c010104e:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0101052:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0101056:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c010105a:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010105e:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010105f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101063:	6a 00                	push   $0x0
c0101065:	50                   	push   %eax
c0101066:	e8 f1 fe ff ff       	call   c0100f5c <ide_wait_ready>
c010106b:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c010106e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101072:	83 c0 07             	add    $0x7,%eax
c0101075:	0f b7 c0             	movzwl %ax,%eax
c0101078:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010107c:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0101080:	89 c2                	mov    %eax,%edx
c0101082:	ec                   	in     (%dx),%al
c0101083:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0101086:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c010108a:	84 c0                	test   %al,%al
c010108c:	0f 84 ef 01 00 00    	je     c0101281 <ide_init+0x2cb>
c0101092:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101096:	6a 01                	push   $0x1
c0101098:	50                   	push   %eax
c0101099:	e8 be fe ff ff       	call   c0100f5c <ide_wait_ready>
c010109e:	83 c4 08             	add    $0x8,%esp
c01010a1:	85 c0                	test   %eax,%eax
c01010a3:	0f 85 d8 01 00 00    	jne    c0101281 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01010a9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010ad:	c1 e0 03             	shl    $0x3,%eax
c01010b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01010b7:	29 c2                	sub    %eax,%edx
c01010b9:	89 d0                	mov    %edx,%eax
c01010bb:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01010c0:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01010c3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01010ca:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01010d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01010d3:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c01010da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01010dd:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c01010e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01010e3:	89 cb                	mov    %ecx,%ebx
c01010e5:	89 df                	mov    %ebx,%edi
c01010e7:	89 c1                	mov    %eax,%ecx
c01010e9:	fc                   	cld    
c01010ea:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01010ec:	89 c8                	mov    %ecx,%eax
c01010ee:	89 fb                	mov    %edi,%ebx
c01010f0:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c01010f3:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c01010f6:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01010fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c01010ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101102:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101108:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010110b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010110e:	25 00 00 00 04       	and    $0x4000000,%eax
c0101113:	85 c0                	test   %eax,%eax
c0101115:	74 0e                	je     c0101125 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101117:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010111a:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101120:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101123:	eb 09                	jmp    c010112e <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101125:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101128:	8b 40 78             	mov    0x78(%eax),%eax
c010112b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010112e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101132:	c1 e0 03             	shl    $0x3,%eax
c0101135:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010113c:	29 c2                	sub    %eax,%edx
c010113e:	89 d0                	mov    %edx,%eax
c0101140:	8d 90 44 14 15 c0    	lea    -0x3feaebbc(%eax),%edx
c0101146:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101149:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010114b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010114f:	c1 e0 03             	shl    $0x3,%eax
c0101152:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101159:	29 c2                	sub    %eax,%edx
c010115b:	89 d0                	mov    %edx,%eax
c010115d:	8d 90 48 14 15 c0    	lea    -0x3feaebb8(%eax),%edx
c0101163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101166:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101168:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010116b:	83 c0 62             	add    $0x62,%eax
c010116e:	0f b7 00             	movzwl (%eax),%eax
c0101171:	0f b7 c0             	movzwl %ax,%eax
c0101174:	25 00 02 00 00       	and    $0x200,%eax
c0101179:	85 c0                	test   %eax,%eax
c010117b:	75 16                	jne    c0101193 <ide_init+0x1dd>
c010117d:	68 1c 46 11 c0       	push   $0xc011461c
c0101182:	68 5f 46 11 c0       	push   $0xc011465f
c0101187:	6a 7d                	push   $0x7d
c0101189:	68 74 46 11 c0       	push   $0xc0114674
c010118e:	e8 52 f3 ff ff       	call   c01004e5 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101193:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101197:	89 c2                	mov    %eax,%edx
c0101199:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01011a0:	89 c2                	mov    %eax,%edx
c01011a2:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01011a9:	29 d0                	sub    %edx,%eax
c01011ab:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01011b0:	83 c0 0c             	add    $0xc,%eax
c01011b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01011b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011b9:	83 c0 36             	add    $0x36,%eax
c01011bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01011bf:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01011c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01011cd:	eb 34                	jmp    c0101203 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01011cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01011d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011d5:	01 c2                	add    %eax,%edx
c01011d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011da:	8d 48 01             	lea    0x1(%eax),%ecx
c01011dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01011e0:	01 c8                	add    %ecx,%eax
c01011e2:	0f b6 00             	movzbl (%eax),%eax
c01011e5:	88 02                	mov    %al,(%edx)
c01011e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011ea:	8d 50 01             	lea    0x1(%eax),%edx
c01011ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01011f0:	01 c2                	add    %eax,%edx
c01011f2:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01011f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011f8:	01 c8                	add    %ecx,%eax
c01011fa:	0f b6 00             	movzbl (%eax),%eax
c01011fd:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c01011ff:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101203:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101206:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101209:	72 c4                	jb     c01011cf <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010120b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010120e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101211:	01 d0                	add    %edx,%eax
c0101213:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101216:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101219:	8d 50 ff             	lea    -0x1(%eax),%edx
c010121c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010121f:	85 c0                	test   %eax,%eax
c0101221:	74 0f                	je     c0101232 <ide_init+0x27c>
c0101223:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101226:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101229:	01 d0                	add    %edx,%eax
c010122b:	0f b6 00             	movzbl (%eax),%eax
c010122e:	3c 20                	cmp    $0x20,%al
c0101230:	74 d9                	je     c010120b <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101232:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101236:	89 c2                	mov    %eax,%edx
c0101238:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010123f:	89 c2                	mov    %eax,%edx
c0101241:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101248:	29 d0                	sub    %edx,%eax
c010124a:	05 40 14 15 c0       	add    $0xc0151440,%eax
c010124f:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101252:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101256:	c1 e0 03             	shl    $0x3,%eax
c0101259:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101260:	29 c2                	sub    %eax,%edx
c0101262:	89 d0                	mov    %edx,%eax
c0101264:	05 48 14 15 c0       	add    $0xc0151448,%eax
c0101269:	8b 10                	mov    (%eax),%edx
c010126b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010126f:	51                   	push   %ecx
c0101270:	52                   	push   %edx
c0101271:	50                   	push   %eax
c0101272:	68 86 46 11 c0       	push   $0xc0114686
c0101277:	e8 03 f1 ff ff       	call   c010037f <cprintf>
c010127c:	83 c4 10             	add    $0x10,%esp
c010127f:	eb 01                	jmp    c0101282 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c0101281:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101282:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101286:	83 c0 01             	add    $0x1,%eax
c0101289:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c010128d:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101292:	0f 86 34 fd ff ff    	jbe    c0100fcc <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101298:	83 ec 0c             	sub    $0xc,%esp
c010129b:	6a 0e                	push   $0xe
c010129d:	e8 94 0e 00 00       	call   c0102136 <pic_enable>
c01012a2:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01012a5:	83 ec 0c             	sub    $0xc,%esp
c01012a8:	6a 0f                	push   $0xf
c01012aa:	e8 87 0e 00 00       	call   c0102136 <pic_enable>
c01012af:	83 c4 10             	add    $0x10,%esp
}
c01012b2:	90                   	nop
c01012b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01012b6:	5b                   	pop    %ebx
c01012b7:	5f                   	pop    %edi
c01012b8:	5d                   	pop    %ebp
c01012b9:	c3                   	ret    

c01012ba <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01012ba:	55                   	push   %ebp
c01012bb:	89 e5                	mov    %esp,%ebp
c01012bd:	83 ec 04             	sub    $0x4,%esp
c01012c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01012c7:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01012cc:	77 25                	ja     c01012f3 <ide_device_valid+0x39>
c01012ce:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01012d2:	c1 e0 03             	shl    $0x3,%eax
c01012d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01012dc:	29 c2                	sub    %eax,%edx
c01012de:	89 d0                	mov    %edx,%eax
c01012e0:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01012e5:	0f b6 00             	movzbl (%eax),%eax
c01012e8:	84 c0                	test   %al,%al
c01012ea:	74 07                	je     c01012f3 <ide_device_valid+0x39>
c01012ec:	b8 01 00 00 00       	mov    $0x1,%eax
c01012f1:	eb 05                	jmp    c01012f8 <ide_device_valid+0x3e>
c01012f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01012f8:	c9                   	leave  
c01012f9:	c3                   	ret    

c01012fa <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c01012fa:	55                   	push   %ebp
c01012fb:	89 e5                	mov    %esp,%ebp
c01012fd:	83 ec 04             	sub    $0x4,%esp
c0101300:	8b 45 08             	mov    0x8(%ebp),%eax
c0101303:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101307:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010130b:	50                   	push   %eax
c010130c:	e8 a9 ff ff ff       	call   c01012ba <ide_device_valid>
c0101311:	83 c4 04             	add    $0x4,%esp
c0101314:	85 c0                	test   %eax,%eax
c0101316:	74 1b                	je     c0101333 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101318:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010131c:	c1 e0 03             	shl    $0x3,%eax
c010131f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101326:	29 c2                	sub    %eax,%edx
c0101328:	89 d0                	mov    %edx,%eax
c010132a:	05 48 14 15 c0       	add    $0xc0151448,%eax
c010132f:	8b 00                	mov    (%eax),%eax
c0101331:	eb 05                	jmp    c0101338 <ide_device_size+0x3e>
    }
    return 0;
c0101333:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101338:	c9                   	leave  
c0101339:	c3                   	ret    

c010133a <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c010133a:	55                   	push   %ebp
c010133b:	89 e5                	mov    %esp,%ebp
c010133d:	57                   	push   %edi
c010133e:	53                   	push   %ebx
c010133f:	83 ec 40             	sub    $0x40,%esp
c0101342:	8b 45 08             	mov    0x8(%ebp),%eax
c0101345:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101349:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101350:	77 25                	ja     c0101377 <ide_read_secs+0x3d>
c0101352:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101357:	77 1e                	ja     c0101377 <ide_read_secs+0x3d>
c0101359:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010135d:	c1 e0 03             	shl    $0x3,%eax
c0101360:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101367:	29 c2                	sub    %eax,%edx
c0101369:	89 d0                	mov    %edx,%eax
c010136b:	05 40 14 15 c0       	add    $0xc0151440,%eax
c0101370:	0f b6 00             	movzbl (%eax),%eax
c0101373:	84 c0                	test   %al,%al
c0101375:	75 19                	jne    c0101390 <ide_read_secs+0x56>
c0101377:	68 a4 46 11 c0       	push   $0xc01146a4
c010137c:	68 5f 46 11 c0       	push   $0xc011465f
c0101381:	68 9f 00 00 00       	push   $0x9f
c0101386:	68 74 46 11 c0       	push   $0xc0114674
c010138b:	e8 55 f1 ff ff       	call   c01004e5 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101390:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101397:	77 0f                	ja     c01013a8 <ide_read_secs+0x6e>
c0101399:	8b 55 0c             	mov    0xc(%ebp),%edx
c010139c:	8b 45 14             	mov    0x14(%ebp),%eax
c010139f:	01 d0                	add    %edx,%eax
c01013a1:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01013a6:	76 19                	jbe    c01013c1 <ide_read_secs+0x87>
c01013a8:	68 cc 46 11 c0       	push   $0xc01146cc
c01013ad:	68 5f 46 11 c0       	push   $0xc011465f
c01013b2:	68 a0 00 00 00       	push   $0xa0
c01013b7:	68 74 46 11 c0       	push   $0xc0114674
c01013bc:	e8 24 f1 ff ff       	call   c01004e5 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01013c1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c5:	66 d1 e8             	shr    %ax
c01013c8:	0f b7 c0             	movzwl %ax,%eax
c01013cb:	0f b7 04 85 14 46 11 	movzwl -0x3feeb9ec(,%eax,4),%eax
c01013d2:	c0 
c01013d3:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01013d7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013db:	66 d1 e8             	shr    %ax
c01013de:	0f b7 c0             	movzwl %ax,%eax
c01013e1:	0f b7 04 85 16 46 11 	movzwl -0x3feeb9ea(,%eax,4),%eax
c01013e8:	c0 
c01013e9:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01013ed:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013f1:	83 ec 08             	sub    $0x8,%esp
c01013f4:	6a 00                	push   $0x0
c01013f6:	50                   	push   %eax
c01013f7:	e8 60 fb ff ff       	call   c0100f5c <ide_wait_ready>
c01013fc:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01013ff:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101403:	83 c0 02             	add    $0x2,%eax
c0101406:	0f b7 c0             	movzwl %ax,%eax
c0101409:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010140d:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101411:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101415:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101419:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010141a:	8b 45 14             	mov    0x14(%ebp),%eax
c010141d:	0f b6 c0             	movzbl %al,%eax
c0101420:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101424:	83 c2 02             	add    $0x2,%edx
c0101427:	0f b7 d2             	movzwl %dx,%edx
c010142a:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010142e:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101431:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101435:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101439:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010143a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010143d:	0f b6 c0             	movzbl %al,%eax
c0101440:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101444:	83 c2 03             	add    $0x3,%edx
c0101447:	0f b7 d2             	movzwl %dx,%edx
c010144a:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010144e:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101451:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101455:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101459:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010145a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010145d:	c1 e8 08             	shr    $0x8,%eax
c0101460:	0f b6 c0             	movzbl %al,%eax
c0101463:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101467:	83 c2 04             	add    $0x4,%edx
c010146a:	0f b7 d2             	movzwl %dx,%edx
c010146d:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101471:	88 45 da             	mov    %al,-0x26(%ebp)
c0101474:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101478:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010147c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010147d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101480:	c1 e8 10             	shr    $0x10,%eax
c0101483:	0f b6 c0             	movzbl %al,%eax
c0101486:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010148a:	83 c2 05             	add    $0x5,%edx
c010148d:	0f b7 d2             	movzwl %dx,%edx
c0101490:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101494:	88 45 db             	mov    %al,-0x25(%ebp)
c0101497:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c010149b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010149f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01014a0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a4:	83 e0 01             	and    $0x1,%eax
c01014a7:	c1 e0 04             	shl    $0x4,%eax
c01014aa:	89 c2                	mov    %eax,%edx
c01014ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01014af:	c1 e8 18             	shr    $0x18,%eax
c01014b2:	83 e0 0f             	and    $0xf,%eax
c01014b5:	09 d0                	or     %edx,%eax
c01014b7:	83 c8 e0             	or     $0xffffffe0,%eax
c01014ba:	0f b6 c0             	movzbl %al,%eax
c01014bd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014c1:	83 c2 06             	add    $0x6,%edx
c01014c4:	0f b7 d2             	movzwl %dx,%edx
c01014c7:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01014cb:	88 45 dc             	mov    %al,-0x24(%ebp)
c01014ce:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01014d2:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01014d6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01014d7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01014db:	83 c0 07             	add    $0x7,%eax
c01014de:	0f b7 c0             	movzwl %ax,%eax
c01014e1:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c01014e5:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c01014e9:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01014ed:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01014f1:	ee                   	out    %al,(%dx)

    int ret = 0;
c01014f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01014f9:	eb 56                	jmp    c0101551 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01014fb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01014ff:	83 ec 08             	sub    $0x8,%esp
c0101502:	6a 01                	push   $0x1
c0101504:	50                   	push   %eax
c0101505:	e8 52 fa ff ff       	call   c0100f5c <ide_wait_ready>
c010150a:	83 c4 10             	add    $0x10,%esp
c010150d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101510:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101514:	75 43                	jne    c0101559 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101516:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010151a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010151d:	8b 45 10             	mov    0x10(%ebp),%eax
c0101520:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101523:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c010152a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010152d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101530:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101533:	89 cb                	mov    %ecx,%ebx
c0101535:	89 df                	mov    %ebx,%edi
c0101537:	89 c1                	mov    %eax,%ecx
c0101539:	fc                   	cld    
c010153a:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010153c:	89 c8                	mov    %ecx,%eax
c010153e:	89 fb                	mov    %edi,%ebx
c0101540:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101543:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101546:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010154a:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101551:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101555:	75 a4                	jne    c01014fb <ide_read_secs+0x1c1>
c0101557:	eb 01                	jmp    c010155a <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101559:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010155a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010155d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0101560:	5b                   	pop    %ebx
c0101561:	5f                   	pop    %edi
c0101562:	5d                   	pop    %ebp
c0101563:	c3                   	ret    

c0101564 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101564:	55                   	push   %ebp
c0101565:	89 e5                	mov    %esp,%ebp
c0101567:	56                   	push   %esi
c0101568:	53                   	push   %ebx
c0101569:	83 ec 40             	sub    $0x40,%esp
c010156c:	8b 45 08             	mov    0x8(%ebp),%eax
c010156f:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101573:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010157a:	77 25                	ja     c01015a1 <ide_write_secs+0x3d>
c010157c:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101581:	77 1e                	ja     c01015a1 <ide_write_secs+0x3d>
c0101583:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101587:	c1 e0 03             	shl    $0x3,%eax
c010158a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101591:	29 c2                	sub    %eax,%edx
c0101593:	89 d0                	mov    %edx,%eax
c0101595:	05 40 14 15 c0       	add    $0xc0151440,%eax
c010159a:	0f b6 00             	movzbl (%eax),%eax
c010159d:	84 c0                	test   %al,%al
c010159f:	75 19                	jne    c01015ba <ide_write_secs+0x56>
c01015a1:	68 a4 46 11 c0       	push   $0xc01146a4
c01015a6:	68 5f 46 11 c0       	push   $0xc011465f
c01015ab:	68 bc 00 00 00       	push   $0xbc
c01015b0:	68 74 46 11 c0       	push   $0xc0114674
c01015b5:	e8 2b ef ff ff       	call   c01004e5 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01015ba:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01015c1:	77 0f                	ja     c01015d2 <ide_write_secs+0x6e>
c01015c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01015c6:	8b 45 14             	mov    0x14(%ebp),%eax
c01015c9:	01 d0                	add    %edx,%eax
c01015cb:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01015d0:	76 19                	jbe    c01015eb <ide_write_secs+0x87>
c01015d2:	68 cc 46 11 c0       	push   $0xc01146cc
c01015d7:	68 5f 46 11 c0       	push   $0xc011465f
c01015dc:	68 bd 00 00 00       	push   $0xbd
c01015e1:	68 74 46 11 c0       	push   $0xc0114674
c01015e6:	e8 fa ee ff ff       	call   c01004e5 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01015eb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ef:	66 d1 e8             	shr    %ax
c01015f2:	0f b7 c0             	movzwl %ax,%eax
c01015f5:	0f b7 04 85 14 46 11 	movzwl -0x3feeb9ec(,%eax,4),%eax
c01015fc:	c0 
c01015fd:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101601:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101605:	66 d1 e8             	shr    %ax
c0101608:	0f b7 c0             	movzwl %ax,%eax
c010160b:	0f b7 04 85 16 46 11 	movzwl -0x3feeb9ea(,%eax,4),%eax
c0101612:	c0 
c0101613:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101617:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010161b:	83 ec 08             	sub    $0x8,%esp
c010161e:	6a 00                	push   $0x0
c0101620:	50                   	push   %eax
c0101621:	e8 36 f9 ff ff       	call   c0100f5c <ide_wait_ready>
c0101626:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101629:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010162d:	83 c0 02             	add    $0x2,%eax
c0101630:	0f b7 c0             	movzwl %ax,%eax
c0101633:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101637:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010163b:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010163f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101643:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101644:	8b 45 14             	mov    0x14(%ebp),%eax
c0101647:	0f b6 c0             	movzbl %al,%eax
c010164a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010164e:	83 c2 02             	add    $0x2,%edx
c0101651:	0f b7 d2             	movzwl %dx,%edx
c0101654:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101658:	88 45 d8             	mov    %al,-0x28(%ebp)
c010165b:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010165f:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101663:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101664:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101667:	0f b6 c0             	movzbl %al,%eax
c010166a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010166e:	83 c2 03             	add    $0x3,%edx
c0101671:	0f b7 d2             	movzwl %dx,%edx
c0101674:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101678:	88 45 d9             	mov    %al,-0x27(%ebp)
c010167b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010167f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101683:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101684:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101687:	c1 e8 08             	shr    $0x8,%eax
c010168a:	0f b6 c0             	movzbl %al,%eax
c010168d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101691:	83 c2 04             	add    $0x4,%edx
c0101694:	0f b7 d2             	movzwl %dx,%edx
c0101697:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c010169b:	88 45 da             	mov    %al,-0x26(%ebp)
c010169e:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01016a2:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01016a6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01016a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016aa:	c1 e8 10             	shr    $0x10,%eax
c01016ad:	0f b6 c0             	movzbl %al,%eax
c01016b0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016b4:	83 c2 05             	add    $0x5,%edx
c01016b7:	0f b7 d2             	movzwl %dx,%edx
c01016ba:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01016be:	88 45 db             	mov    %al,-0x25(%ebp)
c01016c1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01016c5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01016c9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01016ca:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01016ce:	83 e0 01             	and    $0x1,%eax
c01016d1:	c1 e0 04             	shl    $0x4,%eax
c01016d4:	89 c2                	mov    %eax,%edx
c01016d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016d9:	c1 e8 18             	shr    $0x18,%eax
c01016dc:	83 e0 0f             	and    $0xf,%eax
c01016df:	09 d0                	or     %edx,%eax
c01016e1:	83 c8 e0             	or     $0xffffffe0,%eax
c01016e4:	0f b6 c0             	movzbl %al,%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	83 c2 06             	add    $0x6,%edx
c01016ee:	0f b7 d2             	movzwl %dx,%edx
c01016f1:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01016f5:	88 45 dc             	mov    %al,-0x24(%ebp)
c01016f8:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01016fc:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0101700:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101701:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101705:	83 c0 07             	add    $0x7,%eax
c0101708:	0f b7 c0             	movzwl %ax,%eax
c010170b:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010170f:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101713:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101717:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010171b:	ee                   	out    %al,(%dx)

    int ret = 0;
c010171c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101723:	eb 56                	jmp    c010177b <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101725:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101729:	83 ec 08             	sub    $0x8,%esp
c010172c:	6a 01                	push   $0x1
c010172e:	50                   	push   %eax
c010172f:	e8 28 f8 ff ff       	call   c0100f5c <ide_wait_ready>
c0101734:	83 c4 10             	add    $0x10,%esp
c0101737:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010173a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010173e:	75 43                	jne    c0101783 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101740:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101744:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101747:	8b 45 10             	mov    0x10(%ebp),%eax
c010174a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010174d:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101754:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101757:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010175a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010175d:	89 cb                	mov    %ecx,%ebx
c010175f:	89 de                	mov    %ebx,%esi
c0101761:	89 c1                	mov    %eax,%ecx
c0101763:	fc                   	cld    
c0101764:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101766:	89 c8                	mov    %ecx,%eax
c0101768:	89 f3                	mov    %esi,%ebx
c010176a:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010176d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101770:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101774:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010177b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010177f:	75 a4                	jne    c0101725 <ide_write_secs+0x1c1>
c0101781:	eb 01                	jmp    c0101784 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101783:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101784:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101787:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010178a:	5b                   	pop    %ebx
c010178b:	5e                   	pop    %esi
c010178c:	5d                   	pop    %ebp
c010178d:	c3                   	ret    

c010178e <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c010178e:	55                   	push   %ebp
c010178f:	89 e5                	mov    %esp,%ebp
    return ticks;
c0101791:	a1 00 51 15 c0       	mov    0xc0155100,%eax
}
c0101796:	5d                   	pop    %ebp
c0101797:	c3                   	ret    

c0101798 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0101798:	55                   	push   %ebp
c0101799:	89 e5                	mov    %esp,%ebp
c010179b:	83 ec 18             	sub    $0x18,%esp
c010179e:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01017a4:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017a8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01017ac:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01017b0:	ee                   	out    %al,(%dx)
c01017b1:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01017b7:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01017bb:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01017bf:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01017c3:	ee                   	out    %al,(%dx)
c01017c4:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01017ca:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01017ce:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01017d2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01017d6:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01017d7:	c7 05 00 51 15 c0 00 	movl   $0x0,0xc0155100
c01017de:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01017e1:	83 ec 0c             	sub    $0xc,%esp
c01017e4:	68 06 47 11 c0       	push   $0xc0114706
c01017e9:	e8 91 eb ff ff       	call   c010037f <cprintf>
c01017ee:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c01017f1:	83 ec 0c             	sub    $0xc,%esp
c01017f4:	6a 00                	push   $0x0
c01017f6:	e8 3b 09 00 00       	call   c0102136 <pic_enable>
c01017fb:	83 c4 10             	add    $0x10,%esp
}
c01017fe:	90                   	nop
c01017ff:	c9                   	leave  
c0101800:	c3                   	ret    

c0101801 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101801:	55                   	push   %ebp
c0101802:	89 e5                	mov    %esp,%ebp
c0101804:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101807:	9c                   	pushf  
c0101808:	58                   	pop    %eax
c0101809:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010180c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010180f:	25 00 02 00 00       	and    $0x200,%eax
c0101814:	85 c0                	test   %eax,%eax
c0101816:	74 0c                	je     c0101824 <__intr_save+0x23>
        intr_disable();
c0101818:	e8 8a 0a 00 00       	call   c01022a7 <intr_disable>
        return 1;
c010181d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101822:	eb 05                	jmp    c0101829 <__intr_save+0x28>
    }
    return 0;
c0101824:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101829:	c9                   	leave  
c010182a:	c3                   	ret    

c010182b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010182b:	55                   	push   %ebp
c010182c:	89 e5                	mov    %esp,%ebp
c010182e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101831:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101835:	74 05                	je     c010183c <__intr_restore+0x11>
        intr_enable();
c0101837:	e8 64 0a 00 00       	call   c01022a0 <intr_enable>
    }
}
c010183c:	90                   	nop
c010183d:	c9                   	leave  
c010183e:	c3                   	ret    

c010183f <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010183f:	55                   	push   %ebp
c0101840:	89 e5                	mov    %esp,%ebp
c0101842:	83 ec 10             	sub    $0x10,%esp
c0101845:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010184b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010184f:	89 c2                	mov    %eax,%edx
c0101851:	ec                   	in     (%dx),%al
c0101852:	88 45 f4             	mov    %al,-0xc(%ebp)
c0101855:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c010185b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010185f:	89 c2                	mov    %eax,%edx
c0101861:	ec                   	in     (%dx),%al
c0101862:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101865:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010186b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010186f:	89 c2                	mov    %eax,%edx
c0101871:	ec                   	in     (%dx),%al
c0101872:	88 45 f6             	mov    %al,-0xa(%ebp)
c0101875:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c010187b:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010187f:	89 c2                	mov    %eax,%edx
c0101881:	ec                   	in     (%dx),%al
c0101882:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101885:	90                   	nop
c0101886:	c9                   	leave  
c0101887:	c3                   	ret    

c0101888 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101888:	55                   	push   %ebp
c0101889:	89 e5                	mov    %esp,%ebp
c010188b:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010188e:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101895:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101898:	0f b7 00             	movzwl (%eax),%eax
c010189b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010189f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018a2:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01018a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018aa:	0f b7 00             	movzwl (%eax),%eax
c01018ad:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01018b1:	74 12                	je     c01018c5 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01018b3:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01018ba:	66 c7 05 26 15 15 c0 	movw   $0x3b4,0xc0151526
c01018c1:	b4 03 
c01018c3:	eb 13                	jmp    c01018d8 <cga_init+0x50>
    } else {
        *cp = was;
c01018c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018c8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01018cc:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01018cf:	66 c7 05 26 15 15 c0 	movw   $0x3d4,0xc0151526
c01018d6:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01018d8:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c01018df:	0f b7 c0             	movzwl %ax,%eax
c01018e2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01018e6:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018ea:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c01018ee:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01018f2:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01018f3:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c01018fa:	83 c0 01             	add    $0x1,%eax
c01018fd:	0f b7 c0             	movzwl %ax,%eax
c0101900:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101904:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101908:	89 c2                	mov    %eax,%edx
c010190a:	ec                   	in     (%dx),%al
c010190b:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010190e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101912:	0f b6 c0             	movzbl %al,%eax
c0101915:	c1 e0 08             	shl    $0x8,%eax
c0101918:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010191b:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101922:	0f b7 c0             	movzwl %ax,%eax
c0101925:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c0101929:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010192d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101931:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101935:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101936:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c010193d:	83 c0 01             	add    $0x1,%eax
c0101940:	0f b7 c0             	movzwl %ax,%eax
c0101943:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101947:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010194b:	89 c2                	mov    %eax,%edx
c010194d:	ec                   	in     (%dx),%al
c010194e:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101951:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101955:	0f b6 c0             	movzbl %al,%eax
c0101958:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010195b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010195e:	a3 20 15 15 c0       	mov    %eax,0xc0151520
    crt_pos = pos;
c0101963:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101966:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
}
c010196c:	90                   	nop
c010196d:	c9                   	leave  
c010196e:	c3                   	ret    

c010196f <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010196f:	55                   	push   %ebp
c0101970:	89 e5                	mov    %esp,%ebp
c0101972:	83 ec 28             	sub    $0x28,%esp
c0101975:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010197b:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010197f:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101983:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101987:	ee                   	out    %al,(%dx)
c0101988:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c010198e:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c0101992:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c0101996:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c010199a:	ee                   	out    %al,(%dx)
c010199b:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01019a1:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01019a5:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01019a9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01019ad:	ee                   	out    %al,(%dx)
c01019ae:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01019b4:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01019b8:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01019bc:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01019c0:	ee                   	out    %al,(%dx)
c01019c1:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01019c7:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01019cb:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01019cf:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01019d3:	ee                   	out    %al,(%dx)
c01019d4:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01019da:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01019de:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01019e2:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01019e6:	ee                   	out    %al,(%dx)
c01019e7:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01019ed:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c01019f1:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c01019f5:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01019f9:	ee                   	out    %al,(%dx)
c01019fa:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a00:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101a04:	89 c2                	mov    %eax,%edx
c0101a06:	ec                   	in     (%dx),%al
c0101a07:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c0101a0a:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101a0e:	3c ff                	cmp    $0xff,%al
c0101a10:	0f 95 c0             	setne  %al
c0101a13:	0f b6 c0             	movzbl %al,%eax
c0101a16:	a3 28 15 15 c0       	mov    %eax,0xc0151528
c0101a1b:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a21:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a25:	89 c2                	mov    %eax,%edx
c0101a27:	ec                   	in     (%dx),%al
c0101a28:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101a2b:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101a31:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0101a35:	89 c2                	mov    %eax,%edx
c0101a37:	ec                   	in     (%dx),%al
c0101a38:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101a3b:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c0101a40:	85 c0                	test   %eax,%eax
c0101a42:	74 0d                	je     c0101a51 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101a44:	83 ec 0c             	sub    $0xc,%esp
c0101a47:	6a 04                	push   $0x4
c0101a49:	e8 e8 06 00 00       	call   c0102136 <pic_enable>
c0101a4e:	83 c4 10             	add    $0x10,%esp
    }
}
c0101a51:	90                   	nop
c0101a52:	c9                   	leave  
c0101a53:	c3                   	ret    

c0101a54 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101a54:	55                   	push   %ebp
c0101a55:	89 e5                	mov    %esp,%ebp
c0101a57:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101a5a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101a61:	eb 09                	jmp    c0101a6c <lpt_putc_sub+0x18>
        delay();
c0101a63:	e8 d7 fd ff ff       	call   c010183f <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101a68:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101a6c:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101a72:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0101a76:	89 c2                	mov    %eax,%edx
c0101a78:	ec                   	in     (%dx),%al
c0101a79:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101a7c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a80:	84 c0                	test   %al,%al
c0101a82:	78 09                	js     c0101a8d <lpt_putc_sub+0x39>
c0101a84:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101a8b:	7e d6                	jle    c0101a63 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a90:	0f b6 c0             	movzbl %al,%eax
c0101a93:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c0101a99:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101a9c:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0101aa0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101aa4:	ee                   	out    %al,(%dx)
c0101aa5:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c0101aab:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101aaf:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101ab3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101ab7:	ee                   	out    %al,(%dx)
c0101ab8:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c0101abe:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c0101ac2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c0101ac6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101aca:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101acb:	90                   	nop
c0101acc:	c9                   	leave  
c0101acd:	c3                   	ret    

c0101ace <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101ace:	55                   	push   %ebp
c0101acf:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101ad1:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101ad5:	74 0d                	je     c0101ae4 <lpt_putc+0x16>
        lpt_putc_sub(c);
c0101ad7:	ff 75 08             	pushl  0x8(%ebp)
c0101ada:	e8 75 ff ff ff       	call   c0101a54 <lpt_putc_sub>
c0101adf:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0101ae2:	eb 1e                	jmp    c0101b02 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c0101ae4:	6a 08                	push   $0x8
c0101ae6:	e8 69 ff ff ff       	call   c0101a54 <lpt_putc_sub>
c0101aeb:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101aee:	6a 20                	push   $0x20
c0101af0:	e8 5f ff ff ff       	call   c0101a54 <lpt_putc_sub>
c0101af5:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101af8:	6a 08                	push   $0x8
c0101afa:	e8 55 ff ff ff       	call   c0101a54 <lpt_putc_sub>
c0101aff:	83 c4 04             	add    $0x4,%esp
    }
}
c0101b02:	90                   	nop
c0101b03:	c9                   	leave  
c0101b04:	c3                   	ret    

c0101b05 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101b05:	55                   	push   %ebp
c0101b06:	89 e5                	mov    %esp,%ebp
c0101b08:	53                   	push   %ebx
c0101b09:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b0f:	b0 00                	mov    $0x0,%al
c0101b11:	85 c0                	test   %eax,%eax
c0101b13:	75 07                	jne    c0101b1c <cga_putc+0x17>
        c |= 0x0700;
c0101b15:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b1f:	0f b6 c0             	movzbl %al,%eax
c0101b22:	83 f8 0a             	cmp    $0xa,%eax
c0101b25:	74 4e                	je     c0101b75 <cga_putc+0x70>
c0101b27:	83 f8 0d             	cmp    $0xd,%eax
c0101b2a:	74 59                	je     c0101b85 <cga_putc+0x80>
c0101b2c:	83 f8 08             	cmp    $0x8,%eax
c0101b2f:	0f 85 8a 00 00 00    	jne    c0101bbf <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101b35:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b3c:	66 85 c0             	test   %ax,%ax
c0101b3f:	0f 84 a0 00 00 00    	je     c0101be5 <cga_putc+0xe0>
            crt_pos --;
c0101b45:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b4c:	83 e8 01             	sub    $0x1,%eax
c0101b4f:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101b55:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101b5a:	0f b7 15 24 15 15 c0 	movzwl 0xc0151524,%edx
c0101b61:	0f b7 d2             	movzwl %dx,%edx
c0101b64:	01 d2                	add    %edx,%edx
c0101b66:	01 d0                	add    %edx,%eax
c0101b68:	8b 55 08             	mov    0x8(%ebp),%edx
c0101b6b:	b2 00                	mov    $0x0,%dl
c0101b6d:	83 ca 20             	or     $0x20,%edx
c0101b70:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101b73:	eb 70                	jmp    c0101be5 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101b75:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b7c:	83 c0 50             	add    $0x50,%eax
c0101b7f:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101b85:	0f b7 1d 24 15 15 c0 	movzwl 0xc0151524,%ebx
c0101b8c:	0f b7 0d 24 15 15 c0 	movzwl 0xc0151524,%ecx
c0101b93:	0f b7 c1             	movzwl %cx,%eax
c0101b96:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101b9c:	c1 e8 10             	shr    $0x10,%eax
c0101b9f:	89 c2                	mov    %eax,%edx
c0101ba1:	66 c1 ea 06          	shr    $0x6,%dx
c0101ba5:	89 d0                	mov    %edx,%eax
c0101ba7:	c1 e0 02             	shl    $0x2,%eax
c0101baa:	01 d0                	add    %edx,%eax
c0101bac:	c1 e0 04             	shl    $0x4,%eax
c0101baf:	29 c1                	sub    %eax,%ecx
c0101bb1:	89 ca                	mov    %ecx,%edx
c0101bb3:	89 d8                	mov    %ebx,%eax
c0101bb5:	29 d0                	sub    %edx,%eax
c0101bb7:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
        break;
c0101bbd:	eb 27                	jmp    c0101be6 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101bbf:	8b 0d 20 15 15 c0    	mov    0xc0151520,%ecx
c0101bc5:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101bcc:	8d 50 01             	lea    0x1(%eax),%edx
c0101bcf:	66 89 15 24 15 15 c0 	mov    %dx,0xc0151524
c0101bd6:	0f b7 c0             	movzwl %ax,%eax
c0101bd9:	01 c0                	add    %eax,%eax
c0101bdb:	01 c8                	add    %ecx,%eax
c0101bdd:	8b 55 08             	mov    0x8(%ebp),%edx
c0101be0:	66 89 10             	mov    %dx,(%eax)
        break;
c0101be3:	eb 01                	jmp    c0101be6 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101be5:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101be6:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101bed:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101bf1:	76 59                	jbe    c0101c4c <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101bf3:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101bf8:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101bfe:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101c03:	83 ec 04             	sub    $0x4,%esp
c0101c06:	68 00 0f 00 00       	push   $0xf00
c0101c0b:	52                   	push   %edx
c0101c0c:	50                   	push   %eax
c0101c0d:	e8 3e 1e 01 00       	call   c0113a50 <memmove>
c0101c12:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101c15:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101c1c:	eb 15                	jmp    c0101c33 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101c1e:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101c23:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c26:	01 d2                	add    %edx,%edx
c0101c28:	01 d0                	add    %edx,%eax
c0101c2a:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101c2f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101c33:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101c3a:	7e e2                	jle    c0101c1e <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101c3c:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101c43:	83 e8 50             	sub    $0x50,%eax
c0101c46:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101c4c:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101c53:	0f b7 c0             	movzwl %ax,%eax
c0101c56:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c5a:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101c5e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101c62:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101c66:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101c67:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101c6e:	66 c1 e8 08          	shr    $0x8,%ax
c0101c72:	0f b6 c0             	movzbl %al,%eax
c0101c75:	0f b7 15 26 15 15 c0 	movzwl 0xc0151526,%edx
c0101c7c:	83 c2 01             	add    $0x1,%edx
c0101c7f:	0f b7 d2             	movzwl %dx,%edx
c0101c82:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101c86:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101c89:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101c8d:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101c91:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101c92:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101c99:	0f b7 c0             	movzwl %ax,%eax
c0101c9c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ca0:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101ca4:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101ca8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101cac:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101cad:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101cb4:	0f b6 c0             	movzbl %al,%eax
c0101cb7:	0f b7 15 26 15 15 c0 	movzwl 0xc0151526,%edx
c0101cbe:	83 c2 01             	add    $0x1,%edx
c0101cc1:	0f b7 d2             	movzwl %dx,%edx
c0101cc4:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101cc8:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101ccb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101ccf:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101cd3:	ee                   	out    %al,(%dx)
}
c0101cd4:	90                   	nop
c0101cd5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101cd8:	c9                   	leave  
c0101cd9:	c3                   	ret    

c0101cda <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101cda:	55                   	push   %ebp
c0101cdb:	89 e5                	mov    %esp,%ebp
c0101cdd:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101ce0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101ce7:	eb 09                	jmp    c0101cf2 <serial_putc_sub+0x18>
        delay();
c0101ce9:	e8 51 fb ff ff       	call   c010183f <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101cee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101cf2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cf8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cfc:	89 c2                	mov    %eax,%edx
c0101cfe:	ec                   	in     (%dx),%al
c0101cff:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101d02:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101d06:	0f b6 c0             	movzbl %al,%eax
c0101d09:	83 e0 20             	and    $0x20,%eax
c0101d0c:	85 c0                	test   %eax,%eax
c0101d0e:	75 09                	jne    c0101d19 <serial_putc_sub+0x3f>
c0101d10:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101d17:	7e d0                	jle    c0101ce9 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101d19:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d1c:	0f b6 c0             	movzbl %al,%eax
c0101d1f:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101d25:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d28:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101d2c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101d30:	ee                   	out    %al,(%dx)
}
c0101d31:	90                   	nop
c0101d32:	c9                   	leave  
c0101d33:	c3                   	ret    

c0101d34 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101d34:	55                   	push   %ebp
c0101d35:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101d37:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101d3b:	74 0d                	je     c0101d4a <serial_putc+0x16>
        serial_putc_sub(c);
c0101d3d:	ff 75 08             	pushl  0x8(%ebp)
c0101d40:	e8 95 ff ff ff       	call   c0101cda <serial_putc_sub>
c0101d45:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101d48:	eb 1e                	jmp    c0101d68 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101d4a:	6a 08                	push   $0x8
c0101d4c:	e8 89 ff ff ff       	call   c0101cda <serial_putc_sub>
c0101d51:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101d54:	6a 20                	push   $0x20
c0101d56:	e8 7f ff ff ff       	call   c0101cda <serial_putc_sub>
c0101d5b:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101d5e:	6a 08                	push   $0x8
c0101d60:	e8 75 ff ff ff       	call   c0101cda <serial_putc_sub>
c0101d65:	83 c4 04             	add    $0x4,%esp
    }
}
c0101d68:	90                   	nop
c0101d69:	c9                   	leave  
c0101d6a:	c3                   	ret    

c0101d6b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101d6b:	55                   	push   %ebp
c0101d6c:	89 e5                	mov    %esp,%ebp
c0101d6e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101d71:	eb 33                	jmp    c0101da6 <cons_intr+0x3b>
        if (c != 0) {
c0101d73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d77:	74 2d                	je     c0101da6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101d79:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c0101d7e:	8d 50 01             	lea    0x1(%eax),%edx
c0101d81:	89 15 44 17 15 c0    	mov    %edx,0xc0151744
c0101d87:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101d8a:	88 90 40 15 15 c0    	mov    %dl,-0x3feaeac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101d90:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c0101d95:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101d9a:	75 0a                	jne    c0101da6 <cons_intr+0x3b>
                cons.wpos = 0;
c0101d9c:	c7 05 44 17 15 c0 00 	movl   $0x0,0xc0151744
c0101da3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101da6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101da9:	ff d0                	call   *%eax
c0101dab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101dae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101db2:	75 bf                	jne    c0101d73 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101db4:	90                   	nop
c0101db5:	c9                   	leave  
c0101db6:	c3                   	ret    

c0101db7 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101db7:	55                   	push   %ebp
c0101db8:	89 e5                	mov    %esp,%ebp
c0101dba:	83 ec 10             	sub    $0x10,%esp
c0101dbd:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101dc3:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101dc7:	89 c2                	mov    %eax,%edx
c0101dc9:	ec                   	in     (%dx),%al
c0101dca:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101dcd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101dd1:	0f b6 c0             	movzbl %al,%eax
c0101dd4:	83 e0 01             	and    $0x1,%eax
c0101dd7:	85 c0                	test   %eax,%eax
c0101dd9:	75 07                	jne    c0101de2 <serial_proc_data+0x2b>
        return -1;
c0101ddb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101de0:	eb 2a                	jmp    c0101e0c <serial_proc_data+0x55>
c0101de2:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101de8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101dec:	89 c2                	mov    %eax,%edx
c0101dee:	ec                   	in     (%dx),%al
c0101def:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101df2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101df6:	0f b6 c0             	movzbl %al,%eax
c0101df9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101dfc:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101e00:	75 07                	jne    c0101e09 <serial_proc_data+0x52>
        c = '\b';
c0101e02:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101e09:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101e0c:	c9                   	leave  
c0101e0d:	c3                   	ret    

c0101e0e <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101e0e:	55                   	push   %ebp
c0101e0f:	89 e5                	mov    %esp,%ebp
c0101e11:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101e14:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c0101e19:	85 c0                	test   %eax,%eax
c0101e1b:	74 10                	je     c0101e2d <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101e1d:	83 ec 0c             	sub    $0xc,%esp
c0101e20:	68 b7 1d 10 c0       	push   $0xc0101db7
c0101e25:	e8 41 ff ff ff       	call   c0101d6b <cons_intr>
c0101e2a:	83 c4 10             	add    $0x10,%esp
    }
}
c0101e2d:	90                   	nop
c0101e2e:	c9                   	leave  
c0101e2f:	c3                   	ret    

c0101e30 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101e30:	55                   	push   %ebp
c0101e31:	89 e5                	mov    %esp,%ebp
c0101e33:	83 ec 18             	sub    $0x18,%esp
c0101e36:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e3c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101e40:	89 c2                	mov    %eax,%edx
c0101e42:	ec                   	in     (%dx),%al
c0101e43:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101e46:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101e4a:	0f b6 c0             	movzbl %al,%eax
c0101e4d:	83 e0 01             	and    $0x1,%eax
c0101e50:	85 c0                	test   %eax,%eax
c0101e52:	75 0a                	jne    c0101e5e <kbd_proc_data+0x2e>
        return -1;
c0101e54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101e59:	e9 5d 01 00 00       	jmp    c0101fbb <kbd_proc_data+0x18b>
c0101e5e:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e64:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101e68:	89 c2                	mov    %eax,%edx
c0101e6a:	ec                   	in     (%dx),%al
c0101e6b:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101e6e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101e72:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101e75:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101e79:	75 17                	jne    c0101e92 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101e7b:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101e80:	83 c8 40             	or     $0x40,%eax
c0101e83:	a3 48 17 15 c0       	mov    %eax,0xc0151748
        return 0;
c0101e88:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e8d:	e9 29 01 00 00       	jmp    c0101fbb <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101e92:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e96:	84 c0                	test   %al,%al
c0101e98:	79 47                	jns    c0101ee1 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101e9a:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101e9f:	83 e0 40             	and    $0x40,%eax
c0101ea2:	85 c0                	test   %eax,%eax
c0101ea4:	75 09                	jne    c0101eaf <kbd_proc_data+0x7f>
c0101ea6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101eaa:	83 e0 7f             	and    $0x7f,%eax
c0101ead:	eb 04                	jmp    c0101eb3 <kbd_proc_data+0x83>
c0101eaf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101eb3:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101eb6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101eba:	0f b6 80 40 e0 14 c0 	movzbl -0x3feb1fc0(%eax),%eax
c0101ec1:	83 c8 40             	or     $0x40,%eax
c0101ec4:	0f b6 c0             	movzbl %al,%eax
c0101ec7:	f7 d0                	not    %eax
c0101ec9:	89 c2                	mov    %eax,%edx
c0101ecb:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101ed0:	21 d0                	and    %edx,%eax
c0101ed2:	a3 48 17 15 c0       	mov    %eax,0xc0151748
        return 0;
c0101ed7:	b8 00 00 00 00       	mov    $0x0,%eax
c0101edc:	e9 da 00 00 00       	jmp    c0101fbb <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101ee1:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101ee6:	83 e0 40             	and    $0x40,%eax
c0101ee9:	85 c0                	test   %eax,%eax
c0101eeb:	74 11                	je     c0101efe <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101eed:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101ef1:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101ef6:	83 e0 bf             	and    $0xffffffbf,%eax
c0101ef9:	a3 48 17 15 c0       	mov    %eax,0xc0151748
    }

    shift |= shiftcode[data];
c0101efe:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f02:	0f b6 80 40 e0 14 c0 	movzbl -0x3feb1fc0(%eax),%eax
c0101f09:	0f b6 d0             	movzbl %al,%edx
c0101f0c:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f11:	09 d0                	or     %edx,%eax
c0101f13:	a3 48 17 15 c0       	mov    %eax,0xc0151748
    shift ^= togglecode[data];
c0101f18:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f1c:	0f b6 80 40 e1 14 c0 	movzbl -0x3feb1ec0(%eax),%eax
c0101f23:	0f b6 d0             	movzbl %al,%edx
c0101f26:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f2b:	31 d0                	xor    %edx,%eax
c0101f2d:	a3 48 17 15 c0       	mov    %eax,0xc0151748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101f32:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f37:	83 e0 03             	and    $0x3,%eax
c0101f3a:	8b 14 85 40 e5 14 c0 	mov    -0x3feb1ac0(,%eax,4),%edx
c0101f41:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f45:	01 d0                	add    %edx,%eax
c0101f47:	0f b6 00             	movzbl (%eax),%eax
c0101f4a:	0f b6 c0             	movzbl %al,%eax
c0101f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101f50:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f55:	83 e0 08             	and    $0x8,%eax
c0101f58:	85 c0                	test   %eax,%eax
c0101f5a:	74 22                	je     c0101f7e <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101f5c:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101f60:	7e 0c                	jle    c0101f6e <kbd_proc_data+0x13e>
c0101f62:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101f66:	7f 06                	jg     c0101f6e <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101f68:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101f6c:	eb 10                	jmp    c0101f7e <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101f6e:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101f72:	7e 0a                	jle    c0101f7e <kbd_proc_data+0x14e>
c0101f74:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101f78:	7f 04                	jg     c0101f7e <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101f7a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101f7e:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f83:	f7 d0                	not    %eax
c0101f85:	83 e0 06             	and    $0x6,%eax
c0101f88:	85 c0                	test   %eax,%eax
c0101f8a:	75 2c                	jne    c0101fb8 <kbd_proc_data+0x188>
c0101f8c:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101f93:	75 23                	jne    c0101fb8 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101f95:	83 ec 0c             	sub    $0xc,%esp
c0101f98:	68 21 47 11 c0       	push   $0xc0114721
c0101f9d:	e8 dd e3 ff ff       	call   c010037f <cprintf>
c0101fa2:	83 c4 10             	add    $0x10,%esp
c0101fa5:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101fab:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101faf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fb3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fb7:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101fbb:	c9                   	leave  
c0101fbc:	c3                   	ret    

c0101fbd <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101fbd:	55                   	push   %ebp
c0101fbe:	89 e5                	mov    %esp,%ebp
c0101fc0:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101fc3:	83 ec 0c             	sub    $0xc,%esp
c0101fc6:	68 30 1e 10 c0       	push   $0xc0101e30
c0101fcb:	e8 9b fd ff ff       	call   c0101d6b <cons_intr>
c0101fd0:	83 c4 10             	add    $0x10,%esp
}
c0101fd3:	90                   	nop
c0101fd4:	c9                   	leave  
c0101fd5:	c3                   	ret    

c0101fd6 <kbd_init>:

static void
kbd_init(void) {
c0101fd6:	55                   	push   %ebp
c0101fd7:	89 e5                	mov    %esp,%ebp
c0101fd9:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101fdc:	e8 dc ff ff ff       	call   c0101fbd <kbd_intr>
    pic_enable(IRQ_KBD);
c0101fe1:	83 ec 0c             	sub    $0xc,%esp
c0101fe4:	6a 01                	push   $0x1
c0101fe6:	e8 4b 01 00 00       	call   c0102136 <pic_enable>
c0101feb:	83 c4 10             	add    $0x10,%esp
}
c0101fee:	90                   	nop
c0101fef:	c9                   	leave  
c0101ff0:	c3                   	ret    

c0101ff1 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101ff1:	55                   	push   %ebp
c0101ff2:	89 e5                	mov    %esp,%ebp
c0101ff4:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101ff7:	e8 8c f8 ff ff       	call   c0101888 <cga_init>
    serial_init();
c0101ffc:	e8 6e f9 ff ff       	call   c010196f <serial_init>
    kbd_init();
c0102001:	e8 d0 ff ff ff       	call   c0101fd6 <kbd_init>
    if (!serial_exists) {
c0102006:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c010200b:	85 c0                	test   %eax,%eax
c010200d:	75 10                	jne    c010201f <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c010200f:	83 ec 0c             	sub    $0xc,%esp
c0102012:	68 2d 47 11 c0       	push   $0xc011472d
c0102017:	e8 63 e3 ff ff       	call   c010037f <cprintf>
c010201c:	83 c4 10             	add    $0x10,%esp
    }
}
c010201f:	90                   	nop
c0102020:	c9                   	leave  
c0102021:	c3                   	ret    

c0102022 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102022:	55                   	push   %ebp
c0102023:	89 e5                	mov    %esp,%ebp
c0102025:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102028:	e8 d4 f7 ff ff       	call   c0101801 <__intr_save>
c010202d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0102030:	83 ec 0c             	sub    $0xc,%esp
c0102033:	ff 75 08             	pushl  0x8(%ebp)
c0102036:	e8 93 fa ff ff       	call   c0101ace <lpt_putc>
c010203b:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c010203e:	83 ec 0c             	sub    $0xc,%esp
c0102041:	ff 75 08             	pushl  0x8(%ebp)
c0102044:	e8 bc fa ff ff       	call   c0101b05 <cga_putc>
c0102049:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c010204c:	83 ec 0c             	sub    $0xc,%esp
c010204f:	ff 75 08             	pushl  0x8(%ebp)
c0102052:	e8 dd fc ff ff       	call   c0101d34 <serial_putc>
c0102057:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010205a:	83 ec 0c             	sub    $0xc,%esp
c010205d:	ff 75 f4             	pushl  -0xc(%ebp)
c0102060:	e8 c6 f7 ff ff       	call   c010182b <__intr_restore>
c0102065:	83 c4 10             	add    $0x10,%esp
}
c0102068:	90                   	nop
c0102069:	c9                   	leave  
c010206a:	c3                   	ret    

c010206b <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010206b:	55                   	push   %ebp
c010206c:	89 e5                	mov    %esp,%ebp
c010206e:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0102071:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102078:	e8 84 f7 ff ff       	call   c0101801 <__intr_save>
c010207d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0102080:	e8 89 fd ff ff       	call   c0101e0e <serial_intr>
        kbd_intr();
c0102085:	e8 33 ff ff ff       	call   c0101fbd <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010208a:	8b 15 40 17 15 c0    	mov    0xc0151740,%edx
c0102090:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c0102095:	39 c2                	cmp    %eax,%edx
c0102097:	74 31                	je     c01020ca <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102099:	a1 40 17 15 c0       	mov    0xc0151740,%eax
c010209e:	8d 50 01             	lea    0x1(%eax),%edx
c01020a1:	89 15 40 17 15 c0    	mov    %edx,0xc0151740
c01020a7:	0f b6 80 40 15 15 c0 	movzbl -0x3feaeac0(%eax),%eax
c01020ae:	0f b6 c0             	movzbl %al,%eax
c01020b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01020b4:	a1 40 17 15 c0       	mov    0xc0151740,%eax
c01020b9:	3d 00 02 00 00       	cmp    $0x200,%eax
c01020be:	75 0a                	jne    c01020ca <cons_getc+0x5f>
                cons.rpos = 0;
c01020c0:	c7 05 40 17 15 c0 00 	movl   $0x0,0xc0151740
c01020c7:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01020ca:	83 ec 0c             	sub    $0xc,%esp
c01020cd:	ff 75 f0             	pushl  -0x10(%ebp)
c01020d0:	e8 56 f7 ff ff       	call   c010182b <__intr_restore>
c01020d5:	83 c4 10             	add    $0x10,%esp
    return c;
c01020d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020db:	c9                   	leave  
c01020dc:	c3                   	ret    

c01020dd <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01020dd:	55                   	push   %ebp
c01020de:	89 e5                	mov    %esp,%ebp
c01020e0:	83 ec 14             	sub    $0x14,%esp
c01020e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01020e6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01020ea:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01020ee:	66 a3 50 e5 14 c0    	mov    %ax,0xc014e550
    if (did_init) {
c01020f4:	a1 4c 17 15 c0       	mov    0xc015174c,%eax
c01020f9:	85 c0                	test   %eax,%eax
c01020fb:	74 36                	je     c0102133 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c01020fd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102101:	0f b6 c0             	movzbl %al,%eax
c0102104:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010210a:	88 45 fa             	mov    %al,-0x6(%ebp)
c010210d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102111:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102115:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102116:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010211a:	66 c1 e8 08          	shr    $0x8,%ax
c010211e:	0f b6 c0             	movzbl %al,%eax
c0102121:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0102127:	88 45 fb             	mov    %al,-0x5(%ebp)
c010212a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010212e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
    }
}
c0102133:	90                   	nop
c0102134:	c9                   	leave  
c0102135:	c3                   	ret    

c0102136 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102136:	55                   	push   %ebp
c0102137:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c0102139:	8b 45 08             	mov    0x8(%ebp),%eax
c010213c:	ba 01 00 00 00       	mov    $0x1,%edx
c0102141:	89 c1                	mov    %eax,%ecx
c0102143:	d3 e2                	shl    %cl,%edx
c0102145:	89 d0                	mov    %edx,%eax
c0102147:	f7 d0                	not    %eax
c0102149:	89 c2                	mov    %eax,%edx
c010214b:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c0102152:	21 d0                	and    %edx,%eax
c0102154:	0f b7 c0             	movzwl %ax,%eax
c0102157:	50                   	push   %eax
c0102158:	e8 80 ff ff ff       	call   c01020dd <pic_setmask>
c010215d:	83 c4 04             	add    $0x4,%esp
}
c0102160:	90                   	nop
c0102161:	c9                   	leave  
c0102162:	c3                   	ret    

c0102163 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102163:	55                   	push   %ebp
c0102164:	89 e5                	mov    %esp,%ebp
c0102166:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c0102169:	c7 05 4c 17 15 c0 01 	movl   $0x1,0xc015174c
c0102170:	00 00 00 
c0102173:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102179:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c010217d:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102181:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
c0102186:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010218c:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c0102190:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0102194:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102198:	ee                   	out    %al,(%dx)
c0102199:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c010219f:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01021a3:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01021a7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021ab:	ee                   	out    %al,(%dx)
c01021ac:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01021b2:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01021b6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021ba:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01021be:	ee                   	out    %al,(%dx)
c01021bf:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01021c5:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01021c9:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01021cd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021d1:	ee                   	out    %al,(%dx)
c01021d2:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01021d8:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01021dc:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01021e0:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01021e4:	ee                   	out    %al,(%dx)
c01021e5:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c01021eb:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c01021ef:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01021f3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01021f7:	ee                   	out    %al,(%dx)
c01021f8:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c01021fe:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102202:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102206:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010220a:	ee                   	out    %al,(%dx)
c010220b:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102211:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0102215:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0102219:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010221d:	ee                   	out    %al,(%dx)
c010221e:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102224:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0102228:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c010222c:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102230:	ee                   	out    %al,(%dx)
c0102231:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0102237:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c010223b:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010223f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102243:	ee                   	out    %al,(%dx)
c0102244:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010224a:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c010224e:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102252:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102256:	ee                   	out    %al,(%dx)
c0102257:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010225d:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102261:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c0102265:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102269:	ee                   	out    %al,(%dx)
c010226a:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102270:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102274:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0102278:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010227c:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c010227d:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c0102284:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102288:	74 13                	je     c010229d <pic_init+0x13a>
        pic_setmask(irq_mask);
c010228a:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c0102291:	0f b7 c0             	movzwl %ax,%eax
c0102294:	50                   	push   %eax
c0102295:	e8 43 fe ff ff       	call   c01020dd <pic_setmask>
c010229a:	83 c4 04             	add    $0x4,%esp
    }
}
c010229d:	90                   	nop
c010229e:	c9                   	leave  
c010229f:	c3                   	ret    

c01022a0 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01022a0:	55                   	push   %ebp
c01022a1:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01022a3:	fb                   	sti    
    sti();
}
c01022a4:	90                   	nop
c01022a5:	5d                   	pop    %ebp
c01022a6:	c3                   	ret    

c01022a7 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01022a7:	55                   	push   %ebp
c01022a8:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01022aa:	fa                   	cli    
    cli();
}
c01022ab:	90                   	nop
c01022ac:	5d                   	pop    %ebp
c01022ad:	c3                   	ret    

c01022ae <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022ae:	55                   	push   %ebp
c01022af:	89 e5                	mov    %esp,%ebp
c01022b1:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022b4:	83 ec 08             	sub    $0x8,%esp
c01022b7:	6a 64                	push   $0x64
c01022b9:	68 60 47 11 c0       	push   $0xc0114760
c01022be:	e8 bc e0 ff ff       	call   c010037f <cprintf>
c01022c3:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c01022c6:	90                   	nop
c01022c7:	c9                   	leave  
c01022c8:	c3                   	ret    

c01022c9 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01022c9:	55                   	push   %ebp
c01022ca:	89 e5                	mov    %esp,%ebp
c01022cc:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01022cf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01022d6:	e9 c3 00 00 00       	jmp    c010239e <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01022db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022de:	8b 04 85 e0 e5 14 c0 	mov    -0x3feb1a20(,%eax,4),%eax
c01022e5:	89 c2                	mov    %eax,%edx
c01022e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ea:	66 89 14 c5 60 17 15 	mov    %dx,-0x3feae8a0(,%eax,8)
c01022f1:	c0 
c01022f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f5:	66 c7 04 c5 62 17 15 	movw   $0x8,-0x3feae89e(,%eax,8)
c01022fc:	c0 08 00 
c01022ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102302:	0f b6 14 c5 64 17 15 	movzbl -0x3feae89c(,%eax,8),%edx
c0102309:	c0 
c010230a:	83 e2 e0             	and    $0xffffffe0,%edx
c010230d:	88 14 c5 64 17 15 c0 	mov    %dl,-0x3feae89c(,%eax,8)
c0102314:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102317:	0f b6 14 c5 64 17 15 	movzbl -0x3feae89c(,%eax,8),%edx
c010231e:	c0 
c010231f:	83 e2 1f             	and    $0x1f,%edx
c0102322:	88 14 c5 64 17 15 c0 	mov    %dl,-0x3feae89c(,%eax,8)
c0102329:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232c:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c0102333:	c0 
c0102334:	83 e2 f0             	and    $0xfffffff0,%edx
c0102337:	83 ca 0e             	or     $0xe,%edx
c010233a:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c0102341:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102344:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c010234b:	c0 
c010234c:	83 e2 ef             	and    $0xffffffef,%edx
c010234f:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c0102356:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102359:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c0102360:	c0 
c0102361:	83 e2 9f             	and    $0xffffff9f,%edx
c0102364:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c010236b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010236e:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c0102375:	c0 
c0102376:	83 ca 80             	or     $0xffffff80,%edx
c0102379:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c0102380:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102383:	8b 04 85 e0 e5 14 c0 	mov    -0x3feb1a20(,%eax,4),%eax
c010238a:	c1 e8 10             	shr    $0x10,%eax
c010238d:	89 c2                	mov    %eax,%edx
c010238f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102392:	66 89 14 c5 66 17 15 	mov    %dx,-0x3feae89a(,%eax,8)
c0102399:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010239a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010239e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023a1:	3d ff 00 00 00       	cmp    $0xff,%eax
c01023a6:	0f 86 2f ff ff ff    	jbe    c01022db <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01023ac:	a1 e0 e7 14 c0       	mov    0xc014e7e0,%eax
c01023b1:	66 a3 60 1b 15 c0    	mov    %ax,0xc0151b60
c01023b7:	66 c7 05 62 1b 15 c0 	movw   $0x8,0xc0151b62
c01023be:	08 00 
c01023c0:	0f b6 05 64 1b 15 c0 	movzbl 0xc0151b64,%eax
c01023c7:	83 e0 e0             	and    $0xffffffe0,%eax
c01023ca:	a2 64 1b 15 c0       	mov    %al,0xc0151b64
c01023cf:	0f b6 05 64 1b 15 c0 	movzbl 0xc0151b64,%eax
c01023d6:	83 e0 1f             	and    $0x1f,%eax
c01023d9:	a2 64 1b 15 c0       	mov    %al,0xc0151b64
c01023de:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c01023e5:	83 c8 0f             	or     $0xf,%eax
c01023e8:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c01023ed:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c01023f4:	83 e0 ef             	and    $0xffffffef,%eax
c01023f7:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c01023fc:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c0102403:	83 c8 60             	or     $0x60,%eax
c0102406:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c010240b:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c0102412:	83 c8 80             	or     $0xffffff80,%eax
c0102415:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c010241a:	a1 e0 e7 14 c0       	mov    0xc014e7e0,%eax
c010241f:	c1 e8 10             	shr    $0x10,%eax
c0102422:	66 a3 66 1b 15 c0    	mov    %ax,0xc0151b66
c0102428:	c7 45 f8 60 e5 14 c0 	movl   $0xc014e560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010242f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102432:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102435:	90                   	nop
c0102436:	c9                   	leave  
c0102437:	c3                   	ret    

c0102438 <trapname>:

static const char *
trapname(int trapno) {
c0102438:	55                   	push   %ebp
c0102439:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010243b:	8b 45 08             	mov    0x8(%ebp),%eax
c010243e:	83 f8 13             	cmp    $0x13,%eax
c0102441:	77 0c                	ja     c010244f <trapname+0x17>
        return excnames[trapno];
c0102443:	8b 45 08             	mov    0x8(%ebp),%eax
c0102446:	8b 04 85 e0 4b 11 c0 	mov    -0x3feeb420(,%eax,4),%eax
c010244d:	eb 18                	jmp    c0102467 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010244f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102453:	7e 0d                	jle    c0102462 <trapname+0x2a>
c0102455:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102459:	7f 07                	jg     c0102462 <trapname+0x2a>
        return "Hardware Interrupt";
c010245b:	b8 6a 47 11 c0       	mov    $0xc011476a,%eax
c0102460:	eb 05                	jmp    c0102467 <trapname+0x2f>
    }
    return "(unknown trap)";
c0102462:	b8 7d 47 11 c0       	mov    $0xc011477d,%eax
}
c0102467:	5d                   	pop    %ebp
c0102468:	c3                   	ret    

c0102469 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102469:	55                   	push   %ebp
c010246a:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010246c:	8b 45 08             	mov    0x8(%ebp),%eax
c010246f:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102473:	66 83 f8 08          	cmp    $0x8,%ax
c0102477:	0f 94 c0             	sete   %al
c010247a:	0f b6 c0             	movzbl %al,%eax
}
c010247d:	5d                   	pop    %ebp
c010247e:	c3                   	ret    

c010247f <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010247f:	55                   	push   %ebp
c0102480:	89 e5                	mov    %esp,%ebp
c0102482:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102485:	83 ec 08             	sub    $0x8,%esp
c0102488:	ff 75 08             	pushl  0x8(%ebp)
c010248b:	68 be 47 11 c0       	push   $0xc01147be
c0102490:	e8 ea de ff ff       	call   c010037f <cprintf>
c0102495:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c0102498:	8b 45 08             	mov    0x8(%ebp),%eax
c010249b:	83 ec 0c             	sub    $0xc,%esp
c010249e:	50                   	push   %eax
c010249f:	e8 b8 01 00 00       	call   c010265c <print_regs>
c01024a4:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024aa:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024ae:	0f b7 c0             	movzwl %ax,%eax
c01024b1:	83 ec 08             	sub    $0x8,%esp
c01024b4:	50                   	push   %eax
c01024b5:	68 cf 47 11 c0       	push   $0xc01147cf
c01024ba:	e8 c0 de ff ff       	call   c010037f <cprintf>
c01024bf:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01024c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c5:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01024c9:	0f b7 c0             	movzwl %ax,%eax
c01024cc:	83 ec 08             	sub    $0x8,%esp
c01024cf:	50                   	push   %eax
c01024d0:	68 e2 47 11 c0       	push   $0xc01147e2
c01024d5:	e8 a5 de ff ff       	call   c010037f <cprintf>
c01024da:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01024dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e0:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01024e4:	0f b7 c0             	movzwl %ax,%eax
c01024e7:	83 ec 08             	sub    $0x8,%esp
c01024ea:	50                   	push   %eax
c01024eb:	68 f5 47 11 c0       	push   $0xc01147f5
c01024f0:	e8 8a de ff ff       	call   c010037f <cprintf>
c01024f5:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fb:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01024ff:	0f b7 c0             	movzwl %ax,%eax
c0102502:	83 ec 08             	sub    $0x8,%esp
c0102505:	50                   	push   %eax
c0102506:	68 08 48 11 c0       	push   $0xc0114808
c010250b:	e8 6f de ff ff       	call   c010037f <cprintf>
c0102510:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102513:	8b 45 08             	mov    0x8(%ebp),%eax
c0102516:	8b 40 30             	mov    0x30(%eax),%eax
c0102519:	83 ec 0c             	sub    $0xc,%esp
c010251c:	50                   	push   %eax
c010251d:	e8 16 ff ff ff       	call   c0102438 <trapname>
c0102522:	83 c4 10             	add    $0x10,%esp
c0102525:	89 c2                	mov    %eax,%edx
c0102527:	8b 45 08             	mov    0x8(%ebp),%eax
c010252a:	8b 40 30             	mov    0x30(%eax),%eax
c010252d:	83 ec 04             	sub    $0x4,%esp
c0102530:	52                   	push   %edx
c0102531:	50                   	push   %eax
c0102532:	68 1b 48 11 c0       	push   $0xc011481b
c0102537:	e8 43 de ff ff       	call   c010037f <cprintf>
c010253c:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c010253f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102542:	8b 40 34             	mov    0x34(%eax),%eax
c0102545:	83 ec 08             	sub    $0x8,%esp
c0102548:	50                   	push   %eax
c0102549:	68 2d 48 11 c0       	push   $0xc011482d
c010254e:	e8 2c de ff ff       	call   c010037f <cprintf>
c0102553:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102556:	8b 45 08             	mov    0x8(%ebp),%eax
c0102559:	8b 40 38             	mov    0x38(%eax),%eax
c010255c:	83 ec 08             	sub    $0x8,%esp
c010255f:	50                   	push   %eax
c0102560:	68 3c 48 11 c0       	push   $0xc011483c
c0102565:	e8 15 de ff ff       	call   c010037f <cprintf>
c010256a:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010256d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102570:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102574:	0f b7 c0             	movzwl %ax,%eax
c0102577:	83 ec 08             	sub    $0x8,%esp
c010257a:	50                   	push   %eax
c010257b:	68 4b 48 11 c0       	push   $0xc011484b
c0102580:	e8 fa dd ff ff       	call   c010037f <cprintf>
c0102585:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102588:	8b 45 08             	mov    0x8(%ebp),%eax
c010258b:	8b 40 40             	mov    0x40(%eax),%eax
c010258e:	83 ec 08             	sub    $0x8,%esp
c0102591:	50                   	push   %eax
c0102592:	68 5e 48 11 c0       	push   $0xc011485e
c0102597:	e8 e3 dd ff ff       	call   c010037f <cprintf>
c010259c:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010259f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025a6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025ad:	eb 3f                	jmp    c01025ee <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025af:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b2:	8b 50 40             	mov    0x40(%eax),%edx
c01025b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025b8:	21 d0                	and    %edx,%eax
c01025ba:	85 c0                	test   %eax,%eax
c01025bc:	74 29                	je     c01025e7 <print_trapframe+0x168>
c01025be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025c1:	8b 04 85 80 e5 14 c0 	mov    -0x3feb1a80(,%eax,4),%eax
c01025c8:	85 c0                	test   %eax,%eax
c01025ca:	74 1b                	je     c01025e7 <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c01025cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025cf:	8b 04 85 80 e5 14 c0 	mov    -0x3feb1a80(,%eax,4),%eax
c01025d6:	83 ec 08             	sub    $0x8,%esp
c01025d9:	50                   	push   %eax
c01025da:	68 6d 48 11 c0       	push   $0xc011486d
c01025df:	e8 9b dd ff ff       	call   c010037f <cprintf>
c01025e4:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01025eb:	d1 65 f0             	shll   -0x10(%ebp)
c01025ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f1:	83 f8 17             	cmp    $0x17,%eax
c01025f4:	76 b9                	jbe    c01025af <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f9:	8b 40 40             	mov    0x40(%eax),%eax
c01025fc:	25 00 30 00 00       	and    $0x3000,%eax
c0102601:	c1 e8 0c             	shr    $0xc,%eax
c0102604:	83 ec 08             	sub    $0x8,%esp
c0102607:	50                   	push   %eax
c0102608:	68 71 48 11 c0       	push   $0xc0114871
c010260d:	e8 6d dd ff ff       	call   c010037f <cprintf>
c0102612:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c0102615:	83 ec 0c             	sub    $0xc,%esp
c0102618:	ff 75 08             	pushl  0x8(%ebp)
c010261b:	e8 49 fe ff ff       	call   c0102469 <trap_in_kernel>
c0102620:	83 c4 10             	add    $0x10,%esp
c0102623:	85 c0                	test   %eax,%eax
c0102625:	75 32                	jne    c0102659 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102627:	8b 45 08             	mov    0x8(%ebp),%eax
c010262a:	8b 40 44             	mov    0x44(%eax),%eax
c010262d:	83 ec 08             	sub    $0x8,%esp
c0102630:	50                   	push   %eax
c0102631:	68 7a 48 11 c0       	push   $0xc011487a
c0102636:	e8 44 dd ff ff       	call   c010037f <cprintf>
c010263b:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010263e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102641:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102645:	0f b7 c0             	movzwl %ax,%eax
c0102648:	83 ec 08             	sub    $0x8,%esp
c010264b:	50                   	push   %eax
c010264c:	68 89 48 11 c0       	push   $0xc0114889
c0102651:	e8 29 dd ff ff       	call   c010037f <cprintf>
c0102656:	83 c4 10             	add    $0x10,%esp
    }
}
c0102659:	90                   	nop
c010265a:	c9                   	leave  
c010265b:	c3                   	ret    

c010265c <print_regs>:

void
print_regs(struct pushregs *regs) {
c010265c:	55                   	push   %ebp
c010265d:	89 e5                	mov    %esp,%ebp
c010265f:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102662:	8b 45 08             	mov    0x8(%ebp),%eax
c0102665:	8b 00                	mov    (%eax),%eax
c0102667:	83 ec 08             	sub    $0x8,%esp
c010266a:	50                   	push   %eax
c010266b:	68 9c 48 11 c0       	push   $0xc011489c
c0102670:	e8 0a dd ff ff       	call   c010037f <cprintf>
c0102675:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102678:	8b 45 08             	mov    0x8(%ebp),%eax
c010267b:	8b 40 04             	mov    0x4(%eax),%eax
c010267e:	83 ec 08             	sub    $0x8,%esp
c0102681:	50                   	push   %eax
c0102682:	68 ab 48 11 c0       	push   $0xc01148ab
c0102687:	e8 f3 dc ff ff       	call   c010037f <cprintf>
c010268c:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010268f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102692:	8b 40 08             	mov    0x8(%eax),%eax
c0102695:	83 ec 08             	sub    $0x8,%esp
c0102698:	50                   	push   %eax
c0102699:	68 ba 48 11 c0       	push   $0xc01148ba
c010269e:	e8 dc dc ff ff       	call   c010037f <cprintf>
c01026a3:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a9:	8b 40 0c             	mov    0xc(%eax),%eax
c01026ac:	83 ec 08             	sub    $0x8,%esp
c01026af:	50                   	push   %eax
c01026b0:	68 c9 48 11 c0       	push   $0xc01148c9
c01026b5:	e8 c5 dc ff ff       	call   c010037f <cprintf>
c01026ba:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01026c0:	8b 40 10             	mov    0x10(%eax),%eax
c01026c3:	83 ec 08             	sub    $0x8,%esp
c01026c6:	50                   	push   %eax
c01026c7:	68 d8 48 11 c0       	push   $0xc01148d8
c01026cc:	e8 ae dc ff ff       	call   c010037f <cprintf>
c01026d1:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d7:	8b 40 14             	mov    0x14(%eax),%eax
c01026da:	83 ec 08             	sub    $0x8,%esp
c01026dd:	50                   	push   %eax
c01026de:	68 e7 48 11 c0       	push   $0xc01148e7
c01026e3:	e8 97 dc ff ff       	call   c010037f <cprintf>
c01026e8:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01026eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ee:	8b 40 18             	mov    0x18(%eax),%eax
c01026f1:	83 ec 08             	sub    $0x8,%esp
c01026f4:	50                   	push   %eax
c01026f5:	68 f6 48 11 c0       	push   $0xc01148f6
c01026fa:	e8 80 dc ff ff       	call   c010037f <cprintf>
c01026ff:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102702:	8b 45 08             	mov    0x8(%ebp),%eax
c0102705:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102708:	83 ec 08             	sub    $0x8,%esp
c010270b:	50                   	push   %eax
c010270c:	68 05 49 11 c0       	push   $0xc0114905
c0102711:	e8 69 dc ff ff       	call   c010037f <cprintf>
c0102716:	83 c4 10             	add    $0x10,%esp
}
c0102719:	90                   	nop
c010271a:	c9                   	leave  
c010271b:	c3                   	ret    

c010271c <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010271c:	55                   	push   %ebp
c010271d:	89 e5                	mov    %esp,%ebp
c010271f:	53                   	push   %ebx
c0102720:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102723:	8b 45 08             	mov    0x8(%ebp),%eax
c0102726:	8b 40 34             	mov    0x34(%eax),%eax
c0102729:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010272c:	85 c0                	test   %eax,%eax
c010272e:	74 07                	je     c0102737 <print_pgfault+0x1b>
c0102730:	bb 14 49 11 c0       	mov    $0xc0114914,%ebx
c0102735:	eb 05                	jmp    c010273c <print_pgfault+0x20>
c0102737:	bb 25 49 11 c0       	mov    $0xc0114925,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010273c:	8b 45 08             	mov    0x8(%ebp),%eax
c010273f:	8b 40 34             	mov    0x34(%eax),%eax
c0102742:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102745:	85 c0                	test   %eax,%eax
c0102747:	74 07                	je     c0102750 <print_pgfault+0x34>
c0102749:	b9 57 00 00 00       	mov    $0x57,%ecx
c010274e:	eb 05                	jmp    c0102755 <print_pgfault+0x39>
c0102750:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102755:	8b 45 08             	mov    0x8(%ebp),%eax
c0102758:	8b 40 34             	mov    0x34(%eax),%eax
c010275b:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010275e:	85 c0                	test   %eax,%eax
c0102760:	74 07                	je     c0102769 <print_pgfault+0x4d>
c0102762:	ba 55 00 00 00       	mov    $0x55,%edx
c0102767:	eb 05                	jmp    c010276e <print_pgfault+0x52>
c0102769:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010276e:	0f 20 d0             	mov    %cr2,%eax
c0102771:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102777:	83 ec 0c             	sub    $0xc,%esp
c010277a:	53                   	push   %ebx
c010277b:	51                   	push   %ecx
c010277c:	52                   	push   %edx
c010277d:	50                   	push   %eax
c010277e:	68 34 49 11 c0       	push   $0xc0114934
c0102783:	e8 f7 db ff ff       	call   c010037f <cprintf>
c0102788:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010278b:	90                   	nop
c010278c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010278f:	c9                   	leave  
c0102790:	c3                   	ret    

c0102791 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102791:	55                   	push   %ebp
c0102792:	89 e5                	mov    %esp,%ebp
c0102794:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102797:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c010279c:	85 c0                	test   %eax,%eax
c010279e:	74 0e                	je     c01027ae <pgfault_handler+0x1d>
            print_pgfault(tf);
c01027a0:	83 ec 0c             	sub    $0xc,%esp
c01027a3:	ff 75 08             	pushl  0x8(%ebp)
c01027a6:	e8 71 ff ff ff       	call   c010271c <print_pgfault>
c01027ab:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027ae:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c01027b3:	85 c0                	test   %eax,%eax
c01027b5:	74 32                	je     c01027e9 <pgfault_handler+0x58>
        assert(current == idleproc);
c01027b7:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c01027bd:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c01027c2:	39 c2                	cmp    %eax,%edx
c01027c4:	74 19                	je     c01027df <pgfault_handler+0x4e>
c01027c6:	68 57 49 11 c0       	push   $0xc0114957
c01027cb:	68 6b 49 11 c0       	push   $0xc011496b
c01027d0:	68 b0 00 00 00       	push   $0xb0
c01027d5:	68 80 49 11 c0       	push   $0xc0114980
c01027da:	e8 06 dd ff ff       	call   c01004e5 <__panic>
        mm = check_mm_struct;
c01027df:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c01027e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01027e7:	eb 47                	jmp    c0102830 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c01027e9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01027ee:	85 c0                	test   %eax,%eax
c01027f0:	75 33                	jne    c0102825 <pgfault_handler+0x94>
            print_trapframe(tf);
c01027f2:	83 ec 0c             	sub    $0xc,%esp
c01027f5:	ff 75 08             	pushl  0x8(%ebp)
c01027f8:	e8 82 fc ff ff       	call   c010247f <print_trapframe>
c01027fd:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0102800:	83 ec 0c             	sub    $0xc,%esp
c0102803:	ff 75 08             	pushl  0x8(%ebp)
c0102806:	e8 11 ff ff ff       	call   c010271c <print_pgfault>
c010280b:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c010280e:	83 ec 04             	sub    $0x4,%esp
c0102811:	68 91 49 11 c0       	push   $0xc0114991
c0102816:	68 b7 00 00 00       	push   $0xb7
c010281b:	68 80 49 11 c0       	push   $0xc0114980
c0102820:	e8 c0 dc ff ff       	call   c01004e5 <__panic>
        }
        mm = current->mm;
c0102825:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010282a:	8b 40 18             	mov    0x18(%eax),%eax
c010282d:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102830:	0f 20 d0             	mov    %cr2,%eax
c0102833:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102836:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102839:	8b 45 08             	mov    0x8(%ebp),%eax
c010283c:	8b 40 34             	mov    0x34(%eax),%eax
c010283f:	83 ec 04             	sub    $0x4,%esp
c0102842:	52                   	push   %edx
c0102843:	50                   	push   %eax
c0102844:	ff 75 f4             	pushl  -0xc(%ebp)
c0102847:	e8 be 1a 00 00       	call   c010430a <do_pgfault>
c010284c:	83 c4 10             	add    $0x10,%esp
}
c010284f:	c9                   	leave  
c0102850:	c3                   	ret    

c0102851 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102851:	55                   	push   %ebp
c0102852:	89 e5                	mov    %esp,%ebp
c0102854:	83 ec 18             	sub    $0x18,%esp
    char c;

    int ret=0;
c0102857:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c010285e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102861:	8b 40 30             	mov    0x30(%eax),%eax
c0102864:	83 f8 2f             	cmp    $0x2f,%eax
c0102867:	77 38                	ja     c01028a1 <trap_dispatch+0x50>
c0102869:	83 f8 2e             	cmp    $0x2e,%eax
c010286c:	0f 83 a9 01 00 00    	jae    c0102a1b <trap_dispatch+0x1ca>
c0102872:	83 f8 20             	cmp    $0x20,%eax
c0102875:	0f 84 eb 00 00 00    	je     c0102966 <trap_dispatch+0x115>
c010287b:	83 f8 20             	cmp    $0x20,%eax
c010287e:	77 0a                	ja     c010288a <trap_dispatch+0x39>
c0102880:	83 f8 0e             	cmp    $0xe,%eax
c0102883:	74 3e                	je     c01028c3 <trap_dispatch+0x72>
c0102885:	e9 46 01 00 00       	jmp    c01029d0 <trap_dispatch+0x17f>
c010288a:	83 f8 21             	cmp    $0x21,%eax
c010288d:	0f 84 0c 01 00 00    	je     c010299f <trap_dispatch+0x14e>
c0102893:	83 f8 24             	cmp    $0x24,%eax
c0102896:	0f 84 03 01 00 00    	je     c010299f <trap_dispatch+0x14e>
c010289c:	e9 2f 01 00 00       	jmp    c01029d0 <trap_dispatch+0x17f>
c01028a1:	83 f8 78             	cmp    $0x78,%eax
c01028a4:	0f 82 26 01 00 00    	jb     c01029d0 <trap_dispatch+0x17f>
c01028aa:	83 f8 79             	cmp    $0x79,%eax
c01028ad:	0f 86 06 01 00 00    	jbe    c01029b9 <trap_dispatch+0x168>
c01028b3:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028b8:	0f 84 9e 00 00 00    	je     c010295c <trap_dispatch+0x10b>
c01028be:	e9 0d 01 00 00       	jmp    c01029d0 <trap_dispatch+0x17f>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028c3:	83 ec 0c             	sub    $0xc,%esp
c01028c6:	ff 75 08             	pushl  0x8(%ebp)
c01028c9:	e8 c3 fe ff ff       	call   c0102791 <pgfault_handler>
c01028ce:	83 c4 10             	add    $0x10,%esp
c01028d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01028d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028d8:	0f 84 40 01 00 00    	je     c0102a1e <trap_dispatch+0x1cd>
            print_trapframe(tf);
c01028de:	83 ec 0c             	sub    $0xc,%esp
c01028e1:	ff 75 08             	pushl  0x8(%ebp)
c01028e4:	e8 96 fb ff ff       	call   c010247f <print_trapframe>
c01028e9:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c01028ec:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01028f1:	85 c0                	test   %eax,%eax
c01028f3:	75 17                	jne    c010290c <trap_dispatch+0xbb>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028f5:	ff 75 f4             	pushl  -0xc(%ebp)
c01028f8:	68 a8 49 11 c0       	push   $0xc01149a8
c01028fd:	68 cc 00 00 00       	push   $0xcc
c0102902:	68 80 49 11 c0       	push   $0xc0114980
c0102907:	e8 d9 db ff ff       	call   c01004e5 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010290c:	83 ec 0c             	sub    $0xc,%esp
c010290f:	ff 75 08             	pushl  0x8(%ebp)
c0102912:	e8 52 fb ff ff       	call   c0102469 <trap_in_kernel>
c0102917:	83 c4 10             	add    $0x10,%esp
c010291a:	85 c0                	test   %eax,%eax
c010291c:	74 17                	je     c0102935 <trap_dispatch+0xe4>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010291e:	ff 75 f4             	pushl  -0xc(%ebp)
c0102921:	68 c8 49 11 c0       	push   $0xc01149c8
c0102926:	68 d0 00 00 00       	push   $0xd0
c010292b:	68 80 49 11 c0       	push   $0xc0114980
c0102930:	e8 b0 db ff ff       	call   c01004e5 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102935:	83 ec 0c             	sub    $0xc,%esp
c0102938:	68 f6 49 11 c0       	push   $0xc01149f6
c010293d:	e8 3d da ff ff       	call   c010037f <cprintf>
c0102942:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102945:	ff 75 f4             	pushl  -0xc(%ebp)
c0102948:	68 0c 4a 11 c0       	push   $0xc0114a0c
c010294d:	68 d3 00 00 00       	push   $0xd3
c0102952:	68 80 49 11 c0       	push   $0xc0114980
c0102957:	e8 89 db ff ff       	call   c01004e5 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c010295c:	e8 d8 b8 00 00       	call   c010e239 <syscall>
        break;
c0102961:	e9 b9 00 00 00       	jmp    c0102a1f <trap_dispatch+0x1ce>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c0102966:	a1 00 51 15 c0       	mov    0xc0155100,%eax
c010296b:	83 c0 01             	add    $0x1,%eax
c010296e:	a3 00 51 15 c0       	mov    %eax,0xc0155100
        assert(current != NULL);
c0102973:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102978:	85 c0                	test   %eax,%eax
c010297a:	75 19                	jne    c0102995 <trap_dispatch+0x144>
c010297c:	68 35 4a 11 c0       	push   $0xc0114a35
c0102981:	68 6b 49 11 c0       	push   $0xc011496b
c0102986:	68 f3 00 00 00       	push   $0xf3
c010298b:	68 80 49 11 c0       	push   $0xc0114980
c0102990:	e8 50 db ff ff       	call   c01004e5 <__panic>
        run_timer_list();
c0102995:	e8 da b0 00 00       	call   c010da74 <run_timer_list>
        break;
c010299a:	e9 80 00 00 00       	jmp    c0102a1f <trap_dispatch+0x1ce>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010299f:	e8 c7 f6 ff ff       	call   c010206b <cons_getc>
c01029a4:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c01029a7:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029ab:	83 ec 0c             	sub    $0xc,%esp
c01029ae:	50                   	push   %eax
c01029af:	e8 e4 d0 00 00       	call   c010fa98 <dev_stdin_write>
c01029b4:	83 c4 10             	add    $0x10,%esp
        }
        break;
c01029b7:	eb 66                	jmp    c0102a1f <trap_dispatch+0x1ce>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c01029b9:	83 ec 04             	sub    $0x4,%esp
c01029bc:	68 45 4a 11 c0       	push   $0xc0114a45
c01029c1:	68 05 01 00 00       	push   $0x105
c01029c6:	68 80 49 11 c0       	push   $0xc0114980
c01029cb:	e8 15 db ff ff       	call   c01004e5 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c01029d0:	83 ec 0c             	sub    $0xc,%esp
c01029d3:	ff 75 08             	pushl  0x8(%ebp)
c01029d6:	e8 a4 fa ff ff       	call   c010247f <print_trapframe>
c01029db:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c01029de:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01029e3:	85 c0                	test   %eax,%eax
c01029e5:	74 1d                	je     c0102a04 <trap_dispatch+0x1b3>
            cprintf("unhandled trap.\n");
c01029e7:	83 ec 0c             	sub    $0xc,%esp
c01029ea:	68 55 4a 11 c0       	push   $0xc0114a55
c01029ef:	e8 8b d9 ff ff       	call   c010037f <cprintf>
c01029f4:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c01029f7:	83 ec 0c             	sub    $0xc,%esp
c01029fa:	6a f7                	push   $0xfffffff7
c01029fc:	e8 b5 97 00 00       	call   c010c1b6 <do_exit>
c0102a01:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a04:	83 ec 04             	sub    $0x4,%esp
c0102a07:	68 66 4a 11 c0       	push   $0xc0114a66
c0102a0c:	68 12 01 00 00       	push   $0x112
c0102a11:	68 80 49 11 c0       	push   $0xc0114980
c0102a16:	e8 ca da ff ff       	call   c01004e5 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a1b:	90                   	nop
c0102a1c:	eb 01                	jmp    c0102a1f <trap_dispatch+0x1ce>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a1e:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a1f:	90                   	nop
c0102a20:	c9                   	leave  
c0102a21:	c3                   	ret    

c0102a22 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a22:	55                   	push   %ebp
c0102a23:	89 e5                	mov    %esp,%ebp
c0102a25:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a28:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a2d:	85 c0                	test   %eax,%eax
c0102a2f:	75 10                	jne    c0102a41 <trap+0x1f>
        trap_dispatch(tf);
c0102a31:	83 ec 0c             	sub    $0xc,%esp
c0102a34:	ff 75 08             	pushl  0x8(%ebp)
c0102a37:	e8 15 fe ff ff       	call   c0102851 <trap_dispatch>
c0102a3c:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102a3f:	eb 73                	jmp    c0102ab4 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a41:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a46:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a49:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a4c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a51:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a54:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a57:	83 ec 0c             	sub    $0xc,%esp
c0102a5a:	ff 75 08             	pushl  0x8(%ebp)
c0102a5d:	e8 07 fa ff ff       	call   c0102469 <trap_in_kernel>
c0102a62:	83 c4 10             	add    $0x10,%esp
c0102a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a68:	83 ec 0c             	sub    $0xc,%esp
c0102a6b:	ff 75 08             	pushl  0x8(%ebp)
c0102a6e:	e8 de fd ff ff       	call   c0102851 <trap_dispatch>
c0102a73:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102a76:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a7e:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a85:	75 2d                	jne    c0102ab4 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102a87:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a8c:	8b 40 44             	mov    0x44(%eax),%eax
c0102a8f:	83 e0 01             	and    $0x1,%eax
c0102a92:	85 c0                	test   %eax,%eax
c0102a94:	74 0d                	je     c0102aa3 <trap+0x81>
                do_exit(-E_KILLED);
c0102a96:	83 ec 0c             	sub    $0xc,%esp
c0102a99:	6a f7                	push   $0xfffffff7
c0102a9b:	e8 16 97 00 00       	call   c010c1b6 <do_exit>
c0102aa0:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102aa3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102aa8:	8b 40 10             	mov    0x10(%eax),%eax
c0102aab:	85 c0                	test   %eax,%eax
c0102aad:	74 05                	je     c0102ab4 <trap+0x92>
                schedule();
c0102aaf:	e8 39 ad 00 00       	call   c010d7ed <schedule>
            }
        }
    }
}
c0102ab4:	90                   	nop
c0102ab5:	c9                   	leave  
c0102ab6:	c3                   	ret    

c0102ab7 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102ab7:	6a 00                	push   $0x0
  pushl $0
c0102ab9:	6a 00                	push   $0x0
  jmp __alltraps
c0102abb:	e9 67 0a 00 00       	jmp    c0103527 <__alltraps>

c0102ac0 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102ac0:	6a 00                	push   $0x0
  pushl $1
c0102ac2:	6a 01                	push   $0x1
  jmp __alltraps
c0102ac4:	e9 5e 0a 00 00       	jmp    c0103527 <__alltraps>

c0102ac9 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102ac9:	6a 00                	push   $0x0
  pushl $2
c0102acb:	6a 02                	push   $0x2
  jmp __alltraps
c0102acd:	e9 55 0a 00 00       	jmp    c0103527 <__alltraps>

c0102ad2 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102ad2:	6a 00                	push   $0x0
  pushl $3
c0102ad4:	6a 03                	push   $0x3
  jmp __alltraps
c0102ad6:	e9 4c 0a 00 00       	jmp    c0103527 <__alltraps>

c0102adb <vector4>:
.globl vector4
vector4:
  pushl $0
c0102adb:	6a 00                	push   $0x0
  pushl $4
c0102add:	6a 04                	push   $0x4
  jmp __alltraps
c0102adf:	e9 43 0a 00 00       	jmp    c0103527 <__alltraps>

c0102ae4 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102ae4:	6a 00                	push   $0x0
  pushl $5
c0102ae6:	6a 05                	push   $0x5
  jmp __alltraps
c0102ae8:	e9 3a 0a 00 00       	jmp    c0103527 <__alltraps>

c0102aed <vector6>:
.globl vector6
vector6:
  pushl $0
c0102aed:	6a 00                	push   $0x0
  pushl $6
c0102aef:	6a 06                	push   $0x6
  jmp __alltraps
c0102af1:	e9 31 0a 00 00       	jmp    c0103527 <__alltraps>

c0102af6 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102af6:	6a 00                	push   $0x0
  pushl $7
c0102af8:	6a 07                	push   $0x7
  jmp __alltraps
c0102afa:	e9 28 0a 00 00       	jmp    c0103527 <__alltraps>

c0102aff <vector8>:
.globl vector8
vector8:
  pushl $8
c0102aff:	6a 08                	push   $0x8
  jmp __alltraps
c0102b01:	e9 21 0a 00 00       	jmp    c0103527 <__alltraps>

c0102b06 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b06:	6a 09                	push   $0x9
  jmp __alltraps
c0102b08:	e9 1a 0a 00 00       	jmp    c0103527 <__alltraps>

c0102b0d <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b0d:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b0f:	e9 13 0a 00 00       	jmp    c0103527 <__alltraps>

c0102b14 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b14:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b16:	e9 0c 0a 00 00       	jmp    c0103527 <__alltraps>

c0102b1b <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b1b:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b1d:	e9 05 0a 00 00       	jmp    c0103527 <__alltraps>

c0102b22 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b22:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b24:	e9 fe 09 00 00       	jmp    c0103527 <__alltraps>

c0102b29 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b29:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b2b:	e9 f7 09 00 00       	jmp    c0103527 <__alltraps>

c0102b30 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b30:	6a 00                	push   $0x0
  pushl $15
c0102b32:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b34:	e9 ee 09 00 00       	jmp    c0103527 <__alltraps>

c0102b39 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b39:	6a 00                	push   $0x0
  pushl $16
c0102b3b:	6a 10                	push   $0x10
  jmp __alltraps
c0102b3d:	e9 e5 09 00 00       	jmp    c0103527 <__alltraps>

c0102b42 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b42:	6a 11                	push   $0x11
  jmp __alltraps
c0102b44:	e9 de 09 00 00       	jmp    c0103527 <__alltraps>

c0102b49 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $18
c0102b4b:	6a 12                	push   $0x12
  jmp __alltraps
c0102b4d:	e9 d5 09 00 00       	jmp    c0103527 <__alltraps>

c0102b52 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $19
c0102b54:	6a 13                	push   $0x13
  jmp __alltraps
c0102b56:	e9 cc 09 00 00       	jmp    c0103527 <__alltraps>

c0102b5b <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $20
c0102b5d:	6a 14                	push   $0x14
  jmp __alltraps
c0102b5f:	e9 c3 09 00 00       	jmp    c0103527 <__alltraps>

c0102b64 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $21
c0102b66:	6a 15                	push   $0x15
  jmp __alltraps
c0102b68:	e9 ba 09 00 00       	jmp    c0103527 <__alltraps>

c0102b6d <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $22
c0102b6f:	6a 16                	push   $0x16
  jmp __alltraps
c0102b71:	e9 b1 09 00 00       	jmp    c0103527 <__alltraps>

c0102b76 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $23
c0102b78:	6a 17                	push   $0x17
  jmp __alltraps
c0102b7a:	e9 a8 09 00 00       	jmp    c0103527 <__alltraps>

c0102b7f <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $24
c0102b81:	6a 18                	push   $0x18
  jmp __alltraps
c0102b83:	e9 9f 09 00 00       	jmp    c0103527 <__alltraps>

c0102b88 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $25
c0102b8a:	6a 19                	push   $0x19
  jmp __alltraps
c0102b8c:	e9 96 09 00 00       	jmp    c0103527 <__alltraps>

c0102b91 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $26
c0102b93:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b95:	e9 8d 09 00 00       	jmp    c0103527 <__alltraps>

c0102b9a <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $27
c0102b9c:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b9e:	e9 84 09 00 00       	jmp    c0103527 <__alltraps>

c0102ba3 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $28
c0102ba5:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102ba7:	e9 7b 09 00 00       	jmp    c0103527 <__alltraps>

c0102bac <vector29>:
.globl vector29
vector29:
  pushl $0
c0102bac:	6a 00                	push   $0x0
  pushl $29
c0102bae:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102bb0:	e9 72 09 00 00       	jmp    c0103527 <__alltraps>

c0102bb5 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102bb5:	6a 00                	push   $0x0
  pushl $30
c0102bb7:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102bb9:	e9 69 09 00 00       	jmp    c0103527 <__alltraps>

c0102bbe <vector31>:
.globl vector31
vector31:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $31
c0102bc0:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102bc2:	e9 60 09 00 00       	jmp    c0103527 <__alltraps>

c0102bc7 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102bc7:	6a 00                	push   $0x0
  pushl $32
c0102bc9:	6a 20                	push   $0x20
  jmp __alltraps
c0102bcb:	e9 57 09 00 00       	jmp    c0103527 <__alltraps>

c0102bd0 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102bd0:	6a 00                	push   $0x0
  pushl $33
c0102bd2:	6a 21                	push   $0x21
  jmp __alltraps
c0102bd4:	e9 4e 09 00 00       	jmp    c0103527 <__alltraps>

c0102bd9 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102bd9:	6a 00                	push   $0x0
  pushl $34
c0102bdb:	6a 22                	push   $0x22
  jmp __alltraps
c0102bdd:	e9 45 09 00 00       	jmp    c0103527 <__alltraps>

c0102be2 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102be2:	6a 00                	push   $0x0
  pushl $35
c0102be4:	6a 23                	push   $0x23
  jmp __alltraps
c0102be6:	e9 3c 09 00 00       	jmp    c0103527 <__alltraps>

c0102beb <vector36>:
.globl vector36
vector36:
  pushl $0
c0102beb:	6a 00                	push   $0x0
  pushl $36
c0102bed:	6a 24                	push   $0x24
  jmp __alltraps
c0102bef:	e9 33 09 00 00       	jmp    c0103527 <__alltraps>

c0102bf4 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bf4:	6a 00                	push   $0x0
  pushl $37
c0102bf6:	6a 25                	push   $0x25
  jmp __alltraps
c0102bf8:	e9 2a 09 00 00       	jmp    c0103527 <__alltraps>

c0102bfd <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $38
c0102bff:	6a 26                	push   $0x26
  jmp __alltraps
c0102c01:	e9 21 09 00 00       	jmp    c0103527 <__alltraps>

c0102c06 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $39
c0102c08:	6a 27                	push   $0x27
  jmp __alltraps
c0102c0a:	e9 18 09 00 00       	jmp    c0103527 <__alltraps>

c0102c0f <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $40
c0102c11:	6a 28                	push   $0x28
  jmp __alltraps
c0102c13:	e9 0f 09 00 00       	jmp    c0103527 <__alltraps>

c0102c18 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $41
c0102c1a:	6a 29                	push   $0x29
  jmp __alltraps
c0102c1c:	e9 06 09 00 00       	jmp    c0103527 <__alltraps>

c0102c21 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $42
c0102c23:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c25:	e9 fd 08 00 00       	jmp    c0103527 <__alltraps>

c0102c2a <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $43
c0102c2c:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c2e:	e9 f4 08 00 00       	jmp    c0103527 <__alltraps>

c0102c33 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $44
c0102c35:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c37:	e9 eb 08 00 00       	jmp    c0103527 <__alltraps>

c0102c3c <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $45
c0102c3e:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c40:	e9 e2 08 00 00       	jmp    c0103527 <__alltraps>

c0102c45 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $46
c0102c47:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c49:	e9 d9 08 00 00       	jmp    c0103527 <__alltraps>

c0102c4e <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $47
c0102c50:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c52:	e9 d0 08 00 00       	jmp    c0103527 <__alltraps>

c0102c57 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $48
c0102c59:	6a 30                	push   $0x30
  jmp __alltraps
c0102c5b:	e9 c7 08 00 00       	jmp    c0103527 <__alltraps>

c0102c60 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $49
c0102c62:	6a 31                	push   $0x31
  jmp __alltraps
c0102c64:	e9 be 08 00 00       	jmp    c0103527 <__alltraps>

c0102c69 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $50
c0102c6b:	6a 32                	push   $0x32
  jmp __alltraps
c0102c6d:	e9 b5 08 00 00       	jmp    c0103527 <__alltraps>

c0102c72 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $51
c0102c74:	6a 33                	push   $0x33
  jmp __alltraps
c0102c76:	e9 ac 08 00 00       	jmp    c0103527 <__alltraps>

c0102c7b <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $52
c0102c7d:	6a 34                	push   $0x34
  jmp __alltraps
c0102c7f:	e9 a3 08 00 00       	jmp    c0103527 <__alltraps>

c0102c84 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $53
c0102c86:	6a 35                	push   $0x35
  jmp __alltraps
c0102c88:	e9 9a 08 00 00       	jmp    c0103527 <__alltraps>

c0102c8d <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $54
c0102c8f:	6a 36                	push   $0x36
  jmp __alltraps
c0102c91:	e9 91 08 00 00       	jmp    c0103527 <__alltraps>

c0102c96 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $55
c0102c98:	6a 37                	push   $0x37
  jmp __alltraps
c0102c9a:	e9 88 08 00 00       	jmp    c0103527 <__alltraps>

c0102c9f <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $56
c0102ca1:	6a 38                	push   $0x38
  jmp __alltraps
c0102ca3:	e9 7f 08 00 00       	jmp    c0103527 <__alltraps>

c0102ca8 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $57
c0102caa:	6a 39                	push   $0x39
  jmp __alltraps
c0102cac:	e9 76 08 00 00       	jmp    c0103527 <__alltraps>

c0102cb1 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $58
c0102cb3:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102cb5:	e9 6d 08 00 00       	jmp    c0103527 <__alltraps>

c0102cba <vector59>:
.globl vector59
vector59:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $59
c0102cbc:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102cbe:	e9 64 08 00 00       	jmp    c0103527 <__alltraps>

c0102cc3 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $60
c0102cc5:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102cc7:	e9 5b 08 00 00       	jmp    c0103527 <__alltraps>

c0102ccc <vector61>:
.globl vector61
vector61:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $61
c0102cce:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102cd0:	e9 52 08 00 00       	jmp    c0103527 <__alltraps>

c0102cd5 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $62
c0102cd7:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102cd9:	e9 49 08 00 00       	jmp    c0103527 <__alltraps>

c0102cde <vector63>:
.globl vector63
vector63:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $63
c0102ce0:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102ce2:	e9 40 08 00 00       	jmp    c0103527 <__alltraps>

c0102ce7 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $64
c0102ce9:	6a 40                	push   $0x40
  jmp __alltraps
c0102ceb:	e9 37 08 00 00       	jmp    c0103527 <__alltraps>

c0102cf0 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $65
c0102cf2:	6a 41                	push   $0x41
  jmp __alltraps
c0102cf4:	e9 2e 08 00 00       	jmp    c0103527 <__alltraps>

c0102cf9 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $66
c0102cfb:	6a 42                	push   $0x42
  jmp __alltraps
c0102cfd:	e9 25 08 00 00       	jmp    c0103527 <__alltraps>

c0102d02 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $67
c0102d04:	6a 43                	push   $0x43
  jmp __alltraps
c0102d06:	e9 1c 08 00 00       	jmp    c0103527 <__alltraps>

c0102d0b <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $68
c0102d0d:	6a 44                	push   $0x44
  jmp __alltraps
c0102d0f:	e9 13 08 00 00       	jmp    c0103527 <__alltraps>

c0102d14 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $69
c0102d16:	6a 45                	push   $0x45
  jmp __alltraps
c0102d18:	e9 0a 08 00 00       	jmp    c0103527 <__alltraps>

c0102d1d <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $70
c0102d1f:	6a 46                	push   $0x46
  jmp __alltraps
c0102d21:	e9 01 08 00 00       	jmp    c0103527 <__alltraps>

c0102d26 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $71
c0102d28:	6a 47                	push   $0x47
  jmp __alltraps
c0102d2a:	e9 f8 07 00 00       	jmp    c0103527 <__alltraps>

c0102d2f <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $72
c0102d31:	6a 48                	push   $0x48
  jmp __alltraps
c0102d33:	e9 ef 07 00 00       	jmp    c0103527 <__alltraps>

c0102d38 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $73
c0102d3a:	6a 49                	push   $0x49
  jmp __alltraps
c0102d3c:	e9 e6 07 00 00       	jmp    c0103527 <__alltraps>

c0102d41 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $74
c0102d43:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d45:	e9 dd 07 00 00       	jmp    c0103527 <__alltraps>

c0102d4a <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $75
c0102d4c:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d4e:	e9 d4 07 00 00       	jmp    c0103527 <__alltraps>

c0102d53 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $76
c0102d55:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d57:	e9 cb 07 00 00       	jmp    c0103527 <__alltraps>

c0102d5c <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $77
c0102d5e:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d60:	e9 c2 07 00 00       	jmp    c0103527 <__alltraps>

c0102d65 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $78
c0102d67:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d69:	e9 b9 07 00 00       	jmp    c0103527 <__alltraps>

c0102d6e <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $79
c0102d70:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d72:	e9 b0 07 00 00       	jmp    c0103527 <__alltraps>

c0102d77 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $80
c0102d79:	6a 50                	push   $0x50
  jmp __alltraps
c0102d7b:	e9 a7 07 00 00       	jmp    c0103527 <__alltraps>

c0102d80 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $81
c0102d82:	6a 51                	push   $0x51
  jmp __alltraps
c0102d84:	e9 9e 07 00 00       	jmp    c0103527 <__alltraps>

c0102d89 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $82
c0102d8b:	6a 52                	push   $0x52
  jmp __alltraps
c0102d8d:	e9 95 07 00 00       	jmp    c0103527 <__alltraps>

c0102d92 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $83
c0102d94:	6a 53                	push   $0x53
  jmp __alltraps
c0102d96:	e9 8c 07 00 00       	jmp    c0103527 <__alltraps>

c0102d9b <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $84
c0102d9d:	6a 54                	push   $0x54
  jmp __alltraps
c0102d9f:	e9 83 07 00 00       	jmp    c0103527 <__alltraps>

c0102da4 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $85
c0102da6:	6a 55                	push   $0x55
  jmp __alltraps
c0102da8:	e9 7a 07 00 00       	jmp    c0103527 <__alltraps>

c0102dad <vector86>:
.globl vector86
vector86:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $86
c0102daf:	6a 56                	push   $0x56
  jmp __alltraps
c0102db1:	e9 71 07 00 00       	jmp    c0103527 <__alltraps>

c0102db6 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $87
c0102db8:	6a 57                	push   $0x57
  jmp __alltraps
c0102dba:	e9 68 07 00 00       	jmp    c0103527 <__alltraps>

c0102dbf <vector88>:
.globl vector88
vector88:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $88
c0102dc1:	6a 58                	push   $0x58
  jmp __alltraps
c0102dc3:	e9 5f 07 00 00       	jmp    c0103527 <__alltraps>

c0102dc8 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $89
c0102dca:	6a 59                	push   $0x59
  jmp __alltraps
c0102dcc:	e9 56 07 00 00       	jmp    c0103527 <__alltraps>

c0102dd1 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $90
c0102dd3:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102dd5:	e9 4d 07 00 00       	jmp    c0103527 <__alltraps>

c0102dda <vector91>:
.globl vector91
vector91:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $91
c0102ddc:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102dde:	e9 44 07 00 00       	jmp    c0103527 <__alltraps>

c0102de3 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $92
c0102de5:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102de7:	e9 3b 07 00 00       	jmp    c0103527 <__alltraps>

c0102dec <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $93
c0102dee:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102df0:	e9 32 07 00 00       	jmp    c0103527 <__alltraps>

c0102df5 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $94
c0102df7:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102df9:	e9 29 07 00 00       	jmp    c0103527 <__alltraps>

c0102dfe <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $95
c0102e00:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e02:	e9 20 07 00 00       	jmp    c0103527 <__alltraps>

c0102e07 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $96
c0102e09:	6a 60                	push   $0x60
  jmp __alltraps
c0102e0b:	e9 17 07 00 00       	jmp    c0103527 <__alltraps>

c0102e10 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $97
c0102e12:	6a 61                	push   $0x61
  jmp __alltraps
c0102e14:	e9 0e 07 00 00       	jmp    c0103527 <__alltraps>

c0102e19 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $98
c0102e1b:	6a 62                	push   $0x62
  jmp __alltraps
c0102e1d:	e9 05 07 00 00       	jmp    c0103527 <__alltraps>

c0102e22 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $99
c0102e24:	6a 63                	push   $0x63
  jmp __alltraps
c0102e26:	e9 fc 06 00 00       	jmp    c0103527 <__alltraps>

c0102e2b <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $100
c0102e2d:	6a 64                	push   $0x64
  jmp __alltraps
c0102e2f:	e9 f3 06 00 00       	jmp    c0103527 <__alltraps>

c0102e34 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $101
c0102e36:	6a 65                	push   $0x65
  jmp __alltraps
c0102e38:	e9 ea 06 00 00       	jmp    c0103527 <__alltraps>

c0102e3d <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $102
c0102e3f:	6a 66                	push   $0x66
  jmp __alltraps
c0102e41:	e9 e1 06 00 00       	jmp    c0103527 <__alltraps>

c0102e46 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $103
c0102e48:	6a 67                	push   $0x67
  jmp __alltraps
c0102e4a:	e9 d8 06 00 00       	jmp    c0103527 <__alltraps>

c0102e4f <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $104
c0102e51:	6a 68                	push   $0x68
  jmp __alltraps
c0102e53:	e9 cf 06 00 00       	jmp    c0103527 <__alltraps>

c0102e58 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $105
c0102e5a:	6a 69                	push   $0x69
  jmp __alltraps
c0102e5c:	e9 c6 06 00 00       	jmp    c0103527 <__alltraps>

c0102e61 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $106
c0102e63:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e65:	e9 bd 06 00 00       	jmp    c0103527 <__alltraps>

c0102e6a <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $107
c0102e6c:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e6e:	e9 b4 06 00 00       	jmp    c0103527 <__alltraps>

c0102e73 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $108
c0102e75:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e77:	e9 ab 06 00 00       	jmp    c0103527 <__alltraps>

c0102e7c <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $109
c0102e7e:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e80:	e9 a2 06 00 00       	jmp    c0103527 <__alltraps>

c0102e85 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $110
c0102e87:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e89:	e9 99 06 00 00       	jmp    c0103527 <__alltraps>

c0102e8e <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $111
c0102e90:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e92:	e9 90 06 00 00       	jmp    c0103527 <__alltraps>

c0102e97 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $112
c0102e99:	6a 70                	push   $0x70
  jmp __alltraps
c0102e9b:	e9 87 06 00 00       	jmp    c0103527 <__alltraps>

c0102ea0 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $113
c0102ea2:	6a 71                	push   $0x71
  jmp __alltraps
c0102ea4:	e9 7e 06 00 00       	jmp    c0103527 <__alltraps>

c0102ea9 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $114
c0102eab:	6a 72                	push   $0x72
  jmp __alltraps
c0102ead:	e9 75 06 00 00       	jmp    c0103527 <__alltraps>

c0102eb2 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $115
c0102eb4:	6a 73                	push   $0x73
  jmp __alltraps
c0102eb6:	e9 6c 06 00 00       	jmp    c0103527 <__alltraps>

c0102ebb <vector116>:
.globl vector116
vector116:
  pushl $0
c0102ebb:	6a 00                	push   $0x0
  pushl $116
c0102ebd:	6a 74                	push   $0x74
  jmp __alltraps
c0102ebf:	e9 63 06 00 00       	jmp    c0103527 <__alltraps>

c0102ec4 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102ec4:	6a 00                	push   $0x0
  pushl $117
c0102ec6:	6a 75                	push   $0x75
  jmp __alltraps
c0102ec8:	e9 5a 06 00 00       	jmp    c0103527 <__alltraps>

c0102ecd <vector118>:
.globl vector118
vector118:
  pushl $0
c0102ecd:	6a 00                	push   $0x0
  pushl $118
c0102ecf:	6a 76                	push   $0x76
  jmp __alltraps
c0102ed1:	e9 51 06 00 00       	jmp    c0103527 <__alltraps>

c0102ed6 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $119
c0102ed8:	6a 77                	push   $0x77
  jmp __alltraps
c0102eda:	e9 48 06 00 00       	jmp    c0103527 <__alltraps>

c0102edf <vector120>:
.globl vector120
vector120:
  pushl $0
c0102edf:	6a 00                	push   $0x0
  pushl $120
c0102ee1:	6a 78                	push   $0x78
  jmp __alltraps
c0102ee3:	e9 3f 06 00 00       	jmp    c0103527 <__alltraps>

c0102ee8 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102ee8:	6a 00                	push   $0x0
  pushl $121
c0102eea:	6a 79                	push   $0x79
  jmp __alltraps
c0102eec:	e9 36 06 00 00       	jmp    c0103527 <__alltraps>

c0102ef1 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ef1:	6a 00                	push   $0x0
  pushl $122
c0102ef3:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ef5:	e9 2d 06 00 00       	jmp    c0103527 <__alltraps>

c0102efa <vector123>:
.globl vector123
vector123:
  pushl $0
c0102efa:	6a 00                	push   $0x0
  pushl $123
c0102efc:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102efe:	e9 24 06 00 00       	jmp    c0103527 <__alltraps>

c0102f03 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $124
c0102f05:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f07:	e9 1b 06 00 00       	jmp    c0103527 <__alltraps>

c0102f0c <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f0c:	6a 00                	push   $0x0
  pushl $125
c0102f0e:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f10:	e9 12 06 00 00       	jmp    c0103527 <__alltraps>

c0102f15 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f15:	6a 00                	push   $0x0
  pushl $126
c0102f17:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f19:	e9 09 06 00 00       	jmp    c0103527 <__alltraps>

c0102f1e <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f1e:	6a 00                	push   $0x0
  pushl $127
c0102f20:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f22:	e9 00 06 00 00       	jmp    c0103527 <__alltraps>

c0102f27 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $128
c0102f29:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f2e:	e9 f4 05 00 00       	jmp    c0103527 <__alltraps>

c0102f33 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f33:	6a 00                	push   $0x0
  pushl $129
c0102f35:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f3a:	e9 e8 05 00 00       	jmp    c0103527 <__alltraps>

c0102f3f <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $130
c0102f41:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f46:	e9 dc 05 00 00       	jmp    c0103527 <__alltraps>

c0102f4b <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $131
c0102f4d:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f52:	e9 d0 05 00 00       	jmp    c0103527 <__alltraps>

c0102f57 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f57:	6a 00                	push   $0x0
  pushl $132
c0102f59:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f5e:	e9 c4 05 00 00       	jmp    c0103527 <__alltraps>

c0102f63 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $133
c0102f65:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f6a:	e9 b8 05 00 00       	jmp    c0103527 <__alltraps>

c0102f6f <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $134
c0102f71:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f76:	e9 ac 05 00 00       	jmp    c0103527 <__alltraps>

c0102f7b <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f7b:	6a 00                	push   $0x0
  pushl $135
c0102f7d:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f82:	e9 a0 05 00 00       	jmp    c0103527 <__alltraps>

c0102f87 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $136
c0102f89:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f8e:	e9 94 05 00 00       	jmp    c0103527 <__alltraps>

c0102f93 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $137
c0102f95:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f9a:	e9 88 05 00 00       	jmp    c0103527 <__alltraps>

c0102f9f <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f9f:	6a 00                	push   $0x0
  pushl $138
c0102fa1:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102fa6:	e9 7c 05 00 00       	jmp    c0103527 <__alltraps>

c0102fab <vector139>:
.globl vector139
vector139:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $139
c0102fad:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102fb2:	e9 70 05 00 00       	jmp    c0103527 <__alltraps>

c0102fb7 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102fb7:	6a 00                	push   $0x0
  pushl $140
c0102fb9:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102fbe:	e9 64 05 00 00       	jmp    c0103527 <__alltraps>

c0102fc3 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102fc3:	6a 00                	push   $0x0
  pushl $141
c0102fc5:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fca:	e9 58 05 00 00       	jmp    c0103527 <__alltraps>

c0102fcf <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fcf:	6a 00                	push   $0x0
  pushl $142
c0102fd1:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fd6:	e9 4c 05 00 00       	jmp    c0103527 <__alltraps>

c0102fdb <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fdb:	6a 00                	push   $0x0
  pushl $143
c0102fdd:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fe2:	e9 40 05 00 00       	jmp    c0103527 <__alltraps>

c0102fe7 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $144
c0102fe9:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fee:	e9 34 05 00 00       	jmp    c0103527 <__alltraps>

c0102ff3 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $145
c0102ff5:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102ffa:	e9 28 05 00 00       	jmp    c0103527 <__alltraps>

c0102fff <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fff:	6a 00                	push   $0x0
  pushl $146
c0103001:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103006:	e9 1c 05 00 00       	jmp    c0103527 <__alltraps>

c010300b <vector147>:
.globl vector147
vector147:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $147
c010300d:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103012:	e9 10 05 00 00       	jmp    c0103527 <__alltraps>

c0103017 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $148
c0103019:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010301e:	e9 04 05 00 00       	jmp    c0103527 <__alltraps>

c0103023 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103023:	6a 00                	push   $0x0
  pushl $149
c0103025:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010302a:	e9 f8 04 00 00       	jmp    c0103527 <__alltraps>

c010302f <vector150>:
.globl vector150
vector150:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $150
c0103031:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103036:	e9 ec 04 00 00       	jmp    c0103527 <__alltraps>

c010303b <vector151>:
.globl vector151
vector151:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $151
c010303d:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103042:	e9 e0 04 00 00       	jmp    c0103527 <__alltraps>

c0103047 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103047:	6a 00                	push   $0x0
  pushl $152
c0103049:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010304e:	e9 d4 04 00 00       	jmp    c0103527 <__alltraps>

c0103053 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $153
c0103055:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010305a:	e9 c8 04 00 00       	jmp    c0103527 <__alltraps>

c010305f <vector154>:
.globl vector154
vector154:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $154
c0103061:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103066:	e9 bc 04 00 00       	jmp    c0103527 <__alltraps>

c010306b <vector155>:
.globl vector155
vector155:
  pushl $0
c010306b:	6a 00                	push   $0x0
  pushl $155
c010306d:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103072:	e9 b0 04 00 00       	jmp    c0103527 <__alltraps>

c0103077 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $156
c0103079:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010307e:	e9 a4 04 00 00       	jmp    c0103527 <__alltraps>

c0103083 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103083:	6a 00                	push   $0x0
  pushl $157
c0103085:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010308a:	e9 98 04 00 00       	jmp    c0103527 <__alltraps>

c010308f <vector158>:
.globl vector158
vector158:
  pushl $0
c010308f:	6a 00                	push   $0x0
  pushl $158
c0103091:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103096:	e9 8c 04 00 00       	jmp    c0103527 <__alltraps>

c010309b <vector159>:
.globl vector159
vector159:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $159
c010309d:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01030a2:	e9 80 04 00 00       	jmp    c0103527 <__alltraps>

c01030a7 <vector160>:
.globl vector160
vector160:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $160
c01030a9:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01030ae:	e9 74 04 00 00       	jmp    c0103527 <__alltraps>

c01030b3 <vector161>:
.globl vector161
vector161:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $161
c01030b5:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01030ba:	e9 68 04 00 00       	jmp    c0103527 <__alltraps>

c01030bf <vector162>:
.globl vector162
vector162:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $162
c01030c1:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030c6:	e9 5c 04 00 00       	jmp    c0103527 <__alltraps>

c01030cb <vector163>:
.globl vector163
vector163:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $163
c01030cd:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030d2:	e9 50 04 00 00       	jmp    c0103527 <__alltraps>

c01030d7 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $164
c01030d9:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030de:	e9 44 04 00 00       	jmp    c0103527 <__alltraps>

c01030e3 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $165
c01030e5:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030ea:	e9 38 04 00 00       	jmp    c0103527 <__alltraps>

c01030ef <vector166>:
.globl vector166
vector166:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $166
c01030f1:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030f6:	e9 2c 04 00 00       	jmp    c0103527 <__alltraps>

c01030fb <vector167>:
.globl vector167
vector167:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $167
c01030fd:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103102:	e9 20 04 00 00       	jmp    c0103527 <__alltraps>

c0103107 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $168
c0103109:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010310e:	e9 14 04 00 00       	jmp    c0103527 <__alltraps>

c0103113 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $169
c0103115:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010311a:	e9 08 04 00 00       	jmp    c0103527 <__alltraps>

c010311f <vector170>:
.globl vector170
vector170:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $170
c0103121:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103126:	e9 fc 03 00 00       	jmp    c0103527 <__alltraps>

c010312b <vector171>:
.globl vector171
vector171:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $171
c010312d:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103132:	e9 f0 03 00 00       	jmp    c0103527 <__alltraps>

c0103137 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $172
c0103139:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010313e:	e9 e4 03 00 00       	jmp    c0103527 <__alltraps>

c0103143 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $173
c0103145:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010314a:	e9 d8 03 00 00       	jmp    c0103527 <__alltraps>

c010314f <vector174>:
.globl vector174
vector174:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $174
c0103151:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103156:	e9 cc 03 00 00       	jmp    c0103527 <__alltraps>

c010315b <vector175>:
.globl vector175
vector175:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $175
c010315d:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103162:	e9 c0 03 00 00       	jmp    c0103527 <__alltraps>

c0103167 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $176
c0103169:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010316e:	e9 b4 03 00 00       	jmp    c0103527 <__alltraps>

c0103173 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $177
c0103175:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010317a:	e9 a8 03 00 00       	jmp    c0103527 <__alltraps>

c010317f <vector178>:
.globl vector178
vector178:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $178
c0103181:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103186:	e9 9c 03 00 00       	jmp    c0103527 <__alltraps>

c010318b <vector179>:
.globl vector179
vector179:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $179
c010318d:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103192:	e9 90 03 00 00       	jmp    c0103527 <__alltraps>

c0103197 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $180
c0103199:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010319e:	e9 84 03 00 00       	jmp    c0103527 <__alltraps>

c01031a3 <vector181>:
.globl vector181
vector181:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $181
c01031a5:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01031aa:	e9 78 03 00 00       	jmp    c0103527 <__alltraps>

c01031af <vector182>:
.globl vector182
vector182:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $182
c01031b1:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01031b6:	e9 6c 03 00 00       	jmp    c0103527 <__alltraps>

c01031bb <vector183>:
.globl vector183
vector183:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $183
c01031bd:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01031c2:	e9 60 03 00 00       	jmp    c0103527 <__alltraps>

c01031c7 <vector184>:
.globl vector184
vector184:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $184
c01031c9:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031ce:	e9 54 03 00 00       	jmp    c0103527 <__alltraps>

c01031d3 <vector185>:
.globl vector185
vector185:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $185
c01031d5:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031da:	e9 48 03 00 00       	jmp    c0103527 <__alltraps>

c01031df <vector186>:
.globl vector186
vector186:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $186
c01031e1:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031e6:	e9 3c 03 00 00       	jmp    c0103527 <__alltraps>

c01031eb <vector187>:
.globl vector187
vector187:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $187
c01031ed:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031f2:	e9 30 03 00 00       	jmp    c0103527 <__alltraps>

c01031f7 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $188
c01031f9:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031fe:	e9 24 03 00 00       	jmp    c0103527 <__alltraps>

c0103203 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $189
c0103205:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010320a:	e9 18 03 00 00       	jmp    c0103527 <__alltraps>

c010320f <vector190>:
.globl vector190
vector190:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $190
c0103211:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103216:	e9 0c 03 00 00       	jmp    c0103527 <__alltraps>

c010321b <vector191>:
.globl vector191
vector191:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $191
c010321d:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103222:	e9 00 03 00 00       	jmp    c0103527 <__alltraps>

c0103227 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $192
c0103229:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010322e:	e9 f4 02 00 00       	jmp    c0103527 <__alltraps>

c0103233 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $193
c0103235:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010323a:	e9 e8 02 00 00       	jmp    c0103527 <__alltraps>

c010323f <vector194>:
.globl vector194
vector194:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $194
c0103241:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103246:	e9 dc 02 00 00       	jmp    c0103527 <__alltraps>

c010324b <vector195>:
.globl vector195
vector195:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $195
c010324d:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103252:	e9 d0 02 00 00       	jmp    c0103527 <__alltraps>

c0103257 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $196
c0103259:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010325e:	e9 c4 02 00 00       	jmp    c0103527 <__alltraps>

c0103263 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $197
c0103265:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010326a:	e9 b8 02 00 00       	jmp    c0103527 <__alltraps>

c010326f <vector198>:
.globl vector198
vector198:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $198
c0103271:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103276:	e9 ac 02 00 00       	jmp    c0103527 <__alltraps>

c010327b <vector199>:
.globl vector199
vector199:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $199
c010327d:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103282:	e9 a0 02 00 00       	jmp    c0103527 <__alltraps>

c0103287 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $200
c0103289:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010328e:	e9 94 02 00 00       	jmp    c0103527 <__alltraps>

c0103293 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $201
c0103295:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010329a:	e9 88 02 00 00       	jmp    c0103527 <__alltraps>

c010329f <vector202>:
.globl vector202
vector202:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $202
c01032a1:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01032a6:	e9 7c 02 00 00       	jmp    c0103527 <__alltraps>

c01032ab <vector203>:
.globl vector203
vector203:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $203
c01032ad:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c01032b2:	e9 70 02 00 00       	jmp    c0103527 <__alltraps>

c01032b7 <vector204>:
.globl vector204
vector204:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $204
c01032b9:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01032be:	e9 64 02 00 00       	jmp    c0103527 <__alltraps>

c01032c3 <vector205>:
.globl vector205
vector205:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $205
c01032c5:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032ca:	e9 58 02 00 00       	jmp    c0103527 <__alltraps>

c01032cf <vector206>:
.globl vector206
vector206:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $206
c01032d1:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032d6:	e9 4c 02 00 00       	jmp    c0103527 <__alltraps>

c01032db <vector207>:
.globl vector207
vector207:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $207
c01032dd:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032e2:	e9 40 02 00 00       	jmp    c0103527 <__alltraps>

c01032e7 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $208
c01032e9:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032ee:	e9 34 02 00 00       	jmp    c0103527 <__alltraps>

c01032f3 <vector209>:
.globl vector209
vector209:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $209
c01032f5:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032fa:	e9 28 02 00 00       	jmp    c0103527 <__alltraps>

c01032ff <vector210>:
.globl vector210
vector210:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $210
c0103301:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103306:	e9 1c 02 00 00       	jmp    c0103527 <__alltraps>

c010330b <vector211>:
.globl vector211
vector211:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $211
c010330d:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103312:	e9 10 02 00 00       	jmp    c0103527 <__alltraps>

c0103317 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $212
c0103319:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010331e:	e9 04 02 00 00       	jmp    c0103527 <__alltraps>

c0103323 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $213
c0103325:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010332a:	e9 f8 01 00 00       	jmp    c0103527 <__alltraps>

c010332f <vector214>:
.globl vector214
vector214:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $214
c0103331:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103336:	e9 ec 01 00 00       	jmp    c0103527 <__alltraps>

c010333b <vector215>:
.globl vector215
vector215:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $215
c010333d:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103342:	e9 e0 01 00 00       	jmp    c0103527 <__alltraps>

c0103347 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $216
c0103349:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010334e:	e9 d4 01 00 00       	jmp    c0103527 <__alltraps>

c0103353 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $217
c0103355:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010335a:	e9 c8 01 00 00       	jmp    c0103527 <__alltraps>

c010335f <vector218>:
.globl vector218
vector218:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $218
c0103361:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103366:	e9 bc 01 00 00       	jmp    c0103527 <__alltraps>

c010336b <vector219>:
.globl vector219
vector219:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $219
c010336d:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103372:	e9 b0 01 00 00       	jmp    c0103527 <__alltraps>

c0103377 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $220
c0103379:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010337e:	e9 a4 01 00 00       	jmp    c0103527 <__alltraps>

c0103383 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $221
c0103385:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010338a:	e9 98 01 00 00       	jmp    c0103527 <__alltraps>

c010338f <vector222>:
.globl vector222
vector222:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $222
c0103391:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103396:	e9 8c 01 00 00       	jmp    c0103527 <__alltraps>

c010339b <vector223>:
.globl vector223
vector223:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $223
c010339d:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01033a2:	e9 80 01 00 00       	jmp    c0103527 <__alltraps>

c01033a7 <vector224>:
.globl vector224
vector224:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $224
c01033a9:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01033ae:	e9 74 01 00 00       	jmp    c0103527 <__alltraps>

c01033b3 <vector225>:
.globl vector225
vector225:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $225
c01033b5:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01033ba:	e9 68 01 00 00       	jmp    c0103527 <__alltraps>

c01033bf <vector226>:
.globl vector226
vector226:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $226
c01033c1:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033c6:	e9 5c 01 00 00       	jmp    c0103527 <__alltraps>

c01033cb <vector227>:
.globl vector227
vector227:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $227
c01033cd:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033d2:	e9 50 01 00 00       	jmp    c0103527 <__alltraps>

c01033d7 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $228
c01033d9:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033de:	e9 44 01 00 00       	jmp    c0103527 <__alltraps>

c01033e3 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $229
c01033e5:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033ea:	e9 38 01 00 00       	jmp    c0103527 <__alltraps>

c01033ef <vector230>:
.globl vector230
vector230:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $230
c01033f1:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033f6:	e9 2c 01 00 00       	jmp    c0103527 <__alltraps>

c01033fb <vector231>:
.globl vector231
vector231:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $231
c01033fd:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103402:	e9 20 01 00 00       	jmp    c0103527 <__alltraps>

c0103407 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $232
c0103409:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010340e:	e9 14 01 00 00       	jmp    c0103527 <__alltraps>

c0103413 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $233
c0103415:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010341a:	e9 08 01 00 00       	jmp    c0103527 <__alltraps>

c010341f <vector234>:
.globl vector234
vector234:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $234
c0103421:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103426:	e9 fc 00 00 00       	jmp    c0103527 <__alltraps>

c010342b <vector235>:
.globl vector235
vector235:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $235
c010342d:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103432:	e9 f0 00 00 00       	jmp    c0103527 <__alltraps>

c0103437 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $236
c0103439:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010343e:	e9 e4 00 00 00       	jmp    c0103527 <__alltraps>

c0103443 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $237
c0103445:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010344a:	e9 d8 00 00 00       	jmp    c0103527 <__alltraps>

c010344f <vector238>:
.globl vector238
vector238:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $238
c0103451:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103456:	e9 cc 00 00 00       	jmp    c0103527 <__alltraps>

c010345b <vector239>:
.globl vector239
vector239:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $239
c010345d:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103462:	e9 c0 00 00 00       	jmp    c0103527 <__alltraps>

c0103467 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $240
c0103469:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010346e:	e9 b4 00 00 00       	jmp    c0103527 <__alltraps>

c0103473 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $241
c0103475:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010347a:	e9 a8 00 00 00       	jmp    c0103527 <__alltraps>

c010347f <vector242>:
.globl vector242
vector242:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $242
c0103481:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103486:	e9 9c 00 00 00       	jmp    c0103527 <__alltraps>

c010348b <vector243>:
.globl vector243
vector243:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $243
c010348d:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103492:	e9 90 00 00 00       	jmp    c0103527 <__alltraps>

c0103497 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $244
c0103499:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010349e:	e9 84 00 00 00       	jmp    c0103527 <__alltraps>

c01034a3 <vector245>:
.globl vector245
vector245:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $245
c01034a5:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01034aa:	e9 78 00 00 00       	jmp    c0103527 <__alltraps>

c01034af <vector246>:
.globl vector246
vector246:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $246
c01034b1:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01034b6:	e9 6c 00 00 00       	jmp    c0103527 <__alltraps>

c01034bb <vector247>:
.globl vector247
vector247:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $247
c01034bd:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01034c2:	e9 60 00 00 00       	jmp    c0103527 <__alltraps>

c01034c7 <vector248>:
.globl vector248
vector248:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $248
c01034c9:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034ce:	e9 54 00 00 00       	jmp    c0103527 <__alltraps>

c01034d3 <vector249>:
.globl vector249
vector249:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $249
c01034d5:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034da:	e9 48 00 00 00       	jmp    c0103527 <__alltraps>

c01034df <vector250>:
.globl vector250
vector250:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $250
c01034e1:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034e6:	e9 3c 00 00 00       	jmp    c0103527 <__alltraps>

c01034eb <vector251>:
.globl vector251
vector251:
  pushl $0
c01034eb:	6a 00                	push   $0x0
  pushl $251
c01034ed:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034f2:	e9 30 00 00 00       	jmp    c0103527 <__alltraps>

c01034f7 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034f7:	6a 00                	push   $0x0
  pushl $252
c01034f9:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034fe:	e9 24 00 00 00       	jmp    c0103527 <__alltraps>

c0103503 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103503:	6a 00                	push   $0x0
  pushl $253
c0103505:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010350a:	e9 18 00 00 00       	jmp    c0103527 <__alltraps>

c010350f <vector254>:
.globl vector254
vector254:
  pushl $0
c010350f:	6a 00                	push   $0x0
  pushl $254
c0103511:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103516:	e9 0c 00 00 00       	jmp    c0103527 <__alltraps>

c010351b <vector255>:
.globl vector255
vector255:
  pushl $0
c010351b:	6a 00                	push   $0x0
  pushl $255
c010351d:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103522:	e9 00 00 00 00       	jmp    c0103527 <__alltraps>

c0103527 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103527:	1e                   	push   %ds
    pushl %es
c0103528:	06                   	push   %es
    pushl %fs
c0103529:	0f a0                	push   %fs
    pushl %gs
c010352b:	0f a8                	push   %gs
    pushal
c010352d:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c010352e:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103533:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103535:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103537:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103538:	e8 e5 f4 ff ff       	call   c0102a22 <trap>

    # pop the pushed stack pointer
    popl %esp
c010353d:	5c                   	pop    %esp

c010353e <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c010353e:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c010353f:	0f a9                	pop    %gs
    popl %fs
c0103541:	0f a1                	pop    %fs
    popl %es
c0103543:	07                   	pop    %es
    popl %ds
c0103544:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0103545:	83 c4 08             	add    $0x8,%esp
    iret
c0103548:	cf                   	iret   

c0103549 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103549:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c010354d:	eb ef                	jmp    c010353e <__trapret>

c010354f <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c010354f:	55                   	push   %ebp
c0103550:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0103552:	8b 45 08             	mov    0x8(%ebp),%eax
c0103555:	8b 40 18             	mov    0x18(%eax),%eax
}
c0103558:	5d                   	pop    %ebp
c0103559:	c3                   	ret    

c010355a <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c010355a:	55                   	push   %ebp
c010355b:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c010355d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103560:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103563:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103566:	90                   	nop
c0103567:	5d                   	pop    %ebp
c0103568:	c3                   	ret    

c0103569 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0103569:	55                   	push   %ebp
c010356a:	89 e5                	mov    %esp,%ebp
c010356c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010356f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103572:	c1 e8 0c             	shr    $0xc,%eax
c0103575:	89 c2                	mov    %eax,%edx
c0103577:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010357c:	39 c2                	cmp    %eax,%edx
c010357e:	72 14                	jb     c0103594 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0103580:	83 ec 04             	sub    $0x4,%esp
c0103583:	68 30 4c 11 c0       	push   $0xc0114c30
c0103588:	6a 5e                	push   $0x5e
c010358a:	68 4f 4c 11 c0       	push   $0xc0114c4f
c010358f:	e8 51 cf ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0103594:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c010359a:	8b 45 08             	mov    0x8(%ebp),%eax
c010359d:	c1 e8 0c             	shr    $0xc,%eax
c01035a0:	89 c2                	mov    %eax,%edx
c01035a2:	89 d0                	mov    %edx,%eax
c01035a4:	c1 e0 03             	shl    $0x3,%eax
c01035a7:	01 d0                	add    %edx,%eax
c01035a9:	c1 e0 02             	shl    $0x2,%eax
c01035ac:	01 c8                	add    %ecx,%eax
}
c01035ae:	c9                   	leave  
c01035af:	c3                   	ret    

c01035b0 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c01035b0:	55                   	push   %ebp
c01035b1:	89 e5                	mov    %esp,%ebp
c01035b3:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01035b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01035b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01035be:	83 ec 0c             	sub    $0xc,%esp
c01035c1:	50                   	push   %eax
c01035c2:	e8 a2 ff ff ff       	call   c0103569 <pa2page>
c01035c7:	83 c4 10             	add    $0x10,%esp
}
c01035ca:	c9                   	leave  
c01035cb:	c3                   	ret    

c01035cc <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c01035cc:	55                   	push   %ebp
c01035cd:	89 e5                	mov    %esp,%ebp
c01035cf:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c01035d2:	83 ec 0c             	sub    $0xc,%esp
c01035d5:	6a 2c                	push   $0x2c
c01035d7:	e8 74 22 00 00       	call   c0105850 <kmalloc>
c01035dc:	83 c4 10             	add    $0x10,%esp
c01035df:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01035e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01035e6:	74 7f                	je     c0103667 <mm_create+0x9b>
        list_init(&(mm->mmap_list));
c01035e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035f4:	89 50 04             	mov    %edx,0x4(%eax)
c01035f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035fa:	8b 50 04             	mov    0x4(%eax),%edx
c01035fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103600:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103602:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103605:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010360c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010360f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0103616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103619:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0103620:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c0103625:	85 c0                	test   %eax,%eax
c0103627:	74 10                	je     c0103639 <mm_create+0x6d>
c0103629:	83 ec 0c             	sub    $0xc,%esp
c010362c:	ff 75 f4             	pushl  -0xc(%ebp)
c010362f:	e8 24 12 00 00       	call   c0104858 <swap_init_mm>
c0103634:	83 c4 10             	add    $0x10,%esp
c0103637:	eb 0a                	jmp    c0103643 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0103639:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010363c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103643:	83 ec 08             	sub    $0x8,%esp
c0103646:	6a 00                	push   $0x0
c0103648:	ff 75 f4             	pushl  -0xc(%ebp)
c010364b:	e8 0a ff ff ff       	call   c010355a <set_mm_count>
c0103650:	83 c4 10             	add    $0x10,%esp
        sem_init(&(mm->mm_sem), 1);
c0103653:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103656:	83 c0 1c             	add    $0x1c,%eax
c0103659:	83 ec 08             	sub    $0x8,%esp
c010365c:	6a 01                	push   $0x1
c010365e:	50                   	push   %eax
c010365f:	e8 de 5e 00 00       	call   c0109542 <sem_init>
c0103664:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c0103667:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010366a:	c9                   	leave  
c010366b:	c3                   	ret    

c010366c <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c010366c:	55                   	push   %ebp
c010366d:	89 e5                	mov    %esp,%ebp
c010366f:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103672:	83 ec 0c             	sub    $0xc,%esp
c0103675:	6a 18                	push   $0x18
c0103677:	e8 d4 21 00 00       	call   c0105850 <kmalloc>
c010367c:	83 c4 10             	add    $0x10,%esp
c010367f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103682:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103686:	74 1b                	je     c01036a3 <vma_create+0x37>
        vma->vm_start = vm_start;
c0103688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010368b:	8b 55 08             	mov    0x8(%ebp),%edx
c010368e:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103691:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103694:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103697:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010369a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010369d:	8b 55 10             	mov    0x10(%ebp),%edx
c01036a0:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01036a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036a6:	c9                   	leave  
c01036a7:	c3                   	ret    

c01036a8 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01036a8:	55                   	push   %ebp
c01036a9:	89 e5                	mov    %esp,%ebp
c01036ab:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01036ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01036b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036b9:	0f 84 95 00 00 00    	je     c0103754 <find_vma+0xac>
        vma = mm->mmap_cache;
c01036bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01036c2:	8b 40 08             	mov    0x8(%eax),%eax
c01036c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01036c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01036cc:	74 16                	je     c01036e4 <find_vma+0x3c>
c01036ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036d1:	8b 40 04             	mov    0x4(%eax),%eax
c01036d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036d7:	77 0b                	ja     c01036e4 <find_vma+0x3c>
c01036d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036dc:	8b 40 08             	mov    0x8(%eax),%eax
c01036df:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036e2:	77 61                	ja     c0103745 <find_vma+0x9d>
                bool found = 0;
c01036e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01036eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01036ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01036f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01036f7:	eb 28                	jmp    c0103721 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01036f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036fc:	83 e8 10             	sub    $0x10,%eax
c01036ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103702:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103705:	8b 40 04             	mov    0x4(%eax),%eax
c0103708:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010370b:	77 14                	ja     c0103721 <find_vma+0x79>
c010370d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103710:	8b 40 08             	mov    0x8(%eax),%eax
c0103713:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103716:	76 09                	jbe    c0103721 <find_vma+0x79>
                        found = 1;
c0103718:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010371f:	eb 17                	jmp    c0103738 <find_vma+0x90>
c0103721:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103724:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103727:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010372a:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010372d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103730:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103733:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103736:	75 c1                	jne    c01036f9 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0103738:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010373c:	75 07                	jne    c0103745 <find_vma+0x9d>
                    vma = NULL;
c010373e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0103745:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103749:	74 09                	je     c0103754 <find_vma+0xac>
            mm->mmap_cache = vma;
c010374b:	8b 45 08             	mov    0x8(%ebp),%eax
c010374e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103751:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0103754:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103757:	c9                   	leave  
c0103758:	c3                   	ret    

c0103759 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103759:	55                   	push   %ebp
c010375a:	89 e5                	mov    %esp,%ebp
c010375c:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c010375f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103762:	8b 50 04             	mov    0x4(%eax),%edx
c0103765:	8b 45 08             	mov    0x8(%ebp),%eax
c0103768:	8b 40 08             	mov    0x8(%eax),%eax
c010376b:	39 c2                	cmp    %eax,%edx
c010376d:	72 16                	jb     c0103785 <check_vma_overlap+0x2c>
c010376f:	68 5d 4c 11 c0       	push   $0xc0114c5d
c0103774:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103779:	6a 6b                	push   $0x6b
c010377b:	68 90 4c 11 c0       	push   $0xc0114c90
c0103780:	e8 60 cd ff ff       	call   c01004e5 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0103785:	8b 45 08             	mov    0x8(%ebp),%eax
c0103788:	8b 50 08             	mov    0x8(%eax),%edx
c010378b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010378e:	8b 40 04             	mov    0x4(%eax),%eax
c0103791:	39 c2                	cmp    %eax,%edx
c0103793:	76 16                	jbe    c01037ab <check_vma_overlap+0x52>
c0103795:	68 a0 4c 11 c0       	push   $0xc0114ca0
c010379a:	68 7b 4c 11 c0       	push   $0xc0114c7b
c010379f:	6a 6c                	push   $0x6c
c01037a1:	68 90 4c 11 c0       	push   $0xc0114c90
c01037a6:	e8 3a cd ff ff       	call   c01004e5 <__panic>
    assert(next->vm_start < next->vm_end);
c01037ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037ae:	8b 50 04             	mov    0x4(%eax),%edx
c01037b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037b4:	8b 40 08             	mov    0x8(%eax),%eax
c01037b7:	39 c2                	cmp    %eax,%edx
c01037b9:	72 16                	jb     c01037d1 <check_vma_overlap+0x78>
c01037bb:	68 bf 4c 11 c0       	push   $0xc0114cbf
c01037c0:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01037c5:	6a 6d                	push   $0x6d
c01037c7:	68 90 4c 11 c0       	push   $0xc0114c90
c01037cc:	e8 14 cd ff ff       	call   c01004e5 <__panic>
}
c01037d1:	90                   	nop
c01037d2:	c9                   	leave  
c01037d3:	c3                   	ret    

c01037d4 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01037d4:	55                   	push   %ebp
c01037d5:	89 e5                	mov    %esp,%ebp
c01037d7:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c01037da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037dd:	8b 50 04             	mov    0x4(%eax),%edx
c01037e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037e3:	8b 40 08             	mov    0x8(%eax),%eax
c01037e6:	39 c2                	cmp    %eax,%edx
c01037e8:	72 16                	jb     c0103800 <insert_vma_struct+0x2c>
c01037ea:	68 dd 4c 11 c0       	push   $0xc0114cdd
c01037ef:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01037f4:	6a 74                	push   $0x74
c01037f6:	68 90 4c 11 c0       	push   $0xc0114c90
c01037fb:	e8 e5 cc ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103800:	8b 45 08             	mov    0x8(%ebp),%eax
c0103803:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103806:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103809:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010380c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010380f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103812:	eb 1f                	jmp    c0103833 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103814:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103817:	83 e8 10             	sub    $0x10,%eax
c010381a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010381d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103820:	8b 50 04             	mov    0x4(%eax),%edx
c0103823:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103826:	8b 40 04             	mov    0x4(%eax),%eax
c0103829:	39 c2                	cmp    %eax,%edx
c010382b:	77 1f                	ja     c010384c <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c010382d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103830:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103833:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103836:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103839:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010383c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010383f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103842:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103845:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103848:	75 ca                	jne    c0103814 <insert_vma_struct+0x40>
c010384a:	eb 01                	jmp    c010384d <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c010384c:	90                   	nop
c010384d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103850:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103853:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103856:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0103859:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010385c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010385f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103862:	74 15                	je     c0103879 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0103864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103867:	83 e8 10             	sub    $0x10,%eax
c010386a:	83 ec 08             	sub    $0x8,%esp
c010386d:	ff 75 0c             	pushl  0xc(%ebp)
c0103870:	50                   	push   %eax
c0103871:	e8 e3 fe ff ff       	call   c0103759 <check_vma_overlap>
c0103876:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0103879:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010387c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010387f:	74 15                	je     c0103896 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0103881:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103884:	83 e8 10             	sub    $0x10,%eax
c0103887:	83 ec 08             	sub    $0x8,%esp
c010388a:	50                   	push   %eax
c010388b:	ff 75 0c             	pushl  0xc(%ebp)
c010388e:	e8 c6 fe ff ff       	call   c0103759 <check_vma_overlap>
c0103893:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0103896:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103899:	8b 55 08             	mov    0x8(%ebp),%edx
c010389c:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010389e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038a1:	8d 50 10             	lea    0x10(%eax),%edx
c01038a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01038aa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01038ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038b0:	8b 40 04             	mov    0x4(%eax),%eax
c01038b3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01038b6:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01038b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01038bc:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01038bf:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01038c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01038c5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01038c8:	89 10                	mov    %edx,(%eax)
c01038ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01038cd:	8b 10                	mov    (%eax),%edx
c01038cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01038d2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01038d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038d8:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01038db:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01038de:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038e1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01038e4:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01038e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01038e9:	8b 40 10             	mov    0x10(%eax),%eax
c01038ec:	8d 50 01             	lea    0x1(%eax),%edx
c01038ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01038f2:	89 50 10             	mov    %edx,0x10(%eax)
}
c01038f5:	90                   	nop
c01038f6:	c9                   	leave  
c01038f7:	c3                   	ret    

c01038f8 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01038f8:	55                   	push   %ebp
c01038f9:	89 e5                	mov    %esp,%ebp
c01038fb:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c01038fe:	ff 75 08             	pushl  0x8(%ebp)
c0103901:	e8 49 fc ff ff       	call   c010354f <mm_count>
c0103906:	83 c4 04             	add    $0x4,%esp
c0103909:	85 c0                	test   %eax,%eax
c010390b:	74 19                	je     c0103926 <mm_destroy+0x2e>
c010390d:	68 f9 4c 11 c0       	push   $0xc0114cf9
c0103912:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103917:	68 94 00 00 00       	push   $0x94
c010391c:	68 90 4c 11 c0       	push   $0xc0114c90
c0103921:	e8 bf cb ff ff       	call   c01004e5 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0103926:	8b 45 08             	mov    0x8(%ebp),%eax
c0103929:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010392c:	eb 3a                	jmp    c0103968 <mm_destroy+0x70>
c010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103931:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103934:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103937:	8b 40 04             	mov    0x4(%eax),%eax
c010393a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010393d:	8b 12                	mov    (%edx),%edx
c010393f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0103942:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103948:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010394b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010394e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103951:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103954:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0103956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103959:	83 e8 10             	sub    $0x10,%eax
c010395c:	83 ec 0c             	sub    $0xc,%esp
c010395f:	50                   	push   %eax
c0103960:	e8 03 1f 00 00       	call   c0105868 <kfree>
c0103965:	83 c4 10             	add    $0x10,%esp
c0103968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010396b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010396e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103971:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0103974:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103977:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010397a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010397d:	75 af                	jne    c010392e <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010397f:	83 ec 0c             	sub    $0xc,%esp
c0103982:	ff 75 08             	pushl  0x8(%ebp)
c0103985:	e8 de 1e 00 00       	call   c0105868 <kfree>
c010398a:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c010398d:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103994:	90                   	nop
c0103995:	c9                   	leave  
c0103996:	c3                   	ret    

c0103997 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103997:	55                   	push   %ebp
c0103998:	89 e5                	mov    %esp,%ebp
c010399a:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010399d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01039ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01039ae:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01039b5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01039bb:	01 c2                	add    %eax,%edx
c01039bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039c0:	01 d0                	add    %edx,%eax
c01039c2:	83 e8 01             	sub    $0x1,%eax
c01039c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01039c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039cb:	ba 00 00 00 00       	mov    $0x0,%edx
c01039d0:	f7 75 e8             	divl   -0x18(%ebp)
c01039d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039d6:	29 d0                	sub    %edx,%eax
c01039d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01039db:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01039e2:	76 11                	jbe    c01039f5 <mm_map+0x5e>
c01039e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039e7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01039ea:	73 09                	jae    c01039f5 <mm_map+0x5e>
c01039ec:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01039f3:	76 0a                	jbe    c01039ff <mm_map+0x68>
        return -E_INVAL;
c01039f5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01039fa:	e9 9e 00 00 00       	jmp    c0103a9d <mm_map+0x106>
    }

    assert(mm != NULL);
c01039ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a03:	75 19                	jne    c0103a1e <mm_map+0x87>
c0103a05:	68 0b 4d 11 c0       	push   $0xc0114d0b
c0103a0a:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103a0f:	68 a7 00 00 00       	push   $0xa7
c0103a14:	68 90 4c 11 c0       	push   $0xc0114c90
c0103a19:	e8 c7 ca ff ff       	call   c01004e5 <__panic>

    int ret = -E_INVAL;
c0103a1e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103a25:	83 ec 08             	sub    $0x8,%esp
c0103a28:	ff 75 ec             	pushl  -0x14(%ebp)
c0103a2b:	ff 75 08             	pushl  0x8(%ebp)
c0103a2e:	e8 75 fc ff ff       	call   c01036a8 <find_vma>
c0103a33:	83 c4 10             	add    $0x10,%esp
c0103a36:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a39:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103a3d:	74 0b                	je     c0103a4a <mm_map+0xb3>
c0103a3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a42:	8b 40 04             	mov    0x4(%eax),%eax
c0103a45:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a48:	72 4c                	jb     c0103a96 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103a4a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103a51:	83 ec 04             	sub    $0x4,%esp
c0103a54:	ff 75 14             	pushl  0x14(%ebp)
c0103a57:	ff 75 e0             	pushl  -0x20(%ebp)
c0103a5a:	ff 75 ec             	pushl  -0x14(%ebp)
c0103a5d:	e8 0a fc ff ff       	call   c010366c <vma_create>
c0103a62:	83 c4 10             	add    $0x10,%esp
c0103a65:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a68:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103a6c:	74 2b                	je     c0103a99 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103a6e:	83 ec 08             	sub    $0x8,%esp
c0103a71:	ff 75 dc             	pushl  -0x24(%ebp)
c0103a74:	ff 75 08             	pushl  0x8(%ebp)
c0103a77:	e8 58 fd ff ff       	call   c01037d4 <insert_vma_struct>
c0103a7c:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103a7f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103a83:	74 08                	je     c0103a8d <mm_map+0xf6>
        *vma_store = vma;
c0103a85:	8b 45 18             	mov    0x18(%ebp),%eax
c0103a88:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103a8b:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103a8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103a94:	eb 04                	jmp    c0103a9a <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103a96:	90                   	nop
c0103a97:	eb 01                	jmp    c0103a9a <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103a99:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103a9d:	c9                   	leave  
c0103a9e:	c3                   	ret    

c0103a9f <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103a9f:	55                   	push   %ebp
c0103aa0:	89 e5                	mov    %esp,%ebp
c0103aa2:	53                   	push   %ebx
c0103aa3:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103aa6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103aaa:	74 06                	je     c0103ab2 <dup_mmap+0x13>
c0103aac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103ab0:	75 19                	jne    c0103acb <dup_mmap+0x2c>
c0103ab2:	68 16 4d 11 c0       	push   $0xc0114d16
c0103ab7:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103abc:	68 c0 00 00 00       	push   $0xc0
c0103ac1:	68 90 4c 11 c0       	push   $0xc0114c90
c0103ac6:	e8 1a ca ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103acb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ace:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103ad7:	e9 86 00 00 00       	jmp    c0103b62 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103adf:	83 e8 10             	sub    $0x10,%eax
c0103ae2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103ae5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ae8:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103aee:	8b 50 08             	mov    0x8(%eax),%edx
c0103af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103af4:	8b 40 04             	mov    0x4(%eax),%eax
c0103af7:	83 ec 04             	sub    $0x4,%esp
c0103afa:	51                   	push   %ecx
c0103afb:	52                   	push   %edx
c0103afc:	50                   	push   %eax
c0103afd:	e8 6a fb ff ff       	call   c010366c <vma_create>
c0103b02:	83 c4 10             	add    $0x10,%esp
c0103b05:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b08:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b0c:	75 07                	jne    c0103b15 <dup_mmap+0x76>
            return -E_NO_MEM;
c0103b0e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b13:	eb 6c                	jmp    c0103b81 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103b15:	83 ec 08             	sub    $0x8,%esp
c0103b18:	ff 75 e8             	pushl  -0x18(%ebp)
c0103b1b:	ff 75 08             	pushl  0x8(%ebp)
c0103b1e:	e8 b1 fc ff ff       	call   c01037d4 <insert_vma_struct>
c0103b23:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103b26:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103b2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b30:	8b 58 08             	mov    0x8(%eax),%ebx
c0103b33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b36:	8b 48 04             	mov    0x4(%eax),%ecx
c0103b39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b3c:	8b 50 0c             	mov    0xc(%eax),%edx
c0103b3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b42:	8b 40 0c             	mov    0xc(%eax),%eax
c0103b45:	83 ec 0c             	sub    $0xc,%esp
c0103b48:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103b4b:	53                   	push   %ebx
c0103b4c:	51                   	push   %ecx
c0103b4d:	52                   	push   %edx
c0103b4e:	50                   	push   %eax
c0103b4f:	e8 1e 40 00 00       	call   c0107b72 <copy_range>
c0103b54:	83 c4 20             	add    $0x20,%esp
c0103b57:	85 c0                	test   %eax,%eax
c0103b59:	74 07                	je     c0103b62 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103b5b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b60:	eb 1f                	jmp    c0103b81 <dup_mmap+0xe2>
c0103b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b65:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103b68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b6b:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103b76:	0f 85 60 ff ff ff    	jne    c0103adc <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103b7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103b81:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103b84:	c9                   	leave  
c0103b85:	c3                   	ret    

c0103b86 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103b86:	55                   	push   %ebp
c0103b87:	89 e5                	mov    %esp,%ebp
c0103b89:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103b8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b90:	74 0f                	je     c0103ba1 <exit_mmap+0x1b>
c0103b92:	ff 75 08             	pushl  0x8(%ebp)
c0103b95:	e8 b5 f9 ff ff       	call   c010354f <mm_count>
c0103b9a:	83 c4 04             	add    $0x4,%esp
c0103b9d:	85 c0                	test   %eax,%eax
c0103b9f:	74 19                	je     c0103bba <exit_mmap+0x34>
c0103ba1:	68 34 4d 11 c0       	push   $0xc0114d34
c0103ba6:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103bab:	68 d6 00 00 00       	push   $0xd6
c0103bb0:	68 90 4c 11 c0       	push   $0xc0114c90
c0103bb5:	e8 2b c9 ff ff       	call   c01004e5 <__panic>
    pde_t *pgdir = mm->pgdir;
c0103bba:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bbd:	8b 40 0c             	mov    0xc(%eax),%eax
c0103bc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103bc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103bcf:	eb 25                	jmp    c0103bf6 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bd4:	83 e8 10             	sub    $0x10,%eax
c0103bd7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103bda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103bdd:	8b 50 08             	mov    0x8(%eax),%edx
c0103be0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103be3:	8b 40 04             	mov    0x4(%eax),%eax
c0103be6:	83 ec 04             	sub    $0x4,%esp
c0103be9:	52                   	push   %edx
c0103bea:	50                   	push   %eax
c0103beb:	ff 75 f0             	pushl  -0x10(%ebp)
c0103bee:	e8 b8 3d 00 00       	call   c01079ab <unmap_range>
c0103bf3:	83 c4 10             	add    $0x10,%esp
c0103bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103bfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103bff:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103c02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c08:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c0b:	75 c4                	jne    c0103bd1 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c0d:	eb 25                	jmp    c0103c34 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c12:	83 e8 10             	sub    $0x10,%eax
c0103c15:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103c18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c1b:	8b 50 08             	mov    0x8(%eax),%edx
c0103c1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c21:	8b 40 04             	mov    0x4(%eax),%eax
c0103c24:	83 ec 04             	sub    $0x4,%esp
c0103c27:	52                   	push   %edx
c0103c28:	50                   	push   %eax
c0103c29:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c2c:	e8 4d 3e 00 00       	call   c0107a7e <exit_range>
c0103c31:	83 c4 10             	add    $0x10,%esp
c0103c34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c37:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c3d:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c46:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c49:	75 c4                	jne    c0103c0f <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103c4b:	90                   	nop
c0103c4c:	c9                   	leave  
c0103c4d:	c3                   	ret    

c0103c4e <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103c4e:	55                   	push   %ebp
c0103c4f:	89 e5                	mov    %esp,%ebp
c0103c51:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103c54:	8b 45 10             	mov    0x10(%ebp),%eax
c0103c57:	ff 75 18             	pushl  0x18(%ebp)
c0103c5a:	ff 75 14             	pushl  0x14(%ebp)
c0103c5d:	50                   	push   %eax
c0103c5e:	ff 75 08             	pushl  0x8(%ebp)
c0103c61:	e8 e2 08 00 00       	call   c0104548 <user_mem_check>
c0103c66:	83 c4 10             	add    $0x10,%esp
c0103c69:	85 c0                	test   %eax,%eax
c0103c6b:	75 07                	jne    c0103c74 <copy_from_user+0x26>
        return 0;
c0103c6d:	b8 00 00 00 00       	mov    $0x0,%eax
c0103c72:	eb 19                	jmp    c0103c8d <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103c74:	83 ec 04             	sub    $0x4,%esp
c0103c77:	ff 75 14             	pushl  0x14(%ebp)
c0103c7a:	ff 75 10             	pushl  0x10(%ebp)
c0103c7d:	ff 75 0c             	pushl  0xc(%ebp)
c0103c80:	e8 6e fe 00 00       	call   c0113af3 <memcpy>
c0103c85:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103c88:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103c8d:	c9                   	leave  
c0103c8e:	c3                   	ret    

c0103c8f <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103c8f:	55                   	push   %ebp
c0103c90:	89 e5                	mov    %esp,%ebp
c0103c92:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103c95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c98:	6a 01                	push   $0x1
c0103c9a:	ff 75 14             	pushl  0x14(%ebp)
c0103c9d:	50                   	push   %eax
c0103c9e:	ff 75 08             	pushl  0x8(%ebp)
c0103ca1:	e8 a2 08 00 00       	call   c0104548 <user_mem_check>
c0103ca6:	83 c4 10             	add    $0x10,%esp
c0103ca9:	85 c0                	test   %eax,%eax
c0103cab:	75 07                	jne    c0103cb4 <copy_to_user+0x25>
        return 0;
c0103cad:	b8 00 00 00 00       	mov    $0x0,%eax
c0103cb2:	eb 19                	jmp    c0103ccd <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103cb4:	83 ec 04             	sub    $0x4,%esp
c0103cb7:	ff 75 14             	pushl  0x14(%ebp)
c0103cba:	ff 75 10             	pushl  0x10(%ebp)
c0103cbd:	ff 75 0c             	pushl  0xc(%ebp)
c0103cc0:	e8 2e fe 00 00       	call   c0113af3 <memcpy>
c0103cc5:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103cc8:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103ccd:	c9                   	leave  
c0103cce:	c3                   	ret    

c0103ccf <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103ccf:	55                   	push   %ebp
c0103cd0:	89 e5                	mov    %esp,%ebp
c0103cd2:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103cd5:	e8 03 00 00 00       	call   c0103cdd <check_vmm>
}
c0103cda:	90                   	nop
c0103cdb:	c9                   	leave  
c0103cdc:	c3                   	ret    

c0103cdd <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103cdd:	55                   	push   %ebp
c0103cde:	89 e5                	mov    %esp,%ebp
c0103ce0:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103ce3:	e8 10 35 00 00       	call   c01071f8 <nr_free_pages>
c0103ce8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103ceb:	e8 18 00 00 00       	call   c0103d08 <check_vma_struct>
    check_pgfault();
c0103cf0:	e8 10 04 00 00       	call   c0104105 <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0103cf5:	83 ec 0c             	sub    $0xc,%esp
c0103cf8:	68 54 4d 11 c0       	push   $0xc0114d54
c0103cfd:	e8 7d c6 ff ff       	call   c010037f <cprintf>
c0103d02:	83 c4 10             	add    $0x10,%esp
}
c0103d05:	90                   	nop
c0103d06:	c9                   	leave  
c0103d07:	c3                   	ret    

c0103d08 <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d08:	55                   	push   %ebp
c0103d09:	89 e5                	mov    %esp,%ebp
c0103d0b:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d0e:	e8 e5 34 00 00       	call   c01071f8 <nr_free_pages>
c0103d13:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103d16:	e8 b1 f8 ff ff       	call   c01035cc <mm_create>
c0103d1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103d1e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103d22:	75 19                	jne    c0103d3d <check_vma_struct+0x35>
c0103d24:	68 0b 4d 11 c0       	push   $0xc0114d0b
c0103d29:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103d2e:	68 0e 01 00 00       	push   $0x10e
c0103d33:	68 90 4c 11 c0       	push   $0xc0114c90
c0103d38:	e8 a8 c7 ff ff       	call   c01004e5 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103d3d:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103d44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103d47:	89 d0                	mov    %edx,%eax
c0103d49:	c1 e0 02             	shl    $0x2,%eax
c0103d4c:	01 d0                	add    %edx,%eax
c0103d4e:	01 c0                	add    %eax,%eax
c0103d50:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103d53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d59:	eb 5f                	jmp    c0103dba <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103d5e:	89 d0                	mov    %edx,%eax
c0103d60:	c1 e0 02             	shl    $0x2,%eax
c0103d63:	01 d0                	add    %edx,%eax
c0103d65:	83 c0 02             	add    $0x2,%eax
c0103d68:	89 c1                	mov    %eax,%ecx
c0103d6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103d6d:	89 d0                	mov    %edx,%eax
c0103d6f:	c1 e0 02             	shl    $0x2,%eax
c0103d72:	01 d0                	add    %edx,%eax
c0103d74:	83 ec 04             	sub    $0x4,%esp
c0103d77:	6a 00                	push   $0x0
c0103d79:	51                   	push   %ecx
c0103d7a:	50                   	push   %eax
c0103d7b:	e8 ec f8 ff ff       	call   c010366c <vma_create>
c0103d80:	83 c4 10             	add    $0x10,%esp
c0103d83:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103d86:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103d8a:	75 19                	jne    c0103da5 <check_vma_struct+0x9d>
c0103d8c:	68 6c 4d 11 c0       	push   $0xc0114d6c
c0103d91:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103d96:	68 15 01 00 00       	push   $0x115
c0103d9b:	68 90 4c 11 c0       	push   $0xc0114c90
c0103da0:	e8 40 c7 ff ff       	call   c01004e5 <__panic>
        insert_vma_struct(mm, vma);
c0103da5:	83 ec 08             	sub    $0x8,%esp
c0103da8:	ff 75 dc             	pushl  -0x24(%ebp)
c0103dab:	ff 75 e8             	pushl  -0x18(%ebp)
c0103dae:	e8 21 fa ff ff       	call   c01037d4 <insert_vma_struct>
c0103db3:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103db6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103dba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103dbe:	7f 9b                	jg     c0103d5b <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103dc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103dc3:	83 c0 01             	add    $0x1,%eax
c0103dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dc9:	eb 5f                	jmp    c0103e2a <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103dcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dce:	89 d0                	mov    %edx,%eax
c0103dd0:	c1 e0 02             	shl    $0x2,%eax
c0103dd3:	01 d0                	add    %edx,%eax
c0103dd5:	83 c0 02             	add    $0x2,%eax
c0103dd8:	89 c1                	mov    %eax,%ecx
c0103dda:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ddd:	89 d0                	mov    %edx,%eax
c0103ddf:	c1 e0 02             	shl    $0x2,%eax
c0103de2:	01 d0                	add    %edx,%eax
c0103de4:	83 ec 04             	sub    $0x4,%esp
c0103de7:	6a 00                	push   $0x0
c0103de9:	51                   	push   %ecx
c0103dea:	50                   	push   %eax
c0103deb:	e8 7c f8 ff ff       	call   c010366c <vma_create>
c0103df0:	83 c4 10             	add    $0x10,%esp
c0103df3:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103df6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103dfa:	75 19                	jne    c0103e15 <check_vma_struct+0x10d>
c0103dfc:	68 6c 4d 11 c0       	push   $0xc0114d6c
c0103e01:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103e06:	68 1b 01 00 00       	push   $0x11b
c0103e0b:	68 90 4c 11 c0       	push   $0xc0114c90
c0103e10:	e8 d0 c6 ff ff       	call   c01004e5 <__panic>
        insert_vma_struct(mm, vma);
c0103e15:	83 ec 08             	sub    $0x8,%esp
c0103e18:	ff 75 d8             	pushl  -0x28(%ebp)
c0103e1b:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e1e:	e8 b1 f9 ff ff       	call   c01037d4 <insert_vma_struct>
c0103e23:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e26:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e2d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103e30:	7e 99                	jle    c0103dcb <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103e32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e35:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103e38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103e3b:	8b 40 04             	mov    0x4(%eax),%eax
c0103e3e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103e41:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103e48:	e9 81 00 00 00       	jmp    c0103ece <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103e4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103e53:	75 19                	jne    c0103e6e <check_vma_struct+0x166>
c0103e55:	68 78 4d 11 c0       	push   $0xc0114d78
c0103e5a:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103e5f:	68 22 01 00 00       	push   $0x122
c0103e64:	68 90 4c 11 c0       	push   $0xc0114c90
c0103e69:	e8 77 c6 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e71:	83 e8 10             	sub    $0x10,%eax
c0103e74:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103e77:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103e7a:	8b 48 04             	mov    0x4(%eax),%ecx
c0103e7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e80:	89 d0                	mov    %edx,%eax
c0103e82:	c1 e0 02             	shl    $0x2,%eax
c0103e85:	01 d0                	add    %edx,%eax
c0103e87:	39 c1                	cmp    %eax,%ecx
c0103e89:	75 17                	jne    c0103ea2 <check_vma_struct+0x19a>
c0103e8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103e8e:	8b 48 08             	mov    0x8(%eax),%ecx
c0103e91:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e94:	89 d0                	mov    %edx,%eax
c0103e96:	c1 e0 02             	shl    $0x2,%eax
c0103e99:	01 d0                	add    %edx,%eax
c0103e9b:	83 c0 02             	add    $0x2,%eax
c0103e9e:	39 c1                	cmp    %eax,%ecx
c0103ea0:	74 19                	je     c0103ebb <check_vma_struct+0x1b3>
c0103ea2:	68 90 4d 11 c0       	push   $0xc0114d90
c0103ea7:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103eac:	68 24 01 00 00       	push   $0x124
c0103eb1:	68 90 4c 11 c0       	push   $0xc0114c90
c0103eb6:	e8 2a c6 ff ff       	call   c01004e5 <__panic>
c0103ebb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ebe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103ec1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103ec4:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103eca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ed1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ed4:	0f 8e 73 ff ff ff    	jle    c0103e4d <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103eda:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103ee1:	e9 80 01 00 00       	jmp    c0104066 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ee9:	83 ec 08             	sub    $0x8,%esp
c0103eec:	50                   	push   %eax
c0103eed:	ff 75 e8             	pushl  -0x18(%ebp)
c0103ef0:	e8 b3 f7 ff ff       	call   c01036a8 <find_vma>
c0103ef5:	83 c4 10             	add    $0x10,%esp
c0103ef8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103efb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103eff:	75 19                	jne    c0103f1a <check_vma_struct+0x212>
c0103f01:	68 c5 4d 11 c0       	push   $0xc0114dc5
c0103f06:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103f0b:	68 2a 01 00 00       	push   $0x12a
c0103f10:	68 90 4c 11 c0       	push   $0xc0114c90
c0103f15:	e8 cb c5 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f1d:	83 c0 01             	add    $0x1,%eax
c0103f20:	83 ec 08             	sub    $0x8,%esp
c0103f23:	50                   	push   %eax
c0103f24:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f27:	e8 7c f7 ff ff       	call   c01036a8 <find_vma>
c0103f2c:	83 c4 10             	add    $0x10,%esp
c0103f2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103f32:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103f36:	75 19                	jne    c0103f51 <check_vma_struct+0x249>
c0103f38:	68 d2 4d 11 c0       	push   $0xc0114dd2
c0103f3d:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103f42:	68 2c 01 00 00       	push   $0x12c
c0103f47:	68 90 4c 11 c0       	push   $0xc0114c90
c0103f4c:	e8 94 c5 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0103f51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f54:	83 c0 02             	add    $0x2,%eax
c0103f57:	83 ec 08             	sub    $0x8,%esp
c0103f5a:	50                   	push   %eax
c0103f5b:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f5e:	e8 45 f7 ff ff       	call   c01036a8 <find_vma>
c0103f63:	83 c4 10             	add    $0x10,%esp
c0103f66:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0103f69:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0103f6d:	74 19                	je     c0103f88 <check_vma_struct+0x280>
c0103f6f:	68 df 4d 11 c0       	push   $0xc0114ddf
c0103f74:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103f79:	68 2e 01 00 00       	push   $0x12e
c0103f7e:	68 90 4c 11 c0       	push   $0xc0114c90
c0103f83:	e8 5d c5 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0103f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f8b:	83 c0 03             	add    $0x3,%eax
c0103f8e:	83 ec 08             	sub    $0x8,%esp
c0103f91:	50                   	push   %eax
c0103f92:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f95:	e8 0e f7 ff ff       	call   c01036a8 <find_vma>
c0103f9a:	83 c4 10             	add    $0x10,%esp
c0103f9d:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0103fa0:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0103fa4:	74 19                	je     c0103fbf <check_vma_struct+0x2b7>
c0103fa6:	68 ec 4d 11 c0       	push   $0xc0114dec
c0103fab:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103fb0:	68 30 01 00 00       	push   $0x130
c0103fb5:	68 90 4c 11 c0       	push   $0xc0114c90
c0103fba:	e8 26 c5 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0103fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fc2:	83 c0 04             	add    $0x4,%eax
c0103fc5:	83 ec 08             	sub    $0x8,%esp
c0103fc8:	50                   	push   %eax
c0103fc9:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fcc:	e8 d7 f6 ff ff       	call   c01036a8 <find_vma>
c0103fd1:	83 c4 10             	add    $0x10,%esp
c0103fd4:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0103fd7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0103fdb:	74 19                	je     c0103ff6 <check_vma_struct+0x2ee>
c0103fdd:	68 f9 4d 11 c0       	push   $0xc0114df9
c0103fe2:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0103fe7:	68 32 01 00 00       	push   $0x132
c0103fec:	68 90 4c 11 c0       	push   $0xc0114c90
c0103ff1:	e8 ef c4 ff ff       	call   c01004e5 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0103ff6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ff9:	8b 50 04             	mov    0x4(%eax),%edx
c0103ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fff:	39 c2                	cmp    %eax,%edx
c0104001:	75 10                	jne    c0104013 <check_vma_struct+0x30b>
c0104003:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104006:	8b 40 08             	mov    0x8(%eax),%eax
c0104009:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010400c:	83 c2 02             	add    $0x2,%edx
c010400f:	39 d0                	cmp    %edx,%eax
c0104011:	74 19                	je     c010402c <check_vma_struct+0x324>
c0104013:	68 08 4e 11 c0       	push   $0xc0114e08
c0104018:	68 7b 4c 11 c0       	push   $0xc0114c7b
c010401d:	68 34 01 00 00       	push   $0x134
c0104022:	68 90 4c 11 c0       	push   $0xc0114c90
c0104027:	e8 b9 c4 ff ff       	call   c01004e5 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010402c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010402f:	8b 50 04             	mov    0x4(%eax),%edx
c0104032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104035:	39 c2                	cmp    %eax,%edx
c0104037:	75 10                	jne    c0104049 <check_vma_struct+0x341>
c0104039:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010403c:	8b 40 08             	mov    0x8(%eax),%eax
c010403f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104042:	83 c2 02             	add    $0x2,%edx
c0104045:	39 d0                	cmp    %edx,%eax
c0104047:	74 19                	je     c0104062 <check_vma_struct+0x35a>
c0104049:	68 38 4e 11 c0       	push   $0xc0114e38
c010404e:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0104053:	68 35 01 00 00       	push   $0x135
c0104058:	68 90 4c 11 c0       	push   $0xc0114c90
c010405d:	e8 83 c4 ff ff       	call   c01004e5 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104062:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0104066:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104069:	89 d0                	mov    %edx,%eax
c010406b:	c1 e0 02             	shl    $0x2,%eax
c010406e:	01 d0                	add    %edx,%eax
c0104070:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104073:	0f 8d 6d fe ff ff    	jge    c0103ee6 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104079:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0104080:	eb 5c                	jmp    c01040de <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0104082:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104085:	83 ec 08             	sub    $0x8,%esp
c0104088:	50                   	push   %eax
c0104089:	ff 75 e8             	pushl  -0x18(%ebp)
c010408c:	e8 17 f6 ff ff       	call   c01036a8 <find_vma>
c0104091:	83 c4 10             	add    $0x10,%esp
c0104094:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c0104097:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010409b:	74 1e                	je     c01040bb <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010409d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01040a0:	8b 50 08             	mov    0x8(%eax),%edx
c01040a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01040a6:	8b 40 04             	mov    0x4(%eax),%eax
c01040a9:	52                   	push   %edx
c01040aa:	50                   	push   %eax
c01040ab:	ff 75 f4             	pushl  -0xc(%ebp)
c01040ae:	68 68 4e 11 c0       	push   $0xc0114e68
c01040b3:	e8 c7 c2 ff ff       	call   c010037f <cprintf>
c01040b8:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c01040bb:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01040bf:	74 19                	je     c01040da <check_vma_struct+0x3d2>
c01040c1:	68 8d 4e 11 c0       	push   $0xc0114e8d
c01040c6:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01040cb:	68 3d 01 00 00       	push   $0x13d
c01040d0:	68 90 4c 11 c0       	push   $0xc0114c90
c01040d5:	e8 0b c4 ff ff       	call   c01004e5 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01040da:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01040de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01040e2:	79 9e                	jns    c0104082 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c01040e4:	83 ec 0c             	sub    $0xc,%esp
c01040e7:	ff 75 e8             	pushl  -0x18(%ebp)
c01040ea:	e8 09 f8 ff ff       	call   c01038f8 <mm_destroy>
c01040ef:	83 c4 10             	add    $0x10,%esp

  //  assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c01040f2:	83 ec 0c             	sub    $0xc,%esp
c01040f5:	68 a4 4e 11 c0       	push   $0xc0114ea4
c01040fa:	e8 80 c2 ff ff       	call   c010037f <cprintf>
c01040ff:	83 c4 10             	add    $0x10,%esp
}
c0104102:	90                   	nop
c0104103:	c9                   	leave  
c0104104:	c3                   	ret    

c0104105 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104105:	55                   	push   %ebp
c0104106:	89 e5                	mov    %esp,%ebp
c0104108:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010410b:	e8 e8 30 00 00       	call   c01071f8 <nr_free_pages>
c0104110:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104113:	e8 b4 f4 ff ff       	call   c01035cc <mm_create>
c0104118:	a3 04 51 15 c0       	mov    %eax,0xc0155104
    assert(check_mm_struct != NULL);
c010411d:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c0104122:	85 c0                	test   %eax,%eax
c0104124:	75 19                	jne    c010413f <check_pgfault+0x3a>
c0104126:	68 c3 4e 11 c0       	push   $0xc0114ec3
c010412b:	68 7b 4c 11 c0       	push   $0xc0114c7b
c0104130:	68 4f 01 00 00       	push   $0x14f
c0104135:	68 90 4c 11 c0       	push   $0xc0114c90
c010413a:	e8 a6 c3 ff ff       	call   c01004e5 <__panic>

    struct mm_struct *mm = check_mm_struct;
c010413f:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c0104144:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104147:	8b 15 20 ea 14 c0    	mov    0xc014ea20,%edx
c010414d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104150:	89 50 0c             	mov    %edx,0xc(%eax)
c0104153:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104156:	8b 40 0c             	mov    0xc(%eax),%eax
c0104159:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010415c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010415f:	8b 00                	mov    (%eax),%eax
c0104161:	85 c0                	test   %eax,%eax
c0104163:	74 19                	je     c010417e <check_pgfault+0x79>
c0104165:	68 db 4e 11 c0       	push   $0xc0114edb
c010416a:	68 7b 4c 11 c0       	push   $0xc0114c7b
c010416f:	68 53 01 00 00       	push   $0x153
c0104174:	68 90 4c 11 c0       	push   $0xc0114c90
c0104179:	e8 67 c3 ff ff       	call   c01004e5 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010417e:	83 ec 04             	sub    $0x4,%esp
c0104181:	6a 02                	push   $0x2
c0104183:	68 00 00 40 00       	push   $0x400000
c0104188:	6a 00                	push   $0x0
c010418a:	e8 dd f4 ff ff       	call   c010366c <vma_create>
c010418f:	83 c4 10             	add    $0x10,%esp
c0104192:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0104195:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104199:	75 19                	jne    c01041b4 <check_pgfault+0xaf>
c010419b:	68 6c 4d 11 c0       	push   $0xc0114d6c
c01041a0:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01041a5:	68 56 01 00 00       	push   $0x156
c01041aa:	68 90 4c 11 c0       	push   $0xc0114c90
c01041af:	e8 31 c3 ff ff       	call   c01004e5 <__panic>

    insert_vma_struct(mm, vma);
c01041b4:	83 ec 08             	sub    $0x8,%esp
c01041b7:	ff 75 e0             	pushl  -0x20(%ebp)
c01041ba:	ff 75 e8             	pushl  -0x18(%ebp)
c01041bd:	e8 12 f6 ff ff       	call   c01037d4 <insert_vma_struct>
c01041c2:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c01041c5:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01041cc:	83 ec 08             	sub    $0x8,%esp
c01041cf:	ff 75 dc             	pushl  -0x24(%ebp)
c01041d2:	ff 75 e8             	pushl  -0x18(%ebp)
c01041d5:	e8 ce f4 ff ff       	call   c01036a8 <find_vma>
c01041da:	83 c4 10             	add    $0x10,%esp
c01041dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01041e0:	74 19                	je     c01041fb <check_pgfault+0xf6>
c01041e2:	68 e9 4e 11 c0       	push   $0xc0114ee9
c01041e7:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01041ec:	68 5b 01 00 00       	push   $0x15b
c01041f1:	68 90 4c 11 c0       	push   $0xc0114c90
c01041f6:	e8 ea c2 ff ff       	call   c01004e5 <__panic>

    int i, sum = 0;
c01041fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104202:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104209:	eb 19                	jmp    c0104224 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c010420b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010420e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104211:	01 d0                	add    %edx,%eax
c0104213:	89 c2                	mov    %eax,%edx
c0104215:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104218:	88 02                	mov    %al,(%edx)
        sum += i;
c010421a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010421d:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0104220:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104224:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104228:	7e e1                	jle    c010420b <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010422a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104231:	eb 15                	jmp    c0104248 <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c0104233:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104236:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104239:	01 d0                	add    %edx,%eax
c010423b:	0f b6 00             	movzbl (%eax),%eax
c010423e:	0f be c0             	movsbl %al,%eax
c0104241:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104244:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104248:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010424c:	7e e5                	jle    c0104233 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c010424e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104252:	74 19                	je     c010426d <check_pgfault+0x168>
c0104254:	68 03 4f 11 c0       	push   $0xc0114f03
c0104259:	68 7b 4c 11 c0       	push   $0xc0114c7b
c010425e:	68 65 01 00 00       	push   $0x165
c0104263:	68 90 4c 11 c0       	push   $0xc0114c90
c0104268:	e8 78 c2 ff ff       	call   c01004e5 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010426d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104270:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104273:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104276:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010427b:	83 ec 08             	sub    $0x8,%esp
c010427e:	50                   	push   %eax
c010427f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104282:	e8 c4 3a 00 00       	call   c0107d4b <page_remove>
c0104287:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c010428a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010428d:	8b 00                	mov    (%eax),%eax
c010428f:	83 ec 0c             	sub    $0xc,%esp
c0104292:	50                   	push   %eax
c0104293:	e8 18 f3 ff ff       	call   c01035b0 <pde2page>
c0104298:	83 c4 10             	add    $0x10,%esp
c010429b:	83 ec 08             	sub    $0x8,%esp
c010429e:	6a 01                	push   $0x1
c01042a0:	50                   	push   %eax
c01042a1:	e8 1d 2f 00 00       	call   c01071c3 <free_pages>
c01042a6:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c01042a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01042b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01042b5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01042bc:	83 ec 0c             	sub    $0xc,%esp
c01042bf:	ff 75 e8             	pushl  -0x18(%ebp)
c01042c2:	e8 31 f6 ff ff       	call   c01038f8 <mm_destroy>
c01042c7:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c01042ca:	c7 05 04 51 15 c0 00 	movl   $0x0,0xc0155104
c01042d1:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c01042d4:	e8 1f 2f 00 00       	call   c01071f8 <nr_free_pages>
c01042d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01042dc:	74 19                	je     c01042f7 <check_pgfault+0x1f2>
c01042de:	68 0c 4f 11 c0       	push   $0xc0114f0c
c01042e3:	68 7b 4c 11 c0       	push   $0xc0114c7b
c01042e8:	68 6f 01 00 00       	push   $0x16f
c01042ed:	68 90 4c 11 c0       	push   $0xc0114c90
c01042f2:	e8 ee c1 ff ff       	call   c01004e5 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c01042f7:	83 ec 0c             	sub    $0xc,%esp
c01042fa:	68 33 4f 11 c0       	push   $0xc0114f33
c01042ff:	e8 7b c0 ff ff       	call   c010037f <cprintf>
c0104304:	83 c4 10             	add    $0x10,%esp
}
c0104307:	90                   	nop
c0104308:	c9                   	leave  
c0104309:	c3                   	ret    

c010430a <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010430a:	55                   	push   %ebp
c010430b:	89 e5                	mov    %esp,%ebp
c010430d:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0104310:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104317:	ff 75 10             	pushl  0x10(%ebp)
c010431a:	ff 75 08             	pushl  0x8(%ebp)
c010431d:	e8 86 f3 ff ff       	call   c01036a8 <find_vma>
c0104322:	83 c4 08             	add    $0x8,%esp
c0104325:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104328:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c010432d:	83 c0 01             	add    $0x1,%eax
c0104330:	a3 64 1f 15 c0       	mov    %eax,0xc0151f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104335:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104339:	74 0b                	je     c0104346 <do_pgfault+0x3c>
c010433b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010433e:	8b 40 04             	mov    0x4(%eax),%eax
c0104341:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104344:	76 18                	jbe    c010435e <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0104346:	83 ec 08             	sub    $0x8,%esp
c0104349:	ff 75 10             	pushl  0x10(%ebp)
c010434c:	68 50 4f 11 c0       	push   $0xc0114f50
c0104351:	e8 29 c0 ff ff       	call   c010037f <cprintf>
c0104356:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104359:	e9 e5 01 00 00       	jmp    c0104543 <do_pgfault+0x239>
    }
    //check the error_code
    switch (error_code & 3) {
c010435e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104361:	83 e0 03             	and    $0x3,%eax
c0104364:	85 c0                	test   %eax,%eax
c0104366:	74 3c                	je     c01043a4 <do_pgfault+0x9a>
c0104368:	83 f8 01             	cmp    $0x1,%eax
c010436b:	74 22                	je     c010438f <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c010436d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104370:	8b 40 0c             	mov    0xc(%eax),%eax
c0104373:	83 e0 02             	and    $0x2,%eax
c0104376:	85 c0                	test   %eax,%eax
c0104378:	75 4c                	jne    c01043c6 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010437a:	83 ec 0c             	sub    $0xc,%esp
c010437d:	68 80 4f 11 c0       	push   $0xc0114f80
c0104382:	e8 f8 bf ff ff       	call   c010037f <cprintf>
c0104387:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010438a:	e9 b4 01 00 00       	jmp    c0104543 <do_pgfault+0x239>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c010438f:	83 ec 0c             	sub    $0xc,%esp
c0104392:	68 e0 4f 11 c0       	push   $0xc0114fe0
c0104397:	e8 e3 bf ff ff       	call   c010037f <cprintf>
c010439c:	83 c4 10             	add    $0x10,%esp
        goto failed;
c010439f:	e9 9f 01 00 00       	jmp    c0104543 <do_pgfault+0x239>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01043a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043a7:	8b 40 0c             	mov    0xc(%eax),%eax
c01043aa:	83 e0 05             	and    $0x5,%eax
c01043ad:	85 c0                	test   %eax,%eax
c01043af:	75 16                	jne    c01043c7 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01043b1:	83 ec 0c             	sub    $0xc,%esp
c01043b4:	68 18 50 11 c0       	push   $0xc0115018
c01043b9:	e8 c1 bf ff ff       	call   c010037f <cprintf>
c01043be:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01043c1:	e9 7d 01 00 00       	jmp    c0104543 <do_pgfault+0x239>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c01043c6:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c01043c7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c01043ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01043d4:	83 e0 02             	and    $0x2,%eax
c01043d7:	85 c0                	test   %eax,%eax
c01043d9:	74 04                	je     c01043df <do_pgfault+0xd5>
        perm |= PTE_W;
c01043db:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c01043df:	8b 45 10             	mov    0x10(%ebp),%eax
c01043e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01043e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01043ed:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c01043f0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c01043f7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104401:	8b 40 0c             	mov    0xc(%eax),%eax
c0104404:	83 ec 04             	sub    $0x4,%esp
c0104407:	6a 01                	push   $0x1
c0104409:	ff 75 10             	pushl  0x10(%ebp)
c010440c:	50                   	push   %eax
c010440d:	e8 c1 33 00 00       	call   c01077d3 <get_pte>
c0104412:	83 c4 10             	add    $0x10,%esp
c0104415:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104418:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010441c:	75 15                	jne    c0104433 <do_pgfault+0x129>
        cprintf("get_pte in do_pgfault failed\n");
c010441e:	83 ec 0c             	sub    $0xc,%esp
c0104421:	68 7b 50 11 c0       	push   $0xc011507b
c0104426:	e8 54 bf ff ff       	call   c010037f <cprintf>
c010442b:	83 c4 10             	add    $0x10,%esp
        goto failed;
c010442e:	e9 10 01 00 00       	jmp    c0104543 <do_pgfault+0x239>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0104433:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104436:	8b 00                	mov    (%eax),%eax
c0104438:	85 c0                	test   %eax,%eax
c010443a:	75 35                	jne    c0104471 <do_pgfault+0x167>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c010443c:	8b 45 08             	mov    0x8(%ebp),%eax
c010443f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104442:	83 ec 04             	sub    $0x4,%esp
c0104445:	ff 75 f0             	pushl  -0x10(%ebp)
c0104448:	ff 75 10             	pushl  0x10(%ebp)
c010444b:	50                   	push   %eax
c010444c:	e8 3c 3a 00 00       	call   c0107e8d <pgdir_alloc_page>
c0104451:	83 c4 10             	add    $0x10,%esp
c0104454:	85 c0                	test   %eax,%eax
c0104456:	0f 85 e0 00 00 00    	jne    c010453c <do_pgfault+0x232>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c010445c:	83 ec 0c             	sub    $0xc,%esp
c010445f:	68 9c 50 11 c0       	push   $0xc011509c
c0104464:	e8 16 bf ff ff       	call   c010037f <cprintf>
c0104469:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010446c:	e9 d2 00 00 00       	jmp    c0104543 <do_pgfault+0x239>
        }
    }
    else {
        struct Page *page=NULL;
c0104471:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0104478:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010447b:	8b 00                	mov    (%eax),%eax
c010447d:	83 ec 04             	sub    $0x4,%esp
c0104480:	50                   	push   %eax
c0104481:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104484:	68 c3 50 11 c0       	push   $0xc01150c3
c0104489:	e8 f1 be ff ff       	call   c010037f <cprintf>
c010448e:	83 c4 10             	add    $0x10,%esp
        if (*ptep & PTE_P) {
c0104491:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104494:	8b 00                	mov    (%eax),%eax
c0104496:	83 e0 01             	and    $0x1,%eax
c0104499:	85 c0                	test   %eax,%eax
c010449b:	74 17                	je     c01044b4 <do_pgfault+0x1aa>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c010449d:	83 ec 04             	sub    $0x4,%esp
c01044a0:	68 e0 50 11 c0       	push   $0xc01150e0
c01044a5:	68 08 02 00 00       	push   $0x208
c01044aa:	68 90 4c 11 c0       	push   $0xc0114c90
c01044af:	e8 31 c0 ff ff       	call   c01004e5 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c01044b4:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c01044b9:	85 c0                	test   %eax,%eax
c01044bb:	74 30                	je     c01044ed <do_pgfault+0x1e3>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c01044bd:	83 ec 04             	sub    $0x4,%esp
c01044c0:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01044c3:	50                   	push   %eax
c01044c4:	ff 75 10             	pushl  0x10(%ebp)
c01044c7:	ff 75 08             	pushl  0x8(%ebp)
c01044ca:	e8 4f 05 00 00       	call   c0104a1e <swap_in>
c01044cf:	83 c4 10             	add    $0x10,%esp
c01044d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01044d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01044d9:	74 2b                	je     c0104506 <do_pgfault+0x1fc>
                   cprintf("swap_in in do_pgfault failed\n");
c01044db:	83 ec 0c             	sub    $0xc,%esp
c01044de:	68 ff 50 11 c0       	push   $0xc01150ff
c01044e3:	e8 97 be ff ff       	call   c010037f <cprintf>
c01044e8:	83 c4 10             	add    $0x10,%esp
                   goto failed;
c01044eb:	eb 56                	jmp    c0104543 <do_pgfault+0x239>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c01044ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044f0:	8b 00                	mov    (%eax),%eax
c01044f2:	83 ec 08             	sub    $0x8,%esp
c01044f5:	50                   	push   %eax
c01044f6:	68 20 51 11 c0       	push   $0xc0115120
c01044fb:	e8 7f be ff ff       	call   c010037f <cprintf>
c0104500:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104503:	90                   	nop
c0104504:	eb 3d                	jmp    c0104543 <do_pgfault+0x239>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0104506:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104509:	8b 45 08             	mov    0x8(%ebp),%eax
c010450c:	8b 40 0c             	mov    0xc(%eax),%eax
c010450f:	ff 75 f0             	pushl  -0x10(%ebp)
c0104512:	ff 75 10             	pushl  0x10(%ebp)
c0104515:	52                   	push   %edx
c0104516:	50                   	push   %eax
c0104517:	e8 68 38 00 00       	call   c0107d84 <page_insert>
c010451c:	83 c4 10             	add    $0x10,%esp
       swap_map_swappable(mm, addr, page, 1);
c010451f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104522:	6a 01                	push   $0x1
c0104524:	50                   	push   %eax
c0104525:	ff 75 10             	pushl  0x10(%ebp)
c0104528:	ff 75 08             	pushl  0x8(%ebp)
c010452b:	e8 5e 03 00 00       	call   c010488e <swap_map_swappable>
c0104530:	83 c4 10             	add    $0x10,%esp
       page->pra_vaddr = addr;
c0104533:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104536:	8b 55 10             	mov    0x10(%ebp),%edx
c0104539:	89 50 20             	mov    %edx,0x20(%eax)
   }
   ret = 0;
c010453c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104543:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104546:	c9                   	leave  
c0104547:	c3                   	ret    

c0104548 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104548:	55                   	push   %ebp
c0104549:	89 e5                	mov    %esp,%ebp
c010454b:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c010454e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104552:	0f 84 dc 00 00 00    	je     c0104634 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0104558:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010455f:	76 1c                	jbe    c010457d <user_mem_check+0x35>
c0104561:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104564:	8b 45 10             	mov    0x10(%ebp),%eax
c0104567:	01 d0                	add    %edx,%eax
c0104569:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010456c:	76 0f                	jbe    c010457d <user_mem_check+0x35>
c010456e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104571:	8b 45 10             	mov    0x10(%ebp),%eax
c0104574:	01 d0                	add    %edx,%eax
c0104576:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010457b:	76 0a                	jbe    c0104587 <user_mem_check+0x3f>
            return 0;
c010457d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104582:	e9 df 00 00 00       	jmp    c0104666 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0104587:	8b 45 0c             	mov    0xc(%ebp),%eax
c010458a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010458d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104590:	8b 45 10             	mov    0x10(%ebp),%eax
c0104593:	01 d0                	add    %edx,%eax
c0104595:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0104598:	e9 84 00 00 00       	jmp    c0104621 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010459d:	ff 75 fc             	pushl  -0x4(%ebp)
c01045a0:	ff 75 08             	pushl  0x8(%ebp)
c01045a3:	e8 00 f1 ff ff       	call   c01036a8 <find_vma>
c01045a8:	83 c4 08             	add    $0x8,%esp
c01045ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01045ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045b2:	74 0b                	je     c01045bf <user_mem_check+0x77>
c01045b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045b7:	8b 40 04             	mov    0x4(%eax),%eax
c01045ba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01045bd:	76 0a                	jbe    c01045c9 <user_mem_check+0x81>
                return 0;
c01045bf:	b8 00 00 00 00       	mov    $0x0,%eax
c01045c4:	e9 9d 00 00 00       	jmp    c0104666 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01045c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045cc:	8b 40 0c             	mov    0xc(%eax),%eax
c01045cf:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01045d3:	74 07                	je     c01045dc <user_mem_check+0x94>
c01045d5:	ba 02 00 00 00       	mov    $0x2,%edx
c01045da:	eb 05                	jmp    c01045e1 <user_mem_check+0x99>
c01045dc:	ba 01 00 00 00       	mov    $0x1,%edx
c01045e1:	21 d0                	and    %edx,%eax
c01045e3:	85 c0                	test   %eax,%eax
c01045e5:	75 07                	jne    c01045ee <user_mem_check+0xa6>
                return 0;
c01045e7:	b8 00 00 00 00       	mov    $0x0,%eax
c01045ec:	eb 78                	jmp    c0104666 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01045ee:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01045f2:	74 24                	je     c0104618 <user_mem_check+0xd0>
c01045f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01045fa:	83 e0 08             	and    $0x8,%eax
c01045fd:	85 c0                	test   %eax,%eax
c01045ff:	74 17                	je     c0104618 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104604:	8b 40 04             	mov    0x4(%eax),%eax
c0104607:	05 00 10 00 00       	add    $0x1000,%eax
c010460c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010460f:	76 07                	jbe    c0104618 <user_mem_check+0xd0>
                    return 0;
c0104611:	b8 00 00 00 00       	mov    $0x0,%eax
c0104616:	eb 4e                	jmp    c0104666 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010461b:	8b 40 08             	mov    0x8(%eax),%eax
c010461e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0104621:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104624:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104627:	0f 82 70 ff ff ff    	jb     c010459d <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010462d:	b8 01 00 00 00       	mov    $0x1,%eax
c0104632:	eb 32                	jmp    c0104666 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104634:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010463b:	76 23                	jbe    c0104660 <user_mem_check+0x118>
c010463d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104640:	8b 45 10             	mov    0x10(%ebp),%eax
c0104643:	01 d0                	add    %edx,%eax
c0104645:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104648:	76 16                	jbe    c0104660 <user_mem_check+0x118>
c010464a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010464d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104650:	01 d0                	add    %edx,%eax
c0104652:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104657:	77 07                	ja     c0104660 <user_mem_check+0x118>
c0104659:	b8 01 00 00 00       	mov    $0x1,%eax
c010465e:	eb 05                	jmp    c0104665 <user_mem_check+0x11d>
c0104660:	b8 00 00 00 00       	mov    $0x0,%eax
c0104665:	90                   	nop
}
c0104666:	c9                   	leave  
c0104667:	c3                   	ret    

c0104668 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0104668:	55                   	push   %ebp
c0104669:	89 e5                	mov    %esp,%ebp
c010466b:	83 ec 18             	sub    $0x18,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c010466e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104671:	05 00 10 00 00       	add    $0x1000,%eax
c0104676:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104679:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010467c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104681:	89 c2                	mov    %eax,%edx
c0104683:	8b 45 10             	mov    0x10(%ebp),%eax
c0104686:	29 c2                	sub    %eax,%edx
c0104688:	89 d0                	mov    %edx,%eax
c010468a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c010468d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104690:	3b 45 14             	cmp    0x14(%ebp),%eax
c0104693:	76 06                	jbe    c010469b <copy_string+0x33>
            part = maxn;
c0104695:	8b 45 14             	mov    0x14(%ebp),%eax
c0104698:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c010469b:	8b 45 10             	mov    0x10(%ebp),%eax
c010469e:	6a 00                	push   $0x0
c01046a0:	ff 75 f4             	pushl  -0xc(%ebp)
c01046a3:	50                   	push   %eax
c01046a4:	ff 75 08             	pushl  0x8(%ebp)
c01046a7:	e8 9c fe ff ff       	call   c0104548 <user_mem_check>
c01046ac:	83 c4 10             	add    $0x10,%esp
c01046af:	85 c0                	test   %eax,%eax
c01046b1:	75 07                	jne    c01046ba <copy_string+0x52>
            return 0;
c01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01046b8:	eb 7c                	jmp    c0104736 <copy_string+0xce>
        }
        if ((alen = strnlen(src, part)) < part) {
c01046ba:	83 ec 08             	sub    $0x8,%esp
c01046bd:	ff 75 f4             	pushl  -0xc(%ebp)
c01046c0:	ff 75 10             	pushl  0x10(%ebp)
c01046c3:	e8 16 f0 00 00       	call   c01136de <strnlen>
c01046c8:	83 c4 10             	add    $0x10,%esp
c01046cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01046ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01046d4:	73 1f                	jae    c01046f5 <copy_string+0x8d>
            memcpy(dst, src, alen + 1);
c01046d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046d9:	83 c0 01             	add    $0x1,%eax
c01046dc:	83 ec 04             	sub    $0x4,%esp
c01046df:	50                   	push   %eax
c01046e0:	ff 75 10             	pushl  0x10(%ebp)
c01046e3:	ff 75 0c             	pushl  0xc(%ebp)
c01046e6:	e8 08 f4 00 00       	call   c0113af3 <memcpy>
c01046eb:	83 c4 10             	add    $0x10,%esp
            return 1;
c01046ee:	b8 01 00 00 00       	mov    $0x1,%eax
c01046f3:	eb 41                	jmp    c0104736 <copy_string+0xce>
        }
        if (part == maxn) {
c01046f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046f8:	3b 45 14             	cmp    0x14(%ebp),%eax
c01046fb:	75 07                	jne    c0104704 <copy_string+0x9c>
            return 0;
c01046fd:	b8 00 00 00 00       	mov    $0x0,%eax
c0104702:	eb 32                	jmp    c0104736 <copy_string+0xce>
        }
        memcpy(dst, src, part);
c0104704:	83 ec 04             	sub    $0x4,%esp
c0104707:	ff 75 f4             	pushl  -0xc(%ebp)
c010470a:	ff 75 10             	pushl  0x10(%ebp)
c010470d:	ff 75 0c             	pushl  0xc(%ebp)
c0104710:	e8 de f3 00 00       	call   c0113af3 <memcpy>
c0104715:	83 c4 10             	add    $0x10,%esp
        dst += part, src += part, maxn -= part;
c0104718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010471b:	01 45 0c             	add    %eax,0xc(%ebp)
c010471e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104721:	01 45 10             	add    %eax,0x10(%ebp)
c0104724:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104727:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c010472a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0104731:	e9 57 ff ff ff       	jmp    c010468d <copy_string+0x25>
}
c0104736:	c9                   	leave  
c0104737:	c3                   	ret    

c0104738 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0104738:	55                   	push   %ebp
c0104739:	89 e5                	mov    %esp,%ebp
c010473b:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010473e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104741:	c1 e8 0c             	shr    $0xc,%eax
c0104744:	89 c2                	mov    %eax,%edx
c0104746:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010474b:	39 c2                	cmp    %eax,%edx
c010474d:	72 14                	jb     c0104763 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010474f:	83 ec 04             	sub    $0x4,%esp
c0104752:	68 48 51 11 c0       	push   $0xc0115148
c0104757:	6a 5e                	push   $0x5e
c0104759:	68 67 51 11 c0       	push   $0xc0115167
c010475e:	e8 82 bd ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0104763:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c0104769:	8b 45 08             	mov    0x8(%ebp),%eax
c010476c:	c1 e8 0c             	shr    $0xc,%eax
c010476f:	89 c2                	mov    %eax,%edx
c0104771:	89 d0                	mov    %edx,%eax
c0104773:	c1 e0 03             	shl    $0x3,%eax
c0104776:	01 d0                	add    %edx,%eax
c0104778:	c1 e0 02             	shl    $0x2,%eax
c010477b:	01 c8                	add    %ecx,%eax
}
c010477d:	c9                   	leave  
c010477e:	c3                   	ret    

c010477f <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010477f:	55                   	push   %ebp
c0104780:	89 e5                	mov    %esp,%ebp
c0104782:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0104785:	8b 45 08             	mov    0x8(%ebp),%eax
c0104788:	83 e0 01             	and    $0x1,%eax
c010478b:	85 c0                	test   %eax,%eax
c010478d:	75 14                	jne    c01047a3 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c010478f:	83 ec 04             	sub    $0x4,%esp
c0104792:	68 78 51 11 c0       	push   $0xc0115178
c0104797:	6a 70                	push   $0x70
c0104799:	68 67 51 11 c0       	push   $0xc0115167
c010479e:	e8 42 bd ff ff       	call   c01004e5 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01047a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01047a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01047ab:	83 ec 0c             	sub    $0xc,%esp
c01047ae:	50                   	push   %eax
c01047af:	e8 84 ff ff ff       	call   c0104738 <pa2page>
c01047b4:	83 c4 10             	add    $0x10,%esp
}
c01047b7:	c9                   	leave  
c01047b8:	c3                   	ret    

c01047b9 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01047b9:	55                   	push   %ebp
c01047ba:	89 e5                	mov    %esp,%ebp
c01047bc:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01047bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01047c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01047c7:	83 ec 0c             	sub    $0xc,%esp
c01047ca:	50                   	push   %eax
c01047cb:	e8 68 ff ff ff       	call   c0104738 <pa2page>
c01047d0:	83 c4 10             	add    $0x10,%esp
}
c01047d3:	c9                   	leave  
c01047d4:	c3                   	ret    

c01047d5 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01047d5:	55                   	push   %ebp
c01047d6:	89 e5                	mov    %esp,%ebp
c01047d8:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c01047db:	e8 8a 9b 00 00       	call   c010e36a <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c01047e0:	a1 bc 51 15 c0       	mov    0xc01551bc,%eax
c01047e5:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c01047ea:	76 0c                	jbe    c01047f8 <swap_init+0x23>
c01047ec:	a1 bc 51 15 c0       	mov    0xc01551bc,%eax
c01047f1:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c01047f6:	76 17                	jbe    c010480f <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c01047f8:	a1 bc 51 15 c0       	mov    0xc01551bc,%eax
c01047fd:	50                   	push   %eax
c01047fe:	68 99 51 11 c0       	push   $0xc0115199
c0104803:	6a 27                	push   $0x27
c0104805:	68 b4 51 11 c0       	push   $0xc01151b4
c010480a:	e8 d6 bc ff ff       	call   c01004e5 <__panic>
     }
     

     sm = &swap_manager_fifo;
c010480f:	c7 05 70 1f 15 c0 00 	movl   $0xc014ea00,0xc0151f70
c0104816:	ea 14 c0 
     int r = sm->init();
c0104819:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c010481e:	8b 40 04             	mov    0x4(%eax),%eax
c0104821:	ff d0                	call   *%eax
c0104823:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0104826:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010482a:	75 27                	jne    c0104853 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c010482c:	c7 05 68 1f 15 c0 01 	movl   $0x1,0xc0151f68
c0104833:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0104836:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c010483b:	8b 00                	mov    (%eax),%eax
c010483d:	83 ec 08             	sub    $0x8,%esp
c0104840:	50                   	push   %eax
c0104841:	68 c3 51 11 c0       	push   $0xc01151c3
c0104846:	e8 34 bb ff ff       	call   c010037f <cprintf>
c010484b:	83 c4 10             	add    $0x10,%esp
          check_swap();
c010484e:	e8 f7 03 00 00       	call   c0104c4a <check_swap>
     }

     return r;
c0104853:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104856:	c9                   	leave  
c0104857:	c3                   	ret    

c0104858 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0104858:	55                   	push   %ebp
c0104859:	89 e5                	mov    %esp,%ebp
c010485b:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c010485e:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c0104863:	8b 40 08             	mov    0x8(%eax),%eax
c0104866:	83 ec 0c             	sub    $0xc,%esp
c0104869:	ff 75 08             	pushl  0x8(%ebp)
c010486c:	ff d0                	call   *%eax
c010486e:	83 c4 10             	add    $0x10,%esp
}
c0104871:	c9                   	leave  
c0104872:	c3                   	ret    

c0104873 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0104873:	55                   	push   %ebp
c0104874:	89 e5                	mov    %esp,%ebp
c0104876:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c0104879:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c010487e:	8b 40 0c             	mov    0xc(%eax),%eax
c0104881:	83 ec 0c             	sub    $0xc,%esp
c0104884:	ff 75 08             	pushl  0x8(%ebp)
c0104887:	ff d0                	call   *%eax
c0104889:	83 c4 10             	add    $0x10,%esp
}
c010488c:	c9                   	leave  
c010488d:	c3                   	ret    

c010488e <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010488e:	55                   	push   %ebp
c010488f:	89 e5                	mov    %esp,%ebp
c0104891:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0104894:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c0104899:	8b 40 10             	mov    0x10(%eax),%eax
c010489c:	ff 75 14             	pushl  0x14(%ebp)
c010489f:	ff 75 10             	pushl  0x10(%ebp)
c01048a2:	ff 75 0c             	pushl  0xc(%ebp)
c01048a5:	ff 75 08             	pushl  0x8(%ebp)
c01048a8:	ff d0                	call   *%eax
c01048aa:	83 c4 10             	add    $0x10,%esp
}
c01048ad:	c9                   	leave  
c01048ae:	c3                   	ret    

c01048af <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01048af:	55                   	push   %ebp
c01048b0:	89 e5                	mov    %esp,%ebp
c01048b2:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c01048b5:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c01048ba:	8b 40 14             	mov    0x14(%eax),%eax
c01048bd:	83 ec 08             	sub    $0x8,%esp
c01048c0:	ff 75 0c             	pushl  0xc(%ebp)
c01048c3:	ff 75 08             	pushl  0x8(%ebp)
c01048c6:	ff d0                	call   *%eax
c01048c8:	83 c4 10             	add    $0x10,%esp
}
c01048cb:	c9                   	leave  
c01048cc:	c3                   	ret    

c01048cd <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01048cd:	55                   	push   %ebp
c01048ce:	89 e5                	mov    %esp,%ebp
c01048d0:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01048d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01048da:	e9 2e 01 00 00       	jmp    c0104a0d <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01048df:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c01048e4:	8b 40 18             	mov    0x18(%eax),%eax
c01048e7:	83 ec 04             	sub    $0x4,%esp
c01048ea:	ff 75 10             	pushl  0x10(%ebp)
c01048ed:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01048f0:	52                   	push   %edx
c01048f1:	ff 75 08             	pushl  0x8(%ebp)
c01048f4:	ff d0                	call   *%eax
c01048f6:	83 c4 10             	add    $0x10,%esp
c01048f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01048fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104900:	74 18                	je     c010491a <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0104902:	83 ec 08             	sub    $0x8,%esp
c0104905:	ff 75 f4             	pushl  -0xc(%ebp)
c0104908:	68 d8 51 11 c0       	push   $0xc01151d8
c010490d:	e8 6d ba ff ff       	call   c010037f <cprintf>
c0104912:	83 c4 10             	add    $0x10,%esp
c0104915:	e9 ff 00 00 00       	jmp    c0104a19 <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010491a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010491d:	8b 40 20             	mov    0x20(%eax),%eax
c0104920:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0104923:	8b 45 08             	mov    0x8(%ebp),%eax
c0104926:	8b 40 0c             	mov    0xc(%eax),%eax
c0104929:	83 ec 04             	sub    $0x4,%esp
c010492c:	6a 00                	push   $0x0
c010492e:	ff 75 ec             	pushl  -0x14(%ebp)
c0104931:	50                   	push   %eax
c0104932:	e8 9c 2e 00 00       	call   c01077d3 <get_pte>
c0104937:	83 c4 10             	add    $0x10,%esp
c010493a:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010493d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104940:	8b 00                	mov    (%eax),%eax
c0104942:	83 e0 01             	and    $0x1,%eax
c0104945:	85 c0                	test   %eax,%eax
c0104947:	75 16                	jne    c010495f <swap_out+0x92>
c0104949:	68 05 52 11 c0       	push   $0xc0115205
c010494e:	68 1a 52 11 c0       	push   $0xc011521a
c0104953:	6a 67                	push   $0x67
c0104955:	68 b4 51 11 c0       	push   $0xc01151b4
c010495a:	e8 86 bb ff ff       	call   c01004e5 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c010495f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104962:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104965:	8b 52 20             	mov    0x20(%edx),%edx
c0104968:	c1 ea 0c             	shr    $0xc,%edx
c010496b:	83 c2 01             	add    $0x1,%edx
c010496e:	c1 e2 08             	shl    $0x8,%edx
c0104971:	83 ec 08             	sub    $0x8,%esp
c0104974:	50                   	push   %eax
c0104975:	52                   	push   %edx
c0104976:	e8 8b 9a 00 00       	call   c010e406 <swapfs_write>
c010497b:	83 c4 10             	add    $0x10,%esp
c010497e:	85 c0                	test   %eax,%eax
c0104980:	74 2b                	je     c01049ad <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0104982:	83 ec 0c             	sub    $0xc,%esp
c0104985:	68 2f 52 11 c0       	push   $0xc011522f
c010498a:	e8 f0 b9 ff ff       	call   c010037f <cprintf>
c010498f:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0104992:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c0104997:	8b 40 10             	mov    0x10(%eax),%eax
c010499a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010499d:	6a 00                	push   $0x0
c010499f:	52                   	push   %edx
c01049a0:	ff 75 ec             	pushl  -0x14(%ebp)
c01049a3:	ff 75 08             	pushl  0x8(%ebp)
c01049a6:	ff d0                	call   *%eax
c01049a8:	83 c4 10             	add    $0x10,%esp
c01049ab:	eb 5c                	jmp    c0104a09 <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01049ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049b0:	8b 40 20             	mov    0x20(%eax),%eax
c01049b3:	c1 e8 0c             	shr    $0xc,%eax
c01049b6:	83 c0 01             	add    $0x1,%eax
c01049b9:	50                   	push   %eax
c01049ba:	ff 75 ec             	pushl  -0x14(%ebp)
c01049bd:	ff 75 f4             	pushl  -0xc(%ebp)
c01049c0:	68 48 52 11 c0       	push   $0xc0115248
c01049c5:	e8 b5 b9 ff ff       	call   c010037f <cprintf>
c01049ca:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01049cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049d0:	8b 40 20             	mov    0x20(%eax),%eax
c01049d3:	c1 e8 0c             	shr    $0xc,%eax
c01049d6:	83 c0 01             	add    $0x1,%eax
c01049d9:	c1 e0 08             	shl    $0x8,%eax
c01049dc:	89 c2                	mov    %eax,%edx
c01049de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01049e1:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01049e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049e6:	83 ec 08             	sub    $0x8,%esp
c01049e9:	6a 01                	push   $0x1
c01049eb:	50                   	push   %eax
c01049ec:	e8 d2 27 00 00       	call   c01071c3 <free_pages>
c01049f1:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c01049f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01049f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01049fa:	83 ec 08             	sub    $0x8,%esp
c01049fd:	ff 75 ec             	pushl  -0x14(%ebp)
c0104a00:	50                   	push   %eax
c0104a01:	e8 37 34 00 00       	call   c0107e3d <tlb_invalidate>
c0104a06:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0104a09:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a10:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104a13:	0f 85 c6 fe ff ff    	jne    c01048df <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0104a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104a1c:	c9                   	leave  
c0104a1d:	c3                   	ret    

c0104a1e <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0104a1e:	55                   	push   %ebp
c0104a1f:	89 e5                	mov    %esp,%ebp
c0104a21:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0104a24:	83 ec 0c             	sub    $0xc,%esp
c0104a27:	6a 01                	push   $0x1
c0104a29:	e8 29 27 00 00       	call   c0107157 <alloc_pages>
c0104a2e:	83 c4 10             	add    $0x10,%esp
c0104a31:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0104a34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104a38:	75 16                	jne    c0104a50 <swap_in+0x32>
c0104a3a:	68 88 52 11 c0       	push   $0xc0115288
c0104a3f:	68 1a 52 11 c0       	push   $0xc011521a
c0104a44:	6a 7d                	push   $0x7d
c0104a46:	68 b4 51 11 c0       	push   $0xc01151b4
c0104a4b:	e8 95 ba ff ff       	call   c01004e5 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a53:	8b 40 0c             	mov    0xc(%eax),%eax
c0104a56:	83 ec 04             	sub    $0x4,%esp
c0104a59:	6a 00                	push   $0x0
c0104a5b:	ff 75 0c             	pushl  0xc(%ebp)
c0104a5e:	50                   	push   %eax
c0104a5f:	e8 6f 2d 00 00       	call   c01077d3 <get_pte>
c0104a64:	83 c4 10             	add    $0x10,%esp
c0104a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0104a6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6d:	8b 00                	mov    (%eax),%eax
c0104a6f:	83 ec 08             	sub    $0x8,%esp
c0104a72:	ff 75 f4             	pushl  -0xc(%ebp)
c0104a75:	50                   	push   %eax
c0104a76:	e8 32 99 00 00       	call   c010e3ad <swapfs_read>
c0104a7b:	83 c4 10             	add    $0x10,%esp
c0104a7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104a81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104a85:	74 1f                	je     c0104aa6 <swap_in+0x88>
     {
        assert(r!=0);
c0104a87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104a8b:	75 19                	jne    c0104aa6 <swap_in+0x88>
c0104a8d:	68 95 52 11 c0       	push   $0xc0115295
c0104a92:	68 1a 52 11 c0       	push   $0xc011521a
c0104a97:	68 85 00 00 00       	push   $0x85
c0104a9c:	68 b4 51 11 c0       	push   $0xc01151b4
c0104aa1:	e8 3f ba ff ff       	call   c01004e5 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0104aa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa9:	8b 00                	mov    (%eax),%eax
c0104aab:	c1 e8 08             	shr    $0x8,%eax
c0104aae:	83 ec 04             	sub    $0x4,%esp
c0104ab1:	ff 75 0c             	pushl  0xc(%ebp)
c0104ab4:	50                   	push   %eax
c0104ab5:	68 9c 52 11 c0       	push   $0xc011529c
c0104aba:	e8 c0 b8 ff ff       	call   c010037f <cprintf>
c0104abf:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0104ac2:	8b 45 10             	mov    0x10(%ebp),%eax
c0104ac5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104ac8:	89 10                	mov    %edx,(%eax)
     return 0;
c0104aca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104acf:	c9                   	leave  
c0104ad0:	c3                   	ret    

c0104ad1 <check_content_set>:



static inline void
check_content_set(void)
{
c0104ad1:	55                   	push   %ebp
c0104ad2:	89 e5                	mov    %esp,%ebp
c0104ad4:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0104ad7:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104adc:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0104adf:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104ae4:	83 f8 01             	cmp    $0x1,%eax
c0104ae7:	74 19                	je     c0104b02 <check_content_set+0x31>
c0104ae9:	68 da 52 11 c0       	push   $0xc01152da
c0104aee:	68 1a 52 11 c0       	push   $0xc011521a
c0104af3:	68 92 00 00 00       	push   $0x92
c0104af8:	68 b4 51 11 c0       	push   $0xc01151b4
c0104afd:	e8 e3 b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0104b02:	b8 10 10 00 00       	mov    $0x1010,%eax
c0104b07:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0104b0a:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b0f:	83 f8 01             	cmp    $0x1,%eax
c0104b12:	74 19                	je     c0104b2d <check_content_set+0x5c>
c0104b14:	68 da 52 11 c0       	push   $0xc01152da
c0104b19:	68 1a 52 11 c0       	push   $0xc011521a
c0104b1e:	68 94 00 00 00       	push   $0x94
c0104b23:	68 b4 51 11 c0       	push   $0xc01151b4
c0104b28:	e8 b8 b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0104b2d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104b32:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0104b35:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b3a:	83 f8 02             	cmp    $0x2,%eax
c0104b3d:	74 19                	je     c0104b58 <check_content_set+0x87>
c0104b3f:	68 e9 52 11 c0       	push   $0xc01152e9
c0104b44:	68 1a 52 11 c0       	push   $0xc011521a
c0104b49:	68 96 00 00 00       	push   $0x96
c0104b4e:	68 b4 51 11 c0       	push   $0xc01151b4
c0104b53:	e8 8d b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0104b58:	b8 10 20 00 00       	mov    $0x2010,%eax
c0104b5d:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0104b60:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b65:	83 f8 02             	cmp    $0x2,%eax
c0104b68:	74 19                	je     c0104b83 <check_content_set+0xb2>
c0104b6a:	68 e9 52 11 c0       	push   $0xc01152e9
c0104b6f:	68 1a 52 11 c0       	push   $0xc011521a
c0104b74:	68 98 00 00 00       	push   $0x98
c0104b79:	68 b4 51 11 c0       	push   $0xc01151b4
c0104b7e:	e8 62 b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0104b83:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104b88:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0104b8b:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b90:	83 f8 03             	cmp    $0x3,%eax
c0104b93:	74 19                	je     c0104bae <check_content_set+0xdd>
c0104b95:	68 f8 52 11 c0       	push   $0xc01152f8
c0104b9a:	68 1a 52 11 c0       	push   $0xc011521a
c0104b9f:	68 9a 00 00 00       	push   $0x9a
c0104ba4:	68 b4 51 11 c0       	push   $0xc01151b4
c0104ba9:	e8 37 b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0104bae:	b8 10 30 00 00       	mov    $0x3010,%eax
c0104bb3:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0104bb6:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104bbb:	83 f8 03             	cmp    $0x3,%eax
c0104bbe:	74 19                	je     c0104bd9 <check_content_set+0x108>
c0104bc0:	68 f8 52 11 c0       	push   $0xc01152f8
c0104bc5:	68 1a 52 11 c0       	push   $0xc011521a
c0104bca:	68 9c 00 00 00       	push   $0x9c
c0104bcf:	68 b4 51 11 c0       	push   $0xc01151b4
c0104bd4:	e8 0c b9 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0104bd9:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104bde:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0104be1:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104be6:	83 f8 04             	cmp    $0x4,%eax
c0104be9:	74 19                	je     c0104c04 <check_content_set+0x133>
c0104beb:	68 07 53 11 c0       	push   $0xc0115307
c0104bf0:	68 1a 52 11 c0       	push   $0xc011521a
c0104bf5:	68 9e 00 00 00       	push   $0x9e
c0104bfa:	68 b4 51 11 c0       	push   $0xc01151b4
c0104bff:	e8 e1 b8 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0104c04:	b8 10 40 00 00       	mov    $0x4010,%eax
c0104c09:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0104c0c:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104c11:	83 f8 04             	cmp    $0x4,%eax
c0104c14:	74 19                	je     c0104c2f <check_content_set+0x15e>
c0104c16:	68 07 53 11 c0       	push   $0xc0115307
c0104c1b:	68 1a 52 11 c0       	push   $0xc011521a
c0104c20:	68 a0 00 00 00       	push   $0xa0
c0104c25:	68 b4 51 11 c0       	push   $0xc01151b4
c0104c2a:	e8 b6 b8 ff ff       	call   c01004e5 <__panic>
}
c0104c2f:	90                   	nop
c0104c30:	c9                   	leave  
c0104c31:	c3                   	ret    

c0104c32 <check_content_access>:

static inline int
check_content_access(void)
{
c0104c32:	55                   	push   %ebp
c0104c33:	89 e5                	mov    %esp,%ebp
c0104c35:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0104c38:	a1 70 1f 15 c0       	mov    0xc0151f70,%eax
c0104c3d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104c40:	ff d0                	call   *%eax
c0104c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0104c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104c48:	c9                   	leave  
c0104c49:	c3                   	ret    

c0104c4a <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0104c4a:	55                   	push   %ebp
c0104c4b:	89 e5                	mov    %esp,%ebp
c0104c4d:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0104c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104c57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0104c5e:	c7 45 e8 ec 51 15 c0 	movl   $0xc01551ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0104c65:	eb 60                	jmp    c0104cc7 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0104c67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104c6a:	83 e8 10             	sub    $0x10,%eax
c0104c6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0104c70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104c73:	83 c0 04             	add    $0x4,%eax
c0104c76:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0104c7d:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104c80:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0104c83:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0104c86:	0f a3 10             	bt     %edx,(%eax)
c0104c89:	19 c0                	sbb    %eax,%eax
c0104c8b:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0104c8e:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0104c92:	0f 95 c0             	setne  %al
c0104c95:	0f b6 c0             	movzbl %al,%eax
c0104c98:	85 c0                	test   %eax,%eax
c0104c9a:	75 19                	jne    c0104cb5 <check_swap+0x6b>
c0104c9c:	68 16 53 11 c0       	push   $0xc0115316
c0104ca1:	68 1a 52 11 c0       	push   $0xc011521a
c0104ca6:	68 bb 00 00 00       	push   $0xbb
c0104cab:	68 b4 51 11 c0       	push   $0xc01151b4
c0104cb0:	e8 30 b8 ff ff       	call   c01004e5 <__panic>
        count ++, total += p->property;
c0104cb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104cb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104cbc:	8b 50 08             	mov    0x8(%eax),%edx
c0104cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc2:	01 d0                	add    %edx,%eax
c0104cc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104cc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104cca:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104ccd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104cd0:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0104cd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104cd6:	81 7d e8 ec 51 15 c0 	cmpl   $0xc01551ec,-0x18(%ebp)
c0104cdd:	75 88                	jne    c0104c67 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0104cdf:	e8 14 25 00 00       	call   c01071f8 <nr_free_pages>
c0104ce4:	89 c2                	mov    %eax,%edx
c0104ce6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ce9:	39 c2                	cmp    %eax,%edx
c0104ceb:	74 19                	je     c0104d06 <check_swap+0xbc>
c0104ced:	68 26 53 11 c0       	push   $0xc0115326
c0104cf2:	68 1a 52 11 c0       	push   $0xc011521a
c0104cf7:	68 be 00 00 00       	push   $0xbe
c0104cfc:	68 b4 51 11 c0       	push   $0xc01151b4
c0104d01:	e8 df b7 ff ff       	call   c01004e5 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0104d06:	83 ec 04             	sub    $0x4,%esp
c0104d09:	ff 75 f0             	pushl  -0x10(%ebp)
c0104d0c:	ff 75 f4             	pushl  -0xc(%ebp)
c0104d0f:	68 40 53 11 c0       	push   $0xc0115340
c0104d14:	e8 66 b6 ff ff       	call   c010037f <cprintf>
c0104d19:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0104d1c:	e8 ab e8 ff ff       	call   c01035cc <mm_create>
c0104d21:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0104d24:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0104d28:	75 19                	jne    c0104d43 <check_swap+0xf9>
c0104d2a:	68 66 53 11 c0       	push   $0xc0115366
c0104d2f:	68 1a 52 11 c0       	push   $0xc011521a
c0104d34:	68 c3 00 00 00       	push   $0xc3
c0104d39:	68 b4 51 11 c0       	push   $0xc01151b4
c0104d3e:	e8 a2 b7 ff ff       	call   c01004e5 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0104d43:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c0104d48:	85 c0                	test   %eax,%eax
c0104d4a:	74 19                	je     c0104d65 <check_swap+0x11b>
c0104d4c:	68 71 53 11 c0       	push   $0xc0115371
c0104d51:	68 1a 52 11 c0       	push   $0xc011521a
c0104d56:	68 c6 00 00 00       	push   $0xc6
c0104d5b:	68 b4 51 11 c0       	push   $0xc01151b4
c0104d60:	e8 80 b7 ff ff       	call   c01004e5 <__panic>

     check_mm_struct = mm;
c0104d65:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104d68:	a3 04 51 15 c0       	mov    %eax,0xc0155104

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104d6d:	8b 15 20 ea 14 c0    	mov    0xc014ea20,%edx
c0104d73:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104d76:	89 50 0c             	mov    %edx,0xc(%eax)
c0104d79:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104d7c:	8b 40 0c             	mov    0xc(%eax),%eax
c0104d7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0104d82:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104d85:	8b 00                	mov    (%eax),%eax
c0104d87:	85 c0                	test   %eax,%eax
c0104d89:	74 19                	je     c0104da4 <check_swap+0x15a>
c0104d8b:	68 89 53 11 c0       	push   $0xc0115389
c0104d90:	68 1a 52 11 c0       	push   $0xc011521a
c0104d95:	68 cb 00 00 00       	push   $0xcb
c0104d9a:	68 b4 51 11 c0       	push   $0xc01151b4
c0104d9f:	e8 41 b7 ff ff       	call   c01004e5 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0104da4:	83 ec 04             	sub    $0x4,%esp
c0104da7:	6a 03                	push   $0x3
c0104da9:	68 00 60 00 00       	push   $0x6000
c0104dae:	68 00 10 00 00       	push   $0x1000
c0104db3:	e8 b4 e8 ff ff       	call   c010366c <vma_create>
c0104db8:	83 c4 10             	add    $0x10,%esp
c0104dbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0104dbe:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0104dc2:	75 19                	jne    c0104ddd <check_swap+0x193>
c0104dc4:	68 97 53 11 c0       	push   $0xc0115397
c0104dc9:	68 1a 52 11 c0       	push   $0xc011521a
c0104dce:	68 ce 00 00 00       	push   $0xce
c0104dd3:	68 b4 51 11 c0       	push   $0xc01151b4
c0104dd8:	e8 08 b7 ff ff       	call   c01004e5 <__panic>

     insert_vma_struct(mm, vma);
c0104ddd:	83 ec 08             	sub    $0x8,%esp
c0104de0:	ff 75 d0             	pushl  -0x30(%ebp)
c0104de3:	ff 75 d8             	pushl  -0x28(%ebp)
c0104de6:	e8 e9 e9 ff ff       	call   c01037d4 <insert_vma_struct>
c0104deb:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0104dee:	83 ec 0c             	sub    $0xc,%esp
c0104df1:	68 a4 53 11 c0       	push   $0xc01153a4
c0104df6:	e8 84 b5 ff ff       	call   c010037f <cprintf>
c0104dfb:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0104dfe:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0104e05:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104e08:	8b 40 0c             	mov    0xc(%eax),%eax
c0104e0b:	83 ec 04             	sub    $0x4,%esp
c0104e0e:	6a 01                	push   $0x1
c0104e10:	68 00 10 00 00       	push   $0x1000
c0104e15:	50                   	push   %eax
c0104e16:	e8 b8 29 00 00       	call   c01077d3 <get_pte>
c0104e1b:	83 c4 10             	add    $0x10,%esp
c0104e1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c0104e21:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0104e25:	75 19                	jne    c0104e40 <check_swap+0x1f6>
c0104e27:	68 d8 53 11 c0       	push   $0xc01153d8
c0104e2c:	68 1a 52 11 c0       	push   $0xc011521a
c0104e31:	68 d6 00 00 00       	push   $0xd6
c0104e36:	68 b4 51 11 c0       	push   $0xc01151b4
c0104e3b:	e8 a5 b6 ff ff       	call   c01004e5 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0104e40:	83 ec 0c             	sub    $0xc,%esp
c0104e43:	68 ec 53 11 c0       	push   $0xc01153ec
c0104e48:	e8 32 b5 ff ff       	call   c010037f <cprintf>
c0104e4d:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0104e50:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104e57:	e9 90 00 00 00       	jmp    c0104eec <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0104e5c:	83 ec 0c             	sub    $0xc,%esp
c0104e5f:	6a 01                	push   $0x1
c0104e61:	e8 f1 22 00 00       	call   c0107157 <alloc_pages>
c0104e66:	83 c4 10             	add    $0x10,%esp
c0104e69:	89 c2                	mov    %eax,%edx
c0104e6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e6e:	89 14 85 20 51 15 c0 	mov    %edx,-0x3feaaee0(,%eax,4)
          assert(check_rp[i] != NULL );
c0104e75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e78:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c0104e7f:	85 c0                	test   %eax,%eax
c0104e81:	75 19                	jne    c0104e9c <check_swap+0x252>
c0104e83:	68 10 54 11 c0       	push   $0xc0115410
c0104e88:	68 1a 52 11 c0       	push   $0xc011521a
c0104e8d:	68 db 00 00 00       	push   $0xdb
c0104e92:	68 b4 51 11 c0       	push   $0xc01151b4
c0104e97:	e8 49 b6 ff ff       	call   c01004e5 <__panic>
          assert(!PageProperty(check_rp[i]));
c0104e9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e9f:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c0104ea6:	83 c0 04             	add    $0x4,%eax
c0104ea9:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0104eb0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104eb3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0104eb6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104eb9:	0f a3 10             	bt     %edx,(%eax)
c0104ebc:	19 c0                	sbb    %eax,%eax
c0104ebe:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0104ec1:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0104ec5:	0f 95 c0             	setne  %al
c0104ec8:	0f b6 c0             	movzbl %al,%eax
c0104ecb:	85 c0                	test   %eax,%eax
c0104ecd:	74 19                	je     c0104ee8 <check_swap+0x29e>
c0104ecf:	68 24 54 11 c0       	push   $0xc0115424
c0104ed4:	68 1a 52 11 c0       	push   $0xc011521a
c0104ed9:	68 dc 00 00 00       	push   $0xdc
c0104ede:	68 b4 51 11 c0       	push   $0xc01151b4
c0104ee3:	e8 fd b5 ff ff       	call   c01004e5 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0104ee8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0104eec:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0104ef0:	0f 8e 66 ff ff ff    	jle    c0104e5c <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0104ef6:	a1 ec 51 15 c0       	mov    0xc01551ec,%eax
c0104efb:	8b 15 f0 51 15 c0    	mov    0xc01551f0,%edx
c0104f01:	89 45 98             	mov    %eax,-0x68(%ebp)
c0104f04:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0104f07:	c7 45 c0 ec 51 15 c0 	movl   $0xc01551ec,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104f0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104f11:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104f14:	89 50 04             	mov    %edx,0x4(%eax)
c0104f17:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104f1a:	8b 50 04             	mov    0x4(%eax),%edx
c0104f1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104f20:	89 10                	mov    %edx,(%eax)
c0104f22:	c7 45 c8 ec 51 15 c0 	movl   $0xc01551ec,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104f29:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104f2c:	8b 40 04             	mov    0x4(%eax),%eax
c0104f2f:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0104f32:	0f 94 c0             	sete   %al
c0104f35:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0104f38:	85 c0                	test   %eax,%eax
c0104f3a:	75 19                	jne    c0104f55 <check_swap+0x30b>
c0104f3c:	68 3f 54 11 c0       	push   $0xc011543f
c0104f41:	68 1a 52 11 c0       	push   $0xc011521a
c0104f46:	68 e0 00 00 00       	push   $0xe0
c0104f4b:	68 b4 51 11 c0       	push   $0xc01151b4
c0104f50:	e8 90 b5 ff ff       	call   c01004e5 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0104f55:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0104f5a:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0104f5d:	c7 05 f4 51 15 c0 00 	movl   $0x0,0xc01551f4
c0104f64:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0104f67:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104f6e:	eb 1c                	jmp    c0104f8c <check_swap+0x342>
        free_pages(check_rp[i],1);
c0104f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f73:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c0104f7a:	83 ec 08             	sub    $0x8,%esp
c0104f7d:	6a 01                	push   $0x1
c0104f7f:	50                   	push   %eax
c0104f80:	e8 3e 22 00 00       	call   c01071c3 <free_pages>
c0104f85:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0104f88:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0104f8c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0104f90:	7e de                	jle    c0104f70 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0104f92:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0104f97:	83 f8 04             	cmp    $0x4,%eax
c0104f9a:	74 19                	je     c0104fb5 <check_swap+0x36b>
c0104f9c:	68 58 54 11 c0       	push   $0xc0115458
c0104fa1:	68 1a 52 11 c0       	push   $0xc011521a
c0104fa6:	68 e9 00 00 00       	push   $0xe9
c0104fab:	68 b4 51 11 c0       	push   $0xc01151b4
c0104fb0:	e8 30 b5 ff ff       	call   c01004e5 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0104fb5:	83 ec 0c             	sub    $0xc,%esp
c0104fb8:	68 7c 54 11 c0       	push   $0xc011547c
c0104fbd:	e8 bd b3 ff ff       	call   c010037f <cprintf>
c0104fc2:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0104fc5:	c7 05 64 1f 15 c0 00 	movl   $0x0,0xc0151f64
c0104fcc:	00 00 00 
     
     check_content_set();
c0104fcf:	e8 fd fa ff ff       	call   c0104ad1 <check_content_set>
     assert( nr_free == 0);         
c0104fd4:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0104fd9:	85 c0                	test   %eax,%eax
c0104fdb:	74 19                	je     c0104ff6 <check_swap+0x3ac>
c0104fdd:	68 a3 54 11 c0       	push   $0xc01154a3
c0104fe2:	68 1a 52 11 c0       	push   $0xc011521a
c0104fe7:	68 f2 00 00 00       	push   $0xf2
c0104fec:	68 b4 51 11 c0       	push   $0xc01151b4
c0104ff1:	e8 ef b4 ff ff       	call   c01004e5 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0104ff6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104ffd:	eb 26                	jmp    c0105025 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0104fff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105002:	c7 04 85 40 51 15 c0 	movl   $0xffffffff,-0x3feaaec0(,%eax,4)
c0105009:	ff ff ff ff 
c010500d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105010:	8b 14 85 40 51 15 c0 	mov    -0x3feaaec0(,%eax,4),%edx
c0105017:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010501a:	89 14 85 80 51 15 c0 	mov    %edx,-0x3feaae80(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105021:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105025:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105029:	7e d4                	jle    c0104fff <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010502b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105032:	e9 cc 00 00 00       	jmp    c0105103 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105037:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010503a:	c7 04 85 d4 51 15 c0 	movl   $0x0,-0x3feaae2c(,%eax,4)
c0105041:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105045:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105048:	83 c0 01             	add    $0x1,%eax
c010504b:	c1 e0 0c             	shl    $0xc,%eax
c010504e:	83 ec 04             	sub    $0x4,%esp
c0105051:	6a 00                	push   $0x0
c0105053:	50                   	push   %eax
c0105054:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105057:	e8 77 27 00 00       	call   c01077d3 <get_pte>
c010505c:	83 c4 10             	add    $0x10,%esp
c010505f:	89 c2                	mov    %eax,%edx
c0105061:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105064:	89 14 85 d4 51 15 c0 	mov    %edx,-0x3feaae2c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010506b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010506e:	8b 04 85 d4 51 15 c0 	mov    -0x3feaae2c(,%eax,4),%eax
c0105075:	85 c0                	test   %eax,%eax
c0105077:	75 19                	jne    c0105092 <check_swap+0x448>
c0105079:	68 b0 54 11 c0       	push   $0xc01154b0
c010507e:	68 1a 52 11 c0       	push   $0xc011521a
c0105083:	68 fa 00 00 00       	push   $0xfa
c0105088:	68 b4 51 11 c0       	push   $0xc01151b4
c010508d:	e8 53 b4 ff ff       	call   c01004e5 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105092:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105095:	8b 04 85 d4 51 15 c0 	mov    -0x3feaae2c(,%eax,4),%eax
c010509c:	8b 00                	mov    (%eax),%eax
c010509e:	83 ec 0c             	sub    $0xc,%esp
c01050a1:	50                   	push   %eax
c01050a2:	e8 d8 f6 ff ff       	call   c010477f <pte2page>
c01050a7:	83 c4 10             	add    $0x10,%esp
c01050aa:	89 c2                	mov    %eax,%edx
c01050ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01050af:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c01050b6:	39 c2                	cmp    %eax,%edx
c01050b8:	74 19                	je     c01050d3 <check_swap+0x489>
c01050ba:	68 c8 54 11 c0       	push   $0xc01154c8
c01050bf:	68 1a 52 11 c0       	push   $0xc011521a
c01050c4:	68 fb 00 00 00       	push   $0xfb
c01050c9:	68 b4 51 11 c0       	push   $0xc01151b4
c01050ce:	e8 12 b4 ff ff       	call   c01004e5 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01050d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01050d6:	8b 04 85 d4 51 15 c0 	mov    -0x3feaae2c(,%eax,4),%eax
c01050dd:	8b 00                	mov    (%eax),%eax
c01050df:	83 e0 01             	and    $0x1,%eax
c01050e2:	85 c0                	test   %eax,%eax
c01050e4:	75 19                	jne    c01050ff <check_swap+0x4b5>
c01050e6:	68 f0 54 11 c0       	push   $0xc01154f0
c01050eb:	68 1a 52 11 c0       	push   $0xc011521a
c01050f0:	68 fc 00 00 00       	push   $0xfc
c01050f5:	68 b4 51 11 c0       	push   $0xc01151b4
c01050fa:	e8 e6 b3 ff ff       	call   c01004e5 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01050ff:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105103:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105107:	0f 8e 2a ff ff ff    	jle    c0105037 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010510d:	83 ec 0c             	sub    $0xc,%esp
c0105110:	68 0c 55 11 c0       	push   $0xc011550c
c0105115:	e8 65 b2 ff ff       	call   c010037f <cprintf>
c010511a:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010511d:	e8 10 fb ff ff       	call   c0104c32 <check_content_access>
c0105122:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105125:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105129:	74 19                	je     c0105144 <check_swap+0x4fa>
c010512b:	68 32 55 11 c0       	push   $0xc0115532
c0105130:	68 1a 52 11 c0       	push   $0xc011521a
c0105135:	68 01 01 00 00       	push   $0x101
c010513a:	68 b4 51 11 c0       	push   $0xc01151b4
c010513f:	e8 a1 b3 ff ff       	call   c01004e5 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105144:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010514b:	eb 1c                	jmp    c0105169 <check_swap+0x51f>
         free_pages(check_rp[i],1);
c010514d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105150:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c0105157:	83 ec 08             	sub    $0x8,%esp
c010515a:	6a 01                	push   $0x1
c010515c:	50                   	push   %eax
c010515d:	e8 61 20 00 00       	call   c01071c3 <free_pages>
c0105162:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105165:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105169:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010516d:	7e de                	jle    c010514d <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c010516f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105172:	8b 00                	mov    (%eax),%eax
c0105174:	83 ec 0c             	sub    $0xc,%esp
c0105177:	50                   	push   %eax
c0105178:	e8 3c f6 ff ff       	call   c01047b9 <pde2page>
c010517d:	83 c4 10             	add    $0x10,%esp
c0105180:	83 ec 08             	sub    $0x8,%esp
c0105183:	6a 01                	push   $0x1
c0105185:	50                   	push   %eax
c0105186:	e8 38 20 00 00       	call   c01071c3 <free_pages>
c010518b:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c010518e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105191:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105197:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010519a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01051a1:	83 ec 0c             	sub    $0xc,%esp
c01051a4:	ff 75 d8             	pushl  -0x28(%ebp)
c01051a7:	e8 4c e7 ff ff       	call   c01038f8 <mm_destroy>
c01051ac:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c01051af:	c7 05 04 51 15 c0 00 	movl   $0x0,0xc0155104
c01051b6:	00 00 00 
     
     nr_free = nr_free_store;
c01051b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01051bc:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4
     free_list = free_list_store;
c01051c1:	8b 45 98             	mov    -0x68(%ebp),%eax
c01051c4:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01051c7:	a3 ec 51 15 c0       	mov    %eax,0xc01551ec
c01051cc:	89 15 f0 51 15 c0    	mov    %edx,0xc01551f0

     
     le = &free_list;
c01051d2:	c7 45 e8 ec 51 15 c0 	movl   $0xc01551ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01051d9:	eb 1d                	jmp    c01051f8 <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c01051db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01051de:	83 e8 10             	sub    $0x10,%eax
c01051e1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c01051e4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01051e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01051eb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01051ee:	8b 40 08             	mov    0x8(%eax),%eax
c01051f1:	29 c2                	sub    %eax,%edx
c01051f3:	89 d0                	mov    %edx,%eax
c01051f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01051f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01051fb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01051fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105201:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105204:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105207:	81 7d e8 ec 51 15 c0 	cmpl   $0xc01551ec,-0x18(%ebp)
c010520e:	75 cb                	jne    c01051db <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105210:	83 ec 04             	sub    $0x4,%esp
c0105213:	ff 75 f0             	pushl  -0x10(%ebp)
c0105216:	ff 75 f4             	pushl  -0xc(%ebp)
c0105219:	68 39 55 11 c0       	push   $0xc0115539
c010521e:	e8 5c b1 ff ff       	call   c010037f <cprintf>
c0105223:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105226:	83 ec 0c             	sub    $0xc,%esp
c0105229:	68 53 55 11 c0       	push   $0xc0115553
c010522e:	e8 4c b1 ff ff       	call   c010037f <cprintf>
c0105233:	83 c4 10             	add    $0x10,%esp
}
c0105236:	90                   	nop
c0105237:	c9                   	leave  
c0105238:	c3                   	ret    

c0105239 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105239:	55                   	push   %ebp
c010523a:	89 e5                	mov    %esp,%ebp
c010523c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010523f:	9c                   	pushf  
c0105240:	58                   	pop    %eax
c0105241:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105244:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105247:	25 00 02 00 00       	and    $0x200,%eax
c010524c:	85 c0                	test   %eax,%eax
c010524e:	74 0c                	je     c010525c <__intr_save+0x23>
        intr_disable();
c0105250:	e8 52 d0 ff ff       	call   c01022a7 <intr_disable>
        return 1;
c0105255:	b8 01 00 00 00       	mov    $0x1,%eax
c010525a:	eb 05                	jmp    c0105261 <__intr_save+0x28>
    }
    return 0;
c010525c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105261:	c9                   	leave  
c0105262:	c3                   	ret    

c0105263 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105263:	55                   	push   %ebp
c0105264:	89 e5                	mov    %esp,%ebp
c0105266:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105269:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010526d:	74 05                	je     c0105274 <__intr_restore+0x11>
        intr_enable();
c010526f:	e8 2c d0 ff ff       	call   c01022a0 <intr_enable>
    }
}
c0105274:	90                   	nop
c0105275:	c9                   	leave  
c0105276:	c3                   	ret    

c0105277 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105277:	55                   	push   %ebp
c0105278:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010527a:	8b 45 08             	mov    0x8(%ebp),%eax
c010527d:	8b 15 00 52 15 c0    	mov    0xc0155200,%edx
c0105283:	29 d0                	sub    %edx,%eax
c0105285:	c1 f8 02             	sar    $0x2,%eax
c0105288:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010528e:	5d                   	pop    %ebp
c010528f:	c3                   	ret    

c0105290 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105290:	55                   	push   %ebp
c0105291:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105293:	ff 75 08             	pushl  0x8(%ebp)
c0105296:	e8 dc ff ff ff       	call   c0105277 <page2ppn>
c010529b:	83 c4 04             	add    $0x4,%esp
c010529e:	c1 e0 0c             	shl    $0xc,%eax
}
c01052a1:	c9                   	leave  
c01052a2:	c3                   	ret    

c01052a3 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01052a3:	55                   	push   %ebp
c01052a4:	89 e5                	mov    %esp,%ebp
c01052a6:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01052ac:	c1 e8 0c             	shr    $0xc,%eax
c01052af:	89 c2                	mov    %eax,%edx
c01052b1:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01052b6:	39 c2                	cmp    %eax,%edx
c01052b8:	72 14                	jb     c01052ce <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052ba:	83 ec 04             	sub    $0x4,%esp
c01052bd:	68 6c 55 11 c0       	push   $0xc011556c
c01052c2:	6a 5e                	push   $0x5e
c01052c4:	68 8b 55 11 c0       	push   $0xc011558b
c01052c9:	e8 17 b2 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c01052ce:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c01052d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d7:	c1 e8 0c             	shr    $0xc,%eax
c01052da:	89 c2                	mov    %eax,%edx
c01052dc:	89 d0                	mov    %edx,%eax
c01052de:	c1 e0 03             	shl    $0x3,%eax
c01052e1:	01 d0                	add    %edx,%eax
c01052e3:	c1 e0 02             	shl    $0x2,%eax
c01052e6:	01 c8                	add    %ecx,%eax
}
c01052e8:	c9                   	leave  
c01052e9:	c3                   	ret    

c01052ea <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01052ea:	55                   	push   %ebp
c01052eb:	89 e5                	mov    %esp,%ebp
c01052ed:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01052f0:	ff 75 08             	pushl  0x8(%ebp)
c01052f3:	e8 98 ff ff ff       	call   c0105290 <page2pa>
c01052f8:	83 c4 04             	add    $0x4,%esp
c01052fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105301:	c1 e8 0c             	shr    $0xc,%eax
c0105304:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105307:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010530c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010530f:	72 14                	jb     c0105325 <page2kva+0x3b>
c0105311:	ff 75 f4             	pushl  -0xc(%ebp)
c0105314:	68 9c 55 11 c0       	push   $0xc011559c
c0105319:	6a 65                	push   $0x65
c010531b:	68 8b 55 11 c0       	push   $0xc011558b
c0105320:	e8 c0 b1 ff ff       	call   c01004e5 <__panic>
c0105325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105328:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010532d:	c9                   	leave  
c010532e:	c3                   	ret    

c010532f <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010532f:	55                   	push   %ebp
c0105330:	89 e5                	mov    %esp,%ebp
c0105332:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0105335:	8b 45 08             	mov    0x8(%ebp),%eax
c0105338:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010533b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105342:	77 14                	ja     c0105358 <kva2page+0x29>
c0105344:	ff 75 f4             	pushl  -0xc(%ebp)
c0105347:	68 c0 55 11 c0       	push   $0xc01155c0
c010534c:	6a 6a                	push   $0x6a
c010534e:	68 8b 55 11 c0       	push   $0xc011558b
c0105353:	e8 8d b1 ff ff       	call   c01004e5 <__panic>
c0105358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010535b:	05 00 00 00 40       	add    $0x40000000,%eax
c0105360:	83 ec 0c             	sub    $0xc,%esp
c0105363:	50                   	push   %eax
c0105364:	e8 3a ff ff ff       	call   c01052a3 <pa2page>
c0105369:	83 c4 10             	add    $0x10,%esp
}
c010536c:	c9                   	leave  
c010536d:	c3                   	ret    

c010536e <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c010536e:	55                   	push   %ebp
c010536f:	89 e5                	mov    %esp,%ebp
c0105371:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0105374:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105377:	ba 01 00 00 00       	mov    $0x1,%edx
c010537c:	89 c1                	mov    %eax,%ecx
c010537e:	d3 e2                	shl    %cl,%edx
c0105380:	89 d0                	mov    %edx,%eax
c0105382:	83 ec 0c             	sub    $0xc,%esp
c0105385:	50                   	push   %eax
c0105386:	e8 cc 1d 00 00       	call   c0107157 <alloc_pages>
c010538b:	83 c4 10             	add    $0x10,%esp
c010538e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0105391:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105395:	75 07                	jne    c010539e <__slob_get_free_pages+0x30>
    return NULL;
c0105397:	b8 00 00 00 00       	mov    $0x0,%eax
c010539c:	eb 0e                	jmp    c01053ac <__slob_get_free_pages+0x3e>
  return page2kva(page);
c010539e:	83 ec 0c             	sub    $0xc,%esp
c01053a1:	ff 75 f4             	pushl  -0xc(%ebp)
c01053a4:	e8 41 ff ff ff       	call   c01052ea <page2kva>
c01053a9:	83 c4 10             	add    $0x10,%esp
}
c01053ac:	c9                   	leave  
c01053ad:	c3                   	ret    

c01053ae <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01053ae:	55                   	push   %ebp
c01053af:	89 e5                	mov    %esp,%ebp
c01053b1:	53                   	push   %ebx
c01053b2:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c01053b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053b8:	ba 01 00 00 00       	mov    $0x1,%edx
c01053bd:	89 c1                	mov    %eax,%ecx
c01053bf:	d3 e2                	shl    %cl,%edx
c01053c1:	89 d0                	mov    %edx,%eax
c01053c3:	89 c3                	mov    %eax,%ebx
c01053c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01053c8:	83 ec 0c             	sub    $0xc,%esp
c01053cb:	50                   	push   %eax
c01053cc:	e8 5e ff ff ff       	call   c010532f <kva2page>
c01053d1:	83 c4 10             	add    $0x10,%esp
c01053d4:	83 ec 08             	sub    $0x8,%esp
c01053d7:	53                   	push   %ebx
c01053d8:	50                   	push   %eax
c01053d9:	e8 e5 1d 00 00       	call   c01071c3 <free_pages>
c01053de:	83 c4 10             	add    $0x10,%esp
}
c01053e1:	90                   	nop
c01053e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01053e5:	c9                   	leave  
c01053e6:	c3                   	ret    

c01053e7 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01053e7:	55                   	push   %ebp
c01053e8:	89 e5                	mov    %esp,%ebp
c01053ea:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01053ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01053f0:	83 c0 08             	add    $0x8,%eax
c01053f3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01053f8:	76 16                	jbe    c0105410 <slob_alloc+0x29>
c01053fa:	68 e4 55 11 c0       	push   $0xc01155e4
c01053ff:	68 03 56 11 c0       	push   $0xc0115603
c0105404:	6a 64                	push   $0x64
c0105406:	68 18 56 11 c0       	push   $0xc0115618
c010540b:	e8 d5 b0 ff ff       	call   c01004e5 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0105410:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0105417:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010541e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105421:	83 c0 07             	add    $0x7,%eax
c0105424:	c1 e8 03             	shr    $0x3,%eax
c0105427:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010542a:	e8 0a fe ff ff       	call   c0105239 <__intr_save>
c010542f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105432:	a1 e8 e9 14 c0       	mov    0xc014e9e8,%eax
c0105437:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010543a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010543d:	8b 40 04             	mov    0x4(%eax),%eax
c0105440:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105443:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105447:	74 25                	je     c010546e <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0105449:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010544c:	8b 45 10             	mov    0x10(%ebp),%eax
c010544f:	01 d0                	add    %edx,%eax
c0105451:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105454:	8b 45 10             	mov    0x10(%ebp),%eax
c0105457:	f7 d8                	neg    %eax
c0105459:	21 d0                	and    %edx,%eax
c010545b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010545e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105461:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105464:	29 c2                	sub    %eax,%edx
c0105466:	89 d0                	mov    %edx,%eax
c0105468:	c1 f8 03             	sar    $0x3,%eax
c010546b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c010546e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105471:	8b 00                	mov    (%eax),%eax
c0105473:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105476:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105479:	01 ca                	add    %ecx,%edx
c010547b:	39 d0                	cmp    %edx,%eax
c010547d:	0f 8c b1 00 00 00    	jl     c0105534 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0105483:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105487:	74 38                	je     c01054c1 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0105489:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010548c:	8b 00                	mov    (%eax),%eax
c010548e:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105491:	89 c2                	mov    %eax,%edx
c0105493:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105496:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105498:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010549b:	8b 50 04             	mov    0x4(%eax),%edx
c010549e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054a1:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c01054a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01054aa:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c01054ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01054b3:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01054b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01054bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054be:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c01054c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054c4:	8b 00                	mov    (%eax),%eax
c01054c6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01054c9:	75 0e                	jne    c01054d9 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c01054cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054ce:	8b 50 04             	mov    0x4(%eax),%edx
c01054d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054d4:	89 50 04             	mov    %edx,0x4(%eax)
c01054d7:	eb 3c                	jmp    c0105515 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c01054d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01054dc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01054e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054e6:	01 c2                	add    %eax,%edx
c01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054eb:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01054ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054f1:	8b 40 04             	mov    0x4(%eax),%eax
c01054f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01054f7:	8b 12                	mov    (%edx),%edx
c01054f9:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01054fc:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01054fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105501:	8b 40 04             	mov    0x4(%eax),%eax
c0105504:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105507:	8b 52 04             	mov    0x4(%edx),%edx
c010550a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010550d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105510:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105513:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105518:	a3 e8 e9 14 c0       	mov    %eax,0xc014e9e8
			spin_unlock_irqrestore(&slob_lock, flags);
c010551d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105520:	83 ec 0c             	sub    $0xc,%esp
c0105523:	50                   	push   %eax
c0105524:	e8 3a fd ff ff       	call   c0105263 <__intr_restore>
c0105529:	83 c4 10             	add    $0x10,%esp
			return cur;
c010552c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010552f:	e9 80 00 00 00       	jmp    c01055b4 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0105534:	a1 e8 e9 14 c0       	mov    0xc014e9e8,%eax
c0105539:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010553c:	75 62                	jne    c01055a0 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c010553e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105541:	83 ec 0c             	sub    $0xc,%esp
c0105544:	50                   	push   %eax
c0105545:	e8 19 fd ff ff       	call   c0105263 <__intr_restore>
c010554a:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c010554d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105554:	75 07                	jne    c010555d <slob_alloc+0x176>
				return 0;
c0105556:	b8 00 00 00 00       	mov    $0x0,%eax
c010555b:	eb 57                	jmp    c01055b4 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c010555d:	83 ec 08             	sub    $0x8,%esp
c0105560:	6a 00                	push   $0x0
c0105562:	ff 75 0c             	pushl  0xc(%ebp)
c0105565:	e8 04 fe ff ff       	call   c010536e <__slob_get_free_pages>
c010556a:	83 c4 10             	add    $0x10,%esp
c010556d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105570:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105574:	75 07                	jne    c010557d <slob_alloc+0x196>
				return 0;
c0105576:	b8 00 00 00 00       	mov    $0x0,%eax
c010557b:	eb 37                	jmp    c01055b4 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c010557d:	83 ec 08             	sub    $0x8,%esp
c0105580:	68 00 10 00 00       	push   $0x1000
c0105585:	ff 75 f0             	pushl  -0x10(%ebp)
c0105588:	e8 29 00 00 00       	call   c01055b6 <slob_free>
c010558d:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0105590:	e8 a4 fc ff ff       	call   c0105239 <__intr_save>
c0105595:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105598:	a1 e8 e9 14 c0       	mov    0xc014e9e8,%eax
c010559d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01055a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01055a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055a9:	8b 40 04             	mov    0x4(%eax),%eax
c01055ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c01055af:	e9 8f fe ff ff       	jmp    c0105443 <slob_alloc+0x5c>
}
c01055b4:	c9                   	leave  
c01055b5:	c3                   	ret    

c01055b6 <slob_free>:

static void slob_free(void *block, int size)
{
c01055b6:	55                   	push   %ebp
c01055b7:	89 e5                	mov    %esp,%ebp
c01055b9:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c01055bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01055bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01055c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01055c6:	0f 84 05 01 00 00    	je     c01056d1 <slob_free+0x11b>
		return;

	if (size)
c01055cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01055d0:	74 10                	je     c01055e2 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c01055d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055d5:	83 c0 07             	add    $0x7,%eax
c01055d8:	c1 e8 03             	shr    $0x3,%eax
c01055db:	89 c2                	mov    %eax,%edx
c01055dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055e0:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01055e2:	e8 52 fc ff ff       	call   c0105239 <__intr_save>
c01055e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01055ea:	a1 e8 e9 14 c0       	mov    0xc014e9e8,%eax
c01055ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01055f2:	eb 27                	jmp    c010561b <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01055f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055f7:	8b 40 04             	mov    0x4(%eax),%eax
c01055fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01055fd:	77 13                	ja     c0105612 <slob_free+0x5c>
c01055ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105602:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105605:	77 27                	ja     c010562e <slob_free+0x78>
c0105607:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010560a:	8b 40 04             	mov    0x4(%eax),%eax
c010560d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105610:	77 1c                	ja     c010562e <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105615:	8b 40 04             	mov    0x4(%eax),%eax
c0105618:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010561b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010561e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105621:	76 d1                	jbe    c01055f4 <slob_free+0x3e>
c0105623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105626:	8b 40 04             	mov    0x4(%eax),%eax
c0105629:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010562c:	76 c6                	jbe    c01055f4 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c010562e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105631:	8b 00                	mov    (%eax),%eax
c0105633:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010563a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010563d:	01 c2                	add    %eax,%edx
c010563f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105642:	8b 40 04             	mov    0x4(%eax),%eax
c0105645:	39 c2                	cmp    %eax,%edx
c0105647:	75 25                	jne    c010566e <slob_free+0xb8>
		b->units += cur->next->units;
c0105649:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010564c:	8b 10                	mov    (%eax),%edx
c010564e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105651:	8b 40 04             	mov    0x4(%eax),%eax
c0105654:	8b 00                	mov    (%eax),%eax
c0105656:	01 c2                	add    %eax,%edx
c0105658:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010565b:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c010565d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105660:	8b 40 04             	mov    0x4(%eax),%eax
c0105663:	8b 50 04             	mov    0x4(%eax),%edx
c0105666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105669:	89 50 04             	mov    %edx,0x4(%eax)
c010566c:	eb 0c                	jmp    c010567a <slob_free+0xc4>
	} else
		b->next = cur->next;
c010566e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105671:	8b 50 04             	mov    0x4(%eax),%edx
c0105674:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105677:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010567d:	8b 00                	mov    (%eax),%eax
c010567f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105689:	01 d0                	add    %edx,%eax
c010568b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010568e:	75 1f                	jne    c01056af <slob_free+0xf9>
		cur->units += b->units;
c0105690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105693:	8b 10                	mov    (%eax),%edx
c0105695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105698:	8b 00                	mov    (%eax),%eax
c010569a:	01 c2                	add    %eax,%edx
c010569c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010569f:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c01056a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056a4:	8b 50 04             	mov    0x4(%eax),%edx
c01056a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056aa:	89 50 04             	mov    %edx,0x4(%eax)
c01056ad:	eb 09                	jmp    c01056b8 <slob_free+0x102>
	} else
		cur->next = b;
c01056af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01056b5:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c01056b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056bb:	a3 e8 e9 14 c0       	mov    %eax,0xc014e9e8

	spin_unlock_irqrestore(&slob_lock, flags);
c01056c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056c3:	83 ec 0c             	sub    $0xc,%esp
c01056c6:	50                   	push   %eax
c01056c7:	e8 97 fb ff ff       	call   c0105263 <__intr_restore>
c01056cc:	83 c4 10             	add    $0x10,%esp
c01056cf:	eb 01                	jmp    c01056d2 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c01056d1:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c01056d2:	c9                   	leave  
c01056d3:	c3                   	ret    

c01056d4 <check_slab>:



void check_slab(void) {
c01056d4:	55                   	push   %ebp
c01056d5:	89 e5                	mov    %esp,%ebp
c01056d7:	83 ec 08             	sub    $0x8,%esp
  cprintf("check_slab() success\n");
c01056da:	83 ec 0c             	sub    $0xc,%esp
c01056dd:	68 2a 56 11 c0       	push   $0xc011562a
c01056e2:	e8 98 ac ff ff       	call   c010037f <cprintf>
c01056e7:	83 c4 10             	add    $0x10,%esp
}
c01056ea:	90                   	nop
c01056eb:	c9                   	leave  
c01056ec:	c3                   	ret    

c01056ed <slab_init>:

void
slab_init(void) {
c01056ed:	55                   	push   %ebp
c01056ee:	89 e5                	mov    %esp,%ebp
c01056f0:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c01056f3:	83 ec 0c             	sub    $0xc,%esp
c01056f6:	68 40 56 11 c0       	push   $0xc0115640
c01056fb:	e8 7f ac ff ff       	call   c010037f <cprintf>
c0105700:	83 c4 10             	add    $0x10,%esp
  check_slab();
c0105703:	e8 cc ff ff ff       	call   c01056d4 <check_slab>
}
c0105708:	90                   	nop
c0105709:	c9                   	leave  
c010570a:	c3                   	ret    

c010570b <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010570b:	55                   	push   %ebp
c010570c:	89 e5                	mov    %esp,%ebp
c010570e:	83 ec 08             	sub    $0x8,%esp
    slab_init();
c0105711:	e8 d7 ff ff ff       	call   c01056ed <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105716:	83 ec 0c             	sub    $0xc,%esp
c0105719:	68 54 56 11 c0       	push   $0xc0115654
c010571e:	e8 5c ac ff ff       	call   c010037f <cprintf>
c0105723:	83 c4 10             	add    $0x10,%esp
}
c0105726:	90                   	nop
c0105727:	c9                   	leave  
c0105728:	c3                   	ret    

c0105729 <slab_allocated>:

size_t
slab_allocated(void) {
c0105729:	55                   	push   %ebp
c010572a:	89 e5                	mov    %esp,%ebp
  return 0;
c010572c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105731:	5d                   	pop    %ebp
c0105732:	c3                   	ret    

c0105733 <kallocated>:

size_t
kallocated(void) {
c0105733:	55                   	push   %ebp
c0105734:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0105736:	e8 ee ff ff ff       	call   c0105729 <slab_allocated>
}
c010573b:	5d                   	pop    %ebp
c010573c:	c3                   	ret    

c010573d <find_order>:

static int find_order(int size)
{
c010573d:	55                   	push   %ebp
c010573e:	89 e5                	mov    %esp,%ebp
c0105740:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105743:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010574a:	eb 07                	jmp    c0105753 <find_order+0x16>
		order++;
c010574c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105750:	d1 7d 08             	sarl   0x8(%ebp)
c0105753:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010575a:	7f f0                	jg     c010574c <find_order+0xf>
		order++;
	return order;
c010575c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010575f:	c9                   	leave  
c0105760:	c3                   	ret    

c0105761 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105761:	55                   	push   %ebp
c0105762:	89 e5                	mov    %esp,%ebp
c0105764:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105767:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c010576e:	77 35                	ja     c01057a5 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105770:	8b 45 08             	mov    0x8(%ebp),%eax
c0105773:	83 c0 08             	add    $0x8,%eax
c0105776:	83 ec 04             	sub    $0x4,%esp
c0105779:	6a 00                	push   $0x0
c010577b:	ff 75 0c             	pushl  0xc(%ebp)
c010577e:	50                   	push   %eax
c010577f:	e8 63 fc ff ff       	call   c01053e7 <slob_alloc>
c0105784:	83 c4 10             	add    $0x10,%esp
c0105787:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010578a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010578e:	74 0b                	je     c010579b <__kmalloc+0x3a>
c0105790:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105793:	83 c0 08             	add    $0x8,%eax
c0105796:	e9 b3 00 00 00       	jmp    c010584e <__kmalloc+0xed>
c010579b:	b8 00 00 00 00       	mov    $0x0,%eax
c01057a0:	e9 a9 00 00 00       	jmp    c010584e <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01057a5:	83 ec 04             	sub    $0x4,%esp
c01057a8:	6a 00                	push   $0x0
c01057aa:	ff 75 0c             	pushl  0xc(%ebp)
c01057ad:	6a 0c                	push   $0xc
c01057af:	e8 33 fc ff ff       	call   c01053e7 <slob_alloc>
c01057b4:	83 c4 10             	add    $0x10,%esp
c01057b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01057ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01057be:	75 0a                	jne    c01057ca <__kmalloc+0x69>
		return 0;
c01057c0:	b8 00 00 00 00       	mov    $0x0,%eax
c01057c5:	e9 84 00 00 00       	jmp    c010584e <__kmalloc+0xed>

	bb->order = find_order(size);
c01057ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01057cd:	83 ec 0c             	sub    $0xc,%esp
c01057d0:	50                   	push   %eax
c01057d1:	e8 67 ff ff ff       	call   c010573d <find_order>
c01057d6:	83 c4 10             	add    $0x10,%esp
c01057d9:	89 c2                	mov    %eax,%edx
c01057db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057de:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01057e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057e3:	8b 00                	mov    (%eax),%eax
c01057e5:	83 ec 08             	sub    $0x8,%esp
c01057e8:	50                   	push   %eax
c01057e9:	ff 75 0c             	pushl  0xc(%ebp)
c01057ec:	e8 7d fb ff ff       	call   c010536e <__slob_get_free_pages>
c01057f1:	83 c4 10             	add    $0x10,%esp
c01057f4:	89 c2                	mov    %eax,%edx
c01057f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057f9:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c01057fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057ff:	8b 40 04             	mov    0x4(%eax),%eax
c0105802:	85 c0                	test   %eax,%eax
c0105804:	74 33                	je     c0105839 <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0105806:	e8 2e fa ff ff       	call   c0105239 <__intr_save>
c010580b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010580e:	8b 15 74 1f 15 c0    	mov    0xc0151f74,%edx
c0105814:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105817:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010581a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010581d:	a3 74 1f 15 c0       	mov    %eax,0xc0151f74
		spin_unlock_irqrestore(&block_lock, flags);
c0105822:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105825:	83 ec 0c             	sub    $0xc,%esp
c0105828:	50                   	push   %eax
c0105829:	e8 35 fa ff ff       	call   c0105263 <__intr_restore>
c010582e:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0105831:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105834:	8b 40 04             	mov    0x4(%eax),%eax
c0105837:	eb 15                	jmp    c010584e <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105839:	83 ec 08             	sub    $0x8,%esp
c010583c:	6a 0c                	push   $0xc
c010583e:	ff 75 f0             	pushl  -0x10(%ebp)
c0105841:	e8 70 fd ff ff       	call   c01055b6 <slob_free>
c0105846:	83 c4 10             	add    $0x10,%esp
	return 0;
c0105849:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010584e:	c9                   	leave  
c010584f:	c3                   	ret    

c0105850 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105850:	55                   	push   %ebp
c0105851:	89 e5                	mov    %esp,%ebp
c0105853:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c0105856:	83 ec 08             	sub    $0x8,%esp
c0105859:	6a 00                	push   $0x0
c010585b:	ff 75 08             	pushl  0x8(%ebp)
c010585e:	e8 fe fe ff ff       	call   c0105761 <__kmalloc>
c0105863:	83 c4 10             	add    $0x10,%esp
}
c0105866:	c9                   	leave  
c0105867:	c3                   	ret    

c0105868 <kfree>:


void kfree(void *block)
{
c0105868:	55                   	push   %ebp
c0105869:	89 e5                	mov    %esp,%ebp
c010586b:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c010586e:	c7 45 f0 74 1f 15 c0 	movl   $0xc0151f74,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105875:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105879:	0f 84 ac 00 00 00    	je     c010592b <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010587f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105882:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105887:	85 c0                	test   %eax,%eax
c0105889:	0f 85 85 00 00 00    	jne    c0105914 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c010588f:	e8 a5 f9 ff ff       	call   c0105239 <__intr_save>
c0105894:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105897:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c010589c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010589f:	eb 5e                	jmp    c01058ff <kfree+0x97>
			if (bb->pages == block) {
c01058a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058a4:	8b 40 04             	mov    0x4(%eax),%eax
c01058a7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01058aa:	75 41                	jne    c01058ed <kfree+0x85>
				*last = bb->next;
c01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058af:	8b 50 08             	mov    0x8(%eax),%edx
c01058b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058b5:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01058b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058ba:	83 ec 0c             	sub    $0xc,%esp
c01058bd:	50                   	push   %eax
c01058be:	e8 a0 f9 ff ff       	call   c0105263 <__intr_restore>
c01058c3:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01058c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058c9:	8b 10                	mov    (%eax),%edx
c01058cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01058ce:	83 ec 08             	sub    $0x8,%esp
c01058d1:	52                   	push   %edx
c01058d2:	50                   	push   %eax
c01058d3:	e8 d6 fa ff ff       	call   c01053ae <__slob_free_pages>
c01058d8:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01058db:	83 ec 08             	sub    $0x8,%esp
c01058de:	6a 0c                	push   $0xc
c01058e0:	ff 75 f4             	pushl  -0xc(%ebp)
c01058e3:	e8 ce fc ff ff       	call   c01055b6 <slob_free>
c01058e8:	83 c4 10             	add    $0x10,%esp
				return;
c01058eb:	eb 3f                	jmp    c010592c <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01058ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f0:	83 c0 08             	add    $0x8,%eax
c01058f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f9:	8b 40 08             	mov    0x8(%eax),%eax
c01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105903:	75 9c                	jne    c01058a1 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105905:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105908:	83 ec 0c             	sub    $0xc,%esp
c010590b:	50                   	push   %eax
c010590c:	e8 52 f9 ff ff       	call   c0105263 <__intr_restore>
c0105911:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0105914:	8b 45 08             	mov    0x8(%ebp),%eax
c0105917:	83 e8 08             	sub    $0x8,%eax
c010591a:	83 ec 08             	sub    $0x8,%esp
c010591d:	6a 00                	push   $0x0
c010591f:	50                   	push   %eax
c0105920:	e8 91 fc ff ff       	call   c01055b6 <slob_free>
c0105925:	83 c4 10             	add    $0x10,%esp
	return;
c0105928:	90                   	nop
c0105929:	eb 01                	jmp    c010592c <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c010592b:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c010592c:	c9                   	leave  
c010592d:	c3                   	ret    

c010592e <ksize>:


unsigned int ksize(const void *block)
{
c010592e:	55                   	push   %ebp
c010592f:	89 e5                	mov    %esp,%ebp
c0105931:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105934:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105938:	75 07                	jne    c0105941 <ksize+0x13>
		return 0;
c010593a:	b8 00 00 00 00       	mov    $0x0,%eax
c010593f:	eb 73                	jmp    c01059b4 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105941:	8b 45 08             	mov    0x8(%ebp),%eax
c0105944:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105949:	85 c0                	test   %eax,%eax
c010594b:	75 5c                	jne    c01059a9 <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c010594d:	e8 e7 f8 ff ff       	call   c0105239 <__intr_save>
c0105952:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0105955:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c010595a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010595d:	eb 35                	jmp    c0105994 <ksize+0x66>
			if (bb->pages == block) {
c010595f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105962:	8b 40 04             	mov    0x4(%eax),%eax
c0105965:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105968:	75 21                	jne    c010598b <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c010596a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010596d:	83 ec 0c             	sub    $0xc,%esp
c0105970:	50                   	push   %eax
c0105971:	e8 ed f8 ff ff       	call   c0105263 <__intr_restore>
c0105976:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c0105979:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010597c:	8b 00                	mov    (%eax),%eax
c010597e:	ba 00 10 00 00       	mov    $0x1000,%edx
c0105983:	89 c1                	mov    %eax,%ecx
c0105985:	d3 e2                	shl    %cl,%edx
c0105987:	89 d0                	mov    %edx,%eax
c0105989:	eb 29                	jmp    c01059b4 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c010598b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010598e:	8b 40 08             	mov    0x8(%eax),%eax
c0105991:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105994:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105998:	75 c5                	jne    c010595f <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c010599a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010599d:	83 ec 0c             	sub    $0xc,%esp
c01059a0:	50                   	push   %eax
c01059a1:	e8 bd f8 ff ff       	call   c0105263 <__intr_restore>
c01059a6:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01059a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ac:	83 e8 08             	sub    $0x8,%eax
c01059af:	8b 00                	mov    (%eax),%eax
c01059b1:	c1 e0 03             	shl    $0x3,%eax
}
c01059b4:	c9                   	leave  
c01059b5:	c3                   	ret    

c01059b6 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01059b6:	55                   	push   %ebp
c01059b7:	89 e5                	mov    %esp,%ebp
c01059b9:	83 ec 10             	sub    $0x10,%esp
c01059bc:	c7 45 fc e4 51 15 c0 	movl   $0xc01551e4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01059c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01059c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01059c9:	89 50 04             	mov    %edx,0x4(%eax)
c01059cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01059cf:	8b 50 04             	mov    0x4(%eax),%edx
c01059d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01059d5:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01059d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01059da:	c7 40 14 e4 51 15 c0 	movl   $0xc01551e4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01059e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01059e6:	c9                   	leave  
c01059e7:	c3                   	ret    

c01059e8 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01059e8:	55                   	push   %ebp
c01059e9:	89 e5                	mov    %esp,%ebp
c01059eb:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01059ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01059f1:	8b 40 14             	mov    0x14(%eax),%eax
c01059f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01059f7:	8b 45 10             	mov    0x10(%ebp),%eax
c01059fa:	83 c0 18             	add    $0x18,%eax
c01059fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0105a00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105a04:	74 06                	je     c0105a0c <_fifo_map_swappable+0x24>
c0105a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a0a:	75 16                	jne    c0105a22 <_fifo_map_swappable+0x3a>
c0105a0c:	68 70 56 11 c0       	push   $0xc0115670
c0105a11:	68 8e 56 11 c0       	push   $0xc011568e
c0105a16:	6a 32                	push   $0x32
c0105a18:	68 a3 56 11 c0       	push   $0xc01156a3
c0105a1d:	e8 c3 aa ff ff       	call   c01004e5 <__panic>
c0105a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a25:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105a28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105a2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105a34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a37:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105a3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a3d:	8b 40 04             	mov    0x4(%eax),%eax
c0105a40:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105a43:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0105a46:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a49:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0105a4c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105a4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105a52:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105a55:	89 10                	mov    %edx,(%eax)
c0105a57:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105a5a:	8b 10                	mov    (%eax),%edx
c0105a5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105a5f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105a62:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105a65:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105a68:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105a6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105a6e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105a71:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0105a73:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a78:	c9                   	leave  
c0105a79:	c3                   	ret    

c0105a7a <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0105a7a:	55                   	push   %ebp
c0105a7b:	89 e5                	mov    %esp,%ebp
c0105a7d:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0105a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a83:	8b 40 14             	mov    0x14(%eax),%eax
c0105a86:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0105a89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a8d:	75 16                	jne    c0105aa5 <_fifo_swap_out_victim+0x2b>
c0105a8f:	68 b7 56 11 c0       	push   $0xc01156b7
c0105a94:	68 8e 56 11 c0       	push   $0xc011568e
c0105a99:	6a 41                	push   $0x41
c0105a9b:	68 a3 56 11 c0       	push   $0xc01156a3
c0105aa0:	e8 40 aa ff ff       	call   c01004e5 <__panic>
     assert(in_tick==0);
c0105aa5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105aa9:	74 16                	je     c0105ac1 <_fifo_swap_out_victim+0x47>
c0105aab:	68 c4 56 11 c0       	push   $0xc01156c4
c0105ab0:	68 8e 56 11 c0       	push   $0xc011568e
c0105ab5:	6a 42                	push   $0x42
c0105ab7:	68 a3 56 11 c0       	push   $0xc01156a3
c0105abc:	e8 24 aa ff ff       	call   c01004e5 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0105ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ac4:	8b 00                	mov    (%eax),%eax
c0105ac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0105ac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105acc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105acf:	75 16                	jne    c0105ae7 <_fifo_swap_out_victim+0x6d>
c0105ad1:	68 cf 56 11 c0       	push   $0xc01156cf
c0105ad6:	68 8e 56 11 c0       	push   $0xc011568e
c0105adb:	6a 49                	push   $0x49
c0105add:	68 a3 56 11 c0       	push   $0xc01156a3
c0105ae2:	e8 fe a9 ff ff       	call   c01004e5 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0105ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105aea:	83 e8 18             	sub    $0x18,%eax
c0105aed:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105af0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0105af6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105af9:	8b 40 04             	mov    0x4(%eax),%eax
c0105afc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105aff:	8b 12                	mov    (%edx),%edx
c0105b01:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0105b04:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0105b07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b0a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105b0d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0105b10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105b16:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0105b18:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105b1c:	75 16                	jne    c0105b34 <_fifo_swap_out_victim+0xba>
c0105b1e:	68 d8 56 11 c0       	push   $0xc01156d8
c0105b23:	68 8e 56 11 c0       	push   $0xc011568e
c0105b28:	6a 4c                	push   $0x4c
c0105b2a:	68 a3 56 11 c0       	push   $0xc01156a3
c0105b2f:	e8 b1 a9 ff ff       	call   c01004e5 <__panic>
     *ptr_page = p;
c0105b34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b37:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105b3a:	89 10                	mov    %edx,(%eax)
     return 0;
c0105b3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105b41:	c9                   	leave  
c0105b42:	c3                   	ret    

c0105b43 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0105b43:	55                   	push   %ebp
c0105b44:	89 e5                	mov    %esp,%ebp
c0105b46:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0105b49:	83 ec 0c             	sub    $0xc,%esp
c0105b4c:	68 e4 56 11 c0       	push   $0xc01156e4
c0105b51:	e8 29 a8 ff ff       	call   c010037f <cprintf>
c0105b56:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0105b59:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105b5e:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0105b61:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105b66:	83 f8 04             	cmp    $0x4,%eax
c0105b69:	74 16                	je     c0105b81 <_fifo_check_swap+0x3e>
c0105b6b:	68 0a 57 11 c0       	push   $0xc011570a
c0105b70:	68 8e 56 11 c0       	push   $0xc011568e
c0105b75:	6a 55                	push   $0x55
c0105b77:	68 a3 56 11 c0       	push   $0xc01156a3
c0105b7c:	e8 64 a9 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105b81:	83 ec 0c             	sub    $0xc,%esp
c0105b84:	68 1c 57 11 c0       	push   $0xc011571c
c0105b89:	e8 f1 a7 ff ff       	call   c010037f <cprintf>
c0105b8e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0105b91:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105b96:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0105b99:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105b9e:	83 f8 04             	cmp    $0x4,%eax
c0105ba1:	74 16                	je     c0105bb9 <_fifo_check_swap+0x76>
c0105ba3:	68 0a 57 11 c0       	push   $0xc011570a
c0105ba8:	68 8e 56 11 c0       	push   $0xc011568e
c0105bad:	6a 58                	push   $0x58
c0105baf:	68 a3 56 11 c0       	push   $0xc01156a3
c0105bb4:	e8 2c a9 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0105bb9:	83 ec 0c             	sub    $0xc,%esp
c0105bbc:	68 44 57 11 c0       	push   $0xc0115744
c0105bc1:	e8 b9 a7 ff ff       	call   c010037f <cprintf>
c0105bc6:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0105bc9:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105bce:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0105bd1:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105bd6:	83 f8 04             	cmp    $0x4,%eax
c0105bd9:	74 16                	je     c0105bf1 <_fifo_check_swap+0xae>
c0105bdb:	68 0a 57 11 c0       	push   $0xc011570a
c0105be0:	68 8e 56 11 c0       	push   $0xc011568e
c0105be5:	6a 5b                	push   $0x5b
c0105be7:	68 a3 56 11 c0       	push   $0xc01156a3
c0105bec:	e8 f4 a8 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105bf1:	83 ec 0c             	sub    $0xc,%esp
c0105bf4:	68 6c 57 11 c0       	push   $0xc011576c
c0105bf9:	e8 81 a7 ff ff       	call   c010037f <cprintf>
c0105bfe:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105c01:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105c06:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0105c09:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105c0e:	83 f8 04             	cmp    $0x4,%eax
c0105c11:	74 16                	je     c0105c29 <_fifo_check_swap+0xe6>
c0105c13:	68 0a 57 11 c0       	push   $0xc011570a
c0105c18:	68 8e 56 11 c0       	push   $0xc011568e
c0105c1d:	6a 5e                	push   $0x5e
c0105c1f:	68 a3 56 11 c0       	push   $0xc01156a3
c0105c24:	e8 bc a8 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0105c29:	83 ec 0c             	sub    $0xc,%esp
c0105c2c:	68 94 57 11 c0       	push   $0xc0115794
c0105c31:	e8 49 a7 ff ff       	call   c010037f <cprintf>
c0105c36:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0105c39:	b8 00 50 00 00       	mov    $0x5000,%eax
c0105c3e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0105c41:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105c46:	83 f8 05             	cmp    $0x5,%eax
c0105c49:	74 16                	je     c0105c61 <_fifo_check_swap+0x11e>
c0105c4b:	68 ba 57 11 c0       	push   $0xc01157ba
c0105c50:	68 8e 56 11 c0       	push   $0xc011568e
c0105c55:	6a 61                	push   $0x61
c0105c57:	68 a3 56 11 c0       	push   $0xc01156a3
c0105c5c:	e8 84 a8 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105c61:	83 ec 0c             	sub    $0xc,%esp
c0105c64:	68 6c 57 11 c0       	push   $0xc011576c
c0105c69:	e8 11 a7 ff ff       	call   c010037f <cprintf>
c0105c6e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105c71:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105c76:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0105c79:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105c7e:	83 f8 05             	cmp    $0x5,%eax
c0105c81:	74 16                	je     c0105c99 <_fifo_check_swap+0x156>
c0105c83:	68 ba 57 11 c0       	push   $0xc01157ba
c0105c88:	68 8e 56 11 c0       	push   $0xc011568e
c0105c8d:	6a 64                	push   $0x64
c0105c8f:	68 a3 56 11 c0       	push   $0xc01156a3
c0105c94:	e8 4c a8 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105c99:	83 ec 0c             	sub    $0xc,%esp
c0105c9c:	68 1c 57 11 c0       	push   $0xc011571c
c0105ca1:	e8 d9 a6 ff ff       	call   c010037f <cprintf>
c0105ca6:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0105ca9:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105cae:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0105cb1:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105cb6:	83 f8 06             	cmp    $0x6,%eax
c0105cb9:	74 16                	je     c0105cd1 <_fifo_check_swap+0x18e>
c0105cbb:	68 c9 57 11 c0       	push   $0xc01157c9
c0105cc0:	68 8e 56 11 c0       	push   $0xc011568e
c0105cc5:	6a 67                	push   $0x67
c0105cc7:	68 a3 56 11 c0       	push   $0xc01156a3
c0105ccc:	e8 14 a8 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105cd1:	83 ec 0c             	sub    $0xc,%esp
c0105cd4:	68 6c 57 11 c0       	push   $0xc011576c
c0105cd9:	e8 a1 a6 ff ff       	call   c010037f <cprintf>
c0105cde:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105ce1:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105ce6:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0105ce9:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105cee:	83 f8 07             	cmp    $0x7,%eax
c0105cf1:	74 16                	je     c0105d09 <_fifo_check_swap+0x1c6>
c0105cf3:	68 d8 57 11 c0       	push   $0xc01157d8
c0105cf8:	68 8e 56 11 c0       	push   $0xc011568e
c0105cfd:	6a 6a                	push   $0x6a
c0105cff:	68 a3 56 11 c0       	push   $0xc01156a3
c0105d04:	e8 dc a7 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0105d09:	83 ec 0c             	sub    $0xc,%esp
c0105d0c:	68 e4 56 11 c0       	push   $0xc01156e4
c0105d11:	e8 69 a6 ff ff       	call   c010037f <cprintf>
c0105d16:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0105d19:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105d1e:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0105d21:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105d26:	83 f8 08             	cmp    $0x8,%eax
c0105d29:	74 16                	je     c0105d41 <_fifo_check_swap+0x1fe>
c0105d2b:	68 e7 57 11 c0       	push   $0xc01157e7
c0105d30:	68 8e 56 11 c0       	push   $0xc011568e
c0105d35:	6a 6d                	push   $0x6d
c0105d37:	68 a3 56 11 c0       	push   $0xc01156a3
c0105d3c:	e8 a4 a7 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0105d41:	83 ec 0c             	sub    $0xc,%esp
c0105d44:	68 44 57 11 c0       	push   $0xc0115744
c0105d49:	e8 31 a6 ff ff       	call   c010037f <cprintf>
c0105d4e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0105d51:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105d56:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0105d59:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105d5e:	83 f8 09             	cmp    $0x9,%eax
c0105d61:	74 16                	je     c0105d79 <_fifo_check_swap+0x236>
c0105d63:	68 f6 57 11 c0       	push   $0xc01157f6
c0105d68:	68 8e 56 11 c0       	push   $0xc011568e
c0105d6d:	6a 70                	push   $0x70
c0105d6f:	68 a3 56 11 c0       	push   $0xc01156a3
c0105d74:	e8 6c a7 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0105d79:	83 ec 0c             	sub    $0xc,%esp
c0105d7c:	68 94 57 11 c0       	push   $0xc0115794
c0105d81:	e8 f9 a5 ff ff       	call   c010037f <cprintf>
c0105d86:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0105d89:	b8 00 50 00 00       	mov    $0x5000,%eax
c0105d8e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0105d91:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105d96:	83 f8 0a             	cmp    $0xa,%eax
c0105d99:	74 16                	je     c0105db1 <_fifo_check_swap+0x26e>
c0105d9b:	68 05 58 11 c0       	push   $0xc0115805
c0105da0:	68 8e 56 11 c0       	push   $0xc011568e
c0105da5:	6a 73                	push   $0x73
c0105da7:	68 a3 56 11 c0       	push   $0xc01156a3
c0105dac:	e8 34 a7 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105db1:	83 ec 0c             	sub    $0xc,%esp
c0105db4:	68 1c 57 11 c0       	push   $0xc011571c
c0105db9:	e8 c1 a5 ff ff       	call   c010037f <cprintf>
c0105dbe:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0105dc1:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105dc6:	0f b6 00             	movzbl (%eax),%eax
c0105dc9:	3c 0a                	cmp    $0xa,%al
c0105dcb:	74 16                	je     c0105de3 <_fifo_check_swap+0x2a0>
c0105dcd:	68 18 58 11 c0       	push   $0xc0115818
c0105dd2:	68 8e 56 11 c0       	push   $0xc011568e
c0105dd7:	6a 75                	push   $0x75
c0105dd9:	68 a3 56 11 c0       	push   $0xc01156a3
c0105dde:	e8 02 a7 ff ff       	call   c01004e5 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0105de3:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105de8:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0105deb:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105df0:	83 f8 0b             	cmp    $0xb,%eax
c0105df3:	74 16                	je     c0105e0b <_fifo_check_swap+0x2c8>
c0105df5:	68 39 58 11 c0       	push   $0xc0115839
c0105dfa:	68 8e 56 11 c0       	push   $0xc011568e
c0105dff:	6a 77                	push   $0x77
c0105e01:	68 a3 56 11 c0       	push   $0xc01156a3
c0105e06:	e8 da a6 ff ff       	call   c01004e5 <__panic>
    return 0;
c0105e0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e10:	c9                   	leave  
c0105e11:	c3                   	ret    

c0105e12 <_fifo_init>:


static int
_fifo_init(void)
{
c0105e12:	55                   	push   %ebp
c0105e13:	89 e5                	mov    %esp,%ebp
    return 0;
c0105e15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e1a:	5d                   	pop    %ebp
c0105e1b:	c3                   	ret    

c0105e1c <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105e1c:	55                   	push   %ebp
c0105e1d:	89 e5                	mov    %esp,%ebp
    return 0;
c0105e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e24:	5d                   	pop    %ebp
c0105e25:	c3                   	ret    

c0105e26 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0105e26:	55                   	push   %ebp
c0105e27:	89 e5                	mov    %esp,%ebp
c0105e29:	b8 00 00 00 00       	mov    $0x0,%eax
c0105e2e:	5d                   	pop    %ebp
c0105e2f:	c3                   	ret    

c0105e30 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105e30:	55                   	push   %ebp
c0105e31:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e36:	8b 15 00 52 15 c0    	mov    0xc0155200,%edx
c0105e3c:	29 d0                	sub    %edx,%eax
c0105e3e:	c1 f8 02             	sar    $0x2,%eax
c0105e41:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0105e47:	5d                   	pop    %ebp
c0105e48:	c3                   	ret    

c0105e49 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105e49:	55                   	push   %ebp
c0105e4a:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105e4c:	ff 75 08             	pushl  0x8(%ebp)
c0105e4f:	e8 dc ff ff ff       	call   c0105e30 <page2ppn>
c0105e54:	83 c4 04             	add    $0x4,%esp
c0105e57:	c1 e0 0c             	shl    $0xc,%eax
}
c0105e5a:	c9                   	leave  
c0105e5b:	c3                   	ret    

c0105e5c <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105e5c:	55                   	push   %ebp
c0105e5d:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e62:	8b 00                	mov    (%eax),%eax
}
c0105e64:	5d                   	pop    %ebp
c0105e65:	c3                   	ret    

c0105e66 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105e66:	55                   	push   %ebp
c0105e67:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105e69:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e6c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105e6f:	89 10                	mov    %edx,(%eax)
}
c0105e71:	90                   	nop
c0105e72:	5d                   	pop    %ebp
c0105e73:	c3                   	ret    

c0105e74 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105e74:	55                   	push   %ebp
c0105e75:	89 e5                	mov    %esp,%ebp
c0105e77:	83 ec 10             	sub    $0x10,%esp
c0105e7a:	c7 45 fc ec 51 15 c0 	movl   $0xc01551ec,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105e81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e84:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105e87:	89 50 04             	mov    %edx,0x4(%eax)
c0105e8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e8d:	8b 50 04             	mov    0x4(%eax),%edx
c0105e90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e93:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e95:	c7 05 f4 51 15 c0 00 	movl   $0x0,0xc01551f4
c0105e9c:	00 00 00 
}
c0105e9f:	90                   	nop
c0105ea0:	c9                   	leave  
c0105ea1:	c3                   	ret    

c0105ea2 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105ea2:	55                   	push   %ebp
c0105ea3:	89 e5                	mov    %esp,%ebp
c0105ea5:	83 ec 38             	sub    $0x38,%esp
    assert(n > 0);
c0105ea8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105eac:	75 16                	jne    c0105ec4 <default_init_memmap+0x22>
c0105eae:	68 5c 58 11 c0       	push   $0xc011585c
c0105eb3:	68 62 58 11 c0       	push   $0xc0115862
c0105eb8:	6a 6d                	push   $0x6d
c0105eba:	68 77 58 11 c0       	push   $0xc0115877
c0105ebf:	e8 21 a6 ff ff       	call   c01004e5 <__panic>
    struct Page *p = base;
c0105ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105eca:	eb 6c                	jmp    c0105f38 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ecf:	83 c0 04             	add    $0x4,%eax
c0105ed2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105ed9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105edc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105edf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105ee2:	0f a3 10             	bt     %edx,(%eax)
c0105ee5:	19 c0                	sbb    %eax,%eax
c0105ee7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105eea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105eee:	0f 95 c0             	setne  %al
c0105ef1:	0f b6 c0             	movzbl %al,%eax
c0105ef4:	85 c0                	test   %eax,%eax
c0105ef6:	75 16                	jne    c0105f0e <default_init_memmap+0x6c>
c0105ef8:	68 8d 58 11 c0       	push   $0xc011588d
c0105efd:	68 62 58 11 c0       	push   $0xc0115862
c0105f02:	6a 70                	push   $0x70
c0105f04:	68 77 58 11 c0       	push   $0xc0115877
c0105f09:	e8 d7 a5 ff ff       	call   c01004e5 <__panic>
        p->flags = p->property = 0;
c0105f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f11:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1b:	8b 50 08             	mov    0x8(%eax),%edx
c0105f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f21:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105f24:	83 ec 08             	sub    $0x8,%esp
c0105f27:	6a 00                	push   $0x0
c0105f29:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f2c:	e8 35 ff ff ff       	call   c0105e66 <set_page_ref>
c0105f31:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105f34:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0105f38:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f3b:	89 d0                	mov    %edx,%eax
c0105f3d:	c1 e0 03             	shl    $0x3,%eax
c0105f40:	01 d0                	add    %edx,%eax
c0105f42:	c1 e0 02             	shl    $0x2,%eax
c0105f45:	89 c2                	mov    %eax,%edx
c0105f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f4a:	01 d0                	add    %edx,%eax
c0105f4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105f4f:	0f 85 77 ff ff ff    	jne    c0105ecc <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f58:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f5b:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105f5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f61:	83 c0 04             	add    $0x4,%eax
c0105f64:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105f6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105f6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f71:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f74:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105f77:	8b 15 f4 51 15 c0    	mov    0xc01551f4,%edx
c0105f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f80:	01 d0                	add    %edx,%eax
c0105f82:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4
    list_add_before(&free_list, &(base->page_link));
c0105f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f8a:	83 c0 10             	add    $0x10,%eax
c0105f8d:	c7 45 f0 ec 51 15 c0 	movl   $0xc01551ec,-0x10(%ebp)
c0105f94:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0105f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f9a:	8b 00                	mov    (%eax),%eax
c0105f9c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105f9f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0105fa2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0105fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fa8:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105fab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105fae:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105fb1:	89 10                	mov    %edx,(%eax)
c0105fb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105fb6:	8b 10                	mov    (%eax),%edx
c0105fb8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105fbb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105fbe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fc1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105fc4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105fc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105fcd:	89 10                	mov    %edx,(%eax)
}
c0105fcf:	90                   	nop
c0105fd0:	c9                   	leave  
c0105fd1:	c3                   	ret    

c0105fd2 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0105fd2:	55                   	push   %ebp
c0105fd3:	89 e5                	mov    %esp,%ebp
c0105fd5:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105fd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105fdc:	75 16                	jne    c0105ff4 <default_alloc_pages+0x22>
c0105fde:	68 5c 58 11 c0       	push   $0xc011585c
c0105fe3:	68 62 58 11 c0       	push   $0xc0115862
c0105fe8:	6a 7c                	push   $0x7c
c0105fea:	68 77 58 11 c0       	push   $0xc0115877
c0105fef:	e8 f1 a4 ff ff       	call   c01004e5 <__panic>
    if (n > nr_free) {
c0105ff4:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0105ff9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105ffc:	73 0a                	jae    c0106008 <default_alloc_pages+0x36>
        return NULL;
c0105ffe:	b8 00 00 00 00       	mov    $0x0,%eax
c0106003:	e9 3d 01 00 00       	jmp    c0106145 <default_alloc_pages+0x173>
    }
    struct Page *page = NULL;
c0106008:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c010600f:	c7 45 f0 ec 51 15 c0 	movl   $0xc01551ec,-0x10(%ebp)
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c0106016:	eb 1c                	jmp    c0106034 <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0106018:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010601b:	83 e8 10             	sub    $0x10,%eax
c010601e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0106021:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106024:	8b 40 08             	mov    0x8(%eax),%eax
c0106027:	3b 45 08             	cmp    0x8(%ebp),%eax
c010602a:	72 08                	jb     c0106034 <default_alloc_pages+0x62>
            page = p;
c010602c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010602f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0106032:	eb 18                	jmp    c010604c <default_alloc_pages+0x7a>
c0106034:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106037:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010603a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010603d:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c0106040:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106043:	81 7d f0 ec 51 15 c0 	cmpl   $0xc01551ec,-0x10(%ebp)
c010604a:	75 cc                	jne    c0106018 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c010604c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106050:	0f 84 ec 00 00 00    	je     c0106142 <default_alloc_pages+0x170>
        if (page->property > n) {
c0106056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106059:	8b 40 08             	mov    0x8(%eax),%eax
c010605c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010605f:	0f 86 8c 00 00 00    	jbe    c01060f1 <default_alloc_pages+0x11f>
            struct Page *p = page + n;
c0106065:	8b 55 08             	mov    0x8(%ebp),%edx
c0106068:	89 d0                	mov    %edx,%eax
c010606a:	c1 e0 03             	shl    $0x3,%eax
c010606d:	01 d0                	add    %edx,%eax
c010606f:	c1 e0 02             	shl    $0x2,%eax
c0106072:	89 c2                	mov    %eax,%edx
c0106074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106077:	01 d0                	add    %edx,%eax
c0106079:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            p->property = page->property - n;
c010607c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010607f:	8b 40 08             	mov    0x8(%eax),%eax
c0106082:	2b 45 08             	sub    0x8(%ebp),%eax
c0106085:	89 c2                	mov    %eax,%edx
c0106087:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010608a:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c010608d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106090:	83 c0 04             	add    $0x4,%eax
c0106093:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c010609a:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010609d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01060a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01060a3:	0f ab 10             	bts    %edx,(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c01060a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060a9:	83 c0 10             	add    $0x10,%eax
c01060ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060af:	83 c2 10             	add    $0x10,%edx
c01060b2:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01060b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01060b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060bb:	8b 40 04             	mov    0x4(%eax),%eax
c01060be:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01060c1:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01060c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01060c7:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01060ca:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01060cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01060d0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01060d3:	89 10                	mov    %edx,(%eax)
c01060d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01060d8:	8b 10                	mov    (%eax),%edx
c01060da:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01060dd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01060e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01060e3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01060e6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01060ec:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01060ef:	89 10                	mov    %edx,(%eax)
        }
        list_del(&(page->page_link));
c01060f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060f4:	83 c0 10             	add    $0x10,%eax
c01060f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01060fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01060fd:	8b 40 04             	mov    0x4(%eax),%eax
c0106100:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106103:	8b 12                	mov    (%edx),%edx
c0106105:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0106108:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010610b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010610e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106111:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106114:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106117:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010611a:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c010611c:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0106121:	2b 45 08             	sub    0x8(%ebp),%eax
c0106124:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4
        ClearPageProperty(page);
c0106129:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010612c:	83 c0 04             	add    $0x4,%eax
c010612f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0106136:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106139:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010613c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010613f:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0106142:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106145:	c9                   	leave  
c0106146:	c3                   	ret    

c0106147 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0106147:	55                   	push   %ebp
c0106148:	89 e5                	mov    %esp,%ebp
c010614a:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c0106150:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106154:	75 19                	jne    c010616f <default_free_pages+0x28>
c0106156:	68 5c 58 11 c0       	push   $0xc011585c
c010615b:	68 62 58 11 c0       	push   $0xc0115862
c0106160:	68 9a 00 00 00       	push   $0x9a
c0106165:	68 77 58 11 c0       	push   $0xc0115877
c010616a:	e8 76 a3 ff ff       	call   c01004e5 <__panic>
    struct Page *p = base;
c010616f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106172:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106175:	e9 8f 00 00 00       	jmp    c0106209 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c010617a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010617d:	83 c0 04             	add    $0x4,%eax
c0106180:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106187:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010618a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010618d:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106190:	0f a3 10             	bt     %edx,(%eax)
c0106193:	19 c0                	sbb    %eax,%eax
c0106195:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106198:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010619c:	0f 95 c0             	setne  %al
c010619f:	0f b6 c0             	movzbl %al,%eax
c01061a2:	85 c0                	test   %eax,%eax
c01061a4:	75 2c                	jne    c01061d2 <default_free_pages+0x8b>
c01061a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a9:	83 c0 04             	add    $0x4,%eax
c01061ac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01061b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01061b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01061b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01061bc:	0f a3 10             	bt     %edx,(%eax)
c01061bf:	19 c0                	sbb    %eax,%eax
c01061c1:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c01061c4:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c01061c8:	0f 95 c0             	setne  %al
c01061cb:	0f b6 c0             	movzbl %al,%eax
c01061ce:	85 c0                	test   %eax,%eax
c01061d0:	74 19                	je     c01061eb <default_free_pages+0xa4>
c01061d2:	68 a0 58 11 c0       	push   $0xc01158a0
c01061d7:	68 62 58 11 c0       	push   $0xc0115862
c01061dc:	68 9d 00 00 00       	push   $0x9d
c01061e1:	68 77 58 11 c0       	push   $0xc0115877
c01061e6:	e8 fa a2 ff ff       	call   c01004e5 <__panic>
        p->flags = 0;
c01061eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01061f5:	83 ec 08             	sub    $0x8,%esp
c01061f8:	6a 00                	push   $0x0
c01061fa:	ff 75 f4             	pushl  -0xc(%ebp)
c01061fd:	e8 64 fc ff ff       	call   c0105e66 <set_page_ref>
c0106202:	83 c4 10             	add    $0x10,%esp

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0106205:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0106209:	8b 55 0c             	mov    0xc(%ebp),%edx
c010620c:	89 d0                	mov    %edx,%eax
c010620e:	c1 e0 03             	shl    $0x3,%eax
c0106211:	01 d0                	add    %edx,%eax
c0106213:	c1 e0 02             	shl    $0x2,%eax
c0106216:	89 c2                	mov    %eax,%edx
c0106218:	8b 45 08             	mov    0x8(%ebp),%eax
c010621b:	01 d0                	add    %edx,%eax
c010621d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106220:	0f 85 54 ff ff ff    	jne    c010617a <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0106226:	8b 45 08             	mov    0x8(%ebp),%eax
c0106229:	8b 55 0c             	mov    0xc(%ebp),%edx
c010622c:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010622f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106232:	83 c0 04             	add    $0x4,%eax
c0106235:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010623c:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010623f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106242:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106245:	0f ab 10             	bts    %edx,(%eax)
c0106248:	c7 45 e8 ec 51 15 c0 	movl   $0xc01551ec,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010624f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106252:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0106255:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106258:	e9 08 01 00 00       	jmp    c0106365 <default_free_pages+0x21e>
        p = le2page(le, page_link);
c010625d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106260:	83 e8 10             	sub    $0x10,%eax
c0106263:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106266:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106269:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010626c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010626f:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106272:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // TODO: optimize
        if (base + base->property == p) {
c0106275:	8b 45 08             	mov    0x8(%ebp),%eax
c0106278:	8b 50 08             	mov    0x8(%eax),%edx
c010627b:	89 d0                	mov    %edx,%eax
c010627d:	c1 e0 03             	shl    $0x3,%eax
c0106280:	01 d0                	add    %edx,%eax
c0106282:	c1 e0 02             	shl    $0x2,%eax
c0106285:	89 c2                	mov    %eax,%edx
c0106287:	8b 45 08             	mov    0x8(%ebp),%eax
c010628a:	01 d0                	add    %edx,%eax
c010628c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010628f:	75 5a                	jne    c01062eb <default_free_pages+0x1a4>
            base->property += p->property;
c0106291:	8b 45 08             	mov    0x8(%ebp),%eax
c0106294:	8b 50 08             	mov    0x8(%eax),%edx
c0106297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010629a:	8b 40 08             	mov    0x8(%eax),%eax
c010629d:	01 c2                	add    %eax,%edx
c010629f:	8b 45 08             	mov    0x8(%ebp),%eax
c01062a2:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c01062a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062a8:	83 c0 04             	add    $0x4,%eax
c01062ab:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01062b2:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01062b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01062b8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01062bb:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01062be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062c1:	83 c0 10             	add    $0x10,%eax
c01062c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01062c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01062ca:	8b 40 04             	mov    0x4(%eax),%eax
c01062cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01062d0:	8b 12                	mov    (%edx),%edx
c01062d2:	89 55 a8             	mov    %edx,-0x58(%ebp)
c01062d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01062d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01062db:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01062de:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01062e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01062e4:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01062e7:	89 10                	mov    %edx,(%eax)
c01062e9:	eb 7a                	jmp    c0106365 <default_free_pages+0x21e>
        }
        else if (p + p->property == base) {
c01062eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ee:	8b 50 08             	mov    0x8(%eax),%edx
c01062f1:	89 d0                	mov    %edx,%eax
c01062f3:	c1 e0 03             	shl    $0x3,%eax
c01062f6:	01 d0                	add    %edx,%eax
c01062f8:	c1 e0 02             	shl    $0x2,%eax
c01062fb:	89 c2                	mov    %eax,%edx
c01062fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106300:	01 d0                	add    %edx,%eax
c0106302:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106305:	75 5e                	jne    c0106365 <default_free_pages+0x21e>
            p->property += base->property;
c0106307:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010630a:	8b 50 08             	mov    0x8(%eax),%edx
c010630d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106310:	8b 40 08             	mov    0x8(%eax),%eax
c0106313:	01 c2                	add    %eax,%edx
c0106315:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106318:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c010631b:	8b 45 08             	mov    0x8(%ebp),%eax
c010631e:	83 c0 04             	add    $0x4,%eax
c0106321:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c0106328:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010632b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010632e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106331:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0106334:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106337:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c010633a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010633d:	83 c0 10             	add    $0x10,%eax
c0106340:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106343:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106346:	8b 40 04             	mov    0x4(%eax),%eax
c0106349:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010634c:	8b 12                	mov    (%edx),%edx
c010634e:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0106351:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106354:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106357:	8b 55 98             	mov    -0x68(%ebp),%edx
c010635a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010635d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0106360:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106363:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0106365:	81 7d f0 ec 51 15 c0 	cmpl   $0xc01551ec,-0x10(%ebp)
c010636c:	0f 85 eb fe ff ff    	jne    c010625d <default_free_pages+0x116>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0106372:	8b 15 f4 51 15 c0    	mov    0xc01551f4,%edx
c0106378:	8b 45 0c             	mov    0xc(%ebp),%eax
c010637b:	01 d0                	add    %edx,%eax
c010637d:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4
c0106382:	c7 45 d0 ec 51 15 c0 	movl   $0xc01551ec,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106389:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010638c:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c010638f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106392:	eb 69                	jmp    c01063fd <default_free_pages+0x2b6>
        p = le2page(le, page_link);
c0106394:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106397:	83 e8 10             	sub    $0x10,%eax
c010639a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c010639d:	8b 45 08             	mov    0x8(%ebp),%eax
c01063a0:	8b 50 08             	mov    0x8(%eax),%edx
c01063a3:	89 d0                	mov    %edx,%eax
c01063a5:	c1 e0 03             	shl    $0x3,%eax
c01063a8:	01 d0                	add    %edx,%eax
c01063aa:	c1 e0 02             	shl    $0x2,%eax
c01063ad:	89 c2                	mov    %eax,%edx
c01063af:	8b 45 08             	mov    0x8(%ebp),%eax
c01063b2:	01 d0                	add    %edx,%eax
c01063b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01063b7:	77 35                	ja     c01063ee <default_free_pages+0x2a7>
            assert(base + base->property != p);
c01063b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01063bc:	8b 50 08             	mov    0x8(%eax),%edx
c01063bf:	89 d0                	mov    %edx,%eax
c01063c1:	c1 e0 03             	shl    $0x3,%eax
c01063c4:	01 d0                	add    %edx,%eax
c01063c6:	c1 e0 02             	shl    $0x2,%eax
c01063c9:	89 c2                	mov    %eax,%edx
c01063cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01063ce:	01 d0                	add    %edx,%eax
c01063d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01063d3:	75 33                	jne    c0106408 <default_free_pages+0x2c1>
c01063d5:	68 c5 58 11 c0       	push   $0xc01158c5
c01063da:	68 62 58 11 c0       	push   $0xc0115862
c01063df:	68 b9 00 00 00       	push   $0xb9
c01063e4:	68 77 58 11 c0       	push   $0xc0115877
c01063e9:	e8 f7 a0 ff ff       	call   c01004e5 <__panic>
c01063ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063f1:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01063f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01063f7:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c01063fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c01063fd:	81 7d f0 ec 51 15 c0 	cmpl   $0xc01551ec,-0x10(%ebp)
c0106404:	75 8e                	jne    c0106394 <default_free_pages+0x24d>
c0106406:	eb 01                	jmp    c0106409 <default_free_pages+0x2c2>
        p = le2page(le, page_link);
        if (base + base->property <= p) {
            assert(base + base->property != p);
            break;
c0106408:	90                   	nop
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c0106409:	8b 45 08             	mov    0x8(%ebp),%eax
c010640c:	8d 50 10             	lea    0x10(%eax),%edx
c010640f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106412:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106415:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106418:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010641b:	8b 00                	mov    (%eax),%eax
c010641d:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106420:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106423:	89 45 88             	mov    %eax,-0x78(%ebp)
c0106426:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106429:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010642c:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010642f:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106432:	89 10                	mov    %edx,(%eax)
c0106434:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106437:	8b 10                	mov    (%eax),%edx
c0106439:	8b 45 88             	mov    -0x78(%ebp),%eax
c010643c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010643f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106442:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106445:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106448:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010644b:	8b 55 88             	mov    -0x78(%ebp),%edx
c010644e:	89 10                	mov    %edx,(%eax)
}
c0106450:	90                   	nop
c0106451:	c9                   	leave  
c0106452:	c3                   	ret    

c0106453 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0106453:	55                   	push   %ebp
c0106454:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0106456:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
}
c010645b:	5d                   	pop    %ebp
c010645c:	c3                   	ret    

c010645d <basic_check>:

static void
basic_check(void) {
c010645d:	55                   	push   %ebp
c010645e:	89 e5                	mov    %esp,%ebp
c0106460:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106463:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010646a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010646d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106470:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106473:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106476:	83 ec 0c             	sub    $0xc,%esp
c0106479:	6a 01                	push   $0x1
c010647b:	e8 d7 0c 00 00       	call   c0107157 <alloc_pages>
c0106480:	83 c4 10             	add    $0x10,%esp
c0106483:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106486:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010648a:	75 19                	jne    c01064a5 <basic_check+0x48>
c010648c:	68 e0 58 11 c0       	push   $0xc01158e0
c0106491:	68 62 58 11 c0       	push   $0xc0115862
c0106496:	68 ca 00 00 00       	push   $0xca
c010649b:	68 77 58 11 c0       	push   $0xc0115877
c01064a0:	e8 40 a0 ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_page()) != NULL);
c01064a5:	83 ec 0c             	sub    $0xc,%esp
c01064a8:	6a 01                	push   $0x1
c01064aa:	e8 a8 0c 00 00       	call   c0107157 <alloc_pages>
c01064af:	83 c4 10             	add    $0x10,%esp
c01064b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01064b9:	75 19                	jne    c01064d4 <basic_check+0x77>
c01064bb:	68 fc 58 11 c0       	push   $0xc01158fc
c01064c0:	68 62 58 11 c0       	push   $0xc0115862
c01064c5:	68 cb 00 00 00       	push   $0xcb
c01064ca:	68 77 58 11 c0       	push   $0xc0115877
c01064cf:	e8 11 a0 ff ff       	call   c01004e5 <__panic>
    assert((p2 = alloc_page()) != NULL);
c01064d4:	83 ec 0c             	sub    $0xc,%esp
c01064d7:	6a 01                	push   $0x1
c01064d9:	e8 79 0c 00 00       	call   c0107157 <alloc_pages>
c01064de:	83 c4 10             	add    $0x10,%esp
c01064e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01064e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01064e8:	75 19                	jne    c0106503 <basic_check+0xa6>
c01064ea:	68 18 59 11 c0       	push   $0xc0115918
c01064ef:	68 62 58 11 c0       	push   $0xc0115862
c01064f4:	68 cc 00 00 00       	push   $0xcc
c01064f9:	68 77 58 11 c0       	push   $0xc0115877
c01064fe:	e8 e2 9f ff ff       	call   c01004e5 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106503:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106506:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106509:	74 10                	je     c010651b <basic_check+0xbe>
c010650b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010650e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106511:	74 08                	je     c010651b <basic_check+0xbe>
c0106513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106516:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106519:	75 19                	jne    c0106534 <basic_check+0xd7>
c010651b:	68 34 59 11 c0       	push   $0xc0115934
c0106520:	68 62 58 11 c0       	push   $0xc0115862
c0106525:	68 ce 00 00 00       	push   $0xce
c010652a:	68 77 58 11 c0       	push   $0xc0115877
c010652f:	e8 b1 9f ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106534:	83 ec 0c             	sub    $0xc,%esp
c0106537:	ff 75 ec             	pushl  -0x14(%ebp)
c010653a:	e8 1d f9 ff ff       	call   c0105e5c <page_ref>
c010653f:	83 c4 10             	add    $0x10,%esp
c0106542:	85 c0                	test   %eax,%eax
c0106544:	75 24                	jne    c010656a <basic_check+0x10d>
c0106546:	83 ec 0c             	sub    $0xc,%esp
c0106549:	ff 75 f0             	pushl  -0x10(%ebp)
c010654c:	e8 0b f9 ff ff       	call   c0105e5c <page_ref>
c0106551:	83 c4 10             	add    $0x10,%esp
c0106554:	85 c0                	test   %eax,%eax
c0106556:	75 12                	jne    c010656a <basic_check+0x10d>
c0106558:	83 ec 0c             	sub    $0xc,%esp
c010655b:	ff 75 f4             	pushl  -0xc(%ebp)
c010655e:	e8 f9 f8 ff ff       	call   c0105e5c <page_ref>
c0106563:	83 c4 10             	add    $0x10,%esp
c0106566:	85 c0                	test   %eax,%eax
c0106568:	74 19                	je     c0106583 <basic_check+0x126>
c010656a:	68 58 59 11 c0       	push   $0xc0115958
c010656f:	68 62 58 11 c0       	push   $0xc0115862
c0106574:	68 cf 00 00 00       	push   $0xcf
c0106579:	68 77 58 11 c0       	push   $0xc0115877
c010657e:	e8 62 9f ff ff       	call   c01004e5 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106583:	83 ec 0c             	sub    $0xc,%esp
c0106586:	ff 75 ec             	pushl  -0x14(%ebp)
c0106589:	e8 bb f8 ff ff       	call   c0105e49 <page2pa>
c010658e:	83 c4 10             	add    $0x10,%esp
c0106591:	89 c2                	mov    %eax,%edx
c0106593:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106598:	c1 e0 0c             	shl    $0xc,%eax
c010659b:	39 c2                	cmp    %eax,%edx
c010659d:	72 19                	jb     c01065b8 <basic_check+0x15b>
c010659f:	68 94 59 11 c0       	push   $0xc0115994
c01065a4:	68 62 58 11 c0       	push   $0xc0115862
c01065a9:	68 d1 00 00 00       	push   $0xd1
c01065ae:	68 77 58 11 c0       	push   $0xc0115877
c01065b3:	e8 2d 9f ff ff       	call   c01004e5 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01065b8:	83 ec 0c             	sub    $0xc,%esp
c01065bb:	ff 75 f0             	pushl  -0x10(%ebp)
c01065be:	e8 86 f8 ff ff       	call   c0105e49 <page2pa>
c01065c3:	83 c4 10             	add    $0x10,%esp
c01065c6:	89 c2                	mov    %eax,%edx
c01065c8:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01065cd:	c1 e0 0c             	shl    $0xc,%eax
c01065d0:	39 c2                	cmp    %eax,%edx
c01065d2:	72 19                	jb     c01065ed <basic_check+0x190>
c01065d4:	68 b1 59 11 c0       	push   $0xc01159b1
c01065d9:	68 62 58 11 c0       	push   $0xc0115862
c01065de:	68 d2 00 00 00       	push   $0xd2
c01065e3:	68 77 58 11 c0       	push   $0xc0115877
c01065e8:	e8 f8 9e ff ff       	call   c01004e5 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01065ed:	83 ec 0c             	sub    $0xc,%esp
c01065f0:	ff 75 f4             	pushl  -0xc(%ebp)
c01065f3:	e8 51 f8 ff ff       	call   c0105e49 <page2pa>
c01065f8:	83 c4 10             	add    $0x10,%esp
c01065fb:	89 c2                	mov    %eax,%edx
c01065fd:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106602:	c1 e0 0c             	shl    $0xc,%eax
c0106605:	39 c2                	cmp    %eax,%edx
c0106607:	72 19                	jb     c0106622 <basic_check+0x1c5>
c0106609:	68 ce 59 11 c0       	push   $0xc01159ce
c010660e:	68 62 58 11 c0       	push   $0xc0115862
c0106613:	68 d3 00 00 00       	push   $0xd3
c0106618:	68 77 58 11 c0       	push   $0xc0115877
c010661d:	e8 c3 9e ff ff       	call   c01004e5 <__panic>

    list_entry_t free_list_store = free_list;
c0106622:	a1 ec 51 15 c0       	mov    0xc01551ec,%eax
c0106627:	8b 15 f0 51 15 c0    	mov    0xc01551f0,%edx
c010662d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106630:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106633:	c7 45 e4 ec 51 15 c0 	movl   $0xc01551ec,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010663a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010663d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106640:	89 50 04             	mov    %edx,0x4(%eax)
c0106643:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106646:	8b 50 04             	mov    0x4(%eax),%edx
c0106649:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010664c:	89 10                	mov    %edx,(%eax)
c010664e:	c7 45 d8 ec 51 15 c0 	movl   $0xc01551ec,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106655:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106658:	8b 40 04             	mov    0x4(%eax),%eax
c010665b:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010665e:	0f 94 c0             	sete   %al
c0106661:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106664:	85 c0                	test   %eax,%eax
c0106666:	75 19                	jne    c0106681 <basic_check+0x224>
c0106668:	68 eb 59 11 c0       	push   $0xc01159eb
c010666d:	68 62 58 11 c0       	push   $0xc0115862
c0106672:	68 d7 00 00 00       	push   $0xd7
c0106677:	68 77 58 11 c0       	push   $0xc0115877
c010667c:	e8 64 9e ff ff       	call   c01004e5 <__panic>

    unsigned int nr_free_store = nr_free;
c0106681:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0106686:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0106689:	c7 05 f4 51 15 c0 00 	movl   $0x0,0xc01551f4
c0106690:	00 00 00 

    assert(alloc_page() == NULL);
c0106693:	83 ec 0c             	sub    $0xc,%esp
c0106696:	6a 01                	push   $0x1
c0106698:	e8 ba 0a 00 00       	call   c0107157 <alloc_pages>
c010669d:	83 c4 10             	add    $0x10,%esp
c01066a0:	85 c0                	test   %eax,%eax
c01066a2:	74 19                	je     c01066bd <basic_check+0x260>
c01066a4:	68 02 5a 11 c0       	push   $0xc0115a02
c01066a9:	68 62 58 11 c0       	push   $0xc0115862
c01066ae:	68 dc 00 00 00       	push   $0xdc
c01066b3:	68 77 58 11 c0       	push   $0xc0115877
c01066b8:	e8 28 9e ff ff       	call   c01004e5 <__panic>

    free_page(p0);
c01066bd:	83 ec 08             	sub    $0x8,%esp
c01066c0:	6a 01                	push   $0x1
c01066c2:	ff 75 ec             	pushl  -0x14(%ebp)
c01066c5:	e8 f9 0a 00 00       	call   c01071c3 <free_pages>
c01066ca:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01066cd:	83 ec 08             	sub    $0x8,%esp
c01066d0:	6a 01                	push   $0x1
c01066d2:	ff 75 f0             	pushl  -0x10(%ebp)
c01066d5:	e8 e9 0a 00 00       	call   c01071c3 <free_pages>
c01066da:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01066dd:	83 ec 08             	sub    $0x8,%esp
c01066e0:	6a 01                	push   $0x1
c01066e2:	ff 75 f4             	pushl  -0xc(%ebp)
c01066e5:	e8 d9 0a 00 00       	call   c01071c3 <free_pages>
c01066ea:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c01066ed:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c01066f2:	83 f8 03             	cmp    $0x3,%eax
c01066f5:	74 19                	je     c0106710 <basic_check+0x2b3>
c01066f7:	68 17 5a 11 c0       	push   $0xc0115a17
c01066fc:	68 62 58 11 c0       	push   $0xc0115862
c0106701:	68 e1 00 00 00       	push   $0xe1
c0106706:	68 77 58 11 c0       	push   $0xc0115877
c010670b:	e8 d5 9d ff ff       	call   c01004e5 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106710:	83 ec 0c             	sub    $0xc,%esp
c0106713:	6a 01                	push   $0x1
c0106715:	e8 3d 0a 00 00       	call   c0107157 <alloc_pages>
c010671a:	83 c4 10             	add    $0x10,%esp
c010671d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106720:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106724:	75 19                	jne    c010673f <basic_check+0x2e2>
c0106726:	68 e0 58 11 c0       	push   $0xc01158e0
c010672b:	68 62 58 11 c0       	push   $0xc0115862
c0106730:	68 e3 00 00 00       	push   $0xe3
c0106735:	68 77 58 11 c0       	push   $0xc0115877
c010673a:	e8 a6 9d ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010673f:	83 ec 0c             	sub    $0xc,%esp
c0106742:	6a 01                	push   $0x1
c0106744:	e8 0e 0a 00 00       	call   c0107157 <alloc_pages>
c0106749:	83 c4 10             	add    $0x10,%esp
c010674c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010674f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106753:	75 19                	jne    c010676e <basic_check+0x311>
c0106755:	68 fc 58 11 c0       	push   $0xc01158fc
c010675a:	68 62 58 11 c0       	push   $0xc0115862
c010675f:	68 e4 00 00 00       	push   $0xe4
c0106764:	68 77 58 11 c0       	push   $0xc0115877
c0106769:	e8 77 9d ff ff       	call   c01004e5 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010676e:	83 ec 0c             	sub    $0xc,%esp
c0106771:	6a 01                	push   $0x1
c0106773:	e8 df 09 00 00       	call   c0107157 <alloc_pages>
c0106778:	83 c4 10             	add    $0x10,%esp
c010677b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010677e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106782:	75 19                	jne    c010679d <basic_check+0x340>
c0106784:	68 18 59 11 c0       	push   $0xc0115918
c0106789:	68 62 58 11 c0       	push   $0xc0115862
c010678e:	68 e5 00 00 00       	push   $0xe5
c0106793:	68 77 58 11 c0       	push   $0xc0115877
c0106798:	e8 48 9d ff ff       	call   c01004e5 <__panic>

    assert(alloc_page() == NULL);
c010679d:	83 ec 0c             	sub    $0xc,%esp
c01067a0:	6a 01                	push   $0x1
c01067a2:	e8 b0 09 00 00       	call   c0107157 <alloc_pages>
c01067a7:	83 c4 10             	add    $0x10,%esp
c01067aa:	85 c0                	test   %eax,%eax
c01067ac:	74 19                	je     c01067c7 <basic_check+0x36a>
c01067ae:	68 02 5a 11 c0       	push   $0xc0115a02
c01067b3:	68 62 58 11 c0       	push   $0xc0115862
c01067b8:	68 e7 00 00 00       	push   $0xe7
c01067bd:	68 77 58 11 c0       	push   $0xc0115877
c01067c2:	e8 1e 9d ff ff       	call   c01004e5 <__panic>

    free_page(p0);
c01067c7:	83 ec 08             	sub    $0x8,%esp
c01067ca:	6a 01                	push   $0x1
c01067cc:	ff 75 ec             	pushl  -0x14(%ebp)
c01067cf:	e8 ef 09 00 00       	call   c01071c3 <free_pages>
c01067d4:	83 c4 10             	add    $0x10,%esp
c01067d7:	c7 45 e8 ec 51 15 c0 	movl   $0xc01551ec,-0x18(%ebp)
c01067de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01067e1:	8b 40 04             	mov    0x4(%eax),%eax
c01067e4:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01067e7:	0f 94 c0             	sete   %al
c01067ea:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c01067ed:	85 c0                	test   %eax,%eax
c01067ef:	74 19                	je     c010680a <basic_check+0x3ad>
c01067f1:	68 24 5a 11 c0       	push   $0xc0115a24
c01067f6:	68 62 58 11 c0       	push   $0xc0115862
c01067fb:	68 ea 00 00 00       	push   $0xea
c0106800:	68 77 58 11 c0       	push   $0xc0115877
c0106805:	e8 db 9c ff ff       	call   c01004e5 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010680a:	83 ec 0c             	sub    $0xc,%esp
c010680d:	6a 01                	push   $0x1
c010680f:	e8 43 09 00 00       	call   c0107157 <alloc_pages>
c0106814:	83 c4 10             	add    $0x10,%esp
c0106817:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010681a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010681d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106820:	74 19                	je     c010683b <basic_check+0x3de>
c0106822:	68 3c 5a 11 c0       	push   $0xc0115a3c
c0106827:	68 62 58 11 c0       	push   $0xc0115862
c010682c:	68 ed 00 00 00       	push   $0xed
c0106831:	68 77 58 11 c0       	push   $0xc0115877
c0106836:	e8 aa 9c ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c010683b:	83 ec 0c             	sub    $0xc,%esp
c010683e:	6a 01                	push   $0x1
c0106840:	e8 12 09 00 00       	call   c0107157 <alloc_pages>
c0106845:	83 c4 10             	add    $0x10,%esp
c0106848:	85 c0                	test   %eax,%eax
c010684a:	74 19                	je     c0106865 <basic_check+0x408>
c010684c:	68 02 5a 11 c0       	push   $0xc0115a02
c0106851:	68 62 58 11 c0       	push   $0xc0115862
c0106856:	68 ee 00 00 00       	push   $0xee
c010685b:	68 77 58 11 c0       	push   $0xc0115877
c0106860:	e8 80 9c ff ff       	call   c01004e5 <__panic>

    assert(nr_free == 0);
c0106865:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c010686a:	85 c0                	test   %eax,%eax
c010686c:	74 19                	je     c0106887 <basic_check+0x42a>
c010686e:	68 55 5a 11 c0       	push   $0xc0115a55
c0106873:	68 62 58 11 c0       	push   $0xc0115862
c0106878:	68 f0 00 00 00       	push   $0xf0
c010687d:	68 77 58 11 c0       	push   $0xc0115877
c0106882:	e8 5e 9c ff ff       	call   c01004e5 <__panic>
    free_list = free_list_store;
c0106887:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010688a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010688d:	a3 ec 51 15 c0       	mov    %eax,0xc01551ec
c0106892:	89 15 f0 51 15 c0    	mov    %edx,0xc01551f0
    nr_free = nr_free_store;
c0106898:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010689b:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4

    free_page(p);
c01068a0:	83 ec 08             	sub    $0x8,%esp
c01068a3:	6a 01                	push   $0x1
c01068a5:	ff 75 dc             	pushl  -0x24(%ebp)
c01068a8:	e8 16 09 00 00       	call   c01071c3 <free_pages>
c01068ad:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01068b0:	83 ec 08             	sub    $0x8,%esp
c01068b3:	6a 01                	push   $0x1
c01068b5:	ff 75 f0             	pushl  -0x10(%ebp)
c01068b8:	e8 06 09 00 00       	call   c01071c3 <free_pages>
c01068bd:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01068c0:	83 ec 08             	sub    $0x8,%esp
c01068c3:	6a 01                	push   $0x1
c01068c5:	ff 75 f4             	pushl  -0xc(%ebp)
c01068c8:	e8 f6 08 00 00       	call   c01071c3 <free_pages>
c01068cd:	83 c4 10             	add    $0x10,%esp
}
c01068d0:	90                   	nop
c01068d1:	c9                   	leave  
c01068d2:	c3                   	ret    

c01068d3 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c01068d3:	55                   	push   %ebp
c01068d4:	89 e5                	mov    %esp,%ebp
c01068d6:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c01068dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01068e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c01068ea:	c7 45 ec ec 51 15 c0 	movl   $0xc01551ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01068f1:	eb 60                	jmp    c0106953 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c01068f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068f6:	83 e8 10             	sub    $0x10,%eax
c01068f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01068fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068ff:	83 c0 04             	add    $0x4,%eax
c0106902:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0106909:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010690c:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010690f:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106912:	0f a3 10             	bt     %edx,(%eax)
c0106915:	19 c0                	sbb    %eax,%eax
c0106917:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c010691a:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c010691e:	0f 95 c0             	setne  %al
c0106921:	0f b6 c0             	movzbl %al,%eax
c0106924:	85 c0                	test   %eax,%eax
c0106926:	75 19                	jne    c0106941 <default_check+0x6e>
c0106928:	68 62 5a 11 c0       	push   $0xc0115a62
c010692d:	68 62 58 11 c0       	push   $0xc0115862
c0106932:	68 01 01 00 00       	push   $0x101
c0106937:	68 77 58 11 c0       	push   $0xc0115877
c010693c:	e8 a4 9b ff ff       	call   c01004e5 <__panic>
        count ++, total += p->property;
c0106941:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106948:	8b 50 08             	mov    0x8(%eax),%edx
c010694b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010694e:	01 d0                	add    %edx,%eax
c0106950:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106953:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106956:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106959:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010695c:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010695f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106962:	81 7d ec ec 51 15 c0 	cmpl   $0xc01551ec,-0x14(%ebp)
c0106969:	75 88                	jne    c01068f3 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010696b:	e8 88 08 00 00       	call   c01071f8 <nr_free_pages>
c0106970:	89 c2                	mov    %eax,%edx
c0106972:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106975:	39 c2                	cmp    %eax,%edx
c0106977:	74 19                	je     c0106992 <default_check+0xbf>
c0106979:	68 72 5a 11 c0       	push   $0xc0115a72
c010697e:	68 62 58 11 c0       	push   $0xc0115862
c0106983:	68 04 01 00 00       	push   $0x104
c0106988:	68 77 58 11 c0       	push   $0xc0115877
c010698d:	e8 53 9b ff ff       	call   c01004e5 <__panic>

    basic_check();
c0106992:	e8 c6 fa ff ff       	call   c010645d <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106997:	83 ec 0c             	sub    $0xc,%esp
c010699a:	6a 05                	push   $0x5
c010699c:	e8 b6 07 00 00       	call   c0107157 <alloc_pages>
c01069a1:	83 c4 10             	add    $0x10,%esp
c01069a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c01069a7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01069ab:	75 19                	jne    c01069c6 <default_check+0xf3>
c01069ad:	68 8b 5a 11 c0       	push   $0xc0115a8b
c01069b2:	68 62 58 11 c0       	push   $0xc0115862
c01069b7:	68 09 01 00 00       	push   $0x109
c01069bc:	68 77 58 11 c0       	push   $0xc0115877
c01069c1:	e8 1f 9b ff ff       	call   c01004e5 <__panic>
    assert(!PageProperty(p0));
c01069c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069c9:	83 c0 04             	add    $0x4,%eax
c01069cc:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c01069d3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01069d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01069d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01069dc:	0f a3 10             	bt     %edx,(%eax)
c01069df:	19 c0                	sbb    %eax,%eax
c01069e1:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c01069e4:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c01069e8:	0f 95 c0             	setne  %al
c01069eb:	0f b6 c0             	movzbl %al,%eax
c01069ee:	85 c0                	test   %eax,%eax
c01069f0:	74 19                	je     c0106a0b <default_check+0x138>
c01069f2:	68 96 5a 11 c0       	push   $0xc0115a96
c01069f7:	68 62 58 11 c0       	push   $0xc0115862
c01069fc:	68 0a 01 00 00       	push   $0x10a
c0106a01:	68 77 58 11 c0       	push   $0xc0115877
c0106a06:	e8 da 9a ff ff       	call   c01004e5 <__panic>

    list_entry_t free_list_store = free_list;
c0106a0b:	a1 ec 51 15 c0       	mov    0xc01551ec,%eax
c0106a10:	8b 15 f0 51 15 c0    	mov    0xc01551f0,%edx
c0106a16:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106a19:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106a1c:	c7 45 d0 ec 51 15 c0 	movl   $0xc01551ec,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106a23:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a26:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106a29:	89 50 04             	mov    %edx,0x4(%eax)
c0106a2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a2f:	8b 50 04             	mov    0x4(%eax),%edx
c0106a32:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a35:	89 10                	mov    %edx,(%eax)
c0106a37:	c7 45 d8 ec 51 15 c0 	movl   $0xc01551ec,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106a3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106a41:	8b 40 04             	mov    0x4(%eax),%eax
c0106a44:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106a47:	0f 94 c0             	sete   %al
c0106a4a:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106a4d:	85 c0                	test   %eax,%eax
c0106a4f:	75 19                	jne    c0106a6a <default_check+0x197>
c0106a51:	68 eb 59 11 c0       	push   $0xc01159eb
c0106a56:	68 62 58 11 c0       	push   $0xc0115862
c0106a5b:	68 0e 01 00 00       	push   $0x10e
c0106a60:	68 77 58 11 c0       	push   $0xc0115877
c0106a65:	e8 7b 9a ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0106a6a:	83 ec 0c             	sub    $0xc,%esp
c0106a6d:	6a 01                	push   $0x1
c0106a6f:	e8 e3 06 00 00       	call   c0107157 <alloc_pages>
c0106a74:	83 c4 10             	add    $0x10,%esp
c0106a77:	85 c0                	test   %eax,%eax
c0106a79:	74 19                	je     c0106a94 <default_check+0x1c1>
c0106a7b:	68 02 5a 11 c0       	push   $0xc0115a02
c0106a80:	68 62 58 11 c0       	push   $0xc0115862
c0106a85:	68 0f 01 00 00       	push   $0x10f
c0106a8a:	68 77 58 11 c0       	push   $0xc0115877
c0106a8f:	e8 51 9a ff ff       	call   c01004e5 <__panic>

    unsigned int nr_free_store = nr_free;
c0106a94:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0106a99:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0106a9c:	c7 05 f4 51 15 c0 00 	movl   $0x0,0xc01551f4
c0106aa3:	00 00 00 

    free_pages(p0 + 2, 3);
c0106aa6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aa9:	83 c0 48             	add    $0x48,%eax
c0106aac:	83 ec 08             	sub    $0x8,%esp
c0106aaf:	6a 03                	push   $0x3
c0106ab1:	50                   	push   %eax
c0106ab2:	e8 0c 07 00 00       	call   c01071c3 <free_pages>
c0106ab7:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0106aba:	83 ec 0c             	sub    $0xc,%esp
c0106abd:	6a 04                	push   $0x4
c0106abf:	e8 93 06 00 00       	call   c0107157 <alloc_pages>
c0106ac4:	83 c4 10             	add    $0x10,%esp
c0106ac7:	85 c0                	test   %eax,%eax
c0106ac9:	74 19                	je     c0106ae4 <default_check+0x211>
c0106acb:	68 a8 5a 11 c0       	push   $0xc0115aa8
c0106ad0:	68 62 58 11 c0       	push   $0xc0115862
c0106ad5:	68 15 01 00 00       	push   $0x115
c0106ada:	68 77 58 11 c0       	push   $0xc0115877
c0106adf:	e8 01 9a ff ff       	call   c01004e5 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106ae4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ae7:	83 c0 48             	add    $0x48,%eax
c0106aea:	83 c0 04             	add    $0x4,%eax
c0106aed:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106af4:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106af7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106afa:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106afd:	0f a3 10             	bt     %edx,(%eax)
c0106b00:	19 c0                	sbb    %eax,%eax
c0106b02:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106b05:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106b09:	0f 95 c0             	setne  %al
c0106b0c:	0f b6 c0             	movzbl %al,%eax
c0106b0f:	85 c0                	test   %eax,%eax
c0106b11:	74 0e                	je     c0106b21 <default_check+0x24e>
c0106b13:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b16:	83 c0 48             	add    $0x48,%eax
c0106b19:	8b 40 08             	mov    0x8(%eax),%eax
c0106b1c:	83 f8 03             	cmp    $0x3,%eax
c0106b1f:	74 19                	je     c0106b3a <default_check+0x267>
c0106b21:	68 c0 5a 11 c0       	push   $0xc0115ac0
c0106b26:	68 62 58 11 c0       	push   $0xc0115862
c0106b2b:	68 16 01 00 00       	push   $0x116
c0106b30:	68 77 58 11 c0       	push   $0xc0115877
c0106b35:	e8 ab 99 ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106b3a:	83 ec 0c             	sub    $0xc,%esp
c0106b3d:	6a 03                	push   $0x3
c0106b3f:	e8 13 06 00 00       	call   c0107157 <alloc_pages>
c0106b44:	83 c4 10             	add    $0x10,%esp
c0106b47:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106b4a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106b4e:	75 19                	jne    c0106b69 <default_check+0x296>
c0106b50:	68 ec 5a 11 c0       	push   $0xc0115aec
c0106b55:	68 62 58 11 c0       	push   $0xc0115862
c0106b5a:	68 17 01 00 00       	push   $0x117
c0106b5f:	68 77 58 11 c0       	push   $0xc0115877
c0106b64:	e8 7c 99 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0106b69:	83 ec 0c             	sub    $0xc,%esp
c0106b6c:	6a 01                	push   $0x1
c0106b6e:	e8 e4 05 00 00       	call   c0107157 <alloc_pages>
c0106b73:	83 c4 10             	add    $0x10,%esp
c0106b76:	85 c0                	test   %eax,%eax
c0106b78:	74 19                	je     c0106b93 <default_check+0x2c0>
c0106b7a:	68 02 5a 11 c0       	push   $0xc0115a02
c0106b7f:	68 62 58 11 c0       	push   $0xc0115862
c0106b84:	68 18 01 00 00       	push   $0x118
c0106b89:	68 77 58 11 c0       	push   $0xc0115877
c0106b8e:	e8 52 99 ff ff       	call   c01004e5 <__panic>
    assert(p0 + 2 == p1);
c0106b93:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b96:	83 c0 48             	add    $0x48,%eax
c0106b99:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106b9c:	74 19                	je     c0106bb7 <default_check+0x2e4>
c0106b9e:	68 0a 5b 11 c0       	push   $0xc0115b0a
c0106ba3:	68 62 58 11 c0       	push   $0xc0115862
c0106ba8:	68 19 01 00 00       	push   $0x119
c0106bad:	68 77 58 11 c0       	push   $0xc0115877
c0106bb2:	e8 2e 99 ff ff       	call   c01004e5 <__panic>

    p2 = p0 + 1;
c0106bb7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106bba:	83 c0 24             	add    $0x24,%eax
c0106bbd:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106bc0:	83 ec 08             	sub    $0x8,%esp
c0106bc3:	6a 01                	push   $0x1
c0106bc5:	ff 75 dc             	pushl  -0x24(%ebp)
c0106bc8:	e8 f6 05 00 00       	call   c01071c3 <free_pages>
c0106bcd:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106bd0:	83 ec 08             	sub    $0x8,%esp
c0106bd3:	6a 03                	push   $0x3
c0106bd5:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106bd8:	e8 e6 05 00 00       	call   c01071c3 <free_pages>
c0106bdd:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106be3:	83 c0 04             	add    $0x4,%eax
c0106be6:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106bed:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106bf0:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106bf3:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106bf6:	0f a3 10             	bt     %edx,(%eax)
c0106bf9:	19 c0                	sbb    %eax,%eax
c0106bfb:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106bfe:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106c02:	0f 95 c0             	setne  %al
c0106c05:	0f b6 c0             	movzbl %al,%eax
c0106c08:	85 c0                	test   %eax,%eax
c0106c0a:	74 0b                	je     c0106c17 <default_check+0x344>
c0106c0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c0f:	8b 40 08             	mov    0x8(%eax),%eax
c0106c12:	83 f8 01             	cmp    $0x1,%eax
c0106c15:	74 19                	je     c0106c30 <default_check+0x35d>
c0106c17:	68 18 5b 11 c0       	push   $0xc0115b18
c0106c1c:	68 62 58 11 c0       	push   $0xc0115862
c0106c21:	68 1e 01 00 00       	push   $0x11e
c0106c26:	68 77 58 11 c0       	push   $0xc0115877
c0106c2b:	e8 b5 98 ff ff       	call   c01004e5 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106c30:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106c33:	83 c0 04             	add    $0x4,%eax
c0106c36:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106c3d:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106c40:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106c43:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106c46:	0f a3 10             	bt     %edx,(%eax)
c0106c49:	19 c0                	sbb    %eax,%eax
c0106c4b:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106c4e:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106c52:	0f 95 c0             	setne  %al
c0106c55:	0f b6 c0             	movzbl %al,%eax
c0106c58:	85 c0                	test   %eax,%eax
c0106c5a:	74 0b                	je     c0106c67 <default_check+0x394>
c0106c5c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106c5f:	8b 40 08             	mov    0x8(%eax),%eax
c0106c62:	83 f8 03             	cmp    $0x3,%eax
c0106c65:	74 19                	je     c0106c80 <default_check+0x3ad>
c0106c67:	68 40 5b 11 c0       	push   $0xc0115b40
c0106c6c:	68 62 58 11 c0       	push   $0xc0115862
c0106c71:	68 1f 01 00 00       	push   $0x11f
c0106c76:	68 77 58 11 c0       	push   $0xc0115877
c0106c7b:	e8 65 98 ff ff       	call   c01004e5 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106c80:	83 ec 0c             	sub    $0xc,%esp
c0106c83:	6a 01                	push   $0x1
c0106c85:	e8 cd 04 00 00       	call   c0107157 <alloc_pages>
c0106c8a:	83 c4 10             	add    $0x10,%esp
c0106c8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c90:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c93:	83 e8 24             	sub    $0x24,%eax
c0106c96:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c99:	74 19                	je     c0106cb4 <default_check+0x3e1>
c0106c9b:	68 66 5b 11 c0       	push   $0xc0115b66
c0106ca0:	68 62 58 11 c0       	push   $0xc0115862
c0106ca5:	68 21 01 00 00       	push   $0x121
c0106caa:	68 77 58 11 c0       	push   $0xc0115877
c0106caf:	e8 31 98 ff ff       	call   c01004e5 <__panic>
    free_page(p0);
c0106cb4:	83 ec 08             	sub    $0x8,%esp
c0106cb7:	6a 01                	push   $0x1
c0106cb9:	ff 75 dc             	pushl  -0x24(%ebp)
c0106cbc:	e8 02 05 00 00       	call   c01071c3 <free_pages>
c0106cc1:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106cc4:	83 ec 0c             	sub    $0xc,%esp
c0106cc7:	6a 02                	push   $0x2
c0106cc9:	e8 89 04 00 00       	call   c0107157 <alloc_pages>
c0106cce:	83 c4 10             	add    $0x10,%esp
c0106cd1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106cd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106cd7:	83 c0 24             	add    $0x24,%eax
c0106cda:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106cdd:	74 19                	je     c0106cf8 <default_check+0x425>
c0106cdf:	68 84 5b 11 c0       	push   $0xc0115b84
c0106ce4:	68 62 58 11 c0       	push   $0xc0115862
c0106ce9:	68 23 01 00 00       	push   $0x123
c0106cee:	68 77 58 11 c0       	push   $0xc0115877
c0106cf3:	e8 ed 97 ff ff       	call   c01004e5 <__panic>

    free_pages(p0, 2);
c0106cf8:	83 ec 08             	sub    $0x8,%esp
c0106cfb:	6a 02                	push   $0x2
c0106cfd:	ff 75 dc             	pushl  -0x24(%ebp)
c0106d00:	e8 be 04 00 00       	call   c01071c3 <free_pages>
c0106d05:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106d08:	83 ec 08             	sub    $0x8,%esp
c0106d0b:	6a 01                	push   $0x1
c0106d0d:	ff 75 c0             	pushl  -0x40(%ebp)
c0106d10:	e8 ae 04 00 00       	call   c01071c3 <free_pages>
c0106d15:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106d18:	83 ec 0c             	sub    $0xc,%esp
c0106d1b:	6a 05                	push   $0x5
c0106d1d:	e8 35 04 00 00       	call   c0107157 <alloc_pages>
c0106d22:	83 c4 10             	add    $0x10,%esp
c0106d25:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106d28:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106d2c:	75 19                	jne    c0106d47 <default_check+0x474>
c0106d2e:	68 a4 5b 11 c0       	push   $0xc0115ba4
c0106d33:	68 62 58 11 c0       	push   $0xc0115862
c0106d38:	68 28 01 00 00       	push   $0x128
c0106d3d:	68 77 58 11 c0       	push   $0xc0115877
c0106d42:	e8 9e 97 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0106d47:	83 ec 0c             	sub    $0xc,%esp
c0106d4a:	6a 01                	push   $0x1
c0106d4c:	e8 06 04 00 00       	call   c0107157 <alloc_pages>
c0106d51:	83 c4 10             	add    $0x10,%esp
c0106d54:	85 c0                	test   %eax,%eax
c0106d56:	74 19                	je     c0106d71 <default_check+0x49e>
c0106d58:	68 02 5a 11 c0       	push   $0xc0115a02
c0106d5d:	68 62 58 11 c0       	push   $0xc0115862
c0106d62:	68 29 01 00 00       	push   $0x129
c0106d67:	68 77 58 11 c0       	push   $0xc0115877
c0106d6c:	e8 74 97 ff ff       	call   c01004e5 <__panic>

    assert(nr_free == 0);
c0106d71:	a1 f4 51 15 c0       	mov    0xc01551f4,%eax
c0106d76:	85 c0                	test   %eax,%eax
c0106d78:	74 19                	je     c0106d93 <default_check+0x4c0>
c0106d7a:	68 55 5a 11 c0       	push   $0xc0115a55
c0106d7f:	68 62 58 11 c0       	push   $0xc0115862
c0106d84:	68 2b 01 00 00       	push   $0x12b
c0106d89:	68 77 58 11 c0       	push   $0xc0115877
c0106d8e:	e8 52 97 ff ff       	call   c01004e5 <__panic>
    nr_free = nr_free_store;
c0106d93:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106d96:	a3 f4 51 15 c0       	mov    %eax,0xc01551f4

    free_list = free_list_store;
c0106d9b:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106d9e:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106da1:	a3 ec 51 15 c0       	mov    %eax,0xc01551ec
c0106da6:	89 15 f0 51 15 c0    	mov    %edx,0xc01551f0
    free_pages(p0, 5);
c0106dac:	83 ec 08             	sub    $0x8,%esp
c0106daf:	6a 05                	push   $0x5
c0106db1:	ff 75 dc             	pushl  -0x24(%ebp)
c0106db4:	e8 0a 04 00 00       	call   c01071c3 <free_pages>
c0106db9:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106dbc:	c7 45 ec ec 51 15 c0 	movl   $0xc01551ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106dc3:	eb 1d                	jmp    c0106de2 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106dc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106dc8:	83 e8 10             	sub    $0x10,%eax
c0106dcb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106dce:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106dd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106dd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106dd8:	8b 40 08             	mov    0x8(%eax),%eax
c0106ddb:	29 c2                	sub    %eax,%edx
c0106ddd:	89 d0                	mov    %edx,%eax
c0106ddf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106de2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106de5:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106de8:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106deb:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106dee:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106df1:	81 7d ec ec 51 15 c0 	cmpl   $0xc01551ec,-0x14(%ebp)
c0106df8:	75 cb                	jne    c0106dc5 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106dfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106dfe:	74 19                	je     c0106e19 <default_check+0x546>
c0106e00:	68 c2 5b 11 c0       	push   $0xc0115bc2
c0106e05:	68 62 58 11 c0       	push   $0xc0115862
c0106e0a:	68 36 01 00 00       	push   $0x136
c0106e0f:	68 77 58 11 c0       	push   $0xc0115877
c0106e14:	e8 cc 96 ff ff       	call   c01004e5 <__panic>
    assert(total == 0);
c0106e19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e1d:	74 19                	je     c0106e38 <default_check+0x565>
c0106e1f:	68 cd 5b 11 c0       	push   $0xc0115bcd
c0106e24:	68 62 58 11 c0       	push   $0xc0115862
c0106e29:	68 37 01 00 00       	push   $0x137
c0106e2e:	68 77 58 11 c0       	push   $0xc0115877
c0106e33:	e8 ad 96 ff ff       	call   c01004e5 <__panic>
}
c0106e38:	90                   	nop
c0106e39:	c9                   	leave  
c0106e3a:	c3                   	ret    

c0106e3b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106e3b:	55                   	push   %ebp
c0106e3c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106e3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e41:	8b 15 00 52 15 c0    	mov    0xc0155200,%edx
c0106e47:	29 d0                	sub    %edx,%eax
c0106e49:	c1 f8 02             	sar    $0x2,%eax
c0106e4c:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0106e52:	5d                   	pop    %ebp
c0106e53:	c3                   	ret    

c0106e54 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106e54:	55                   	push   %ebp
c0106e55:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106e57:	ff 75 08             	pushl  0x8(%ebp)
c0106e5a:	e8 dc ff ff ff       	call   c0106e3b <page2ppn>
c0106e5f:	83 c4 04             	add    $0x4,%esp
c0106e62:	c1 e0 0c             	shl    $0xc,%eax
}
c0106e65:	c9                   	leave  
c0106e66:	c3                   	ret    

c0106e67 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106e67:	55                   	push   %ebp
c0106e68:	89 e5                	mov    %esp,%ebp
c0106e6a:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e70:	c1 e8 0c             	shr    $0xc,%eax
c0106e73:	89 c2                	mov    %eax,%edx
c0106e75:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106e7a:	39 c2                	cmp    %eax,%edx
c0106e7c:	72 14                	jb     c0106e92 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106e7e:	83 ec 04             	sub    $0x4,%esp
c0106e81:	68 08 5c 11 c0       	push   $0xc0115c08
c0106e86:	6a 5e                	push   $0x5e
c0106e88:	68 27 5c 11 c0       	push   $0xc0115c27
c0106e8d:	e8 53 96 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0106e92:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c0106e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e9b:	c1 e8 0c             	shr    $0xc,%eax
c0106e9e:	89 c2                	mov    %eax,%edx
c0106ea0:	89 d0                	mov    %edx,%eax
c0106ea2:	c1 e0 03             	shl    $0x3,%eax
c0106ea5:	01 d0                	add    %edx,%eax
c0106ea7:	c1 e0 02             	shl    $0x2,%eax
c0106eaa:	01 c8                	add    %ecx,%eax
}
c0106eac:	c9                   	leave  
c0106ead:	c3                   	ret    

c0106eae <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106eae:	55                   	push   %ebp
c0106eaf:	89 e5                	mov    %esp,%ebp
c0106eb1:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106eb4:	ff 75 08             	pushl  0x8(%ebp)
c0106eb7:	e8 98 ff ff ff       	call   c0106e54 <page2pa>
c0106ebc:	83 c4 04             	add    $0x4,%esp
c0106ebf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ec5:	c1 e8 0c             	shr    $0xc,%eax
c0106ec8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106ecb:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106ed0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106ed3:	72 14                	jb     c0106ee9 <page2kva+0x3b>
c0106ed5:	ff 75 f4             	pushl  -0xc(%ebp)
c0106ed8:	68 38 5c 11 c0       	push   $0xc0115c38
c0106edd:	6a 65                	push   $0x65
c0106edf:	68 27 5c 11 c0       	push   $0xc0115c27
c0106ee4:	e8 fc 95 ff ff       	call   c01004e5 <__panic>
c0106ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106eec:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106ef1:	c9                   	leave  
c0106ef2:	c3                   	ret    

c0106ef3 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106ef3:	55                   	push   %ebp
c0106ef4:	89 e5                	mov    %esp,%ebp
c0106ef6:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106ef9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106efc:	83 e0 01             	and    $0x1,%eax
c0106eff:	85 c0                	test   %eax,%eax
c0106f01:	75 14                	jne    c0106f17 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106f03:	83 ec 04             	sub    $0x4,%esp
c0106f06:	68 5c 5c 11 c0       	push   $0xc0115c5c
c0106f0b:	6a 70                	push   $0x70
c0106f0d:	68 27 5c 11 c0       	push   $0xc0115c27
c0106f12:	e8 ce 95 ff ff       	call   c01004e5 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106f17:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f1f:	83 ec 0c             	sub    $0xc,%esp
c0106f22:	50                   	push   %eax
c0106f23:	e8 3f ff ff ff       	call   c0106e67 <pa2page>
c0106f28:	83 c4 10             	add    $0x10,%esp
}
c0106f2b:	c9                   	leave  
c0106f2c:	c3                   	ret    

c0106f2d <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106f2d:	55                   	push   %ebp
c0106f2e:	89 e5                	mov    %esp,%ebp
c0106f30:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106f33:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f36:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f3b:	83 ec 0c             	sub    $0xc,%esp
c0106f3e:	50                   	push   %eax
c0106f3f:	e8 23 ff ff ff       	call   c0106e67 <pa2page>
c0106f44:	83 c4 10             	add    $0x10,%esp
}
c0106f47:	c9                   	leave  
c0106f48:	c3                   	ret    

c0106f49 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106f49:	55                   	push   %ebp
c0106f4a:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f4f:	8b 00                	mov    (%eax),%eax
}
c0106f51:	5d                   	pop    %ebp
c0106f52:	c3                   	ret    

c0106f53 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106f53:	55                   	push   %ebp
c0106f54:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f5c:	89 10                	mov    %edx,(%eax)
}
c0106f5e:	90                   	nop
c0106f5f:	5d                   	pop    %ebp
c0106f60:	c3                   	ret    

c0106f61 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106f61:	55                   	push   %ebp
c0106f62:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106f64:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f67:	8b 00                	mov    (%eax),%eax
c0106f69:	8d 50 01             	lea    0x1(%eax),%edx
c0106f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f6f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f74:	8b 00                	mov    (%eax),%eax
}
c0106f76:	5d                   	pop    %ebp
c0106f77:	c3                   	ret    

c0106f78 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106f78:	55                   	push   %ebp
c0106f79:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f7e:	8b 00                	mov    (%eax),%eax
c0106f80:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106f83:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f86:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106f88:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f8b:	8b 00                	mov    (%eax),%eax
}
c0106f8d:	5d                   	pop    %ebp
c0106f8e:	c3                   	ret    

c0106f8f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106f8f:	55                   	push   %ebp
c0106f90:	89 e5                	mov    %esp,%ebp
c0106f92:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106f95:	9c                   	pushf  
c0106f96:	58                   	pop    %eax
c0106f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106f9d:	25 00 02 00 00       	and    $0x200,%eax
c0106fa2:	85 c0                	test   %eax,%eax
c0106fa4:	74 0c                	je     c0106fb2 <__intr_save+0x23>
        intr_disable();
c0106fa6:	e8 fc b2 ff ff       	call   c01022a7 <intr_disable>
        return 1;
c0106fab:	b8 01 00 00 00       	mov    $0x1,%eax
c0106fb0:	eb 05                	jmp    c0106fb7 <__intr_save+0x28>
    }
    return 0;
c0106fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106fb7:	c9                   	leave  
c0106fb8:	c3                   	ret    

c0106fb9 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106fb9:	55                   	push   %ebp
c0106fba:	89 e5                	mov    %esp,%ebp
c0106fbc:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106fbf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106fc3:	74 05                	je     c0106fca <__intr_restore+0x11>
        intr_enable();
c0106fc5:	e8 d6 b2 ff ff       	call   c01022a0 <intr_enable>
    }
}
c0106fca:	90                   	nop
c0106fcb:	c9                   	leave  
c0106fcc:	c3                   	ret    

c0106fcd <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106fcd:	55                   	push   %ebp
c0106fce:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106fd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fd3:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106fd6:	b8 23 00 00 00       	mov    $0x23,%eax
c0106fdb:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106fdd:	b8 23 00 00 00       	mov    $0x23,%eax
c0106fe2:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106fe4:	b8 10 00 00 00       	mov    $0x10,%eax
c0106fe9:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106feb:	b8 10 00 00 00       	mov    $0x10,%eax
c0106ff0:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106ff2:	b8 10 00 00 00       	mov    $0x10,%eax
c0106ff7:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106ff9:	ea 00 70 10 c0 08 00 	ljmp   $0x8,$0xc0107000
}
c0107000:	90                   	nop
c0107001:	5d                   	pop    %ebp
c0107002:	c3                   	ret    

c0107003 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0107003:	55                   	push   %ebp
c0107004:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0107006:	8b 45 08             	mov    0x8(%ebp),%eax
c0107009:	a3 a4 1f 15 c0       	mov    %eax,0xc0151fa4
}
c010700e:	90                   	nop
c010700f:	5d                   	pop    %ebp
c0107010:	c3                   	ret    

c0107011 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0107011:	55                   	push   %ebp
c0107012:	89 e5                	mov    %esp,%ebp
c0107014:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0107017:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c010701c:	50                   	push   %eax
c010701d:	e8 e1 ff ff ff       	call   c0107003 <load_esp0>
c0107022:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0107025:	66 c7 05 a8 1f 15 c0 	movw   $0x10,0xc0151fa8
c010702c:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010702e:	66 c7 05 68 ea 14 c0 	movw   $0x68,0xc014ea68
c0107035:	68 00 
c0107037:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c010703c:	66 a3 6a ea 14 c0    	mov    %ax,0xc014ea6a
c0107042:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c0107047:	c1 e8 10             	shr    $0x10,%eax
c010704a:	a2 6c ea 14 c0       	mov    %al,0xc014ea6c
c010704f:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c0107056:	83 e0 f0             	and    $0xfffffff0,%eax
c0107059:	83 c8 09             	or     $0x9,%eax
c010705c:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107061:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c0107068:	83 e0 ef             	and    $0xffffffef,%eax
c010706b:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107070:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c0107077:	83 e0 9f             	and    $0xffffff9f,%eax
c010707a:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c010707f:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c0107086:	83 c8 80             	or     $0xffffff80,%eax
c0107089:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c010708e:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c0107095:	83 e0 f0             	and    $0xfffffff0,%eax
c0107098:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c010709d:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c01070a4:	83 e0 ef             	and    $0xffffffef,%eax
c01070a7:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c01070ac:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c01070b3:	83 e0 df             	and    $0xffffffdf,%eax
c01070b6:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c01070bb:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c01070c2:	83 c8 40             	or     $0x40,%eax
c01070c5:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c01070ca:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c01070d1:	83 e0 7f             	and    $0x7f,%eax
c01070d4:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c01070d9:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c01070de:	c1 e8 18             	shr    $0x18,%eax
c01070e1:	a2 6f ea 14 c0       	mov    %al,0xc014ea6f

    // reload all segment registers
    lgdt(&gdt_pd);
c01070e6:	68 70 ea 14 c0       	push   $0xc014ea70
c01070eb:	e8 dd fe ff ff       	call   c0106fcd <lgdt>
c01070f0:	83 c4 04             	add    $0x4,%esp
c01070f3:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01070f9:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01070fd:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0107100:	90                   	nop
c0107101:	c9                   	leave  
c0107102:	c3                   	ret    

c0107103 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0107103:	55                   	push   %ebp
c0107104:	89 e5                	mov    %esp,%ebp
c0107106:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0107109:	c7 05 f8 51 15 c0 ec 	movl   $0xc0115bec,0xc01551f8
c0107110:	5b 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0107113:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c0107118:	8b 00                	mov    (%eax),%eax
c010711a:	83 ec 08             	sub    $0x8,%esp
c010711d:	50                   	push   %eax
c010711e:	68 88 5c 11 c0       	push   $0xc0115c88
c0107123:	e8 57 92 ff ff       	call   c010037f <cprintf>
c0107128:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c010712b:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c0107130:	8b 40 04             	mov    0x4(%eax),%eax
c0107133:	ff d0                	call   *%eax
}
c0107135:	90                   	nop
c0107136:	c9                   	leave  
c0107137:	c3                   	ret    

c0107138 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0107138:	55                   	push   %ebp
c0107139:	89 e5                	mov    %esp,%ebp
c010713b:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c010713e:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c0107143:	8b 40 08             	mov    0x8(%eax),%eax
c0107146:	83 ec 08             	sub    $0x8,%esp
c0107149:	ff 75 0c             	pushl  0xc(%ebp)
c010714c:	ff 75 08             	pushl  0x8(%ebp)
c010714f:	ff d0                	call   *%eax
c0107151:	83 c4 10             	add    $0x10,%esp
}
c0107154:	90                   	nop
c0107155:	c9                   	leave  
c0107156:	c3                   	ret    

c0107157 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0107157:	55                   	push   %ebp
c0107158:	89 e5                	mov    %esp,%ebp
c010715a:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c010715d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0107164:	e8 26 fe ff ff       	call   c0106f8f <__intr_save>
c0107169:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010716c:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c0107171:	8b 40 0c             	mov    0xc(%eax),%eax
c0107174:	83 ec 0c             	sub    $0xc,%esp
c0107177:	ff 75 08             	pushl  0x8(%ebp)
c010717a:	ff d0                	call   *%eax
c010717c:	83 c4 10             	add    $0x10,%esp
c010717f:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0107182:	83 ec 0c             	sub    $0xc,%esp
c0107185:	ff 75 f0             	pushl  -0x10(%ebp)
c0107188:	e8 2c fe ff ff       	call   c0106fb9 <__intr_restore>
c010718d:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0107190:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107194:	75 28                	jne    c01071be <alloc_pages+0x67>
c0107196:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010719a:	77 22                	ja     c01071be <alloc_pages+0x67>
c010719c:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c01071a1:	85 c0                	test   %eax,%eax
c01071a3:	74 19                	je     c01071be <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01071a5:	8b 55 08             	mov    0x8(%ebp),%edx
c01071a8:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c01071ad:	83 ec 04             	sub    $0x4,%esp
c01071b0:	6a 00                	push   $0x0
c01071b2:	52                   	push   %edx
c01071b3:	50                   	push   %eax
c01071b4:	e8 14 d7 ff ff       	call   c01048cd <swap_out>
c01071b9:	83 c4 10             	add    $0x10,%esp
    }
c01071bc:	eb a6                	jmp    c0107164 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01071be:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01071c1:	c9                   	leave  
c01071c2:	c3                   	ret    

c01071c3 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01071c3:	55                   	push   %ebp
c01071c4:	89 e5                	mov    %esp,%ebp
c01071c6:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01071c9:	e8 c1 fd ff ff       	call   c0106f8f <__intr_save>
c01071ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01071d1:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c01071d6:	8b 40 10             	mov    0x10(%eax),%eax
c01071d9:	83 ec 08             	sub    $0x8,%esp
c01071dc:	ff 75 0c             	pushl  0xc(%ebp)
c01071df:	ff 75 08             	pushl  0x8(%ebp)
c01071e2:	ff d0                	call   *%eax
c01071e4:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c01071e7:	83 ec 0c             	sub    $0xc,%esp
c01071ea:	ff 75 f4             	pushl  -0xc(%ebp)
c01071ed:	e8 c7 fd ff ff       	call   c0106fb9 <__intr_restore>
c01071f2:	83 c4 10             	add    $0x10,%esp
}
c01071f5:	90                   	nop
c01071f6:	c9                   	leave  
c01071f7:	c3                   	ret    

c01071f8 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01071f8:	55                   	push   %ebp
c01071f9:	89 e5                	mov    %esp,%ebp
c01071fb:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01071fe:	e8 8c fd ff ff       	call   c0106f8f <__intr_save>
c0107203:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107206:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c010720b:	8b 40 14             	mov    0x14(%eax),%eax
c010720e:	ff d0                	call   *%eax
c0107210:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107213:	83 ec 0c             	sub    $0xc,%esp
c0107216:	ff 75 f4             	pushl  -0xc(%ebp)
c0107219:	e8 9b fd ff ff       	call   c0106fb9 <__intr_restore>
c010721e:	83 c4 10             	add    $0x10,%esp
    return ret;
c0107221:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107224:	c9                   	leave  
c0107225:	c3                   	ret    

c0107226 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0107226:	55                   	push   %ebp
c0107227:	89 e5                	mov    %esp,%ebp
c0107229:	57                   	push   %edi
c010722a:	56                   	push   %esi
c010722b:	53                   	push   %ebx
c010722c:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010722f:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0107236:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010723d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107244:	83 ec 0c             	sub    $0xc,%esp
c0107247:	68 9f 5c 11 c0       	push   $0xc0115c9f
c010724c:	e8 2e 91 ff ff       	call   c010037f <cprintf>
c0107251:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107254:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010725b:	e9 fc 00 00 00       	jmp    c010735c <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107260:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107263:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107266:	89 d0                	mov    %edx,%eax
c0107268:	c1 e0 02             	shl    $0x2,%eax
c010726b:	01 d0                	add    %edx,%eax
c010726d:	c1 e0 02             	shl    $0x2,%eax
c0107270:	01 c8                	add    %ecx,%eax
c0107272:	8b 50 08             	mov    0x8(%eax),%edx
c0107275:	8b 40 04             	mov    0x4(%eax),%eax
c0107278:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010727b:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010727e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107281:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107284:	89 d0                	mov    %edx,%eax
c0107286:	c1 e0 02             	shl    $0x2,%eax
c0107289:	01 d0                	add    %edx,%eax
c010728b:	c1 e0 02             	shl    $0x2,%eax
c010728e:	01 c8                	add    %ecx,%eax
c0107290:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107293:	8b 58 10             	mov    0x10(%eax),%ebx
c0107296:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107299:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010729c:	01 c8                	add    %ecx,%eax
c010729e:	11 da                	adc    %ebx,%edx
c01072a0:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01072a3:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01072a6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01072a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01072ac:	89 d0                	mov    %edx,%eax
c01072ae:	c1 e0 02             	shl    $0x2,%eax
c01072b1:	01 d0                	add    %edx,%eax
c01072b3:	c1 e0 02             	shl    $0x2,%eax
c01072b6:	01 c8                	add    %ecx,%eax
c01072b8:	83 c0 14             	add    $0x14,%eax
c01072bb:	8b 00                	mov    (%eax),%eax
c01072bd:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01072c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01072c3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01072c6:	83 c0 ff             	add    $0xffffffff,%eax
c01072c9:	83 d2 ff             	adc    $0xffffffff,%edx
c01072cc:	89 c1                	mov    %eax,%ecx
c01072ce:	89 d3                	mov    %edx,%ebx
c01072d0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01072d3:	89 55 80             	mov    %edx,-0x80(%ebp)
c01072d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01072d9:	89 d0                	mov    %edx,%eax
c01072db:	c1 e0 02             	shl    $0x2,%eax
c01072de:	01 d0                	add    %edx,%eax
c01072e0:	c1 e0 02             	shl    $0x2,%eax
c01072e3:	03 45 80             	add    -0x80(%ebp),%eax
c01072e6:	8b 50 10             	mov    0x10(%eax),%edx
c01072e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01072ec:	ff 75 84             	pushl  -0x7c(%ebp)
c01072ef:	53                   	push   %ebx
c01072f0:	51                   	push   %ecx
c01072f1:	ff 75 bc             	pushl  -0x44(%ebp)
c01072f4:	ff 75 b8             	pushl  -0x48(%ebp)
c01072f7:	52                   	push   %edx
c01072f8:	50                   	push   %eax
c01072f9:	68 ac 5c 11 c0       	push   $0xc0115cac
c01072fe:	e8 7c 90 ff ff       	call   c010037f <cprintf>
c0107303:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0107306:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107309:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010730c:	89 d0                	mov    %edx,%eax
c010730e:	c1 e0 02             	shl    $0x2,%eax
c0107311:	01 d0                	add    %edx,%eax
c0107313:	c1 e0 02             	shl    $0x2,%eax
c0107316:	01 c8                	add    %ecx,%eax
c0107318:	83 c0 14             	add    $0x14,%eax
c010731b:	8b 00                	mov    (%eax),%eax
c010731d:	83 f8 01             	cmp    $0x1,%eax
c0107320:	75 36                	jne    c0107358 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c0107322:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107325:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107328:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010732b:	77 2b                	ja     c0107358 <page_init+0x132>
c010732d:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107330:	72 05                	jb     c0107337 <page_init+0x111>
c0107332:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0107335:	73 21                	jae    c0107358 <page_init+0x132>
c0107337:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010733b:	77 1b                	ja     c0107358 <page_init+0x132>
c010733d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107341:	72 09                	jb     c010734c <page_init+0x126>
c0107343:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010734a:	77 0c                	ja     c0107358 <page_init+0x132>
                maxpa = end;
c010734c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010734f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107352:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107355:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107358:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010735c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010735f:	8b 00                	mov    (%eax),%eax
c0107361:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107364:	0f 8f f6 fe ff ff    	jg     c0107260 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010736a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010736e:	72 1d                	jb     c010738d <page_init+0x167>
c0107370:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107374:	77 09                	ja     c010737f <page_init+0x159>
c0107376:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010737d:	76 0e                	jbe    c010738d <page_init+0x167>
        maxpa = KMEMSIZE;
c010737f:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0107386:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010738d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107390:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107393:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107397:	c1 ea 0c             	shr    $0xc,%edx
c010739a:	a3 80 1f 15 c0       	mov    %eax,0xc0151f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010739f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01073a6:	b8 04 53 15 c0       	mov    $0xc0155304,%eax
c01073ab:	8d 50 ff             	lea    -0x1(%eax),%edx
c01073ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01073b1:	01 d0                	add    %edx,%eax
c01073b3:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01073b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01073b9:	ba 00 00 00 00       	mov    $0x0,%edx
c01073be:	f7 75 ac             	divl   -0x54(%ebp)
c01073c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01073c4:	29 d0                	sub    %edx,%eax
c01073c6:	a3 00 52 15 c0       	mov    %eax,0xc0155200

    for (i = 0; i < npage; i ++) {
c01073cb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01073d2:	eb 2f                	jmp    c0107403 <page_init+0x1dd>
        SetPageReserved(pages + i);
c01073d4:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c01073da:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073dd:	89 d0                	mov    %edx,%eax
c01073df:	c1 e0 03             	shl    $0x3,%eax
c01073e2:	01 d0                	add    %edx,%eax
c01073e4:	c1 e0 02             	shl    $0x2,%eax
c01073e7:	01 c8                	add    %ecx,%eax
c01073e9:	83 c0 04             	add    $0x4,%eax
c01073ec:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01073f3:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01073f6:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01073f9:	8b 55 90             	mov    -0x70(%ebp),%edx
c01073fc:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01073ff:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107403:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107406:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010740b:	39 c2                	cmp    %eax,%edx
c010740d:	72 c5                	jb     c01073d4 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010740f:	8b 15 80 1f 15 c0    	mov    0xc0151f80,%edx
c0107415:	89 d0                	mov    %edx,%eax
c0107417:	c1 e0 03             	shl    $0x3,%eax
c010741a:	01 d0                	add    %edx,%eax
c010741c:	c1 e0 02             	shl    $0x2,%eax
c010741f:	89 c2                	mov    %eax,%edx
c0107421:	a1 00 52 15 c0       	mov    0xc0155200,%eax
c0107426:	01 d0                	add    %edx,%eax
c0107428:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010742b:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107432:	77 17                	ja     c010744b <page_init+0x225>
c0107434:	ff 75 a4             	pushl  -0x5c(%ebp)
c0107437:	68 dc 5c 11 c0       	push   $0xc0115cdc
c010743c:	68 ea 00 00 00       	push   $0xea
c0107441:	68 00 5d 11 c0       	push   $0xc0115d00
c0107446:	e8 9a 90 ff ff       	call   c01004e5 <__panic>
c010744b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010744e:	05 00 00 00 40       	add    $0x40000000,%eax
c0107453:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107456:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010745d:	e9 69 01 00 00       	jmp    c01075cb <page_init+0x3a5>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107462:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107465:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107468:	89 d0                	mov    %edx,%eax
c010746a:	c1 e0 02             	shl    $0x2,%eax
c010746d:	01 d0                	add    %edx,%eax
c010746f:	c1 e0 02             	shl    $0x2,%eax
c0107472:	01 c8                	add    %ecx,%eax
c0107474:	8b 50 08             	mov    0x8(%eax),%edx
c0107477:	8b 40 04             	mov    0x4(%eax),%eax
c010747a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010747d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107480:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107483:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107486:	89 d0                	mov    %edx,%eax
c0107488:	c1 e0 02             	shl    $0x2,%eax
c010748b:	01 d0                	add    %edx,%eax
c010748d:	c1 e0 02             	shl    $0x2,%eax
c0107490:	01 c8                	add    %ecx,%eax
c0107492:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107495:	8b 58 10             	mov    0x10(%eax),%ebx
c0107498:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010749b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010749e:	01 c8                	add    %ecx,%eax
c01074a0:	11 da                	adc    %ebx,%edx
c01074a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01074a5:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01074a8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01074ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01074ae:	89 d0                	mov    %edx,%eax
c01074b0:	c1 e0 02             	shl    $0x2,%eax
c01074b3:	01 d0                	add    %edx,%eax
c01074b5:	c1 e0 02             	shl    $0x2,%eax
c01074b8:	01 c8                	add    %ecx,%eax
c01074ba:	83 c0 14             	add    $0x14,%eax
c01074bd:	8b 00                	mov    (%eax),%eax
c01074bf:	83 f8 01             	cmp    $0x1,%eax
c01074c2:	0f 85 ff 00 00 00    	jne    c01075c7 <page_init+0x3a1>
            if (begin < freemem) {
c01074c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01074cb:	ba 00 00 00 00       	mov    $0x0,%edx
c01074d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01074d3:	72 17                	jb     c01074ec <page_init+0x2c6>
c01074d5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01074d8:	77 05                	ja     c01074df <page_init+0x2b9>
c01074da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01074dd:	76 0d                	jbe    c01074ec <page_init+0x2c6>
                begin = freemem;
c01074df:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01074e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01074e5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01074ec:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01074f0:	72 1d                	jb     c010750f <page_init+0x2e9>
c01074f2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01074f6:	77 09                	ja     c0107501 <page_init+0x2db>
c01074f8:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01074ff:	76 0e                	jbe    c010750f <page_init+0x2e9>
                end = KMEMSIZE;
c0107501:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107508:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010750f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107512:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107515:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107518:	0f 87 a9 00 00 00    	ja     c01075c7 <page_init+0x3a1>
c010751e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107521:	72 09                	jb     c010752c <page_init+0x306>
c0107523:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107526:	0f 83 9b 00 00 00    	jae    c01075c7 <page_init+0x3a1>
                begin = ROUNDUP(begin, PGSIZE);
c010752c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107533:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107536:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107539:	01 d0                	add    %edx,%eax
c010753b:	83 e8 01             	sub    $0x1,%eax
c010753e:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107541:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107544:	ba 00 00 00 00       	mov    $0x0,%edx
c0107549:	f7 75 9c             	divl   -0x64(%ebp)
c010754c:	8b 45 98             	mov    -0x68(%ebp),%eax
c010754f:	29 d0                	sub    %edx,%eax
c0107551:	ba 00 00 00 00       	mov    $0x0,%edx
c0107556:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107559:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010755c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010755f:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107562:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107565:	ba 00 00 00 00       	mov    $0x0,%edx
c010756a:	89 c3                	mov    %eax,%ebx
c010756c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0107572:	89 de                	mov    %ebx,%esi
c0107574:	89 d0                	mov    %edx,%eax
c0107576:	83 e0 00             	and    $0x0,%eax
c0107579:	89 c7                	mov    %eax,%edi
c010757b:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010757e:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0107581:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107587:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010758a:	77 3b                	ja     c01075c7 <page_init+0x3a1>
c010758c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010758f:	72 05                	jb     c0107596 <page_init+0x370>
c0107591:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107594:	73 31                	jae    c01075c7 <page_init+0x3a1>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0107596:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107599:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010759c:	2b 45 d0             	sub    -0x30(%ebp),%eax
c010759f:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01075a2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01075a6:	c1 ea 0c             	shr    $0xc,%edx
c01075a9:	89 c3                	mov    %eax,%ebx
c01075ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01075ae:	83 ec 0c             	sub    $0xc,%esp
c01075b1:	50                   	push   %eax
c01075b2:	e8 b0 f8 ff ff       	call   c0106e67 <pa2page>
c01075b7:	83 c4 10             	add    $0x10,%esp
c01075ba:	83 ec 08             	sub    $0x8,%esp
c01075bd:	53                   	push   %ebx
c01075be:	50                   	push   %eax
c01075bf:	e8 74 fb ff ff       	call   c0107138 <init_memmap>
c01075c4:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01075c7:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01075cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01075ce:	8b 00                	mov    (%eax),%eax
c01075d0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01075d3:	0f 8f 89 fe ff ff    	jg     c0107462 <page_init+0x23c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01075d9:	90                   	nop
c01075da:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01075dd:	5b                   	pop    %ebx
c01075de:	5e                   	pop    %esi
c01075df:	5f                   	pop    %edi
c01075e0:	5d                   	pop    %ebp
c01075e1:	c3                   	ret    

c01075e2 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01075e2:	55                   	push   %ebp
c01075e3:	89 e5                	mov    %esp,%ebp
c01075e5:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01075e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075eb:	33 45 14             	xor    0x14(%ebp),%eax
c01075ee:	25 ff 0f 00 00       	and    $0xfff,%eax
c01075f3:	85 c0                	test   %eax,%eax
c01075f5:	74 19                	je     c0107610 <boot_map_segment+0x2e>
c01075f7:	68 0e 5d 11 c0       	push   $0xc0115d0e
c01075fc:	68 25 5d 11 c0       	push   $0xc0115d25
c0107601:	68 08 01 00 00       	push   $0x108
c0107606:	68 00 5d 11 c0       	push   $0xc0115d00
c010760b:	e8 d5 8e ff ff       	call   c01004e5 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107610:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107617:	8b 45 0c             	mov    0xc(%ebp),%eax
c010761a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010761f:	89 c2                	mov    %eax,%edx
c0107621:	8b 45 10             	mov    0x10(%ebp),%eax
c0107624:	01 c2                	add    %eax,%edx
c0107626:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107629:	01 d0                	add    %edx,%eax
c010762b:	83 e8 01             	sub    $0x1,%eax
c010762e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107631:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107634:	ba 00 00 00 00       	mov    $0x0,%edx
c0107639:	f7 75 f0             	divl   -0x10(%ebp)
c010763c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010763f:	29 d0                	sub    %edx,%eax
c0107641:	c1 e8 0c             	shr    $0xc,%eax
c0107644:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010764a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010764d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107650:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107655:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107658:	8b 45 14             	mov    0x14(%ebp),%eax
c010765b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010765e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107661:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107666:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107669:	eb 57                	jmp    c01076c2 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010766b:	83 ec 04             	sub    $0x4,%esp
c010766e:	6a 01                	push   $0x1
c0107670:	ff 75 0c             	pushl  0xc(%ebp)
c0107673:	ff 75 08             	pushl  0x8(%ebp)
c0107676:	e8 58 01 00 00       	call   c01077d3 <get_pte>
c010767b:	83 c4 10             	add    $0x10,%esp
c010767e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107681:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107685:	75 19                	jne    c01076a0 <boot_map_segment+0xbe>
c0107687:	68 3a 5d 11 c0       	push   $0xc0115d3a
c010768c:	68 25 5d 11 c0       	push   $0xc0115d25
c0107691:	68 0e 01 00 00       	push   $0x10e
c0107696:	68 00 5d 11 c0       	push   $0xc0115d00
c010769b:	e8 45 8e ff ff       	call   c01004e5 <__panic>
        *ptep = pa | PTE_P | perm;
c01076a0:	8b 45 14             	mov    0x14(%ebp),%eax
c01076a3:	0b 45 18             	or     0x18(%ebp),%eax
c01076a6:	83 c8 01             	or     $0x1,%eax
c01076a9:	89 c2                	mov    %eax,%edx
c01076ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01076ae:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01076b0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01076b4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01076bb:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01076c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01076c6:	75 a3                	jne    c010766b <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01076c8:	90                   	nop
c01076c9:	c9                   	leave  
c01076ca:	c3                   	ret    

c01076cb <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01076cb:	55                   	push   %ebp
c01076cc:	89 e5                	mov    %esp,%ebp
c01076ce:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01076d1:	83 ec 0c             	sub    $0xc,%esp
c01076d4:	6a 01                	push   $0x1
c01076d6:	e8 7c fa ff ff       	call   c0107157 <alloc_pages>
c01076db:	83 c4 10             	add    $0x10,%esp
c01076de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01076e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01076e5:	75 17                	jne    c01076fe <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c01076e7:	83 ec 04             	sub    $0x4,%esp
c01076ea:	68 47 5d 11 c0       	push   $0xc0115d47
c01076ef:	68 1a 01 00 00       	push   $0x11a
c01076f4:	68 00 5d 11 c0       	push   $0xc0115d00
c01076f9:	e8 e7 8d ff ff       	call   c01004e5 <__panic>
    }
    return page2kva(p);
c01076fe:	83 ec 0c             	sub    $0xc,%esp
c0107701:	ff 75 f4             	pushl  -0xc(%ebp)
c0107704:	e8 a5 f7 ff ff       	call   c0106eae <page2kva>
c0107709:	83 c4 10             	add    $0x10,%esp
}
c010770c:	c9                   	leave  
c010770d:	c3                   	ret    

c010770e <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010770e:	55                   	push   %ebp
c010770f:	89 e5                	mov    %esp,%ebp
c0107711:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107714:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107719:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010771c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107723:	77 17                	ja     c010773c <pmm_init+0x2e>
c0107725:	ff 75 f4             	pushl  -0xc(%ebp)
c0107728:	68 dc 5c 11 c0       	push   $0xc0115cdc
c010772d:	68 24 01 00 00       	push   $0x124
c0107732:	68 00 5d 11 c0       	push   $0xc0115d00
c0107737:	e8 a9 8d ff ff       	call   c01004e5 <__panic>
c010773c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010773f:	05 00 00 00 40       	add    $0x40000000,%eax
c0107744:	a3 fc 51 15 c0       	mov    %eax,0xc01551fc
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107749:	e8 b5 f9 ff ff       	call   c0107103 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010774e:	e8 d3 fa ff ff       	call   c0107226 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107753:	e8 e6 07 00 00       	call   c0107f3e <check_alloc_page>

    check_pgdir();
c0107758:	e8 04 08 00 00       	call   c0107f61 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010775d:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107762:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107768:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010776d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107770:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107777:	77 17                	ja     c0107790 <pmm_init+0x82>
c0107779:	ff 75 f0             	pushl  -0x10(%ebp)
c010777c:	68 dc 5c 11 c0       	push   $0xc0115cdc
c0107781:	68 3a 01 00 00       	push   $0x13a
c0107786:	68 00 5d 11 c0       	push   $0xc0115d00
c010778b:	e8 55 8d ff ff       	call   c01004e5 <__panic>
c0107790:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107793:	05 00 00 00 40       	add    $0x40000000,%eax
c0107798:	83 c8 03             	or     $0x3,%eax
c010779b:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010779d:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01077a2:	83 ec 0c             	sub    $0xc,%esp
c01077a5:	6a 02                	push   $0x2
c01077a7:	6a 00                	push   $0x0
c01077a9:	68 00 00 00 38       	push   $0x38000000
c01077ae:	68 00 00 00 c0       	push   $0xc0000000
c01077b3:	50                   	push   %eax
c01077b4:	e8 29 fe ff ff       	call   c01075e2 <boot_map_segment>
c01077b9:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01077bc:	e8 50 f8 ff ff       	call   c0107011 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01077c1:	e8 01 0d 00 00       	call   c01084c7 <check_boot_pgdir>

    print_pgdir();
c01077c6:	e8 f7 10 00 00       	call   c01088c2 <print_pgdir>
    
    kmalloc_init();
c01077cb:	e8 3b df ff ff       	call   c010570b <kmalloc_init>

}
c01077d0:	90                   	nop
c01077d1:	c9                   	leave  
c01077d2:	c3                   	ret    

c01077d3 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01077d3:	55                   	push   %ebp
c01077d4:	89 e5                	mov    %esp,%ebp
c01077d6:	83 ec 28             	sub    $0x28,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01077d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077dc:	c1 e8 16             	shr    $0x16,%eax
c01077df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01077e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01077e9:	01 d0                	add    %edx,%eax
c01077eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01077ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077f1:	8b 00                	mov    (%eax),%eax
c01077f3:	83 e0 01             	and    $0x1,%eax
c01077f6:	85 c0                	test   %eax,%eax
c01077f8:	0f 85 9f 00 00 00    	jne    c010789d <get_pte+0xca>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c01077fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107802:	74 16                	je     c010781a <get_pte+0x47>
c0107804:	83 ec 0c             	sub    $0xc,%esp
c0107807:	6a 01                	push   $0x1
c0107809:	e8 49 f9 ff ff       	call   c0107157 <alloc_pages>
c010780e:	83 c4 10             	add    $0x10,%esp
c0107811:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107814:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107818:	75 0a                	jne    c0107824 <get_pte+0x51>
            return NULL;
c010781a:	b8 00 00 00 00       	mov    $0x0,%eax
c010781f:	e9 ca 00 00 00       	jmp    c01078ee <get_pte+0x11b>
        }
        set_page_ref(page, 1);
c0107824:	83 ec 08             	sub    $0x8,%esp
c0107827:	6a 01                	push   $0x1
c0107829:	ff 75 f0             	pushl  -0x10(%ebp)
c010782c:	e8 22 f7 ff ff       	call   c0106f53 <set_page_ref>
c0107831:	83 c4 10             	add    $0x10,%esp
        uintptr_t pa = page2pa(page);
c0107834:	83 ec 0c             	sub    $0xc,%esp
c0107837:	ff 75 f0             	pushl  -0x10(%ebp)
c010783a:	e8 15 f6 ff ff       	call   c0106e54 <page2pa>
c010783f:	83 c4 10             	add    $0x10,%esp
c0107842:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0107845:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107848:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010784b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010784e:	c1 e8 0c             	shr    $0xc,%eax
c0107851:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107854:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0107859:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010785c:	72 17                	jb     c0107875 <get_pte+0xa2>
c010785e:	ff 75 e8             	pushl  -0x18(%ebp)
c0107861:	68 38 5c 11 c0       	push   $0xc0115c38
c0107866:	68 82 01 00 00       	push   $0x182
c010786b:	68 00 5d 11 c0       	push   $0xc0115d00
c0107870:	e8 70 8c ff ff       	call   c01004e5 <__panic>
c0107875:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107878:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010787d:	83 ec 04             	sub    $0x4,%esp
c0107880:	68 00 10 00 00       	push   $0x1000
c0107885:	6a 00                	push   $0x0
c0107887:	50                   	push   %eax
c0107888:	e8 83 c1 00 00       	call   c0113a10 <memset>
c010788d:	83 c4 10             	add    $0x10,%esp
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0107890:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107893:	83 c8 07             	or     $0x7,%eax
c0107896:	89 c2                	mov    %eax,%edx
c0107898:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010789b:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c010789d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078a0:	8b 00                	mov    (%eax),%eax
c01078a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01078a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01078aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01078ad:	c1 e8 0c             	shr    $0xc,%eax
c01078b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01078b3:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01078b8:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01078bb:	72 17                	jb     c01078d4 <get_pte+0x101>
c01078bd:	ff 75 e0             	pushl  -0x20(%ebp)
c01078c0:	68 38 5c 11 c0       	push   $0xc0115c38
c01078c5:	68 85 01 00 00       	push   $0x185
c01078ca:	68 00 5d 11 c0       	push   $0xc0115d00
c01078cf:	e8 11 8c ff ff       	call   c01004e5 <__panic>
c01078d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01078d7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01078dc:	89 c2                	mov    %eax,%edx
c01078de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078e1:	c1 e8 0c             	shr    $0xc,%eax
c01078e4:	25 ff 03 00 00       	and    $0x3ff,%eax
c01078e9:	c1 e0 02             	shl    $0x2,%eax
c01078ec:	01 d0                	add    %edx,%eax
}
c01078ee:	c9                   	leave  
c01078ef:	c3                   	ret    

c01078f0 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01078f0:	55                   	push   %ebp
c01078f1:	89 e5                	mov    %esp,%ebp
c01078f3:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01078f6:	83 ec 04             	sub    $0x4,%esp
c01078f9:	6a 00                	push   $0x0
c01078fb:	ff 75 0c             	pushl  0xc(%ebp)
c01078fe:	ff 75 08             	pushl  0x8(%ebp)
c0107901:	e8 cd fe ff ff       	call   c01077d3 <get_pte>
c0107906:	83 c4 10             	add    $0x10,%esp
c0107909:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010790c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107910:	74 08                	je     c010791a <get_page+0x2a>
        *ptep_store = ptep;
c0107912:	8b 45 10             	mov    0x10(%ebp),%eax
c0107915:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107918:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010791a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010791e:	74 1f                	je     c010793f <get_page+0x4f>
c0107920:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107923:	8b 00                	mov    (%eax),%eax
c0107925:	83 e0 01             	and    $0x1,%eax
c0107928:	85 c0                	test   %eax,%eax
c010792a:	74 13                	je     c010793f <get_page+0x4f>
        return pte2page(*ptep);
c010792c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010792f:	8b 00                	mov    (%eax),%eax
c0107931:	83 ec 0c             	sub    $0xc,%esp
c0107934:	50                   	push   %eax
c0107935:	e8 b9 f5 ff ff       	call   c0106ef3 <pte2page>
c010793a:	83 c4 10             	add    $0x10,%esp
c010793d:	eb 05                	jmp    c0107944 <get_page+0x54>
    }
    return NULL;
c010793f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107944:	c9                   	leave  
c0107945:	c3                   	ret    

c0107946 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107946:	55                   	push   %ebp
c0107947:	89 e5                	mov    %esp,%ebp
c0107949:	83 ec 18             	sub    $0x18,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c010794c:	8b 45 10             	mov    0x10(%ebp),%eax
c010794f:	8b 00                	mov    (%eax),%eax
c0107951:	83 e0 01             	and    $0x1,%eax
c0107954:	85 c0                	test   %eax,%eax
c0107956:	74 50                	je     c01079a8 <page_remove_pte+0x62>
        struct Page *page = pte2page(*ptep);
c0107958:	8b 45 10             	mov    0x10(%ebp),%eax
c010795b:	8b 00                	mov    (%eax),%eax
c010795d:	83 ec 0c             	sub    $0xc,%esp
c0107960:	50                   	push   %eax
c0107961:	e8 8d f5 ff ff       	call   c0106ef3 <pte2page>
c0107966:	83 c4 10             	add    $0x10,%esp
c0107969:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c010796c:	83 ec 0c             	sub    $0xc,%esp
c010796f:	ff 75 f4             	pushl  -0xc(%ebp)
c0107972:	e8 01 f6 ff ff       	call   c0106f78 <page_ref_dec>
c0107977:	83 c4 10             	add    $0x10,%esp
c010797a:	85 c0                	test   %eax,%eax
c010797c:	75 10                	jne    c010798e <page_remove_pte+0x48>
            free_page(page);
c010797e:	83 ec 08             	sub    $0x8,%esp
c0107981:	6a 01                	push   $0x1
c0107983:	ff 75 f4             	pushl  -0xc(%ebp)
c0107986:	e8 38 f8 ff ff       	call   c01071c3 <free_pages>
c010798b:	83 c4 10             	add    $0x10,%esp
        }
        *ptep = 0;
c010798e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107991:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0107997:	83 ec 08             	sub    $0x8,%esp
c010799a:	ff 75 0c             	pushl  0xc(%ebp)
c010799d:	ff 75 08             	pushl  0x8(%ebp)
c01079a0:	e8 98 04 00 00       	call   c0107e3d <tlb_invalidate>
c01079a5:	83 c4 10             	add    $0x10,%esp
    }
}
c01079a8:	90                   	nop
c01079a9:	c9                   	leave  
c01079aa:	c3                   	ret    

c01079ab <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01079ab:	55                   	push   %ebp
c01079ac:	89 e5                	mov    %esp,%ebp
c01079ae:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01079b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079b4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079b9:	85 c0                	test   %eax,%eax
c01079bb:	75 0c                	jne    c01079c9 <unmap_range+0x1e>
c01079bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01079c0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079c5:	85 c0                	test   %eax,%eax
c01079c7:	74 19                	je     c01079e2 <unmap_range+0x37>
c01079c9:	68 60 5d 11 c0       	push   $0xc0115d60
c01079ce:	68 25 5d 11 c0       	push   $0xc0115d25
c01079d3:	68 bf 01 00 00       	push   $0x1bf
c01079d8:	68 00 5d 11 c0       	push   $0xc0115d00
c01079dd:	e8 03 8b ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c01079e2:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01079e9:	76 11                	jbe    c01079fc <unmap_range+0x51>
c01079eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079ee:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079f1:	73 09                	jae    c01079fc <unmap_range+0x51>
c01079f3:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01079fa:	76 19                	jbe    c0107a15 <unmap_range+0x6a>
c01079fc:	68 89 5d 11 c0       	push   $0xc0115d89
c0107a01:	68 25 5d 11 c0       	push   $0xc0115d25
c0107a06:	68 c0 01 00 00       	push   $0x1c0
c0107a0b:	68 00 5d 11 c0       	push   $0xc0115d00
c0107a10:	e8 d0 8a ff ff       	call   c01004e5 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0107a15:	83 ec 04             	sub    $0x4,%esp
c0107a18:	6a 00                	push   $0x0
c0107a1a:	ff 75 0c             	pushl  0xc(%ebp)
c0107a1d:	ff 75 08             	pushl  0x8(%ebp)
c0107a20:	e8 ae fd ff ff       	call   c01077d3 <get_pte>
c0107a25:	83 c4 10             	add    $0x10,%esp
c0107a28:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107a2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a2f:	75 18                	jne    c0107a49 <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107a31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a34:	05 00 00 40 00       	add    $0x400000,%eax
c0107a39:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a3f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a44:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0107a47:	eb 24                	jmp    c0107a6d <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c0107a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a4c:	8b 00                	mov    (%eax),%eax
c0107a4e:	85 c0                	test   %eax,%eax
c0107a50:	74 14                	je     c0107a66 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c0107a52:	83 ec 04             	sub    $0x4,%esp
c0107a55:	ff 75 f4             	pushl  -0xc(%ebp)
c0107a58:	ff 75 0c             	pushl  0xc(%ebp)
c0107a5b:	ff 75 08             	pushl  0x8(%ebp)
c0107a5e:	e8 e3 fe ff ff       	call   c0107946 <page_remove_pte>
c0107a63:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0107a66:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107a6d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107a71:	74 08                	je     c0107a7b <unmap_range+0xd0>
c0107a73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a76:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a79:	72 9a                	jb     c0107a15 <unmap_range+0x6a>
}
c0107a7b:	90                   	nop
c0107a7c:	c9                   	leave  
c0107a7d:	c3                   	ret    

c0107a7e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107a7e:	55                   	push   %ebp
c0107a7f:	89 e5                	mov    %esp,%ebp
c0107a81:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107a84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107a8c:	85 c0                	test   %eax,%eax
c0107a8e:	75 0c                	jne    c0107a9c <exit_range+0x1e>
c0107a90:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107a98:	85 c0                	test   %eax,%eax
c0107a9a:	74 19                	je     c0107ab5 <exit_range+0x37>
c0107a9c:	68 60 5d 11 c0       	push   $0xc0115d60
c0107aa1:	68 25 5d 11 c0       	push   $0xc0115d25
c0107aa6:	68 d1 01 00 00       	push   $0x1d1
c0107aab:	68 00 5d 11 c0       	push   $0xc0115d00
c0107ab0:	e8 30 8a ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c0107ab5:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107abc:	76 11                	jbe    c0107acf <exit_range+0x51>
c0107abe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ac1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ac4:	73 09                	jae    c0107acf <exit_range+0x51>
c0107ac6:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107acd:	76 19                	jbe    c0107ae8 <exit_range+0x6a>
c0107acf:	68 89 5d 11 c0       	push   $0xc0115d89
c0107ad4:	68 25 5d 11 c0       	push   $0xc0115d25
c0107ad9:	68 d2 01 00 00       	push   $0x1d2
c0107ade:	68 00 5d 11 c0       	push   $0xc0115d00
c0107ae3:	e8 fd 89 ff ff       	call   c01004e5 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107aeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107af1:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107af6:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107af9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107afc:	c1 e8 16             	shr    $0x16,%eax
c0107aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b0f:	01 d0                	add    %edx,%eax
c0107b11:	8b 00                	mov    (%eax),%eax
c0107b13:	83 e0 01             	and    $0x1,%eax
c0107b16:	85 c0                	test   %eax,%eax
c0107b18:	74 40                	je     c0107b5a <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b27:	01 d0                	add    %edx,%eax
c0107b29:	8b 00                	mov    (%eax),%eax
c0107b2b:	83 ec 0c             	sub    $0xc,%esp
c0107b2e:	50                   	push   %eax
c0107b2f:	e8 f9 f3 ff ff       	call   c0106f2d <pde2page>
c0107b34:	83 c4 10             	add    $0x10,%esp
c0107b37:	83 ec 08             	sub    $0x8,%esp
c0107b3a:	6a 01                	push   $0x1
c0107b3c:	50                   	push   %eax
c0107b3d:	e8 81 f6 ff ff       	call   c01071c3 <free_pages>
c0107b42:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107b45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107b4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b52:	01 d0                	add    %edx,%eax
c0107b54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107b5a:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107b61:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107b65:	74 08                	je     c0107b6f <exit_range+0xf1>
c0107b67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b6a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107b6d:	72 8a                	jb     c0107af9 <exit_range+0x7b>
}
c0107b6f:	90                   	nop
c0107b70:	c9                   	leave  
c0107b71:	c3                   	ret    

c0107b72 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107b72:	55                   	push   %ebp
c0107b73:	89 e5                	mov    %esp,%ebp
c0107b75:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107b78:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b7b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b80:	85 c0                	test   %eax,%eax
c0107b82:	75 0c                	jne    c0107b90 <copy_range+0x1e>
c0107b84:	8b 45 14             	mov    0x14(%ebp),%eax
c0107b87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b8c:	85 c0                	test   %eax,%eax
c0107b8e:	74 19                	je     c0107ba9 <copy_range+0x37>
c0107b90:	68 60 5d 11 c0       	push   $0xc0115d60
c0107b95:	68 25 5d 11 c0       	push   $0xc0115d25
c0107b9a:	68 e7 01 00 00       	push   $0x1e7
c0107b9f:	68 00 5d 11 c0       	push   $0xc0115d00
c0107ba4:	e8 3c 89 ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c0107ba9:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107bb0:	76 11                	jbe    c0107bc3 <copy_range+0x51>
c0107bb2:	8b 45 10             	mov    0x10(%ebp),%eax
c0107bb5:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107bb8:	73 09                	jae    c0107bc3 <copy_range+0x51>
c0107bba:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107bc1:	76 19                	jbe    c0107bdc <copy_range+0x6a>
c0107bc3:	68 89 5d 11 c0       	push   $0xc0115d89
c0107bc8:	68 25 5d 11 c0       	push   $0xc0115d25
c0107bcd:	68 e8 01 00 00       	push   $0x1e8
c0107bd2:	68 00 5d 11 c0       	push   $0xc0115d00
c0107bd7:	e8 09 89 ff ff       	call   c01004e5 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107bdc:	83 ec 04             	sub    $0x4,%esp
c0107bdf:	6a 00                	push   $0x0
c0107be1:	ff 75 10             	pushl  0x10(%ebp)
c0107be4:	ff 75 0c             	pushl  0xc(%ebp)
c0107be7:	e8 e7 fb ff ff       	call   c01077d3 <get_pte>
c0107bec:	83 c4 10             	add    $0x10,%esp
c0107bef:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107bf2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bf6:	75 1b                	jne    c0107c13 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107bf8:	8b 45 10             	mov    0x10(%ebp),%eax
c0107bfb:	05 00 00 40 00       	add    $0x400000,%eax
c0107c00:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107c03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c06:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107c0b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107c0e:	e9 1f 01 00 00       	jmp    c0107d32 <copy_range+0x1c0>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c16:	8b 00                	mov    (%eax),%eax
c0107c18:	83 e0 01             	and    $0x1,%eax
c0107c1b:	85 c0                	test   %eax,%eax
c0107c1d:	0f 84 08 01 00 00    	je     c0107d2b <copy_range+0x1b9>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107c23:	83 ec 04             	sub    $0x4,%esp
c0107c26:	6a 01                	push   $0x1
c0107c28:	ff 75 10             	pushl  0x10(%ebp)
c0107c2b:	ff 75 08             	pushl  0x8(%ebp)
c0107c2e:	e8 a0 fb ff ff       	call   c01077d3 <get_pte>
c0107c33:	83 c4 10             	add    $0x10,%esp
c0107c36:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107c39:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107c3d:	75 0a                	jne    c0107c49 <copy_range+0xd7>
                return -E_NO_MEM;
c0107c3f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107c44:	e9 00 01 00 00       	jmp    c0107d49 <copy_range+0x1d7>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0107c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c4c:	8b 00                	mov    (%eax),%eax
c0107c4e:	83 e0 07             	and    $0x7,%eax
c0107c51:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0107c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c57:	8b 00                	mov    (%eax),%eax
c0107c59:	83 ec 0c             	sub    $0xc,%esp
c0107c5c:	50                   	push   %eax
c0107c5d:	e8 91 f2 ff ff       	call   c0106ef3 <pte2page>
c0107c62:	83 c4 10             	add    $0x10,%esp
c0107c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0107c68:	83 ec 0c             	sub    $0xc,%esp
c0107c6b:	6a 01                	push   $0x1
c0107c6d:	e8 e5 f4 ff ff       	call   c0107157 <alloc_pages>
c0107c72:	83 c4 10             	add    $0x10,%esp
c0107c75:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0107c78:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107c7c:	75 19                	jne    c0107c97 <copy_range+0x125>
c0107c7e:	68 a1 5d 11 c0       	push   $0xc0115da1
c0107c83:	68 25 5d 11 c0       	push   $0xc0115d25
c0107c88:	68 fb 01 00 00       	push   $0x1fb
c0107c8d:	68 00 5d 11 c0       	push   $0xc0115d00
c0107c92:	e8 4e 88 ff ff       	call   c01004e5 <__panic>
        assert(npage!=NULL);
c0107c97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107c9b:	75 19                	jne    c0107cb6 <copy_range+0x144>
c0107c9d:	68 ac 5d 11 c0       	push   $0xc0115dac
c0107ca2:	68 25 5d 11 c0       	push   $0xc0115d25
c0107ca7:	68 fc 01 00 00       	push   $0x1fc
c0107cac:	68 00 5d 11 c0       	push   $0xc0115d00
c0107cb1:	e8 2f 88 ff ff       	call   c01004e5 <__panic>
        int ret=0;
c0107cb6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0107cbd:	83 ec 0c             	sub    $0xc,%esp
c0107cc0:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107cc3:	e8 e6 f1 ff ff       	call   c0106eae <page2kva>
c0107cc8:	83 c4 10             	add    $0x10,%esp
c0107ccb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0107cce:	83 ec 0c             	sub    $0xc,%esp
c0107cd1:	ff 75 e0             	pushl  -0x20(%ebp)
c0107cd4:	e8 d5 f1 ff ff       	call   c0106eae <page2kva>
c0107cd9:	83 c4 10             	add    $0x10,%esp
c0107cdc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0107cdf:	83 ec 04             	sub    $0x4,%esp
c0107ce2:	68 00 10 00 00       	push   $0x1000
c0107ce7:	ff 75 d8             	pushl  -0x28(%ebp)
c0107cea:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107ced:	e8 01 be 00 00       	call   c0113af3 <memcpy>
c0107cf2:	83 c4 10             	add    $0x10,%esp

        ret = page_insert(to, npage, start, perm);
c0107cf5:	ff 75 e8             	pushl  -0x18(%ebp)
c0107cf8:	ff 75 10             	pushl  0x10(%ebp)
c0107cfb:	ff 75 e0             	pushl  -0x20(%ebp)
c0107cfe:	ff 75 08             	pushl  0x8(%ebp)
c0107d01:	e8 7e 00 00 00       	call   c0107d84 <page_insert>
c0107d06:	83 c4 10             	add    $0x10,%esp
c0107d09:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0107d0c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107d10:	74 19                	je     c0107d2b <copy_range+0x1b9>
c0107d12:	68 b8 5d 11 c0       	push   $0xc0115db8
c0107d17:	68 25 5d 11 c0       	push   $0xc0115d25
c0107d1c:	68 12 02 00 00       	push   $0x212
c0107d21:	68 00 5d 11 c0       	push   $0xc0115d00
c0107d26:	e8 ba 87 ff ff       	call   c01004e5 <__panic>
        }
        start += PGSIZE;
c0107d2b:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107d32:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107d36:	74 0c                	je     c0107d44 <copy_range+0x1d2>
c0107d38:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d3b:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107d3e:	0f 82 98 fe ff ff    	jb     c0107bdc <copy_range+0x6a>
    return 0;
c0107d44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d49:	c9                   	leave  
c0107d4a:	c3                   	ret    

c0107d4b <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107d4b:	55                   	push   %ebp
c0107d4c:	89 e5                	mov    %esp,%ebp
c0107d4e:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107d51:	83 ec 04             	sub    $0x4,%esp
c0107d54:	6a 00                	push   $0x0
c0107d56:	ff 75 0c             	pushl  0xc(%ebp)
c0107d59:	ff 75 08             	pushl  0x8(%ebp)
c0107d5c:	e8 72 fa ff ff       	call   c01077d3 <get_pte>
c0107d61:	83 c4 10             	add    $0x10,%esp
c0107d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107d67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d6b:	74 14                	je     c0107d81 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107d6d:	83 ec 04             	sub    $0x4,%esp
c0107d70:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d73:	ff 75 0c             	pushl  0xc(%ebp)
c0107d76:	ff 75 08             	pushl  0x8(%ebp)
c0107d79:	e8 c8 fb ff ff       	call   c0107946 <page_remove_pte>
c0107d7e:	83 c4 10             	add    $0x10,%esp
    }
}
c0107d81:	90                   	nop
c0107d82:	c9                   	leave  
c0107d83:	c3                   	ret    

c0107d84 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107d84:	55                   	push   %ebp
c0107d85:	89 e5                	mov    %esp,%ebp
c0107d87:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107d8a:	83 ec 04             	sub    $0x4,%esp
c0107d8d:	6a 01                	push   $0x1
c0107d8f:	ff 75 10             	pushl  0x10(%ebp)
c0107d92:	ff 75 08             	pushl  0x8(%ebp)
c0107d95:	e8 39 fa ff ff       	call   c01077d3 <get_pte>
c0107d9a:	83 c4 10             	add    $0x10,%esp
c0107d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107da0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107da4:	75 0a                	jne    c0107db0 <page_insert+0x2c>
        return -E_NO_MEM;
c0107da6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107dab:	e9 8b 00 00 00       	jmp    c0107e3b <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107db0:	83 ec 0c             	sub    $0xc,%esp
c0107db3:	ff 75 0c             	pushl  0xc(%ebp)
c0107db6:	e8 a6 f1 ff ff       	call   c0106f61 <page_ref_inc>
c0107dbb:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dc1:	8b 00                	mov    (%eax),%eax
c0107dc3:	83 e0 01             	and    $0x1,%eax
c0107dc6:	85 c0                	test   %eax,%eax
c0107dc8:	74 40                	je     c0107e0a <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dcd:	8b 00                	mov    (%eax),%eax
c0107dcf:	83 ec 0c             	sub    $0xc,%esp
c0107dd2:	50                   	push   %eax
c0107dd3:	e8 1b f1 ff ff       	call   c0106ef3 <pte2page>
c0107dd8:	83 c4 10             	add    $0x10,%esp
c0107ddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107de1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107de4:	75 10                	jne    c0107df6 <page_insert+0x72>
            page_ref_dec(page);
c0107de6:	83 ec 0c             	sub    $0xc,%esp
c0107de9:	ff 75 0c             	pushl  0xc(%ebp)
c0107dec:	e8 87 f1 ff ff       	call   c0106f78 <page_ref_dec>
c0107df1:	83 c4 10             	add    $0x10,%esp
c0107df4:	eb 14                	jmp    c0107e0a <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107df6:	83 ec 04             	sub    $0x4,%esp
c0107df9:	ff 75 f4             	pushl  -0xc(%ebp)
c0107dfc:	ff 75 10             	pushl  0x10(%ebp)
c0107dff:	ff 75 08             	pushl  0x8(%ebp)
c0107e02:	e8 3f fb ff ff       	call   c0107946 <page_remove_pte>
c0107e07:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107e0a:	83 ec 0c             	sub    $0xc,%esp
c0107e0d:	ff 75 0c             	pushl  0xc(%ebp)
c0107e10:	e8 3f f0 ff ff       	call   c0106e54 <page2pa>
c0107e15:	83 c4 10             	add    $0x10,%esp
c0107e18:	0b 45 14             	or     0x14(%ebp),%eax
c0107e1b:	83 c8 01             	or     $0x1,%eax
c0107e1e:	89 c2                	mov    %eax,%edx
c0107e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e23:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107e25:	83 ec 08             	sub    $0x8,%esp
c0107e28:	ff 75 10             	pushl  0x10(%ebp)
c0107e2b:	ff 75 08             	pushl  0x8(%ebp)
c0107e2e:	e8 0a 00 00 00       	call   c0107e3d <tlb_invalidate>
c0107e33:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107e36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e3b:	c9                   	leave  
c0107e3c:	c3                   	ret    

c0107e3d <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107e3d:	55                   	push   %ebp
c0107e3e:	89 e5                	mov    %esp,%ebp
c0107e40:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107e43:	0f 20 d8             	mov    %cr3,%eax
c0107e46:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107e49:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107e4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107e52:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107e59:	77 17                	ja     c0107e72 <tlb_invalidate+0x35>
c0107e5b:	ff 75 f0             	pushl  -0x10(%ebp)
c0107e5e:	68 dc 5c 11 c0       	push   $0xc0115cdc
c0107e63:	68 43 02 00 00       	push   $0x243
c0107e68:	68 00 5d 11 c0       	push   $0xc0115d00
c0107e6d:	e8 73 86 ff ff       	call   c01004e5 <__panic>
c0107e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e75:	05 00 00 00 40       	add    $0x40000000,%eax
c0107e7a:	39 c2                	cmp    %eax,%edx
c0107e7c:	75 0c                	jne    c0107e8a <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107e7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e81:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e87:	0f 01 38             	invlpg (%eax)
    }
}
c0107e8a:	90                   	nop
c0107e8b:	c9                   	leave  
c0107e8c:	c3                   	ret    

c0107e8d <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107e8d:	55                   	push   %ebp
c0107e8e:	89 e5                	mov    %esp,%ebp
c0107e90:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107e93:	83 ec 0c             	sub    $0xc,%esp
c0107e96:	6a 01                	push   $0x1
c0107e98:	e8 ba f2 ff ff       	call   c0107157 <alloc_pages>
c0107e9d:	83 c4 10             	add    $0x10,%esp
c0107ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107ea3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ea7:	0f 84 8c 00 00 00    	je     c0107f39 <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107ead:	ff 75 10             	pushl  0x10(%ebp)
c0107eb0:	ff 75 0c             	pushl  0xc(%ebp)
c0107eb3:	ff 75 f4             	pushl  -0xc(%ebp)
c0107eb6:	ff 75 08             	pushl  0x8(%ebp)
c0107eb9:	e8 c6 fe ff ff       	call   c0107d84 <page_insert>
c0107ebe:	83 c4 10             	add    $0x10,%esp
c0107ec1:	85 c0                	test   %eax,%eax
c0107ec3:	74 17                	je     c0107edc <pgdir_alloc_page+0x4f>
            free_page(page);
c0107ec5:	83 ec 08             	sub    $0x8,%esp
c0107ec8:	6a 01                	push   $0x1
c0107eca:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ecd:	e8 f1 f2 ff ff       	call   c01071c3 <free_pages>
c0107ed2:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107ed5:	b8 00 00 00 00       	mov    $0x0,%eax
c0107eda:	eb 60                	jmp    c0107f3c <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107edc:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c0107ee1:	85 c0                	test   %eax,%eax
c0107ee3:	74 54                	je     c0107f39 <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107ee5:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c0107eea:	85 c0                	test   %eax,%eax
c0107eec:	74 4b                	je     c0107f39 <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107eee:	a1 04 51 15 c0       	mov    0xc0155104,%eax
c0107ef3:	6a 00                	push   $0x0
c0107ef5:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ef8:	ff 75 0c             	pushl  0xc(%ebp)
c0107efb:	50                   	push   %eax
c0107efc:	e8 8d c9 ff ff       	call   c010488e <swap_map_swappable>
c0107f01:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f07:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f0a:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c0107f0d:	83 ec 0c             	sub    $0xc,%esp
c0107f10:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f13:	e8 31 f0 ff ff       	call   c0106f49 <page_ref>
c0107f18:	83 c4 10             	add    $0x10,%esp
c0107f1b:	83 f8 01             	cmp    $0x1,%eax
c0107f1e:	74 19                	je     c0107f39 <pgdir_alloc_page+0xac>
c0107f20:	68 c1 5d 11 c0       	push   $0xc0115dc1
c0107f25:	68 25 5d 11 c0       	push   $0xc0115d25
c0107f2a:	68 57 02 00 00       	push   $0x257
c0107f2f:	68 00 5d 11 c0       	push   $0xc0115d00
c0107f34:	e8 ac 85 ff ff       	call   c01004e5 <__panic>
            }
        }

    }

    return page;
c0107f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f3c:	c9                   	leave  
c0107f3d:	c3                   	ret    

c0107f3e <check_alloc_page>:

static void
check_alloc_page(void) {
c0107f3e:	55                   	push   %ebp
c0107f3f:	89 e5                	mov    %esp,%ebp
c0107f41:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107f44:	a1 f8 51 15 c0       	mov    0xc01551f8,%eax
c0107f49:	8b 40 18             	mov    0x18(%eax),%eax
c0107f4c:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107f4e:	83 ec 0c             	sub    $0xc,%esp
c0107f51:	68 d8 5d 11 c0       	push   $0xc0115dd8
c0107f56:	e8 24 84 ff ff       	call   c010037f <cprintf>
c0107f5b:	83 c4 10             	add    $0x10,%esp
}
c0107f5e:	90                   	nop
c0107f5f:	c9                   	leave  
c0107f60:	c3                   	ret    

c0107f61 <check_pgdir>:

static void
check_pgdir(void) {
c0107f61:	55                   	push   %ebp
c0107f62:	89 e5                	mov    %esp,%ebp
c0107f64:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107f67:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0107f6c:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107f71:	76 19                	jbe    c0107f8c <check_pgdir+0x2b>
c0107f73:	68 f7 5d 11 c0       	push   $0xc0115df7
c0107f78:	68 25 5d 11 c0       	push   $0xc0115d25
c0107f7d:	68 6f 02 00 00       	push   $0x26f
c0107f82:	68 00 5d 11 c0       	push   $0xc0115d00
c0107f87:	e8 59 85 ff ff       	call   c01004e5 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107f8c:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107f91:	85 c0                	test   %eax,%eax
c0107f93:	74 0e                	je     c0107fa3 <check_pgdir+0x42>
c0107f95:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107f9a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107f9f:	85 c0                	test   %eax,%eax
c0107fa1:	74 19                	je     c0107fbc <check_pgdir+0x5b>
c0107fa3:	68 14 5e 11 c0       	push   $0xc0115e14
c0107fa8:	68 25 5d 11 c0       	push   $0xc0115d25
c0107fad:	68 70 02 00 00       	push   $0x270
c0107fb2:	68 00 5d 11 c0       	push   $0xc0115d00
c0107fb7:	e8 29 85 ff ff       	call   c01004e5 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107fbc:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107fc1:	83 ec 04             	sub    $0x4,%esp
c0107fc4:	6a 00                	push   $0x0
c0107fc6:	6a 00                	push   $0x0
c0107fc8:	50                   	push   %eax
c0107fc9:	e8 22 f9 ff ff       	call   c01078f0 <get_page>
c0107fce:	83 c4 10             	add    $0x10,%esp
c0107fd1:	85 c0                	test   %eax,%eax
c0107fd3:	74 19                	je     c0107fee <check_pgdir+0x8d>
c0107fd5:	68 4c 5e 11 c0       	push   $0xc0115e4c
c0107fda:	68 25 5d 11 c0       	push   $0xc0115d25
c0107fdf:	68 71 02 00 00       	push   $0x271
c0107fe4:	68 00 5d 11 c0       	push   $0xc0115d00
c0107fe9:	e8 f7 84 ff ff       	call   c01004e5 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107fee:	83 ec 0c             	sub    $0xc,%esp
c0107ff1:	6a 01                	push   $0x1
c0107ff3:	e8 5f f1 ff ff       	call   c0107157 <alloc_pages>
c0107ff8:	83 c4 10             	add    $0x10,%esp
c0107ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107ffe:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108003:	6a 00                	push   $0x0
c0108005:	6a 00                	push   $0x0
c0108007:	ff 75 f4             	pushl  -0xc(%ebp)
c010800a:	50                   	push   %eax
c010800b:	e8 74 fd ff ff       	call   c0107d84 <page_insert>
c0108010:	83 c4 10             	add    $0x10,%esp
c0108013:	85 c0                	test   %eax,%eax
c0108015:	74 19                	je     c0108030 <check_pgdir+0xcf>
c0108017:	68 74 5e 11 c0       	push   $0xc0115e74
c010801c:	68 25 5d 11 c0       	push   $0xc0115d25
c0108021:	68 75 02 00 00       	push   $0x275
c0108026:	68 00 5d 11 c0       	push   $0xc0115d00
c010802b:	e8 b5 84 ff ff       	call   c01004e5 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0108030:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108035:	83 ec 04             	sub    $0x4,%esp
c0108038:	6a 00                	push   $0x0
c010803a:	6a 00                	push   $0x0
c010803c:	50                   	push   %eax
c010803d:	e8 91 f7 ff ff       	call   c01077d3 <get_pte>
c0108042:	83 c4 10             	add    $0x10,%esp
c0108045:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108048:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010804c:	75 19                	jne    c0108067 <check_pgdir+0x106>
c010804e:	68 a0 5e 11 c0       	push   $0xc0115ea0
c0108053:	68 25 5d 11 c0       	push   $0xc0115d25
c0108058:	68 78 02 00 00       	push   $0x278
c010805d:	68 00 5d 11 c0       	push   $0xc0115d00
c0108062:	e8 7e 84 ff ff       	call   c01004e5 <__panic>
    assert(pte2page(*ptep) == p1);
c0108067:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010806a:	8b 00                	mov    (%eax),%eax
c010806c:	83 ec 0c             	sub    $0xc,%esp
c010806f:	50                   	push   %eax
c0108070:	e8 7e ee ff ff       	call   c0106ef3 <pte2page>
c0108075:	83 c4 10             	add    $0x10,%esp
c0108078:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010807b:	74 19                	je     c0108096 <check_pgdir+0x135>
c010807d:	68 cd 5e 11 c0       	push   $0xc0115ecd
c0108082:	68 25 5d 11 c0       	push   $0xc0115d25
c0108087:	68 79 02 00 00       	push   $0x279
c010808c:	68 00 5d 11 c0       	push   $0xc0115d00
c0108091:	e8 4f 84 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p1) == 1);
c0108096:	83 ec 0c             	sub    $0xc,%esp
c0108099:	ff 75 f4             	pushl  -0xc(%ebp)
c010809c:	e8 a8 ee ff ff       	call   c0106f49 <page_ref>
c01080a1:	83 c4 10             	add    $0x10,%esp
c01080a4:	83 f8 01             	cmp    $0x1,%eax
c01080a7:	74 19                	je     c01080c2 <check_pgdir+0x161>
c01080a9:	68 e3 5e 11 c0       	push   $0xc0115ee3
c01080ae:	68 25 5d 11 c0       	push   $0xc0115d25
c01080b3:	68 7a 02 00 00       	push   $0x27a
c01080b8:	68 00 5d 11 c0       	push   $0xc0115d00
c01080bd:	e8 23 84 ff ff       	call   c01004e5 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01080c2:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01080c7:	8b 00                	mov    (%eax),%eax
c01080c9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01080ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01080d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080d4:	c1 e8 0c             	shr    $0xc,%eax
c01080d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01080da:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01080df:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01080e2:	72 17                	jb     c01080fb <check_pgdir+0x19a>
c01080e4:	ff 75 ec             	pushl  -0x14(%ebp)
c01080e7:	68 38 5c 11 c0       	push   $0xc0115c38
c01080ec:	68 7c 02 00 00       	push   $0x27c
c01080f1:	68 00 5d 11 c0       	push   $0xc0115d00
c01080f6:	e8 ea 83 ff ff       	call   c01004e5 <__panic>
c01080fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080fe:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108103:	83 c0 04             	add    $0x4,%eax
c0108106:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0108109:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010810e:	83 ec 04             	sub    $0x4,%esp
c0108111:	6a 00                	push   $0x0
c0108113:	68 00 10 00 00       	push   $0x1000
c0108118:	50                   	push   %eax
c0108119:	e8 b5 f6 ff ff       	call   c01077d3 <get_pte>
c010811e:	83 c4 10             	add    $0x10,%esp
c0108121:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108124:	74 19                	je     c010813f <check_pgdir+0x1de>
c0108126:	68 f8 5e 11 c0       	push   $0xc0115ef8
c010812b:	68 25 5d 11 c0       	push   $0xc0115d25
c0108130:	68 7d 02 00 00       	push   $0x27d
c0108135:	68 00 5d 11 c0       	push   $0xc0115d00
c010813a:	e8 a6 83 ff ff       	call   c01004e5 <__panic>

    p2 = alloc_page();
c010813f:	83 ec 0c             	sub    $0xc,%esp
c0108142:	6a 01                	push   $0x1
c0108144:	e8 0e f0 ff ff       	call   c0107157 <alloc_pages>
c0108149:	83 c4 10             	add    $0x10,%esp
c010814c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010814f:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108154:	6a 06                	push   $0x6
c0108156:	68 00 10 00 00       	push   $0x1000
c010815b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010815e:	50                   	push   %eax
c010815f:	e8 20 fc ff ff       	call   c0107d84 <page_insert>
c0108164:	83 c4 10             	add    $0x10,%esp
c0108167:	85 c0                	test   %eax,%eax
c0108169:	74 19                	je     c0108184 <check_pgdir+0x223>
c010816b:	68 20 5f 11 c0       	push   $0xc0115f20
c0108170:	68 25 5d 11 c0       	push   $0xc0115d25
c0108175:	68 80 02 00 00       	push   $0x280
c010817a:	68 00 5d 11 c0       	push   $0xc0115d00
c010817f:	e8 61 83 ff ff       	call   c01004e5 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108184:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108189:	83 ec 04             	sub    $0x4,%esp
c010818c:	6a 00                	push   $0x0
c010818e:	68 00 10 00 00       	push   $0x1000
c0108193:	50                   	push   %eax
c0108194:	e8 3a f6 ff ff       	call   c01077d3 <get_pte>
c0108199:	83 c4 10             	add    $0x10,%esp
c010819c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010819f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01081a3:	75 19                	jne    c01081be <check_pgdir+0x25d>
c01081a5:	68 58 5f 11 c0       	push   $0xc0115f58
c01081aa:	68 25 5d 11 c0       	push   $0xc0115d25
c01081af:	68 81 02 00 00       	push   $0x281
c01081b4:	68 00 5d 11 c0       	push   $0xc0115d00
c01081b9:	e8 27 83 ff ff       	call   c01004e5 <__panic>
    assert(*ptep & PTE_U);
c01081be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081c1:	8b 00                	mov    (%eax),%eax
c01081c3:	83 e0 04             	and    $0x4,%eax
c01081c6:	85 c0                	test   %eax,%eax
c01081c8:	75 19                	jne    c01081e3 <check_pgdir+0x282>
c01081ca:	68 88 5f 11 c0       	push   $0xc0115f88
c01081cf:	68 25 5d 11 c0       	push   $0xc0115d25
c01081d4:	68 82 02 00 00       	push   $0x282
c01081d9:	68 00 5d 11 c0       	push   $0xc0115d00
c01081de:	e8 02 83 ff ff       	call   c01004e5 <__panic>
    assert(*ptep & PTE_W);
c01081e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081e6:	8b 00                	mov    (%eax),%eax
c01081e8:	83 e0 02             	and    $0x2,%eax
c01081eb:	85 c0                	test   %eax,%eax
c01081ed:	75 19                	jne    c0108208 <check_pgdir+0x2a7>
c01081ef:	68 96 5f 11 c0       	push   $0xc0115f96
c01081f4:	68 25 5d 11 c0       	push   $0xc0115d25
c01081f9:	68 83 02 00 00       	push   $0x283
c01081fe:	68 00 5d 11 c0       	push   $0xc0115d00
c0108203:	e8 dd 82 ff ff       	call   c01004e5 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0108208:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010820d:	8b 00                	mov    (%eax),%eax
c010820f:	83 e0 04             	and    $0x4,%eax
c0108212:	85 c0                	test   %eax,%eax
c0108214:	75 19                	jne    c010822f <check_pgdir+0x2ce>
c0108216:	68 a4 5f 11 c0       	push   $0xc0115fa4
c010821b:	68 25 5d 11 c0       	push   $0xc0115d25
c0108220:	68 84 02 00 00       	push   $0x284
c0108225:	68 00 5d 11 c0       	push   $0xc0115d00
c010822a:	e8 b6 82 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 1);
c010822f:	83 ec 0c             	sub    $0xc,%esp
c0108232:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108235:	e8 0f ed ff ff       	call   c0106f49 <page_ref>
c010823a:	83 c4 10             	add    $0x10,%esp
c010823d:	83 f8 01             	cmp    $0x1,%eax
c0108240:	74 19                	je     c010825b <check_pgdir+0x2fa>
c0108242:	68 ba 5f 11 c0       	push   $0xc0115fba
c0108247:	68 25 5d 11 c0       	push   $0xc0115d25
c010824c:	68 85 02 00 00       	push   $0x285
c0108251:	68 00 5d 11 c0       	push   $0xc0115d00
c0108256:	e8 8a 82 ff ff       	call   c01004e5 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c010825b:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108260:	6a 00                	push   $0x0
c0108262:	68 00 10 00 00       	push   $0x1000
c0108267:	ff 75 f4             	pushl  -0xc(%ebp)
c010826a:	50                   	push   %eax
c010826b:	e8 14 fb ff ff       	call   c0107d84 <page_insert>
c0108270:	83 c4 10             	add    $0x10,%esp
c0108273:	85 c0                	test   %eax,%eax
c0108275:	74 19                	je     c0108290 <check_pgdir+0x32f>
c0108277:	68 cc 5f 11 c0       	push   $0xc0115fcc
c010827c:	68 25 5d 11 c0       	push   $0xc0115d25
c0108281:	68 87 02 00 00       	push   $0x287
c0108286:	68 00 5d 11 c0       	push   $0xc0115d00
c010828b:	e8 55 82 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p1) == 2);
c0108290:	83 ec 0c             	sub    $0xc,%esp
c0108293:	ff 75 f4             	pushl  -0xc(%ebp)
c0108296:	e8 ae ec ff ff       	call   c0106f49 <page_ref>
c010829b:	83 c4 10             	add    $0x10,%esp
c010829e:	83 f8 02             	cmp    $0x2,%eax
c01082a1:	74 19                	je     c01082bc <check_pgdir+0x35b>
c01082a3:	68 f8 5f 11 c0       	push   $0xc0115ff8
c01082a8:	68 25 5d 11 c0       	push   $0xc0115d25
c01082ad:	68 88 02 00 00       	push   $0x288
c01082b2:	68 00 5d 11 c0       	push   $0xc0115d00
c01082b7:	e8 29 82 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c01082bc:	83 ec 0c             	sub    $0xc,%esp
c01082bf:	ff 75 e4             	pushl  -0x1c(%ebp)
c01082c2:	e8 82 ec ff ff       	call   c0106f49 <page_ref>
c01082c7:	83 c4 10             	add    $0x10,%esp
c01082ca:	85 c0                	test   %eax,%eax
c01082cc:	74 19                	je     c01082e7 <check_pgdir+0x386>
c01082ce:	68 0a 60 11 c0       	push   $0xc011600a
c01082d3:	68 25 5d 11 c0       	push   $0xc0115d25
c01082d8:	68 89 02 00 00       	push   $0x289
c01082dd:	68 00 5d 11 c0       	push   $0xc0115d00
c01082e2:	e8 fe 81 ff ff       	call   c01004e5 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01082e7:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01082ec:	83 ec 04             	sub    $0x4,%esp
c01082ef:	6a 00                	push   $0x0
c01082f1:	68 00 10 00 00       	push   $0x1000
c01082f6:	50                   	push   %eax
c01082f7:	e8 d7 f4 ff ff       	call   c01077d3 <get_pte>
c01082fc:	83 c4 10             	add    $0x10,%esp
c01082ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108302:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108306:	75 19                	jne    c0108321 <check_pgdir+0x3c0>
c0108308:	68 58 5f 11 c0       	push   $0xc0115f58
c010830d:	68 25 5d 11 c0       	push   $0xc0115d25
c0108312:	68 8a 02 00 00       	push   $0x28a
c0108317:	68 00 5d 11 c0       	push   $0xc0115d00
c010831c:	e8 c4 81 ff ff       	call   c01004e5 <__panic>
    assert(pte2page(*ptep) == p1);
c0108321:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108324:	8b 00                	mov    (%eax),%eax
c0108326:	83 ec 0c             	sub    $0xc,%esp
c0108329:	50                   	push   %eax
c010832a:	e8 c4 eb ff ff       	call   c0106ef3 <pte2page>
c010832f:	83 c4 10             	add    $0x10,%esp
c0108332:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108335:	74 19                	je     c0108350 <check_pgdir+0x3ef>
c0108337:	68 cd 5e 11 c0       	push   $0xc0115ecd
c010833c:	68 25 5d 11 c0       	push   $0xc0115d25
c0108341:	68 8b 02 00 00       	push   $0x28b
c0108346:	68 00 5d 11 c0       	push   $0xc0115d00
c010834b:	e8 95 81 ff ff       	call   c01004e5 <__panic>
    assert((*ptep & PTE_U) == 0);
c0108350:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108353:	8b 00                	mov    (%eax),%eax
c0108355:	83 e0 04             	and    $0x4,%eax
c0108358:	85 c0                	test   %eax,%eax
c010835a:	74 19                	je     c0108375 <check_pgdir+0x414>
c010835c:	68 1c 60 11 c0       	push   $0xc011601c
c0108361:	68 25 5d 11 c0       	push   $0xc0115d25
c0108366:	68 8c 02 00 00       	push   $0x28c
c010836b:	68 00 5d 11 c0       	push   $0xc0115d00
c0108370:	e8 70 81 ff ff       	call   c01004e5 <__panic>

    page_remove(boot_pgdir, 0x0);
c0108375:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010837a:	83 ec 08             	sub    $0x8,%esp
c010837d:	6a 00                	push   $0x0
c010837f:	50                   	push   %eax
c0108380:	e8 c6 f9 ff ff       	call   c0107d4b <page_remove>
c0108385:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0108388:	83 ec 0c             	sub    $0xc,%esp
c010838b:	ff 75 f4             	pushl  -0xc(%ebp)
c010838e:	e8 b6 eb ff ff       	call   c0106f49 <page_ref>
c0108393:	83 c4 10             	add    $0x10,%esp
c0108396:	83 f8 01             	cmp    $0x1,%eax
c0108399:	74 19                	je     c01083b4 <check_pgdir+0x453>
c010839b:	68 e3 5e 11 c0       	push   $0xc0115ee3
c01083a0:	68 25 5d 11 c0       	push   $0xc0115d25
c01083a5:	68 8f 02 00 00       	push   $0x28f
c01083aa:	68 00 5d 11 c0       	push   $0xc0115d00
c01083af:	e8 31 81 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c01083b4:	83 ec 0c             	sub    $0xc,%esp
c01083b7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01083ba:	e8 8a eb ff ff       	call   c0106f49 <page_ref>
c01083bf:	83 c4 10             	add    $0x10,%esp
c01083c2:	85 c0                	test   %eax,%eax
c01083c4:	74 19                	je     c01083df <check_pgdir+0x47e>
c01083c6:	68 0a 60 11 c0       	push   $0xc011600a
c01083cb:	68 25 5d 11 c0       	push   $0xc0115d25
c01083d0:	68 90 02 00 00       	push   $0x290
c01083d5:	68 00 5d 11 c0       	push   $0xc0115d00
c01083da:	e8 06 81 ff ff       	call   c01004e5 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01083df:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01083e4:	83 ec 08             	sub    $0x8,%esp
c01083e7:	68 00 10 00 00       	push   $0x1000
c01083ec:	50                   	push   %eax
c01083ed:	e8 59 f9 ff ff       	call   c0107d4b <page_remove>
c01083f2:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c01083f5:	83 ec 0c             	sub    $0xc,%esp
c01083f8:	ff 75 f4             	pushl  -0xc(%ebp)
c01083fb:	e8 49 eb ff ff       	call   c0106f49 <page_ref>
c0108400:	83 c4 10             	add    $0x10,%esp
c0108403:	85 c0                	test   %eax,%eax
c0108405:	74 19                	je     c0108420 <check_pgdir+0x4bf>
c0108407:	68 31 60 11 c0       	push   $0xc0116031
c010840c:	68 25 5d 11 c0       	push   $0xc0115d25
c0108411:	68 93 02 00 00       	push   $0x293
c0108416:	68 00 5d 11 c0       	push   $0xc0115d00
c010841b:	e8 c5 80 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c0108420:	83 ec 0c             	sub    $0xc,%esp
c0108423:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108426:	e8 1e eb ff ff       	call   c0106f49 <page_ref>
c010842b:	83 c4 10             	add    $0x10,%esp
c010842e:	85 c0                	test   %eax,%eax
c0108430:	74 19                	je     c010844b <check_pgdir+0x4ea>
c0108432:	68 0a 60 11 c0       	push   $0xc011600a
c0108437:	68 25 5d 11 c0       	push   $0xc0115d25
c010843c:	68 94 02 00 00       	push   $0x294
c0108441:	68 00 5d 11 c0       	push   $0xc0115d00
c0108446:	e8 9a 80 ff ff       	call   c01004e5 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c010844b:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108450:	8b 00                	mov    (%eax),%eax
c0108452:	83 ec 0c             	sub    $0xc,%esp
c0108455:	50                   	push   %eax
c0108456:	e8 d2 ea ff ff       	call   c0106f2d <pde2page>
c010845b:	83 c4 10             	add    $0x10,%esp
c010845e:	83 ec 0c             	sub    $0xc,%esp
c0108461:	50                   	push   %eax
c0108462:	e8 e2 ea ff ff       	call   c0106f49 <page_ref>
c0108467:	83 c4 10             	add    $0x10,%esp
c010846a:	83 f8 01             	cmp    $0x1,%eax
c010846d:	74 19                	je     c0108488 <check_pgdir+0x527>
c010846f:	68 44 60 11 c0       	push   $0xc0116044
c0108474:	68 25 5d 11 c0       	push   $0xc0115d25
c0108479:	68 96 02 00 00       	push   $0x296
c010847e:	68 00 5d 11 c0       	push   $0xc0115d00
c0108483:	e8 5d 80 ff ff       	call   c01004e5 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108488:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010848d:	8b 00                	mov    (%eax),%eax
c010848f:	83 ec 0c             	sub    $0xc,%esp
c0108492:	50                   	push   %eax
c0108493:	e8 95 ea ff ff       	call   c0106f2d <pde2page>
c0108498:	83 c4 10             	add    $0x10,%esp
c010849b:	83 ec 08             	sub    $0x8,%esp
c010849e:	6a 01                	push   $0x1
c01084a0:	50                   	push   %eax
c01084a1:	e8 1d ed ff ff       	call   c01071c3 <free_pages>
c01084a6:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01084a9:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01084ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01084b4:	83 ec 0c             	sub    $0xc,%esp
c01084b7:	68 6b 60 11 c0       	push   $0xc011606b
c01084bc:	e8 be 7e ff ff       	call   c010037f <cprintf>
c01084c1:	83 c4 10             	add    $0x10,%esp
}
c01084c4:	90                   	nop
c01084c5:	c9                   	leave  
c01084c6:	c3                   	ret    

c01084c7 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01084c7:	55                   	push   %ebp
c01084c8:	89 e5                	mov    %esp,%ebp
c01084ca:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01084cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01084d4:	e9 a3 00 00 00       	jmp    c010857c <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01084d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084e2:	c1 e8 0c             	shr    $0xc,%eax
c01084e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01084e8:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01084ed:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01084f0:	72 17                	jb     c0108509 <check_boot_pgdir+0x42>
c01084f2:	ff 75 f0             	pushl  -0x10(%ebp)
c01084f5:	68 38 5c 11 c0       	push   $0xc0115c38
c01084fa:	68 a2 02 00 00       	push   $0x2a2
c01084ff:	68 00 5d 11 c0       	push   $0xc0115d00
c0108504:	e8 dc 7f ff ff       	call   c01004e5 <__panic>
c0108509:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010850c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108511:	89 c2                	mov    %eax,%edx
c0108513:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108518:	83 ec 04             	sub    $0x4,%esp
c010851b:	6a 00                	push   $0x0
c010851d:	52                   	push   %edx
c010851e:	50                   	push   %eax
c010851f:	e8 af f2 ff ff       	call   c01077d3 <get_pte>
c0108524:	83 c4 10             	add    $0x10,%esp
c0108527:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010852a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010852e:	75 19                	jne    c0108549 <check_boot_pgdir+0x82>
c0108530:	68 88 60 11 c0       	push   $0xc0116088
c0108535:	68 25 5d 11 c0       	push   $0xc0115d25
c010853a:	68 a2 02 00 00       	push   $0x2a2
c010853f:	68 00 5d 11 c0       	push   $0xc0115d00
c0108544:	e8 9c 7f ff ff       	call   c01004e5 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108549:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010854c:	8b 00                	mov    (%eax),%eax
c010854e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108553:	89 c2                	mov    %eax,%edx
c0108555:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108558:	39 c2                	cmp    %eax,%edx
c010855a:	74 19                	je     c0108575 <check_boot_pgdir+0xae>
c010855c:	68 c5 60 11 c0       	push   $0xc01160c5
c0108561:	68 25 5d 11 c0       	push   $0xc0115d25
c0108566:	68 a3 02 00 00       	push   $0x2a3
c010856b:	68 00 5d 11 c0       	push   $0xc0115d00
c0108570:	e8 70 7f ff ff       	call   c01004e5 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108575:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010857c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010857f:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0108584:	39 c2                	cmp    %eax,%edx
c0108586:	0f 82 4d ff ff ff    	jb     c01084d9 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010858c:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108591:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108596:	8b 00                	mov    (%eax),%eax
c0108598:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010859d:	89 c2                	mov    %eax,%edx
c010859f:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01085a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01085a7:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01085ae:	77 17                	ja     c01085c7 <check_boot_pgdir+0x100>
c01085b0:	ff 75 e4             	pushl  -0x1c(%ebp)
c01085b3:	68 dc 5c 11 c0       	push   $0xc0115cdc
c01085b8:	68 a6 02 00 00       	push   $0x2a6
c01085bd:	68 00 5d 11 c0       	push   $0xc0115d00
c01085c2:	e8 1e 7f ff ff       	call   c01004e5 <__panic>
c01085c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085ca:	05 00 00 00 40       	add    $0x40000000,%eax
c01085cf:	39 c2                	cmp    %eax,%edx
c01085d1:	74 19                	je     c01085ec <check_boot_pgdir+0x125>
c01085d3:	68 dc 60 11 c0       	push   $0xc01160dc
c01085d8:	68 25 5d 11 c0       	push   $0xc0115d25
c01085dd:	68 a6 02 00 00       	push   $0x2a6
c01085e2:	68 00 5d 11 c0       	push   $0xc0115d00
c01085e7:	e8 f9 7e ff ff       	call   c01004e5 <__panic>

    assert(boot_pgdir[0] == 0);
c01085ec:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01085f1:	8b 00                	mov    (%eax),%eax
c01085f3:	85 c0                	test   %eax,%eax
c01085f5:	74 19                	je     c0108610 <check_boot_pgdir+0x149>
c01085f7:	68 10 61 11 c0       	push   $0xc0116110
c01085fc:	68 25 5d 11 c0       	push   $0xc0115d25
c0108601:	68 a8 02 00 00       	push   $0x2a8
c0108606:	68 00 5d 11 c0       	push   $0xc0115d00
c010860b:	e8 d5 7e ff ff       	call   c01004e5 <__panic>

    struct Page *p;
    p = alloc_page();
c0108610:	83 ec 0c             	sub    $0xc,%esp
c0108613:	6a 01                	push   $0x1
c0108615:	e8 3d eb ff ff       	call   c0107157 <alloc_pages>
c010861a:	83 c4 10             	add    $0x10,%esp
c010861d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108620:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108625:	6a 02                	push   $0x2
c0108627:	68 00 01 00 00       	push   $0x100
c010862c:	ff 75 e0             	pushl  -0x20(%ebp)
c010862f:	50                   	push   %eax
c0108630:	e8 4f f7 ff ff       	call   c0107d84 <page_insert>
c0108635:	83 c4 10             	add    $0x10,%esp
c0108638:	85 c0                	test   %eax,%eax
c010863a:	74 19                	je     c0108655 <check_boot_pgdir+0x18e>
c010863c:	68 24 61 11 c0       	push   $0xc0116124
c0108641:	68 25 5d 11 c0       	push   $0xc0115d25
c0108646:	68 ac 02 00 00       	push   $0x2ac
c010864b:	68 00 5d 11 c0       	push   $0xc0115d00
c0108650:	e8 90 7e ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p) == 1);
c0108655:	83 ec 0c             	sub    $0xc,%esp
c0108658:	ff 75 e0             	pushl  -0x20(%ebp)
c010865b:	e8 e9 e8 ff ff       	call   c0106f49 <page_ref>
c0108660:	83 c4 10             	add    $0x10,%esp
c0108663:	83 f8 01             	cmp    $0x1,%eax
c0108666:	74 19                	je     c0108681 <check_boot_pgdir+0x1ba>
c0108668:	68 52 61 11 c0       	push   $0xc0116152
c010866d:	68 25 5d 11 c0       	push   $0xc0115d25
c0108672:	68 ad 02 00 00       	push   $0x2ad
c0108677:	68 00 5d 11 c0       	push   $0xc0115d00
c010867c:	e8 64 7e ff ff       	call   c01004e5 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108681:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108686:	6a 02                	push   $0x2
c0108688:	68 00 11 00 00       	push   $0x1100
c010868d:	ff 75 e0             	pushl  -0x20(%ebp)
c0108690:	50                   	push   %eax
c0108691:	e8 ee f6 ff ff       	call   c0107d84 <page_insert>
c0108696:	83 c4 10             	add    $0x10,%esp
c0108699:	85 c0                	test   %eax,%eax
c010869b:	74 19                	je     c01086b6 <check_boot_pgdir+0x1ef>
c010869d:	68 64 61 11 c0       	push   $0xc0116164
c01086a2:	68 25 5d 11 c0       	push   $0xc0115d25
c01086a7:	68 ae 02 00 00       	push   $0x2ae
c01086ac:	68 00 5d 11 c0       	push   $0xc0115d00
c01086b1:	e8 2f 7e ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p) == 2);
c01086b6:	83 ec 0c             	sub    $0xc,%esp
c01086b9:	ff 75 e0             	pushl  -0x20(%ebp)
c01086bc:	e8 88 e8 ff ff       	call   c0106f49 <page_ref>
c01086c1:	83 c4 10             	add    $0x10,%esp
c01086c4:	83 f8 02             	cmp    $0x2,%eax
c01086c7:	74 19                	je     c01086e2 <check_boot_pgdir+0x21b>
c01086c9:	68 9b 61 11 c0       	push   $0xc011619b
c01086ce:	68 25 5d 11 c0       	push   $0xc0115d25
c01086d3:	68 af 02 00 00       	push   $0x2af
c01086d8:	68 00 5d 11 c0       	push   $0xc0115d00
c01086dd:	e8 03 7e ff ff       	call   c01004e5 <__panic>

    const char *str = "ucore: Hello world!!";
c01086e2:	c7 45 dc ac 61 11 c0 	movl   $0xc01161ac,-0x24(%ebp)
    strcpy((void *)0x100, str);
c01086e9:	83 ec 08             	sub    $0x8,%esp
c01086ec:	ff 75 dc             	pushl  -0x24(%ebp)
c01086ef:	68 00 01 00 00       	push   $0x100
c01086f4:	e8 3e b0 00 00       	call   c0113737 <strcpy>
c01086f9:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c01086fc:	83 ec 08             	sub    $0x8,%esp
c01086ff:	68 00 11 00 00       	push   $0x1100
c0108704:	68 00 01 00 00       	push   $0x100
c0108709:	e8 a3 b0 00 00       	call   c01137b1 <strcmp>
c010870e:	83 c4 10             	add    $0x10,%esp
c0108711:	85 c0                	test   %eax,%eax
c0108713:	74 19                	je     c010872e <check_boot_pgdir+0x267>
c0108715:	68 c4 61 11 c0       	push   $0xc01161c4
c010871a:	68 25 5d 11 c0       	push   $0xc0115d25
c010871f:	68 b3 02 00 00       	push   $0x2b3
c0108724:	68 00 5d 11 c0       	push   $0xc0115d00
c0108729:	e8 b7 7d ff ff       	call   c01004e5 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010872e:	83 ec 0c             	sub    $0xc,%esp
c0108731:	ff 75 e0             	pushl  -0x20(%ebp)
c0108734:	e8 75 e7 ff ff       	call   c0106eae <page2kva>
c0108739:	83 c4 10             	add    $0x10,%esp
c010873c:	05 00 01 00 00       	add    $0x100,%eax
c0108741:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108744:	83 ec 0c             	sub    $0xc,%esp
c0108747:	68 00 01 00 00       	push   $0x100
c010874c:	e8 65 af 00 00       	call   c01136b6 <strlen>
c0108751:	83 c4 10             	add    $0x10,%esp
c0108754:	85 c0                	test   %eax,%eax
c0108756:	74 19                	je     c0108771 <check_boot_pgdir+0x2aa>
c0108758:	68 fc 61 11 c0       	push   $0xc01161fc
c010875d:	68 25 5d 11 c0       	push   $0xc0115d25
c0108762:	68 b6 02 00 00       	push   $0x2b6
c0108767:	68 00 5d 11 c0       	push   $0xc0115d00
c010876c:	e8 74 7d ff ff       	call   c01004e5 <__panic>

    free_page(p);
c0108771:	83 ec 08             	sub    $0x8,%esp
c0108774:	6a 01                	push   $0x1
c0108776:	ff 75 e0             	pushl  -0x20(%ebp)
c0108779:	e8 45 ea ff ff       	call   c01071c3 <free_pages>
c010877e:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0108781:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108786:	8b 00                	mov    (%eax),%eax
c0108788:	83 ec 0c             	sub    $0xc,%esp
c010878b:	50                   	push   %eax
c010878c:	e8 9c e7 ff ff       	call   c0106f2d <pde2page>
c0108791:	83 c4 10             	add    $0x10,%esp
c0108794:	83 ec 08             	sub    $0x8,%esp
c0108797:	6a 01                	push   $0x1
c0108799:	50                   	push   %eax
c010879a:	e8 24 ea ff ff       	call   c01071c3 <free_pages>
c010879f:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01087a2:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01087a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01087ad:	83 ec 0c             	sub    $0xc,%esp
c01087b0:	68 20 62 11 c0       	push   $0xc0116220
c01087b5:	e8 c5 7b ff ff       	call   c010037f <cprintf>
c01087ba:	83 c4 10             	add    $0x10,%esp
}
c01087bd:	90                   	nop
c01087be:	c9                   	leave  
c01087bf:	c3                   	ret    

c01087c0 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c01087c0:	55                   	push   %ebp
c01087c1:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c01087c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01087c6:	83 e0 04             	and    $0x4,%eax
c01087c9:	85 c0                	test   %eax,%eax
c01087cb:	74 07                	je     c01087d4 <perm2str+0x14>
c01087cd:	b8 75 00 00 00       	mov    $0x75,%eax
c01087d2:	eb 05                	jmp    c01087d9 <perm2str+0x19>
c01087d4:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01087d9:	a2 08 20 15 c0       	mov    %al,0xc0152008
    str[1] = 'r';
c01087de:	c6 05 09 20 15 c0 72 	movb   $0x72,0xc0152009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c01087e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01087e8:	83 e0 02             	and    $0x2,%eax
c01087eb:	85 c0                	test   %eax,%eax
c01087ed:	74 07                	je     c01087f6 <perm2str+0x36>
c01087ef:	b8 77 00 00 00       	mov    $0x77,%eax
c01087f4:	eb 05                	jmp    c01087fb <perm2str+0x3b>
c01087f6:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01087fb:	a2 0a 20 15 c0       	mov    %al,0xc015200a
    str[3] = '\0';
c0108800:	c6 05 0b 20 15 c0 00 	movb   $0x0,0xc015200b
    return str;
c0108807:	b8 08 20 15 c0       	mov    $0xc0152008,%eax
}
c010880c:	5d                   	pop    %ebp
c010880d:	c3                   	ret    

c010880e <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c010880e:	55                   	push   %ebp
c010880f:	89 e5                	mov    %esp,%ebp
c0108811:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108814:	8b 45 10             	mov    0x10(%ebp),%eax
c0108817:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010881a:	72 0e                	jb     c010882a <get_pgtable_items+0x1c>
        return 0;
c010881c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108821:	e9 9a 00 00 00       	jmp    c01088c0 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0108826:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010882a:	8b 45 10             	mov    0x10(%ebp),%eax
c010882d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108830:	73 18                	jae    c010884a <get_pgtable_items+0x3c>
c0108832:	8b 45 10             	mov    0x10(%ebp),%eax
c0108835:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010883c:	8b 45 14             	mov    0x14(%ebp),%eax
c010883f:	01 d0                	add    %edx,%eax
c0108841:	8b 00                	mov    (%eax),%eax
c0108843:	83 e0 01             	and    $0x1,%eax
c0108846:	85 c0                	test   %eax,%eax
c0108848:	74 dc                	je     c0108826 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c010884a:	8b 45 10             	mov    0x10(%ebp),%eax
c010884d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108850:	73 69                	jae    c01088bb <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0108852:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108856:	74 08                	je     c0108860 <get_pgtable_items+0x52>
            *left_store = start;
c0108858:	8b 45 18             	mov    0x18(%ebp),%eax
c010885b:	8b 55 10             	mov    0x10(%ebp),%edx
c010885e:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108860:	8b 45 10             	mov    0x10(%ebp),%eax
c0108863:	8d 50 01             	lea    0x1(%eax),%edx
c0108866:	89 55 10             	mov    %edx,0x10(%ebp)
c0108869:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108870:	8b 45 14             	mov    0x14(%ebp),%eax
c0108873:	01 d0                	add    %edx,%eax
c0108875:	8b 00                	mov    (%eax),%eax
c0108877:	83 e0 07             	and    $0x7,%eax
c010887a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c010887d:	eb 04                	jmp    c0108883 <get_pgtable_items+0x75>
            start ++;
c010887f:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108883:	8b 45 10             	mov    0x10(%ebp),%eax
c0108886:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108889:	73 1d                	jae    c01088a8 <get_pgtable_items+0x9a>
c010888b:	8b 45 10             	mov    0x10(%ebp),%eax
c010888e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108895:	8b 45 14             	mov    0x14(%ebp),%eax
c0108898:	01 d0                	add    %edx,%eax
c010889a:	8b 00                	mov    (%eax),%eax
c010889c:	83 e0 07             	and    $0x7,%eax
c010889f:	89 c2                	mov    %eax,%edx
c01088a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088a4:	39 c2                	cmp    %eax,%edx
c01088a6:	74 d7                	je     c010887f <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c01088a8:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01088ac:	74 08                	je     c01088b6 <get_pgtable_items+0xa8>
            *right_store = start;
c01088ae:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01088b1:	8b 55 10             	mov    0x10(%ebp),%edx
c01088b4:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01088b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088b9:	eb 05                	jmp    c01088c0 <get_pgtable_items+0xb2>
    }
    return 0;
c01088bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01088c0:	c9                   	leave  
c01088c1:	c3                   	ret    

c01088c2 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01088c2:	55                   	push   %ebp
c01088c3:	89 e5                	mov    %esp,%ebp
c01088c5:	57                   	push   %edi
c01088c6:	56                   	push   %esi
c01088c7:	53                   	push   %ebx
c01088c8:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c01088cb:	83 ec 0c             	sub    $0xc,%esp
c01088ce:	68 40 62 11 c0       	push   $0xc0116240
c01088d3:	e8 a7 7a ff ff       	call   c010037f <cprintf>
c01088d8:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c01088db:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01088e2:	e9 e5 00 00 00       	jmp    c01089cc <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01088e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088ea:	83 ec 0c             	sub    $0xc,%esp
c01088ed:	50                   	push   %eax
c01088ee:	e8 cd fe ff ff       	call   c01087c0 <perm2str>
c01088f3:	83 c4 10             	add    $0x10,%esp
c01088f6:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c01088f8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01088fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088fe:	29 c2                	sub    %eax,%edx
c0108900:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108902:	c1 e0 16             	shl    $0x16,%eax
c0108905:	89 c3                	mov    %eax,%ebx
c0108907:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010890a:	c1 e0 16             	shl    $0x16,%eax
c010890d:	89 c1                	mov    %eax,%ecx
c010890f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108912:	c1 e0 16             	shl    $0x16,%eax
c0108915:	89 c2                	mov    %eax,%edx
c0108917:	8b 75 dc             	mov    -0x24(%ebp),%esi
c010891a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010891d:	29 c6                	sub    %eax,%esi
c010891f:	89 f0                	mov    %esi,%eax
c0108921:	83 ec 08             	sub    $0x8,%esp
c0108924:	57                   	push   %edi
c0108925:	53                   	push   %ebx
c0108926:	51                   	push   %ecx
c0108927:	52                   	push   %edx
c0108928:	50                   	push   %eax
c0108929:	68 71 62 11 c0       	push   $0xc0116271
c010892e:	e8 4c 7a ff ff       	call   c010037f <cprintf>
c0108933:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108936:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108939:	c1 e0 0a             	shl    $0xa,%eax
c010893c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010893f:	eb 4f                	jmp    c0108990 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108944:	83 ec 0c             	sub    $0xc,%esp
c0108947:	50                   	push   %eax
c0108948:	e8 73 fe ff ff       	call   c01087c0 <perm2str>
c010894d:	83 c4 10             	add    $0x10,%esp
c0108950:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108952:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108955:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108958:	29 c2                	sub    %eax,%edx
c010895a:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010895c:	c1 e0 0c             	shl    $0xc,%eax
c010895f:	89 c3                	mov    %eax,%ebx
c0108961:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108964:	c1 e0 0c             	shl    $0xc,%eax
c0108967:	89 c1                	mov    %eax,%ecx
c0108969:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010896c:	c1 e0 0c             	shl    $0xc,%eax
c010896f:	89 c2                	mov    %eax,%edx
c0108971:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0108974:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108977:	29 c6                	sub    %eax,%esi
c0108979:	89 f0                	mov    %esi,%eax
c010897b:	83 ec 08             	sub    $0x8,%esp
c010897e:	57                   	push   %edi
c010897f:	53                   	push   %ebx
c0108980:	51                   	push   %ecx
c0108981:	52                   	push   %edx
c0108982:	50                   	push   %eax
c0108983:	68 90 62 11 c0       	push   $0xc0116290
c0108988:	e8 f2 79 ff ff       	call   c010037f <cprintf>
c010898d:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108990:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0108995:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108998:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010899b:	89 d3                	mov    %edx,%ebx
c010899d:	c1 e3 0a             	shl    $0xa,%ebx
c01089a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01089a3:	89 d1                	mov    %edx,%ecx
c01089a5:	c1 e1 0a             	shl    $0xa,%ecx
c01089a8:	83 ec 08             	sub    $0x8,%esp
c01089ab:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c01089ae:	52                   	push   %edx
c01089af:	8d 55 d8             	lea    -0x28(%ebp),%edx
c01089b2:	52                   	push   %edx
c01089b3:	56                   	push   %esi
c01089b4:	50                   	push   %eax
c01089b5:	53                   	push   %ebx
c01089b6:	51                   	push   %ecx
c01089b7:	e8 52 fe ff ff       	call   c010880e <get_pgtable_items>
c01089bc:	83 c4 20             	add    $0x20,%esp
c01089bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01089c2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01089c6:	0f 85 75 ff ff ff    	jne    c0108941 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01089cc:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c01089d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01089d4:	83 ec 08             	sub    $0x8,%esp
c01089d7:	8d 55 dc             	lea    -0x24(%ebp),%edx
c01089da:	52                   	push   %edx
c01089db:	8d 55 e0             	lea    -0x20(%ebp),%edx
c01089de:	52                   	push   %edx
c01089df:	51                   	push   %ecx
c01089e0:	50                   	push   %eax
c01089e1:	68 00 04 00 00       	push   $0x400
c01089e6:	6a 00                	push   $0x0
c01089e8:	e8 21 fe ff ff       	call   c010880e <get_pgtable_items>
c01089ed:	83 c4 20             	add    $0x20,%esp
c01089f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01089f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01089f7:	0f 85 ea fe ff ff    	jne    c01088e7 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c01089fd:	83 ec 0c             	sub    $0xc,%esp
c0108a00:	68 b4 62 11 c0       	push   $0xc01162b4
c0108a05:	e8 75 79 ff ff       	call   c010037f <cprintf>
c0108a0a:	83 c4 10             	add    $0x10,%esp
}
c0108a0d:	90                   	nop
c0108a0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108a11:	5b                   	pop    %ebx
c0108a12:	5e                   	pop    %esi
c0108a13:	5f                   	pop    %edi
c0108a14:	5d                   	pop    %ebp
c0108a15:	c3                   	ret    

c0108a16 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108a16:	55                   	push   %ebp
c0108a17:	89 e5                	mov    %esp,%ebp
c0108a19:	83 ec 08             	sub    $0x8,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a1f:	8b 04 85 20 52 15 c0 	mov    -0x3feaade0(,%eax,4),%eax
c0108a26:	83 f8 01             	cmp    $0x1,%eax
c0108a29:	0f 85 8d 00 00 00    	jne    c0108abc <phi_test_sema+0xa6>
c0108a2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a32:	8d 48 04             	lea    0x4(%eax),%ecx
c0108a35:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108a3a:	89 c8                	mov    %ecx,%eax
c0108a3c:	f7 ea                	imul   %edx
c0108a3e:	d1 fa                	sar    %edx
c0108a40:	89 c8                	mov    %ecx,%eax
c0108a42:	c1 f8 1f             	sar    $0x1f,%eax
c0108a45:	29 c2                	sub    %eax,%edx
c0108a47:	89 d0                	mov    %edx,%eax
c0108a49:	89 c2                	mov    %eax,%edx
c0108a4b:	c1 e2 02             	shl    $0x2,%edx
c0108a4e:	01 c2                	add    %eax,%edx
c0108a50:	89 c8                	mov    %ecx,%eax
c0108a52:	29 d0                	sub    %edx,%eax
c0108a54:	8b 04 85 20 52 15 c0 	mov    -0x3feaade0(,%eax,4),%eax
c0108a5b:	83 f8 02             	cmp    $0x2,%eax
c0108a5e:	74 5c                	je     c0108abc <phi_test_sema+0xa6>
            &&state_sema[RIGHT]!=EATING)
c0108a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a63:	8d 48 01             	lea    0x1(%eax),%ecx
c0108a66:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108a6b:	89 c8                	mov    %ecx,%eax
c0108a6d:	f7 ea                	imul   %edx
c0108a6f:	d1 fa                	sar    %edx
c0108a71:	89 c8                	mov    %ecx,%eax
c0108a73:	c1 f8 1f             	sar    $0x1f,%eax
c0108a76:	29 c2                	sub    %eax,%edx
c0108a78:	89 d0                	mov    %edx,%eax
c0108a7a:	89 c2                	mov    %eax,%edx
c0108a7c:	c1 e2 02             	shl    $0x2,%edx
c0108a7f:	01 c2                	add    %eax,%edx
c0108a81:	89 c8                	mov    %ecx,%eax
c0108a83:	29 d0                	sub    %edx,%eax
c0108a85:	8b 04 85 20 52 15 c0 	mov    -0x3feaade0(,%eax,4),%eax
c0108a8c:	83 f8 02             	cmp    $0x2,%eax
c0108a8f:	74 2b                	je     c0108abc <phi_test_sema+0xa6>
    {
        state_sema[i]=EATING;
c0108a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a94:	c7 04 85 20 52 15 c0 	movl   $0x2,-0x3feaade0(,%eax,4)
c0108a9b:	02 00 00 00 
        up(&s[i]);
c0108a9f:	8b 55 08             	mov    0x8(%ebp),%edx
c0108aa2:	89 d0                	mov    %edx,%eax
c0108aa4:	01 c0                	add    %eax,%eax
c0108aa6:	01 d0                	add    %edx,%eax
c0108aa8:	c1 e0 02             	shl    $0x2,%eax
c0108aab:	05 c0 52 15 c0       	add    $0xc01552c0,%eax
c0108ab0:	83 ec 0c             	sub    $0xc,%esp
c0108ab3:	50                   	push   %eax
c0108ab4:	e8 f6 0b 00 00       	call   c01096af <up>
c0108ab9:	83 c4 10             	add    $0x10,%esp
    }
}
c0108abc:	90                   	nop
c0108abd:	c9                   	leave  
c0108abe:	c3                   	ret    

c0108abf <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108abf:	55                   	push   %ebp
c0108ac0:	89 e5                	mov    %esp,%ebp
c0108ac2:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108ac5:	83 ec 0c             	sub    $0xc,%esp
c0108ac8:	68 48 52 15 c0       	push   $0xc0155248
c0108acd:	e8 f9 0b 00 00       	call   c01096cb <down>
c0108ad2:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ad8:	c7 04 85 20 52 15 c0 	movl   $0x1,-0x3feaade0(,%eax,4)
c0108adf:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108ae3:	83 ec 0c             	sub    $0xc,%esp
c0108ae6:	ff 75 08             	pushl  0x8(%ebp)
c0108ae9:	e8 28 ff ff ff       	call   c0108a16 <phi_test_sema>
c0108aee:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108af1:	83 ec 0c             	sub    $0xc,%esp
c0108af4:	68 48 52 15 c0       	push   $0xc0155248
c0108af9:	e8 b1 0b 00 00       	call   c01096af <up>
c0108afe:	83 c4 10             	add    $0x10,%esp
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108b01:	8b 55 08             	mov    0x8(%ebp),%edx
c0108b04:	89 d0                	mov    %edx,%eax
c0108b06:	01 c0                	add    %eax,%eax
c0108b08:	01 d0                	add    %edx,%eax
c0108b0a:	c1 e0 02             	shl    $0x2,%eax
c0108b0d:	05 c0 52 15 c0       	add    $0xc01552c0,%eax
c0108b12:	83 ec 0c             	sub    $0xc,%esp
c0108b15:	50                   	push   %eax
c0108b16:	e8 b0 0b 00 00       	call   c01096cb <down>
c0108b1b:	83 c4 10             	add    $0x10,%esp
}
c0108b1e:	90                   	nop
c0108b1f:	c9                   	leave  
c0108b20:	c3                   	ret    

c0108b21 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108b21:	55                   	push   %ebp
c0108b22:	89 e5                	mov    %esp,%ebp
c0108b24:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108b27:	83 ec 0c             	sub    $0xc,%esp
c0108b2a:	68 48 52 15 c0       	push   $0xc0155248
c0108b2f:	e8 97 0b 00 00       	call   c01096cb <down>
c0108b34:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108b37:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b3a:	c7 04 85 20 52 15 c0 	movl   $0x0,-0x3feaade0(,%eax,4)
c0108b41:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108b45:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b48:	8d 48 04             	lea    0x4(%eax),%ecx
c0108b4b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108b50:	89 c8                	mov    %ecx,%eax
c0108b52:	f7 ea                	imul   %edx
c0108b54:	d1 fa                	sar    %edx
c0108b56:	89 c8                	mov    %ecx,%eax
c0108b58:	c1 f8 1f             	sar    $0x1f,%eax
c0108b5b:	29 c2                	sub    %eax,%edx
c0108b5d:	89 d0                	mov    %edx,%eax
c0108b5f:	89 c2                	mov    %eax,%edx
c0108b61:	c1 e2 02             	shl    $0x2,%edx
c0108b64:	01 c2                	add    %eax,%edx
c0108b66:	89 c8                	mov    %ecx,%eax
c0108b68:	29 d0                	sub    %edx,%eax
c0108b6a:	83 ec 0c             	sub    $0xc,%esp
c0108b6d:	50                   	push   %eax
c0108b6e:	e8 a3 fe ff ff       	call   c0108a16 <phi_test_sema>
c0108b73:	83 c4 10             	add    $0x10,%esp
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b79:	8d 48 01             	lea    0x1(%eax),%ecx
c0108b7c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108b81:	89 c8                	mov    %ecx,%eax
c0108b83:	f7 ea                	imul   %edx
c0108b85:	d1 fa                	sar    %edx
c0108b87:	89 c8                	mov    %ecx,%eax
c0108b89:	c1 f8 1f             	sar    $0x1f,%eax
c0108b8c:	29 c2                	sub    %eax,%edx
c0108b8e:	89 d0                	mov    %edx,%eax
c0108b90:	89 c2                	mov    %eax,%edx
c0108b92:	c1 e2 02             	shl    $0x2,%edx
c0108b95:	01 c2                	add    %eax,%edx
c0108b97:	89 c8                	mov    %ecx,%eax
c0108b99:	29 d0                	sub    %edx,%eax
c0108b9b:	83 ec 0c             	sub    $0xc,%esp
c0108b9e:	50                   	push   %eax
c0108b9f:	e8 72 fe ff ff       	call   c0108a16 <phi_test_sema>
c0108ba4:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108ba7:	83 ec 0c             	sub    $0xc,%esp
c0108baa:	68 48 52 15 c0       	push   $0xc0155248
c0108baf:	e8 fb 0a 00 00       	call   c01096af <up>
c0108bb4:	83 c4 10             	add    $0x10,%esp
}
c0108bb7:	90                   	nop
c0108bb8:	c9                   	leave  
c0108bb9:	c3                   	ret    

c0108bba <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0108bba:	55                   	push   %ebp
c0108bbb:	89 e5                	mov    %esp,%ebp
c0108bbd:	83 ec 18             	sub    $0x18,%esp
    int i, iter=0;
c0108bc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108bc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0108bcd:	83 ec 08             	sub    $0x8,%esp
c0108bd0:	ff 75 f0             	pushl  -0x10(%ebp)
c0108bd3:	68 e8 62 11 c0       	push   $0xc01162e8
c0108bd8:	e8 a2 77 ff ff       	call   c010037f <cprintf>
c0108bdd:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108be0:	eb 62                	jmp    c0108c44 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108be2:	83 ec 04             	sub    $0x4,%esp
c0108be5:	ff 75 f0             	pushl  -0x10(%ebp)
c0108be8:	ff 75 f4             	pushl  -0xc(%ebp)
c0108beb:	68 08 63 11 c0       	push   $0xc0116308
c0108bf0:	e8 8a 77 ff ff       	call   c010037f <cprintf>
c0108bf5:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108bf8:	83 ec 0c             	sub    $0xc,%esp
c0108bfb:	6a 0a                	push   $0xa
c0108bfd:	e8 7b 49 00 00       	call   c010d57d <do_sleep>
c0108c02:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_sema(i); 
c0108c05:	83 ec 0c             	sub    $0xc,%esp
c0108c08:	ff 75 f0             	pushl  -0x10(%ebp)
c0108c0b:	e8 af fe ff ff       	call   c0108abf <phi_take_forks_sema>
c0108c10:	83 c4 10             	add    $0x10,%esp
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0108c13:	83 ec 04             	sub    $0x4,%esp
c0108c16:	ff 75 f0             	pushl  -0x10(%ebp)
c0108c19:	ff 75 f4             	pushl  -0xc(%ebp)
c0108c1c:	68 38 63 11 c0       	push   $0xc0116338
c0108c21:	e8 59 77 ff ff       	call   c010037f <cprintf>
c0108c26:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108c29:	83 ec 0c             	sub    $0xc,%esp
c0108c2c:	6a 0a                	push   $0xa
c0108c2e:	e8 4a 49 00 00       	call   c010d57d <do_sleep>
c0108c33:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_sema(i); 
c0108c36:	83 ec 0c             	sub    $0xc,%esp
c0108c39:	ff 75 f0             	pushl  -0x10(%ebp)
c0108c3c:	e8 e0 fe ff ff       	call   c0108b21 <phi_put_forks_sema>
c0108c41:	83 c4 10             	add    $0x10,%esp
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0108c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c47:	8d 50 01             	lea    0x1(%eax),%edx
c0108c4a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108c4d:	83 f8 03             	cmp    $0x3,%eax
c0108c50:	7e 90                	jle    c0108be2 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0108c52:	83 ec 08             	sub    $0x8,%esp
c0108c55:	ff 75 f0             	pushl  -0x10(%ebp)
c0108c58:	68 63 63 11 c0       	push   $0xc0116363
c0108c5d:	e8 1d 77 ff ff       	call   c010037f <cprintf>
c0108c62:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108c65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108c6a:	c9                   	leave  
c0108c6b:	c3                   	ret    

c0108c6c <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0108c6c:	55                   	push   %ebp
c0108c6d:	89 e5                	mov    %esp,%ebp
c0108c6f:	83 ec 08             	sub    $0x8,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108c72:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c75:	8b 04 85 80 52 15 c0 	mov    -0x3feaad80(,%eax,4),%eax
c0108c7c:	83 f8 01             	cmp    $0x1,%eax
c0108c7f:	0f 85 bd 00 00 00    	jne    c0108d42 <phi_test_condvar+0xd6>
c0108c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c88:	8d 48 04             	lea    0x4(%eax),%ecx
c0108c8b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108c90:	89 c8                	mov    %ecx,%eax
c0108c92:	f7 ea                	imul   %edx
c0108c94:	d1 fa                	sar    %edx
c0108c96:	89 c8                	mov    %ecx,%eax
c0108c98:	c1 f8 1f             	sar    $0x1f,%eax
c0108c9b:	29 c2                	sub    %eax,%edx
c0108c9d:	89 d0                	mov    %edx,%eax
c0108c9f:	89 c2                	mov    %eax,%edx
c0108ca1:	c1 e2 02             	shl    $0x2,%edx
c0108ca4:	01 c2                	add    %eax,%edx
c0108ca6:	89 c8                	mov    %ecx,%eax
c0108ca8:	29 d0                	sub    %edx,%eax
c0108caa:	8b 04 85 80 52 15 c0 	mov    -0x3feaad80(,%eax,4),%eax
c0108cb1:	83 f8 02             	cmp    $0x2,%eax
c0108cb4:	0f 84 88 00 00 00    	je     c0108d42 <phi_test_condvar+0xd6>
            &&state_condvar[RIGHT]!=EATING) {
c0108cba:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cbd:	8d 48 01             	lea    0x1(%eax),%ecx
c0108cc0:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108cc5:	89 c8                	mov    %ecx,%eax
c0108cc7:	f7 ea                	imul   %edx
c0108cc9:	d1 fa                	sar    %edx
c0108ccb:	89 c8                	mov    %ecx,%eax
c0108ccd:	c1 f8 1f             	sar    $0x1f,%eax
c0108cd0:	29 c2                	sub    %eax,%edx
c0108cd2:	89 d0                	mov    %edx,%eax
c0108cd4:	89 c2                	mov    %eax,%edx
c0108cd6:	c1 e2 02             	shl    $0x2,%edx
c0108cd9:	01 c2                	add    %eax,%edx
c0108cdb:	89 c8                	mov    %ecx,%eax
c0108cdd:	29 d0                	sub    %edx,%eax
c0108cdf:	8b 04 85 80 52 15 c0 	mov    -0x3feaad80(,%eax,4),%eax
c0108ce6:	83 f8 02             	cmp    $0x2,%eax
c0108ce9:	74 57                	je     c0108d42 <phi_test_condvar+0xd6>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0108ceb:	83 ec 08             	sub    $0x8,%esp
c0108cee:	ff 75 08             	pushl  0x8(%ebp)
c0108cf1:	68 80 63 11 c0       	push   $0xc0116380
c0108cf6:	e8 84 76 ff ff       	call   c010037f <cprintf>
c0108cfb:	83 c4 10             	add    $0x10,%esp
        state_condvar[i] = EATING ;
c0108cfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d01:	c7 04 85 80 52 15 c0 	movl   $0x2,-0x3feaad80(,%eax,4)
c0108d08:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0108d0c:	83 ec 08             	sub    $0x8,%esp
c0108d0f:	ff 75 08             	pushl  0x8(%ebp)
c0108d12:	68 b4 63 11 c0       	push   $0xc01163b4
c0108d17:	e8 63 76 ff ff       	call   c010037f <cprintf>
c0108d1c:	83 c4 10             	add    $0x10,%esp
        cond_signal(&mtp->cv[i]) ;
c0108d1f:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108d24:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108d27:	8b 55 08             	mov    0x8(%ebp),%edx
c0108d2a:	89 d0                	mov    %edx,%eax
c0108d2c:	c1 e0 02             	shl    $0x2,%eax
c0108d2f:	01 d0                	add    %edx,%eax
c0108d31:	c1 e0 02             	shl    $0x2,%eax
c0108d34:	01 c8                	add    %ecx,%eax
c0108d36:	83 ec 0c             	sub    $0xc,%esp
c0108d39:	50                   	push   %eax
c0108d3a:	e8 1b 0b 00 00       	call   c010985a <cond_signal>
c0108d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d42:	90                   	nop
c0108d43:	c9                   	leave  
c0108d44:	c3                   	ret    

c0108d45 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0108d45:	55                   	push   %ebp
c0108d46:	89 e5                	mov    %esp,%ebp
c0108d48:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108d4b:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108d50:	83 ec 0c             	sub    $0xc,%esp
c0108d53:	50                   	push   %eax
c0108d54:	e8 72 09 00 00       	call   c01096cb <down>
c0108d59:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c0108d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d5f:	c7 04 85 80 52 15 c0 	movl   $0x1,-0x3feaad80(,%eax,4)
c0108d66:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c0108d6a:	83 ec 0c             	sub    $0xc,%esp
c0108d6d:	ff 75 08             	pushl  0x8(%ebp)
c0108d70:	e8 f7 fe ff ff       	call   c0108c6c <phi_test_condvar>
c0108d75:	83 c4 10             	add    $0x10,%esp
      if (state_condvar[i] != EATING) {
c0108d78:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d7b:	8b 04 85 80 52 15 c0 	mov    -0x3feaad80(,%eax,4),%eax
c0108d82:	83 f8 02             	cmp    $0x2,%eax
c0108d85:	74 36                	je     c0108dbd <phi_take_forks_condvar+0x78>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c0108d87:	83 ec 08             	sub    $0x8,%esp
c0108d8a:	ff 75 08             	pushl  0x8(%ebp)
c0108d8d:	68 dc 63 11 c0       	push   $0xc01163dc
c0108d92:	e8 e8 75 ff ff       	call   c010037f <cprintf>
c0108d97:	83 c4 10             	add    $0x10,%esp
          cond_wait(&mtp->cv[i]);
c0108d9a:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108d9f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108da2:	8b 55 08             	mov    0x8(%ebp),%edx
c0108da5:	89 d0                	mov    %edx,%eax
c0108da7:	c1 e0 02             	shl    $0x2,%eax
c0108daa:	01 d0                	add    %edx,%eax
c0108dac:	c1 e0 02             	shl    $0x2,%eax
c0108daf:	01 c8                	add    %ecx,%eax
c0108db1:	83 ec 0c             	sub    $0xc,%esp
c0108db4:	50                   	push   %eax
c0108db5:	e8 37 0b 00 00       	call   c01098f1 <cond_wait>
c0108dba:	83 c4 10             	add    $0x10,%esp
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0108dbd:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108dc2:	8b 40 18             	mov    0x18(%eax),%eax
c0108dc5:	85 c0                	test   %eax,%eax
c0108dc7:	7e 16                	jle    c0108ddf <phi_take_forks_condvar+0x9a>
         up(&(mtp->next));
c0108dc9:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108dce:	83 c0 0c             	add    $0xc,%eax
c0108dd1:	83 ec 0c             	sub    $0xc,%esp
c0108dd4:	50                   	push   %eax
c0108dd5:	e8 d5 08 00 00       	call   c01096af <up>
c0108dda:	83 c4 10             	add    $0x10,%esp
      else
         up(&(mtp->mutex));
}
c0108ddd:	eb 11                	jmp    c0108df0 <phi_take_forks_condvar+0xab>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
         up(&(mtp->next));
      else
         up(&(mtp->mutex));
c0108ddf:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108de4:	83 ec 0c             	sub    $0xc,%esp
c0108de7:	50                   	push   %eax
c0108de8:	e8 c2 08 00 00       	call   c01096af <up>
c0108ded:	83 c4 10             	add    $0x10,%esp
}
c0108df0:	90                   	nop
c0108df1:	c9                   	leave  
c0108df2:	c3                   	ret    

c0108df3 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0108df3:	55                   	push   %ebp
c0108df4:	89 e5                	mov    %esp,%ebp
c0108df6:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108df9:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108dfe:	83 ec 0c             	sub    $0xc,%esp
c0108e01:	50                   	push   %eax
c0108e02:	e8 c4 08 00 00       	call   c01096cb <down>
c0108e07:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c0108e0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e0d:	c7 04 85 80 52 15 c0 	movl   $0x0,-0x3feaad80(,%eax,4)
c0108e14:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c0108e18:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e1b:	8d 48 04             	lea    0x4(%eax),%ecx
c0108e1e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108e23:	89 c8                	mov    %ecx,%eax
c0108e25:	f7 ea                	imul   %edx
c0108e27:	d1 fa                	sar    %edx
c0108e29:	89 c8                	mov    %ecx,%eax
c0108e2b:	c1 f8 1f             	sar    $0x1f,%eax
c0108e2e:	29 c2                	sub    %eax,%edx
c0108e30:	89 d0                	mov    %edx,%eax
c0108e32:	89 c2                	mov    %eax,%edx
c0108e34:	c1 e2 02             	shl    $0x2,%edx
c0108e37:	01 c2                	add    %eax,%edx
c0108e39:	89 c8                	mov    %ecx,%eax
c0108e3b:	29 d0                	sub    %edx,%eax
c0108e3d:	83 ec 0c             	sub    $0xc,%esp
c0108e40:	50                   	push   %eax
c0108e41:	e8 26 fe ff ff       	call   c0108c6c <phi_test_condvar>
c0108e46:	83 c4 10             	add    $0x10,%esp
      phi_test_condvar(RIGHT);
c0108e49:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e4c:	8d 48 01             	lea    0x1(%eax),%ecx
c0108e4f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108e54:	89 c8                	mov    %ecx,%eax
c0108e56:	f7 ea                	imul   %edx
c0108e58:	d1 fa                	sar    %edx
c0108e5a:	89 c8                	mov    %ecx,%eax
c0108e5c:	c1 f8 1f             	sar    $0x1f,%eax
c0108e5f:	29 c2                	sub    %eax,%edx
c0108e61:	89 d0                	mov    %edx,%eax
c0108e63:	89 c2                	mov    %eax,%edx
c0108e65:	c1 e2 02             	shl    $0x2,%edx
c0108e68:	01 c2                	add    %eax,%edx
c0108e6a:	89 c8                	mov    %ecx,%eax
c0108e6c:	29 d0                	sub    %edx,%eax
c0108e6e:	83 ec 0c             	sub    $0xc,%esp
c0108e71:	50                   	push   %eax
c0108e72:	e8 f5 fd ff ff       	call   c0108c6c <phi_test_condvar>
c0108e77:	83 c4 10             	add    $0x10,%esp
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0108e7a:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108e7f:	8b 40 18             	mov    0x18(%eax),%eax
c0108e82:	85 c0                	test   %eax,%eax
c0108e84:	7e 16                	jle    c0108e9c <phi_put_forks_condvar+0xa9>
        up(&(mtp->next));
c0108e86:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108e8b:	83 c0 0c             	add    $0xc,%eax
c0108e8e:	83 ec 0c             	sub    $0xc,%esp
c0108e91:	50                   	push   %eax
c0108e92:	e8 18 08 00 00       	call   c01096af <up>
c0108e97:	83 c4 10             	add    $0x10,%esp
     else
        up(&(mtp->mutex));
}
c0108e9a:	eb 11                	jmp    c0108ead <phi_put_forks_condvar+0xba>
      phi_test_condvar(RIGHT);
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
        up(&(mtp->next));
     else
        up(&(mtp->mutex));
c0108e9c:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108ea1:	83 ec 0c             	sub    $0xc,%esp
c0108ea4:	50                   	push   %eax
c0108ea5:	e8 05 08 00 00       	call   c01096af <up>
c0108eaa:	83 c4 10             	add    $0x10,%esp
}
c0108ead:	90                   	nop
c0108eae:	c9                   	leave  
c0108eaf:	c3                   	ret    

c0108eb0 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0108eb0:	55                   	push   %ebp
c0108eb1:	89 e5                	mov    %esp,%ebp
c0108eb3:	83 ec 18             	sub    $0x18,%esp
  
    int i, iter=0;
c0108eb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ec0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0108ec3:	83 ec 08             	sub    $0x8,%esp
c0108ec6:	ff 75 f0             	pushl  -0x10(%ebp)
c0108ec9:	68 18 64 11 c0       	push   $0xc0116418
c0108ece:	e8 ac 74 ff ff       	call   c010037f <cprintf>
c0108ed3:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108ed6:	eb 62                	jmp    c0108f3a <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0108ed8:	83 ec 04             	sub    $0x4,%esp
c0108edb:	ff 75 f0             	pushl  -0x10(%ebp)
c0108ede:	ff 75 f4             	pushl  -0xc(%ebp)
c0108ee1:	68 38 64 11 c0       	push   $0xc0116438
c0108ee6:	e8 94 74 ff ff       	call   c010037f <cprintf>
c0108eeb:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108eee:	83 ec 0c             	sub    $0xc,%esp
c0108ef1:	6a 0a                	push   $0xa
c0108ef3:	e8 85 46 00 00       	call   c010d57d <do_sleep>
c0108ef8:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_condvar(i); 
c0108efb:	83 ec 0c             	sub    $0xc,%esp
c0108efe:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f01:	e8 3f fe ff ff       	call   c0108d45 <phi_take_forks_condvar>
c0108f06:	83 c4 10             	add    $0x10,%esp
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0108f09:	83 ec 04             	sub    $0x4,%esp
c0108f0c:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f0f:	ff 75 f4             	pushl  -0xc(%ebp)
c0108f12:	68 68 64 11 c0       	push   $0xc0116468
c0108f17:	e8 63 74 ff ff       	call   c010037f <cprintf>
c0108f1c:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108f1f:	83 ec 0c             	sub    $0xc,%esp
c0108f22:	6a 0a                	push   $0xa
c0108f24:	e8 54 46 00 00       	call   c010d57d <do_sleep>
c0108f29:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_condvar(i); 
c0108f2c:	83 ec 0c             	sub    $0xc,%esp
c0108f2f:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f32:	e8 bc fe ff ff       	call   c0108df3 <phi_put_forks_condvar>
c0108f37:	83 c4 10             	add    $0x10,%esp
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0108f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f3d:	8d 50 01             	lea    0x1(%eax),%edx
c0108f40:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108f43:	83 f8 03             	cmp    $0x3,%eax
c0108f46:	7e 90                	jle    c0108ed8 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0108f48:	83 ec 08             	sub    $0x8,%esp
c0108f4b:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f4e:	68 98 64 11 c0       	push   $0xc0116498
c0108f53:	e8 27 74 ff ff       	call   c010037f <cprintf>
c0108f58:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108f5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f60:	c9                   	leave  
c0108f61:	c3                   	ret    

c0108f62 <check_sync>:

void check_sync(void){
c0108f62:	55                   	push   %ebp
c0108f63:	89 e5                	mov    %esp,%ebp
c0108f65:	83 ec 18             	sub    $0x18,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0108f68:	83 ec 08             	sub    $0x8,%esp
c0108f6b:	6a 01                	push   $0x1
c0108f6d:	68 48 52 15 c0       	push   $0xc0155248
c0108f72:	e8 cb 05 00 00       	call   c0109542 <sem_init>
c0108f77:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0108f7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108f81:	e9 8e 00 00 00       	jmp    c0109014 <check_sync+0xb2>
        sem_init(&s[i], 0);
c0108f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108f89:	89 d0                	mov    %edx,%eax
c0108f8b:	01 c0                	add    %eax,%eax
c0108f8d:	01 d0                	add    %edx,%eax
c0108f8f:	c1 e0 02             	shl    $0x2,%eax
c0108f92:	05 c0 52 15 c0       	add    $0xc01552c0,%eax
c0108f97:	83 ec 08             	sub    $0x8,%esp
c0108f9a:	6a 00                	push   $0x0
c0108f9c:	50                   	push   %eax
c0108f9d:	e8 a0 05 00 00       	call   c0109542 <sem_init>
c0108fa2:	83 c4 10             	add    $0x10,%esp
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0108fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fa8:	83 ec 04             	sub    $0x4,%esp
c0108fab:	6a 00                	push   $0x0
c0108fad:	50                   	push   %eax
c0108fae:	68 ba 8b 10 c0       	push   $0xc0108bba
c0108fb3:	e8 6e 2c 00 00       	call   c010bc26 <kernel_thread>
c0108fb8:	83 c4 10             	add    $0x10,%esp
c0108fbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0108fbe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108fc2:	7f 17                	jg     c0108fdb <check_sync+0x79>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0108fc4:	83 ec 04             	sub    $0x4,%esp
c0108fc7:	68 b8 64 11 c0       	push   $0xc01164b8
c0108fcc:	68 fe 00 00 00       	push   $0xfe
c0108fd1:	68 ea 64 11 c0       	push   $0xc01164ea
c0108fd6:	e8 0a 75 ff ff       	call   c01004e5 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0108fdb:	83 ec 0c             	sub    $0xc,%esp
c0108fde:	ff 75 f0             	pushl  -0x10(%ebp)
c0108fe1:	e8 ce 2b 00 00       	call   c010bbb4 <find_proc>
c0108fe6:	83 c4 10             	add    $0x10,%esp
c0108fe9:	89 c2                	mov    %eax,%edx
c0108feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fee:	89 14 85 94 52 15 c0 	mov    %edx,-0x3feaad6c(,%eax,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0108ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ff8:	8b 04 85 94 52 15 c0 	mov    -0x3feaad6c(,%eax,4),%eax
c0108fff:	83 ec 08             	sub    $0x8,%esp
c0109002:	68 01 65 11 c0       	push   $0xc0116501
c0109007:	50                   	push   %eax
c0109008:	e8 9a 27 00 00       	call   c010b7a7 <set_proc_name>
c010900d:	83 c4 10             	add    $0x10,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0109010:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109014:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109018:	0f 8e 68 ff ff ff    	jle    c0108f86 <check_sync+0x24>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c010901e:	83 ec 08             	sub    $0x8,%esp
c0109021:	6a 05                	push   $0x5
c0109023:	68 60 52 15 c0       	push   $0xc0155260
c0109028:	e8 1e 07 00 00       	call   c010974b <monitor_init>
c010902d:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0109030:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109037:	eb 7d                	jmp    c01090b6 <check_sync+0x154>
        state_condvar[i]=THINKING;
c0109039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010903c:	c7 04 85 80 52 15 c0 	movl   $0x0,-0x3feaad80(,%eax,4)
c0109043:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109047:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010904a:	83 ec 04             	sub    $0x4,%esp
c010904d:	6a 00                	push   $0x0
c010904f:	50                   	push   %eax
c0109050:	68 b0 8e 10 c0       	push   $0xc0108eb0
c0109055:	e8 cc 2b 00 00       	call   c010bc26 <kernel_thread>
c010905a:	83 c4 10             	add    $0x10,%esp
c010905d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109060:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109064:	7f 17                	jg     c010907d <check_sync+0x11b>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109066:	83 ec 04             	sub    $0x4,%esp
c0109069:	68 18 65 11 c0       	push   $0xc0116518
c010906e:	68 0a 01 00 00       	push   $0x10a
c0109073:	68 ea 64 11 c0       	push   $0xc01164ea
c0109078:	e8 68 74 ff ff       	call   c01004e5 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c010907d:	83 ec 0c             	sub    $0xc,%esp
c0109080:	ff 75 ec             	pushl  -0x14(%ebp)
c0109083:	e8 2c 2b 00 00       	call   c010bbb4 <find_proc>
c0109088:	83 c4 10             	add    $0x10,%esp
c010908b:	89 c2                	mov    %eax,%edx
c010908d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109090:	89 14 85 34 52 15 c0 	mov    %edx,-0x3feaadcc(,%eax,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109097:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010909a:	8b 04 85 34 52 15 c0 	mov    -0x3feaadcc(,%eax,4),%eax
c01090a1:	83 ec 08             	sub    $0x8,%esp
c01090a4:	68 48 65 11 c0       	push   $0xc0116548
c01090a9:	50                   	push   %eax
c01090aa:	e8 f8 26 00 00       	call   c010b7a7 <set_proc_name>
c01090af:	83 c4 10             	add    $0x10,%esp
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01090b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01090b6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01090ba:	0f 8e 79 ff ff ff    	jle    c0109039 <check_sync+0xd7>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01090c0:	90                   	nop
c01090c1:	c9                   	leave  
c01090c2:	c3                   	ret    

c01090c3 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c01090c3:	55                   	push   %ebp
c01090c4:	89 e5                	mov    %esp,%ebp
c01090c6:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c01090c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01090cc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090cf:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c01090d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01090d4:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c01090db:	8b 45 08             	mov    0x8(%ebp),%eax
c01090de:	83 c0 0c             	add    $0xc,%eax
c01090e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01090e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090e7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01090ea:	89 50 04             	mov    %edx,0x4(%eax)
c01090ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090f0:	8b 50 04             	mov    0x4(%eax),%edx
c01090f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090f6:	89 10                	mov    %edx,(%eax)
}
c01090f8:	90                   	nop
c01090f9:	c9                   	leave  
c01090fa:	c3                   	ret    

c01090fb <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c01090fb:	55                   	push   %ebp
c01090fc:	89 e5                	mov    %esp,%ebp
c01090fe:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109101:	8b 45 08             	mov    0x8(%ebp),%eax
c0109104:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109107:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010910a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010910d:	89 50 04             	mov    %edx,0x4(%eax)
c0109110:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109113:	8b 50 04             	mov    0x4(%eax),%edx
c0109116:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109119:	89 10                	mov    %edx,(%eax)
}
c010911b:	90                   	nop
c010911c:	c9                   	leave  
c010911d:	c3                   	ret    

c010911e <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c010911e:	55                   	push   %ebp
c010911f:	89 e5                	mov    %esp,%ebp
c0109121:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109124:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109127:	83 c0 0c             	add    $0xc,%eax
c010912a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010912d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109130:	8b 40 04             	mov    0x4(%eax),%eax
c0109133:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109136:	0f 94 c0             	sete   %al
c0109139:	0f b6 c0             	movzbl %al,%eax
c010913c:	85 c0                	test   %eax,%eax
c010913e:	74 09                	je     c0109149 <wait_queue_add+0x2b>
c0109140:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109143:	8b 00                	mov    (%eax),%eax
c0109145:	85 c0                	test   %eax,%eax
c0109147:	75 16                	jne    c010915f <wait_queue_add+0x41>
c0109149:	68 64 65 11 c0       	push   $0xc0116564
c010914e:	68 99 65 11 c0       	push   $0xc0116599
c0109153:	6a 15                	push   $0x15
c0109155:	68 ae 65 11 c0       	push   $0xc01165ae
c010915a:	e8 86 73 ff ff       	call   c01004e5 <__panic>
    wait->wait_queue = queue;
c010915f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109162:	8b 55 08             	mov    0x8(%ebp),%edx
c0109165:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109168:	8b 45 0c             	mov    0xc(%ebp),%eax
c010916b:	8d 50 0c             	lea    0xc(%eax),%edx
c010916e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109171:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109174:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010917a:	8b 00                	mov    (%eax),%eax
c010917c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010917f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109182:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109185:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109188:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010918b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010918e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109191:	89 10                	mov    %edx,(%eax)
c0109193:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109196:	8b 10                	mov    (%eax),%edx
c0109198:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010919b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010919e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01091a4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01091a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01091ad:	89 10                	mov    %edx,(%eax)
}
c01091af:	90                   	nop
c01091b0:	c9                   	leave  
c01091b1:	c3                   	ret    

c01091b2 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c01091b2:	55                   	push   %ebp
c01091b3:	89 e5                	mov    %esp,%ebp
c01091b5:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c01091b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091bb:	83 c0 0c             	add    $0xc,%eax
c01091be:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01091c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091c4:	8b 40 04             	mov    0x4(%eax),%eax
c01091c7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01091ca:	0f 94 c0             	sete   %al
c01091cd:	0f b6 c0             	movzbl %al,%eax
c01091d0:	85 c0                	test   %eax,%eax
c01091d2:	75 0b                	jne    c01091df <wait_queue_del+0x2d>
c01091d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091d7:	8b 40 08             	mov    0x8(%eax),%eax
c01091da:	3b 45 08             	cmp    0x8(%ebp),%eax
c01091dd:	74 16                	je     c01091f5 <wait_queue_del+0x43>
c01091df:	68 c0 65 11 c0       	push   $0xc01165c0
c01091e4:	68 99 65 11 c0       	push   $0xc0116599
c01091e9:	6a 1c                	push   $0x1c
c01091eb:	68 ae 65 11 c0       	push   $0xc01165ae
c01091f0:	e8 f0 72 ff ff       	call   c01004e5 <__panic>
    list_del_init(&(wait->wait_link));
c01091f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091f8:	83 c0 0c             	add    $0xc,%eax
c01091fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109201:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109204:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109207:	8b 40 04             	mov    0x4(%eax),%eax
c010920a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010920d:	8b 12                	mov    (%edx),%edx
c010920f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109212:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109215:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109218:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010921b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010921e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109221:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109224:	89 10                	mov    %edx,(%eax)
c0109226:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109229:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010922c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010922f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109232:	89 50 04             	mov    %edx,0x4(%eax)
c0109235:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109238:	8b 50 04             	mov    0x4(%eax),%edx
c010923b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010923e:	89 10                	mov    %edx,(%eax)
}
c0109240:	90                   	nop
c0109241:	c9                   	leave  
c0109242:	c3                   	ret    

c0109243 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109243:	55                   	push   %ebp
c0109244:	89 e5                	mov    %esp,%ebp
c0109246:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109249:	8b 45 0c             	mov    0xc(%ebp),%eax
c010924c:	83 c0 0c             	add    $0xc,%eax
c010924f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109252:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109255:	8b 40 04             	mov    0x4(%eax),%eax
c0109258:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010925b:	0f 94 c0             	sete   %al
c010925e:	0f b6 c0             	movzbl %al,%eax
c0109261:	85 c0                	test   %eax,%eax
c0109263:	75 0b                	jne    c0109270 <wait_queue_next+0x2d>
c0109265:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109268:	8b 40 08             	mov    0x8(%eax),%eax
c010926b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010926e:	74 16                	je     c0109286 <wait_queue_next+0x43>
c0109270:	68 c0 65 11 c0       	push   $0xc01165c0
c0109275:	68 99 65 11 c0       	push   $0xc0116599
c010927a:	6a 22                	push   $0x22
c010927c:	68 ae 65 11 c0       	push   $0xc01165ae
c0109281:	e8 5f 72 ff ff       	call   c01004e5 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109286:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109289:	83 c0 0c             	add    $0xc,%eax
c010928c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010928f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109292:	8b 40 04             	mov    0x4(%eax),%eax
c0109295:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c0109298:	8b 45 08             	mov    0x8(%ebp),%eax
c010929b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010929e:	74 08                	je     c01092a8 <wait_queue_next+0x65>
        return le2wait(le, wait_link);
c01092a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092a3:	83 e8 0c             	sub    $0xc,%eax
c01092a6:	eb 05                	jmp    c01092ad <wait_queue_next+0x6a>
    }
    return NULL;
c01092a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092ad:	c9                   	leave  
c01092ae:	c3                   	ret    

c01092af <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c01092af:	55                   	push   %ebp
c01092b0:	89 e5                	mov    %esp,%ebp
c01092b2:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c01092b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092b8:	83 c0 0c             	add    $0xc,%eax
c01092bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01092be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092c1:	8b 40 04             	mov    0x4(%eax),%eax
c01092c4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01092c7:	0f 94 c0             	sete   %al
c01092ca:	0f b6 c0             	movzbl %al,%eax
c01092cd:	85 c0                	test   %eax,%eax
c01092cf:	75 0b                	jne    c01092dc <wait_queue_prev+0x2d>
c01092d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092d4:	8b 40 08             	mov    0x8(%eax),%eax
c01092d7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01092da:	74 16                	je     c01092f2 <wait_queue_prev+0x43>
c01092dc:	68 c0 65 11 c0       	push   $0xc01165c0
c01092e1:	68 99 65 11 c0       	push   $0xc0116599
c01092e6:	6a 2c                	push   $0x2c
c01092e8:	68 ae 65 11 c0       	push   $0xc01165ae
c01092ed:	e8 f3 71 ff ff       	call   c01004e5 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c01092f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092f5:	83 c0 0c             	add    $0xc,%eax
c01092f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01092fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092fe:	8b 00                	mov    (%eax),%eax
c0109300:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c0109303:	8b 45 08             	mov    0x8(%ebp),%eax
c0109306:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109309:	74 08                	je     c0109313 <wait_queue_prev+0x64>
        return le2wait(le, wait_link);
c010930b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010930e:	83 e8 0c             	sub    $0xc,%eax
c0109311:	eb 05                	jmp    c0109318 <wait_queue_prev+0x69>
    }
    return NULL;
c0109313:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109318:	c9                   	leave  
c0109319:	c3                   	ret    

c010931a <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010931a:	55                   	push   %ebp
c010931b:	89 e5                	mov    %esp,%ebp
c010931d:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109320:	8b 45 08             	mov    0x8(%ebp),%eax
c0109323:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109326:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109329:	8b 40 04             	mov    0x4(%eax),%eax
c010932c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010932f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109332:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109335:	74 08                	je     c010933f <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109337:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010933a:	83 e8 0c             	sub    $0xc,%eax
c010933d:	eb 05                	jmp    c0109344 <wait_queue_first+0x2a>
    }
    return NULL;
c010933f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109344:	c9                   	leave  
c0109345:	c3                   	ret    

c0109346 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109346:	55                   	push   %ebp
c0109347:	89 e5                	mov    %esp,%ebp
c0109349:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010934c:	8b 45 08             	mov    0x8(%ebp),%eax
c010934f:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109352:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109355:	8b 00                	mov    (%eax),%eax
c0109357:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010935a:	8b 45 08             	mov    0x8(%ebp),%eax
c010935d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109360:	74 08                	je     c010936a <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109362:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109365:	83 e8 0c             	sub    $0xc,%eax
c0109368:	eb 05                	jmp    c010936f <wait_queue_last+0x29>
    }
    return NULL;
c010936a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010936f:	c9                   	leave  
c0109370:	c3                   	ret    

c0109371 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109371:	55                   	push   %ebp
c0109372:	89 e5                	mov    %esp,%ebp
c0109374:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109377:	8b 45 08             	mov    0x8(%ebp),%eax
c010937a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010937d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109380:	8b 40 04             	mov    0x4(%eax),%eax
c0109383:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109386:	0f 94 c0             	sete   %al
c0109389:	0f b6 c0             	movzbl %al,%eax
c010938c:	90                   	nop
}
c010938d:	c9                   	leave  
c010938e:	c3                   	ret    

c010938f <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010938f:	55                   	push   %ebp
c0109390:	89 e5                	mov    %esp,%ebp
c0109392:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109395:	8b 45 08             	mov    0x8(%ebp),%eax
c0109398:	83 c0 0c             	add    $0xc,%eax
c010939b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010939e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01093a1:	8b 40 04             	mov    0x4(%eax),%eax
c01093a4:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01093a7:	0f 94 c0             	sete   %al
c01093aa:	0f b6 c0             	movzbl %al,%eax
c01093ad:	85 c0                	test   %eax,%eax
c01093af:	0f 94 c0             	sete   %al
c01093b2:	0f b6 c0             	movzbl %al,%eax
}
c01093b5:	c9                   	leave  
c01093b6:	c3                   	ret    

c01093b7 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c01093b7:	55                   	push   %ebp
c01093b8:	89 e5                	mov    %esp,%ebp
c01093ba:	83 ec 08             	sub    $0x8,%esp
    if (del) {
c01093bd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01093c1:	74 11                	je     c01093d4 <wakeup_wait+0x1d>
        wait_queue_del(queue, wait);
c01093c3:	83 ec 08             	sub    $0x8,%esp
c01093c6:	ff 75 0c             	pushl  0xc(%ebp)
c01093c9:	ff 75 08             	pushl  0x8(%ebp)
c01093cc:	e8 e1 fd ff ff       	call   c01091b2 <wait_queue_del>
c01093d1:	83 c4 10             	add    $0x10,%esp
    }
    wait->wakeup_flags = wakeup_flags;
c01093d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093d7:	8b 55 10             	mov    0x10(%ebp),%edx
c01093da:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c01093dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093e0:	8b 00                	mov    (%eax),%eax
c01093e2:	83 ec 0c             	sub    $0xc,%esp
c01093e5:	50                   	push   %eax
c01093e6:	e8 72 43 00 00       	call   c010d75d <wakeup_proc>
c01093eb:	83 c4 10             	add    $0x10,%esp
}
c01093ee:	90                   	nop
c01093ef:	c9                   	leave  
c01093f0:	c3                   	ret    

c01093f1 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c01093f1:	55                   	push   %ebp
c01093f2:	89 e5                	mov    %esp,%ebp
c01093f4:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c01093f7:	ff 75 08             	pushl  0x8(%ebp)
c01093fa:	e8 1b ff ff ff       	call   c010931a <wait_queue_first>
c01093ff:	83 c4 04             	add    $0x4,%esp
c0109402:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109409:	74 14                	je     c010941f <wakeup_first+0x2e>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010940b:	ff 75 10             	pushl  0x10(%ebp)
c010940e:	ff 75 0c             	pushl  0xc(%ebp)
c0109411:	ff 75 f4             	pushl  -0xc(%ebp)
c0109414:	ff 75 08             	pushl  0x8(%ebp)
c0109417:	e8 9b ff ff ff       	call   c01093b7 <wakeup_wait>
c010941c:	83 c4 10             	add    $0x10,%esp
    }
}
c010941f:	90                   	nop
c0109420:	c9                   	leave  
c0109421:	c3                   	ret    

c0109422 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109422:	55                   	push   %ebp
c0109423:	89 e5                	mov    %esp,%ebp
c0109425:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109428:	ff 75 08             	pushl  0x8(%ebp)
c010942b:	e8 ea fe ff ff       	call   c010931a <wait_queue_first>
c0109430:	83 c4 04             	add    $0x4,%esp
c0109433:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109436:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010943a:	74 5f                	je     c010949b <wakeup_queue+0x79>
        if (del) {
c010943c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109440:	74 2c                	je     c010946e <wakeup_queue+0x4c>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109442:	6a 01                	push   $0x1
c0109444:	ff 75 0c             	pushl  0xc(%ebp)
c0109447:	ff 75 f4             	pushl  -0xc(%ebp)
c010944a:	ff 75 08             	pushl  0x8(%ebp)
c010944d:	e8 65 ff ff ff       	call   c01093b7 <wakeup_wait>
c0109452:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109455:	83 ec 0c             	sub    $0xc,%esp
c0109458:	ff 75 08             	pushl  0x8(%ebp)
c010945b:	e8 ba fe ff ff       	call   c010931a <wait_queue_first>
c0109460:	83 c4 10             	add    $0x10,%esp
c0109463:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109466:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010946a:	75 d6                	jne    c0109442 <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c010946c:	eb 2d                	jmp    c010949b <wakeup_queue+0x79>
                wakeup_wait(queue, wait, wakeup_flags, 1);
            } while ((wait = wait_queue_first(queue)) != NULL);
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010946e:	6a 00                	push   $0x0
c0109470:	ff 75 0c             	pushl  0xc(%ebp)
c0109473:	ff 75 f4             	pushl  -0xc(%ebp)
c0109476:	ff 75 08             	pushl  0x8(%ebp)
c0109479:	e8 39 ff ff ff       	call   c01093b7 <wakeup_wait>
c010947e:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109481:	83 ec 08             	sub    $0x8,%esp
c0109484:	ff 75 f4             	pushl  -0xc(%ebp)
c0109487:	ff 75 08             	pushl  0x8(%ebp)
c010948a:	e8 b4 fd ff ff       	call   c0109243 <wait_queue_next>
c010948f:	83 c4 10             	add    $0x10,%esp
c0109492:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109499:	75 d3                	jne    c010946e <wakeup_queue+0x4c>
        }
    }
}
c010949b:	90                   	nop
c010949c:	c9                   	leave  
c010949d:	c3                   	ret    

c010949e <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010949e:	55                   	push   %ebp
c010949f:	89 e5                	mov    %esp,%ebp
c01094a1:	83 ec 08             	sub    $0x8,%esp
    assert(current != NULL);
c01094a4:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01094a9:	85 c0                	test   %eax,%eax
c01094ab:	75 16                	jne    c01094c3 <wait_current_set+0x25>
c01094ad:	68 fd 65 11 c0       	push   $0xc01165fd
c01094b2:	68 99 65 11 c0       	push   $0xc0116599
c01094b7:	6a 74                	push   $0x74
c01094b9:	68 ae 65 11 c0       	push   $0xc01165ae
c01094be:	e8 22 70 ff ff       	call   c01004e5 <__panic>
    wait_init(wait, current);
c01094c3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01094c8:	83 ec 08             	sub    $0x8,%esp
c01094cb:	50                   	push   %eax
c01094cc:	ff 75 0c             	pushl  0xc(%ebp)
c01094cf:	e8 ef fb ff ff       	call   c01090c3 <wait_init>
c01094d4:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_SLEEPING;
c01094d7:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01094dc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c01094e2:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01094e7:	8b 55 10             	mov    0x10(%ebp),%edx
c01094ea:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c01094f0:	83 ec 08             	sub    $0x8,%esp
c01094f3:	ff 75 0c             	pushl  0xc(%ebp)
c01094f6:	ff 75 08             	pushl  0x8(%ebp)
c01094f9:	e8 20 fc ff ff       	call   c010911e <wait_queue_add>
c01094fe:	83 c4 10             	add    $0x10,%esp
}
c0109501:	90                   	nop
c0109502:	c9                   	leave  
c0109503:	c3                   	ret    

c0109504 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109504:	55                   	push   %ebp
c0109505:	89 e5                	mov    %esp,%ebp
c0109507:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010950a:	9c                   	pushf  
c010950b:	58                   	pop    %eax
c010950c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010950f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109512:	25 00 02 00 00       	and    $0x200,%eax
c0109517:	85 c0                	test   %eax,%eax
c0109519:	74 0c                	je     c0109527 <__intr_save+0x23>
        intr_disable();
c010951b:	e8 87 8d ff ff       	call   c01022a7 <intr_disable>
        return 1;
c0109520:	b8 01 00 00 00       	mov    $0x1,%eax
c0109525:	eb 05                	jmp    c010952c <__intr_save+0x28>
    }
    return 0;
c0109527:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010952c:	c9                   	leave  
c010952d:	c3                   	ret    

c010952e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010952e:	55                   	push   %ebp
c010952f:	89 e5                	mov    %esp,%ebp
c0109531:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109538:	74 05                	je     c010953f <__intr_restore+0x11>
        intr_enable();
c010953a:	e8 61 8d ff ff       	call   c01022a0 <intr_enable>
    }
}
c010953f:	90                   	nop
c0109540:	c9                   	leave  
c0109541:	c3                   	ret    

c0109542 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109542:	55                   	push   %ebp
c0109543:	89 e5                	mov    %esp,%ebp
c0109545:	83 ec 08             	sub    $0x8,%esp
    sem->value = value;
c0109548:	8b 45 08             	mov    0x8(%ebp),%eax
c010954b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010954e:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109550:	8b 45 08             	mov    0x8(%ebp),%eax
c0109553:	83 c0 04             	add    $0x4,%eax
c0109556:	83 ec 0c             	sub    $0xc,%esp
c0109559:	50                   	push   %eax
c010955a:	e8 9c fb ff ff       	call   c01090fb <wait_queue_init>
c010955f:	83 c4 10             	add    $0x10,%esp
}
c0109562:	90                   	nop
c0109563:	c9                   	leave  
c0109564:	c3                   	ret    

c0109565 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109565:	55                   	push   %ebp
c0109566:	89 e5                	mov    %esp,%ebp
c0109568:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010956b:	e8 94 ff ff ff       	call   c0109504 <__intr_save>
c0109570:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109573:	8b 45 08             	mov    0x8(%ebp),%eax
c0109576:	83 c0 04             	add    $0x4,%eax
c0109579:	83 ec 0c             	sub    $0xc,%esp
c010957c:	50                   	push   %eax
c010957d:	e8 98 fd ff ff       	call   c010931a <wait_queue_first>
c0109582:	83 c4 10             	add    $0x10,%esp
c0109585:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109588:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010958c:	75 0f                	jne    c010959d <__up+0x38>
            sem->value ++;
c010958e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109591:	8b 00                	mov    (%eax),%eax
c0109593:	8d 50 01             	lea    0x1(%eax),%edx
c0109596:	8b 45 08             	mov    0x8(%ebp),%eax
c0109599:	89 10                	mov    %edx,(%eax)
c010959b:	eb 3d                	jmp    c01095da <__up+0x75>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c010959d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095a0:	8b 00                	mov    (%eax),%eax
c01095a2:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01095a8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01095ab:	74 16                	je     c01095c3 <__up+0x5e>
c01095ad:	68 10 66 11 c0       	push   $0xc0116610
c01095b2:	68 35 66 11 c0       	push   $0xc0116635
c01095b7:	6a 19                	push   $0x19
c01095b9:	68 4a 66 11 c0       	push   $0xc011664a
c01095be:	e8 22 6f ff ff       	call   c01004e5 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c01095c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c6:	83 c0 04             	add    $0x4,%eax
c01095c9:	6a 01                	push   $0x1
c01095cb:	ff 75 0c             	pushl  0xc(%ebp)
c01095ce:	ff 75 f0             	pushl  -0x10(%ebp)
c01095d1:	50                   	push   %eax
c01095d2:	e8 e0 fd ff ff       	call   c01093b7 <wakeup_wait>
c01095d7:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c01095da:	83 ec 0c             	sub    $0xc,%esp
c01095dd:	ff 75 f4             	pushl  -0xc(%ebp)
c01095e0:	e8 49 ff ff ff       	call   c010952e <__intr_restore>
c01095e5:	83 c4 10             	add    $0x10,%esp
}
c01095e8:	90                   	nop
c01095e9:	c9                   	leave  
c01095ea:	c3                   	ret    

c01095eb <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c01095eb:	55                   	push   %ebp
c01095ec:	89 e5                	mov    %esp,%ebp
c01095ee:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01095f1:	e8 0e ff ff ff       	call   c0109504 <__intr_save>
c01095f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c01095f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fc:	8b 00                	mov    (%eax),%eax
c01095fe:	85 c0                	test   %eax,%eax
c0109600:	7e 25                	jle    c0109627 <__down+0x3c>
        sem->value --;
c0109602:	8b 45 08             	mov    0x8(%ebp),%eax
c0109605:	8b 00                	mov    (%eax),%eax
c0109607:	8d 50 ff             	lea    -0x1(%eax),%edx
c010960a:	8b 45 08             	mov    0x8(%ebp),%eax
c010960d:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c010960f:	83 ec 0c             	sub    $0xc,%esp
c0109612:	ff 75 f4             	pushl  -0xc(%ebp)
c0109615:	e8 14 ff ff ff       	call   c010952e <__intr_restore>
c010961a:	83 c4 10             	add    $0x10,%esp
        return 0;
c010961d:	b8 00 00 00 00       	mov    $0x0,%eax
c0109622:	e9 86 00 00 00       	jmp    c01096ad <__down+0xc2>
    }
    wait_t __wait, *wait = &__wait;
c0109627:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010962a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c010962d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109630:	83 c0 04             	add    $0x4,%eax
c0109633:	83 ec 04             	sub    $0x4,%esp
c0109636:	ff 75 0c             	pushl  0xc(%ebp)
c0109639:	ff 75 f0             	pushl  -0x10(%ebp)
c010963c:	50                   	push   %eax
c010963d:	e8 5c fe ff ff       	call   c010949e <wait_current_set>
c0109642:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0109645:	83 ec 0c             	sub    $0xc,%esp
c0109648:	ff 75 f4             	pushl  -0xc(%ebp)
c010964b:	e8 de fe ff ff       	call   c010952e <__intr_restore>
c0109650:	83 c4 10             	add    $0x10,%esp

    schedule();
c0109653:	e8 95 41 00 00       	call   c010d7ed <schedule>

    local_intr_save(intr_flag);
c0109658:	e8 a7 fe ff ff       	call   c0109504 <__intr_save>
c010965d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109660:	83 ec 0c             	sub    $0xc,%esp
c0109663:	ff 75 f0             	pushl  -0x10(%ebp)
c0109666:	e8 24 fd ff ff       	call   c010938f <wait_in_queue>
c010966b:	83 c4 10             	add    $0x10,%esp
c010966e:	85 c0                	test   %eax,%eax
c0109670:	74 15                	je     c0109687 <__down+0x9c>
c0109672:	8b 45 08             	mov    0x8(%ebp),%eax
c0109675:	83 c0 04             	add    $0x4,%eax
c0109678:	83 ec 08             	sub    $0x8,%esp
c010967b:	ff 75 f0             	pushl  -0x10(%ebp)
c010967e:	50                   	push   %eax
c010967f:	e8 2e fb ff ff       	call   c01091b2 <wait_queue_del>
c0109684:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0109687:	83 ec 0c             	sub    $0xc,%esp
c010968a:	ff 75 f4             	pushl  -0xc(%ebp)
c010968d:	e8 9c fe ff ff       	call   c010952e <__intr_restore>
c0109692:	83 c4 10             	add    $0x10,%esp

    if (wait->wakeup_flags != wait_state) {
c0109695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109698:	8b 40 04             	mov    0x4(%eax),%eax
c010969b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010969e:	74 08                	je     c01096a8 <__down+0xbd>
        return wait->wakeup_flags;
c01096a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096a3:	8b 40 04             	mov    0x4(%eax),%eax
c01096a6:	eb 05                	jmp    c01096ad <__down+0xc2>
    }
    return 0;
c01096a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01096ad:	c9                   	leave  
c01096ae:	c3                   	ret    

c01096af <up>:

void
up(semaphore_t *sem) {
c01096af:	55                   	push   %ebp
c01096b0:	89 e5                	mov    %esp,%ebp
c01096b2:	83 ec 08             	sub    $0x8,%esp
    __up(sem, WT_KSEM);
c01096b5:	83 ec 08             	sub    $0x8,%esp
c01096b8:	68 00 01 00 00       	push   $0x100
c01096bd:	ff 75 08             	pushl  0x8(%ebp)
c01096c0:	e8 a0 fe ff ff       	call   c0109565 <__up>
c01096c5:	83 c4 10             	add    $0x10,%esp
}
c01096c8:	90                   	nop
c01096c9:	c9                   	leave  
c01096ca:	c3                   	ret    

c01096cb <down>:

void
down(semaphore_t *sem) {
c01096cb:	55                   	push   %ebp
c01096cc:	89 e5                	mov    %esp,%ebp
c01096ce:	83 ec 18             	sub    $0x18,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c01096d1:	83 ec 08             	sub    $0x8,%esp
c01096d4:	68 00 01 00 00       	push   $0x100
c01096d9:	ff 75 08             	pushl  0x8(%ebp)
c01096dc:	e8 0a ff ff ff       	call   c01095eb <__down>
c01096e1:	83 c4 10             	add    $0x10,%esp
c01096e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c01096e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01096eb:	74 16                	je     c0109703 <down+0x38>
c01096ed:	68 5a 66 11 c0       	push   $0xc011665a
c01096f2:	68 35 66 11 c0       	push   $0xc0116635
c01096f7:	6a 40                	push   $0x40
c01096f9:	68 4a 66 11 c0       	push   $0xc011664a
c01096fe:	e8 e2 6d ff ff       	call   c01004e5 <__panic>
}
c0109703:	90                   	nop
c0109704:	c9                   	leave  
c0109705:	c3                   	ret    

c0109706 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109706:	55                   	push   %ebp
c0109707:	89 e5                	mov    %esp,%ebp
c0109709:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag, ret = 0;
c010970c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109713:	e8 ec fd ff ff       	call   c0109504 <__intr_save>
c0109718:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c010971b:	8b 45 08             	mov    0x8(%ebp),%eax
c010971e:	8b 00                	mov    (%eax),%eax
c0109720:	85 c0                	test   %eax,%eax
c0109722:	7e 14                	jle    c0109738 <try_down+0x32>
        sem->value --, ret = 1;
c0109724:	8b 45 08             	mov    0x8(%ebp),%eax
c0109727:	8b 00                	mov    (%eax),%eax
c0109729:	8d 50 ff             	lea    -0x1(%eax),%edx
c010972c:	8b 45 08             	mov    0x8(%ebp),%eax
c010972f:	89 10                	mov    %edx,(%eax)
c0109731:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109738:	83 ec 0c             	sub    $0xc,%esp
c010973b:	ff 75 f0             	pushl  -0x10(%ebp)
c010973e:	e8 eb fd ff ff       	call   c010952e <__intr_restore>
c0109743:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109746:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109749:	c9                   	leave  
c010974a:	c3                   	ret    

c010974b <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010974b:	55                   	push   %ebp
c010974c:	89 e5                	mov    %esp,%ebp
c010974e:	83 ec 18             	sub    $0x18,%esp
    int i;
    assert(num_cv>0);
c0109751:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109755:	75 16                	jne    c010976d <monitor_init+0x22>
c0109757:	68 68 66 11 c0       	push   $0xc0116668
c010975c:	68 71 66 11 c0       	push   $0xc0116671
c0109761:	6a 0b                	push   $0xb
c0109763:	68 86 66 11 c0       	push   $0xc0116686
c0109768:	e8 78 6d ff ff       	call   c01004e5 <__panic>
    mtp->next_count = 0;
c010976d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109770:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109777:	8b 45 08             	mov    0x8(%ebp),%eax
c010977a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109781:	8b 45 08             	mov    0x8(%ebp),%eax
c0109784:	83 ec 08             	sub    $0x8,%esp
c0109787:	6a 01                	push   $0x1
c0109789:	50                   	push   %eax
c010978a:	e8 b3 fd ff ff       	call   c0109542 <sem_init>
c010978f:	83 c4 10             	add    $0x10,%esp
    sem_init(&(mtp->next), 0);
c0109792:	8b 45 08             	mov    0x8(%ebp),%eax
c0109795:	83 c0 0c             	add    $0xc,%eax
c0109798:	83 ec 08             	sub    $0x8,%esp
c010979b:	6a 00                	push   $0x0
c010979d:	50                   	push   %eax
c010979e:	e8 9f fd ff ff       	call   c0109542 <sem_init>
c01097a3:	83 c4 10             	add    $0x10,%esp
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01097a6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097a9:	89 d0                	mov    %edx,%eax
c01097ab:	c1 e0 02             	shl    $0x2,%eax
c01097ae:	01 d0                	add    %edx,%eax
c01097b0:	c1 e0 02             	shl    $0x2,%eax
c01097b3:	83 ec 0c             	sub    $0xc,%esp
c01097b6:	50                   	push   %eax
c01097b7:	e8 94 c0 ff ff       	call   c0105850 <kmalloc>
c01097bc:	83 c4 10             	add    $0x10,%esp
c01097bf:	89 c2                	mov    %eax,%edx
c01097c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c4:	89 50 1c             	mov    %edx,0x1c(%eax)
    assert(mtp->cv!=NULL);
c01097c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ca:	8b 40 1c             	mov    0x1c(%eax),%eax
c01097cd:	85 c0                	test   %eax,%eax
c01097cf:	75 16                	jne    c01097e7 <monitor_init+0x9c>
c01097d1:	68 9a 66 11 c0       	push   $0xc011669a
c01097d6:	68 71 66 11 c0       	push   $0xc0116671
c01097db:	6a 11                	push   $0x11
c01097dd:	68 86 66 11 c0       	push   $0xc0116686
c01097e2:	e8 fe 6c ff ff       	call   c01004e5 <__panic>
    for(i=0; i<num_cv; i++){
c01097e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097ee:	eb 5f                	jmp    c010984f <monitor_init+0x104>
        mtp->cv[i].count=0;
c01097f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01097f3:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01097f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097f9:	89 d0                	mov    %edx,%eax
c01097fb:	c1 e0 02             	shl    $0x2,%eax
c01097fe:	01 d0                	add    %edx,%eax
c0109800:	c1 e0 02             	shl    $0x2,%eax
c0109803:	01 c8                	add    %ecx,%eax
c0109805:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010980c:	8b 45 08             	mov    0x8(%ebp),%eax
c010980f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109812:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109815:	89 d0                	mov    %edx,%eax
c0109817:	c1 e0 02             	shl    $0x2,%eax
c010981a:	01 d0                	add    %edx,%eax
c010981c:	c1 e0 02             	shl    $0x2,%eax
c010981f:	01 c8                	add    %ecx,%eax
c0109821:	83 ec 08             	sub    $0x8,%esp
c0109824:	6a 00                	push   $0x0
c0109826:	50                   	push   %eax
c0109827:	e8 16 fd ff ff       	call   c0109542 <sem_init>
c010982c:	83 c4 10             	add    $0x10,%esp
        mtp->cv[i].owner=mtp;
c010982f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109832:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109835:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109838:	89 d0                	mov    %edx,%eax
c010983a:	c1 e0 02             	shl    $0x2,%eax
c010983d:	01 d0                	add    %edx,%eax
c010983f:	c1 e0 02             	shl    $0x2,%eax
c0109842:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109845:	8b 45 08             	mov    0x8(%ebp),%eax
c0109848:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010984b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010984f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109852:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109855:	72 99                	jb     c01097f0 <monitor_init+0xa5>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109857:	90                   	nop
c0109858:	c9                   	leave  
c0109859:	c3                   	ret    

c010985a <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010985a:	55                   	push   %ebp
c010985b:	89 e5                	mov    %esp,%ebp
c010985d:	83 ec 08             	sub    $0x8,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109860:	8b 45 08             	mov    0x8(%ebp),%eax
c0109863:	8b 40 10             	mov    0x10(%eax),%eax
c0109866:	8b 50 18             	mov    0x18(%eax),%edx
c0109869:	8b 45 08             	mov    0x8(%ebp),%eax
c010986c:	8b 40 0c             	mov    0xc(%eax),%eax
c010986f:	52                   	push   %edx
c0109870:	50                   	push   %eax
c0109871:	ff 75 08             	pushl  0x8(%ebp)
c0109874:	68 a8 66 11 c0       	push   $0xc01166a8
c0109879:	e8 01 6b ff ff       	call   c010037f <cprintf>
c010987e:	83 c4 10             	add    $0x10,%esp
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c0109881:	8b 45 08             	mov    0x8(%ebp),%eax
c0109884:	8b 40 0c             	mov    0xc(%eax),%eax
c0109887:	85 c0                	test   %eax,%eax
c0109889:	7e 42                	jle    c01098cd <cond_signal+0x73>
        cvp->owner->next_count ++;
c010988b:	8b 45 08             	mov    0x8(%ebp),%eax
c010988e:	8b 40 10             	mov    0x10(%eax),%eax
c0109891:	8b 50 18             	mov    0x18(%eax),%edx
c0109894:	83 c2 01             	add    $0x1,%edx
c0109897:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c010989a:	8b 45 08             	mov    0x8(%ebp),%eax
c010989d:	83 ec 0c             	sub    $0xc,%esp
c01098a0:	50                   	push   %eax
c01098a1:	e8 09 fe ff ff       	call   c01096af <up>
c01098a6:	83 c4 10             	add    $0x10,%esp
        down(&(cvp->owner->next));
c01098a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ac:	8b 40 10             	mov    0x10(%eax),%eax
c01098af:	83 c0 0c             	add    $0xc,%eax
c01098b2:	83 ec 0c             	sub    $0xc,%esp
c01098b5:	50                   	push   %eax
c01098b6:	e8 10 fe ff ff       	call   c01096cb <down>
c01098bb:	83 c4 10             	add    $0x10,%esp
        cvp->owner->next_count --;
c01098be:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c1:	8b 40 10             	mov    0x10(%eax),%eax
c01098c4:	8b 50 18             	mov    0x18(%eax),%edx
c01098c7:	83 ea 01             	sub    $0x1,%edx
c01098ca:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d0:	8b 40 10             	mov    0x10(%eax),%eax
c01098d3:	8b 50 18             	mov    0x18(%eax),%edx
c01098d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d9:	8b 40 0c             	mov    0xc(%eax),%eax
c01098dc:	52                   	push   %edx
c01098dd:	50                   	push   %eax
c01098de:	ff 75 08             	pushl  0x8(%ebp)
c01098e1:	68 f0 66 11 c0       	push   $0xc01166f0
c01098e6:	e8 94 6a ff ff       	call   c010037f <cprintf>
c01098eb:	83 c4 10             	add    $0x10,%esp
}
c01098ee:	90                   	nop
c01098ef:	c9                   	leave  
c01098f0:	c3                   	ret    

c01098f1 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c01098f1:	55                   	push   %ebp
c01098f2:	89 e5                	mov    %esp,%ebp
c01098f4:	83 ec 08             	sub    $0x8,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01098fa:	8b 40 10             	mov    0x10(%eax),%eax
c01098fd:	8b 50 18             	mov    0x18(%eax),%edx
c0109900:	8b 45 08             	mov    0x8(%ebp),%eax
c0109903:	8b 40 0c             	mov    0xc(%eax),%eax
c0109906:	52                   	push   %edx
c0109907:	50                   	push   %eax
c0109908:	ff 75 08             	pushl  0x8(%ebp)
c010990b:	68 34 67 11 c0       	push   $0xc0116734
c0109910:	e8 6a 6a ff ff       	call   c010037f <cprintf>
c0109915:	83 c4 10             	add    $0x10,%esp
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109918:	8b 45 08             	mov    0x8(%ebp),%eax
c010991b:	8b 40 0c             	mov    0xc(%eax),%eax
c010991e:	8d 50 01             	lea    0x1(%eax),%edx
c0109921:	8b 45 08             	mov    0x8(%ebp),%eax
c0109924:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109927:	8b 45 08             	mov    0x8(%ebp),%eax
c010992a:	8b 40 10             	mov    0x10(%eax),%eax
c010992d:	8b 40 18             	mov    0x18(%eax),%eax
c0109930:	85 c0                	test   %eax,%eax
c0109932:	7e 17                	jle    c010994b <cond_wait+0x5a>
         up(&(cvp->owner->next));
c0109934:	8b 45 08             	mov    0x8(%ebp),%eax
c0109937:	8b 40 10             	mov    0x10(%eax),%eax
c010993a:	83 c0 0c             	add    $0xc,%eax
c010993d:	83 ec 0c             	sub    $0xc,%esp
c0109940:	50                   	push   %eax
c0109941:	e8 69 fd ff ff       	call   c01096af <up>
c0109946:	83 c4 10             	add    $0x10,%esp
c0109949:	eb 12                	jmp    c010995d <cond_wait+0x6c>
      else
         up(&(cvp->owner->mutex));
c010994b:	8b 45 08             	mov    0x8(%ebp),%eax
c010994e:	8b 40 10             	mov    0x10(%eax),%eax
c0109951:	83 ec 0c             	sub    $0xc,%esp
c0109954:	50                   	push   %eax
c0109955:	e8 55 fd ff ff       	call   c01096af <up>
c010995a:	83 c4 10             	add    $0x10,%esp
      down(&(cvp->sem));
c010995d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109960:	83 ec 0c             	sub    $0xc,%esp
c0109963:	50                   	push   %eax
c0109964:	e8 62 fd ff ff       	call   c01096cb <down>
c0109969:	83 c4 10             	add    $0x10,%esp
      cvp->count --;
c010996c:	8b 45 08             	mov    0x8(%ebp),%eax
c010996f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109972:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109975:	8b 45 08             	mov    0x8(%ebp),%eax
c0109978:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010997b:	8b 45 08             	mov    0x8(%ebp),%eax
c010997e:	8b 40 10             	mov    0x10(%eax),%eax
c0109981:	8b 50 18             	mov    0x18(%eax),%edx
c0109984:	8b 45 08             	mov    0x8(%ebp),%eax
c0109987:	8b 40 0c             	mov    0xc(%eax),%eax
c010998a:	52                   	push   %edx
c010998b:	50                   	push   %eax
c010998c:	ff 75 08             	pushl  0x8(%ebp)
c010998f:	68 78 67 11 c0       	push   $0xc0116778
c0109994:	e8 e6 69 ff ff       	call   c010037f <cprintf>
c0109999:	83 c4 10             	add    $0x10,%esp
}
c010999c:	90                   	nop
c010999d:	c9                   	leave  
c010999e:	c3                   	ret    

c010999f <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010999f:	55                   	push   %ebp
c01099a0:	89 e5                	mov    %esp,%ebp
c01099a2:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c01099a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099a9:	74 29                	je     c01099d4 <lock_mm+0x35>
        down(&(mm->mm_sem));
c01099ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ae:	83 c0 1c             	add    $0x1c,%eax
c01099b1:	83 ec 0c             	sub    $0xc,%esp
c01099b4:	50                   	push   %eax
c01099b5:	e8 11 fd ff ff       	call   c01096cb <down>
c01099ba:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c01099bd:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01099c2:	85 c0                	test   %eax,%eax
c01099c4:	74 0e                	je     c01099d4 <lock_mm+0x35>
            mm->locked_by = current->pid;
c01099c6:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01099cb:	8b 50 04             	mov    0x4(%eax),%edx
c01099ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d1:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c01099d4:	90                   	nop
c01099d5:	c9                   	leave  
c01099d6:	c3                   	ret    

c01099d7 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01099d7:	55                   	push   %ebp
c01099d8:	89 e5                	mov    %esp,%ebp
c01099da:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c01099dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099e1:	74 1c                	je     c01099ff <unlock_mm+0x28>
        up(&(mm->mm_sem));
c01099e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e6:	83 c0 1c             	add    $0x1c,%eax
c01099e9:	83 ec 0c             	sub    $0xc,%esp
c01099ec:	50                   	push   %eax
c01099ed:	e8 bd fc ff ff       	call   c01096af <up>
c01099f2:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c01099f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f8:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c01099ff:	90                   	nop
c0109a00:	c9                   	leave  
c0109a01:	c3                   	ret    

c0109a02 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c0109a02:	55                   	push   %ebp
c0109a03:	89 e5                	mov    %esp,%ebp
c0109a05:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c0109a08:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109a0d:	8b 40 18             	mov    0x18(%eax),%eax
c0109a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c0109a13:	83 ec 0c             	sub    $0xc,%esp
c0109a16:	68 00 10 00 00       	push   $0x1000
c0109a1b:	e8 30 be ff ff       	call   c0105850 <kmalloc>
c0109a20:	83 c4 10             	add    $0x10,%esp
c0109a23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109a2a:	75 07                	jne    c0109a33 <copy_path+0x31>
        return -E_NO_MEM;
c0109a2c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109a31:	eb 67                	jmp    c0109a9a <copy_path+0x98>
    }
    lock_mm(mm);
c0109a33:	83 ec 0c             	sub    $0xc,%esp
c0109a36:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a39:	e8 61 ff ff ff       	call   c010999f <lock_mm>
c0109a3e:	83 c4 10             	add    $0x10,%esp
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c0109a41:	68 00 10 00 00       	push   $0x1000
c0109a46:	ff 75 0c             	pushl  0xc(%ebp)
c0109a49:	ff 75 f0             	pushl  -0x10(%ebp)
c0109a4c:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a4f:	e8 14 ac ff ff       	call   c0104668 <copy_string>
c0109a54:	83 c4 10             	add    $0x10,%esp
c0109a57:	85 c0                	test   %eax,%eax
c0109a59:	75 24                	jne    c0109a7f <copy_path+0x7d>
        unlock_mm(mm);
c0109a5b:	83 ec 0c             	sub    $0xc,%esp
c0109a5e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a61:	e8 71 ff ff ff       	call   c01099d7 <unlock_mm>
c0109a66:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c0109a69:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c0109a6a:	83 ec 0c             	sub    $0xc,%esp
c0109a6d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109a70:	e8 f3 bd ff ff       	call   c0105868 <kfree>
c0109a75:	83 c4 10             	add    $0x10,%esp
    return -E_INVAL;
c0109a78:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109a7d:	eb 1b                	jmp    c0109a9a <copy_path+0x98>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c0109a7f:	83 ec 0c             	sub    $0xc,%esp
c0109a82:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a85:	e8 4d ff ff ff       	call   c01099d7 <unlock_mm>
c0109a8a:	83 c4 10             	add    $0x10,%esp
    *to = buffer;
c0109a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a90:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109a93:	89 10                	mov    %edx,(%eax)
    return 0;
c0109a95:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c0109a9a:	c9                   	leave  
c0109a9b:	c3                   	ret    

c0109a9c <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c0109a9c:	55                   	push   %ebp
c0109a9d:	89 e5                	mov    %esp,%ebp
c0109a9f:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0109aa2:	83 ec 08             	sub    $0x8,%esp
c0109aa5:	ff 75 08             	pushl  0x8(%ebp)
c0109aa8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109aab:	50                   	push   %eax
c0109aac:	e8 51 ff ff ff       	call   c0109a02 <copy_path>
c0109ab1:	83 c4 10             	add    $0x10,%esp
c0109ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ab7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109abb:	74 05                	je     c0109ac2 <sysfile_open+0x26>
        return ret;
c0109abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ac0:	eb 27                	jmp    c0109ae9 <sysfile_open+0x4d>
    }
    ret = file_open(path, open_flags);
c0109ac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ac5:	83 ec 08             	sub    $0x8,%esp
c0109ac8:	ff 75 0c             	pushl  0xc(%ebp)
c0109acb:	50                   	push   %eax
c0109acc:	e8 c3 0b 00 00       	call   c010a694 <file_open>
c0109ad1:	83 c4 10             	add    $0x10,%esp
c0109ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ada:	83 ec 0c             	sub    $0xc,%esp
c0109add:	50                   	push   %eax
c0109ade:	e8 85 bd ff ff       	call   c0105868 <kfree>
c0109ae3:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109ae9:	c9                   	leave  
c0109aea:	c3                   	ret    

c0109aeb <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c0109aeb:	55                   	push   %ebp
c0109aec:	89 e5                	mov    %esp,%ebp
c0109aee:	83 ec 08             	sub    $0x8,%esp
    return file_close(fd);
c0109af1:	83 ec 0c             	sub    $0xc,%esp
c0109af4:	ff 75 08             	pushl  0x8(%ebp)
c0109af7:	e8 37 0d 00 00       	call   c010a833 <file_close>
c0109afc:	83 c4 10             	add    $0x10,%esp
}
c0109aff:	c9                   	leave  
c0109b00:	c3                   	ret    

c0109b01 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c0109b01:	55                   	push   %ebp
c0109b02:	89 e5                	mov    %esp,%ebp
c0109b04:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109b07:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109b0c:	8b 40 18             	mov    0x18(%eax),%eax
c0109b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109b12:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109b16:	75 0a                	jne    c0109b22 <sysfile_read+0x21>
        return 0;
c0109b18:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b1d:	e9 32 01 00 00       	jmp    c0109c54 <sysfile_read+0x153>
    }
    if (!file_testfd(fd, 1, 0)) {
c0109b22:	83 ec 04             	sub    $0x4,%esp
c0109b25:	6a 00                	push   $0x0
c0109b27:	6a 01                	push   $0x1
c0109b29:	ff 75 08             	pushl  0x8(%ebp)
c0109b2c:	e8 06 0b 00 00       	call   c010a637 <file_testfd>
c0109b31:	83 c4 10             	add    $0x10,%esp
c0109b34:	85 c0                	test   %eax,%eax
c0109b36:	75 0a                	jne    c0109b42 <sysfile_read+0x41>
        return -E_INVAL;
c0109b38:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109b3d:	e9 12 01 00 00       	jmp    c0109c54 <sysfile_read+0x153>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0109b42:	83 ec 0c             	sub    $0xc,%esp
c0109b45:	68 00 10 00 00       	push   $0x1000
c0109b4a:	e8 01 bd ff ff       	call   c0105850 <kmalloc>
c0109b4f:	83 c4 10             	add    $0x10,%esp
c0109b52:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109b55:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109b59:	75 0a                	jne    c0109b65 <sysfile_read+0x64>
        return -E_NO_MEM;
c0109b5b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109b60:	e9 ef 00 00 00       	jmp    c0109c54 <sysfile_read+0x153>
    }

    int ret = 0;
c0109b65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c0109b6c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0109b73:	e9 b6 00 00 00       	jmp    c0109c2e <sysfile_read+0x12d>
        if ((alen = IOBUF_SIZE) > len) {
c0109b78:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c0109b7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b82:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109b85:	76 06                	jbe    c0109b8d <sysfile_read+0x8c>
            alen = len;
c0109b87:	8b 45 10             	mov    0x10(%ebp),%eax
c0109b8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c0109b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b90:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0109b93:	52                   	push   %edx
c0109b94:	50                   	push   %eax
c0109b95:	ff 75 e8             	pushl  -0x18(%ebp)
c0109b98:	ff 75 08             	pushl  0x8(%ebp)
c0109b9b:	e8 cf 0c 00 00       	call   c010a86f <file_read>
c0109ba0:	83 c4 10             	add    $0x10,%esp
c0109ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c0109ba6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ba9:	85 c0                	test   %eax,%eax
c0109bab:	74 74                	je     c0109c21 <sysfile_read+0x120>
            lock_mm(mm);
c0109bad:	83 ec 0c             	sub    $0xc,%esp
c0109bb0:	ff 75 ec             	pushl  -0x14(%ebp)
c0109bb3:	e8 e7 fd ff ff       	call   c010999f <lock_mm>
c0109bb8:	83 c4 10             	add    $0x10,%esp
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c0109bbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bbe:	50                   	push   %eax
c0109bbf:	ff 75 e8             	pushl  -0x18(%ebp)
c0109bc2:	ff 75 0c             	pushl  0xc(%ebp)
c0109bc5:	ff 75 ec             	pushl  -0x14(%ebp)
c0109bc8:	e8 c2 a0 ff ff       	call   c0103c8f <copy_to_user>
c0109bcd:	83 c4 10             	add    $0x10,%esp
c0109bd0:	85 c0                	test   %eax,%eax
c0109bd2:	74 32                	je     c0109c06 <sysfile_read+0x105>
                    assert(len >= alen);
c0109bd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bd7:	39 45 10             	cmp    %eax,0x10(%ebp)
c0109bda:	73 16                	jae    c0109bf2 <sysfile_read+0xf1>
c0109bdc:	68 ba 67 11 c0       	push   $0xc01167ba
c0109be1:	68 c6 67 11 c0       	push   $0xc01167c6
c0109be6:	6a 55                	push   $0x55
c0109be8:	68 db 67 11 c0       	push   $0xc01167db
c0109bed:	e8 f3 68 ff ff       	call   c01004e5 <__panic>
                    base += alen, len -= alen, copied += alen;
c0109bf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bf5:	01 45 0c             	add    %eax,0xc(%ebp)
c0109bf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bfb:	29 45 10             	sub    %eax,0x10(%ebp)
c0109bfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c01:	01 45 f0             	add    %eax,-0x10(%ebp)
c0109c04:	eb 0d                	jmp    c0109c13 <sysfile_read+0x112>
                }
                else if (ret == 0) {
c0109c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c0a:	75 07                	jne    c0109c13 <sysfile_read+0x112>
                    ret = -E_INVAL;
c0109c0c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c0109c13:	83 ec 0c             	sub    $0xc,%esp
c0109c16:	ff 75 ec             	pushl  -0x14(%ebp)
c0109c19:	e8 b9 fd ff ff       	call   c01099d7 <unlock_mm>
c0109c1e:	83 c4 10             	add    $0x10,%esp
        }
        if (ret != 0 || alen == 0) {
c0109c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c25:	75 11                	jne    c0109c38 <sysfile_read+0x137>
c0109c27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c2a:	85 c0                	test   %eax,%eax
c0109c2c:	74 0a                	je     c0109c38 <sysfile_read+0x137>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c0109c2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109c32:	0f 85 40 ff ff ff    	jne    c0109b78 <sysfile_read+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c0109c38:	83 ec 0c             	sub    $0xc,%esp
c0109c3b:	ff 75 e8             	pushl  -0x18(%ebp)
c0109c3e:	e8 25 bc ff ff       	call   c0105868 <kfree>
c0109c43:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c0109c46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c4a:	74 05                	je     c0109c51 <sysfile_read+0x150>
        return copied;
c0109c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c4f:	eb 03                	jmp    c0109c54 <sysfile_read+0x153>
    }
    return ret;
c0109c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109c54:	c9                   	leave  
c0109c55:	c3                   	ret    

c0109c56 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c0109c56:	55                   	push   %ebp
c0109c57:	89 e5                	mov    %esp,%ebp
c0109c59:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109c5c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109c61:	8b 40 18             	mov    0x18(%eax),%eax
c0109c64:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109c67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109c6b:	75 0a                	jne    c0109c77 <sysfile_write+0x21>
        return 0;
c0109c6d:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c72:	e9 38 01 00 00       	jmp    c0109daf <sysfile_write+0x159>
    }
    if (!file_testfd(fd, 0, 1)) {
c0109c77:	83 ec 04             	sub    $0x4,%esp
c0109c7a:	6a 01                	push   $0x1
c0109c7c:	6a 00                	push   $0x0
c0109c7e:	ff 75 08             	pushl  0x8(%ebp)
c0109c81:	e8 b1 09 00 00       	call   c010a637 <file_testfd>
c0109c86:	83 c4 10             	add    $0x10,%esp
c0109c89:	85 c0                	test   %eax,%eax
c0109c8b:	75 0a                	jne    c0109c97 <sysfile_write+0x41>
        return -E_INVAL;
c0109c8d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109c92:	e9 18 01 00 00       	jmp    c0109daf <sysfile_write+0x159>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0109c97:	83 ec 0c             	sub    $0xc,%esp
c0109c9a:	68 00 10 00 00       	push   $0x1000
c0109c9f:	e8 ac bb ff ff       	call   c0105850 <kmalloc>
c0109ca4:	83 c4 10             	add    $0x10,%esp
c0109ca7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109caa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109cae:	75 0a                	jne    c0109cba <sysfile_write+0x64>
        return -E_NO_MEM;
c0109cb0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109cb5:	e9 f5 00 00 00       	jmp    c0109daf <sysfile_write+0x159>
    }

    int ret = 0;
c0109cba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c0109cc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0109cc8:	e9 bc 00 00 00       	jmp    c0109d89 <sysfile_write+0x133>
        if ((alen = IOBUF_SIZE) > len) {
c0109ccd:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c0109cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cd7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109cda:	76 06                	jbe    c0109ce2 <sysfile_write+0x8c>
            alen = len;
c0109cdc:	8b 45 10             	mov    0x10(%ebp),%eax
c0109cdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c0109ce2:	83 ec 0c             	sub    $0xc,%esp
c0109ce5:	ff 75 ec             	pushl  -0x14(%ebp)
c0109ce8:	e8 b2 fc ff ff       	call   c010999f <lock_mm>
c0109ced:	83 c4 10             	add    $0x10,%esp
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c0109cf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cf3:	83 ec 0c             	sub    $0xc,%esp
c0109cf6:	6a 00                	push   $0x0
c0109cf8:	50                   	push   %eax
c0109cf9:	ff 75 0c             	pushl  0xc(%ebp)
c0109cfc:	ff 75 e8             	pushl  -0x18(%ebp)
c0109cff:	ff 75 ec             	pushl  -0x14(%ebp)
c0109d02:	e8 47 9f ff ff       	call   c0103c4e <copy_from_user>
c0109d07:	83 c4 20             	add    $0x20,%esp
c0109d0a:	85 c0                	test   %eax,%eax
c0109d0c:	75 07                	jne    c0109d15 <sysfile_write+0xbf>
                ret = -E_INVAL;
c0109d0e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c0109d15:	83 ec 0c             	sub    $0xc,%esp
c0109d18:	ff 75 ec             	pushl  -0x14(%ebp)
c0109d1b:	e8 b7 fc ff ff       	call   c01099d7 <unlock_mm>
c0109d20:	83 c4 10             	add    $0x10,%esp
        if (ret == 0) {
c0109d23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d27:	75 53                	jne    c0109d7c <sysfile_write+0x126>
            ret = file_write(fd, buffer, alen, &alen);
c0109d29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d2c:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0109d2f:	52                   	push   %edx
c0109d30:	50                   	push   %eax
c0109d31:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d34:	ff 75 08             	pushl  0x8(%ebp)
c0109d37:	e8 60 0c 00 00       	call   c010a99c <file_write>
c0109d3c:	83 c4 10             	add    $0x10,%esp
c0109d3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c0109d42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d45:	85 c0                	test   %eax,%eax
c0109d47:	74 33                	je     c0109d7c <sysfile_write+0x126>
                assert(len >= alen);
c0109d49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d4c:	39 45 10             	cmp    %eax,0x10(%ebp)
c0109d4f:	73 19                	jae    c0109d6a <sysfile_write+0x114>
c0109d51:	68 ba 67 11 c0       	push   $0xc01167ba
c0109d56:	68 c6 67 11 c0       	push   $0xc01167c6
c0109d5b:	68 8a 00 00 00       	push   $0x8a
c0109d60:	68 db 67 11 c0       	push   $0xc01167db
c0109d65:	e8 7b 67 ff ff       	call   c01004e5 <__panic>
                base += alen, len -= alen, copied += alen;
c0109d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d6d:	01 45 0c             	add    %eax,0xc(%ebp)
c0109d70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d73:	29 45 10             	sub    %eax,0x10(%ebp)
c0109d76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d79:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c0109d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d80:	75 11                	jne    c0109d93 <sysfile_write+0x13d>
c0109d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d85:	85 c0                	test   %eax,%eax
c0109d87:	74 0a                	je     c0109d93 <sysfile_write+0x13d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c0109d89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109d8d:	0f 85 3a ff ff ff    	jne    c0109ccd <sysfile_write+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c0109d93:	83 ec 0c             	sub    $0xc,%esp
c0109d96:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d99:	e8 ca ba ff ff       	call   c0105868 <kfree>
c0109d9e:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c0109da1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109da5:	74 05                	je     c0109dac <sysfile_write+0x156>
        return copied;
c0109da7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109daa:	eb 03                	jmp    c0109daf <sysfile_write+0x159>
    }
    return ret;
c0109dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109daf:	c9                   	leave  
c0109db0:	c3                   	ret    

c0109db1 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c0109db1:	55                   	push   %ebp
c0109db2:	89 e5                	mov    %esp,%ebp
c0109db4:	83 ec 08             	sub    $0x8,%esp
    return file_seek(fd, pos, whence);
c0109db7:	83 ec 04             	sub    $0x4,%esp
c0109dba:	ff 75 10             	pushl  0x10(%ebp)
c0109dbd:	ff 75 0c             	pushl  0xc(%ebp)
c0109dc0:	ff 75 08             	pushl  0x8(%ebp)
c0109dc3:	e8 01 0d 00 00       	call   c010aac9 <file_seek>
c0109dc8:	83 c4 10             	add    $0x10,%esp
}
c0109dcb:	c9                   	leave  
c0109dcc:	c3                   	ret    

c0109dcd <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c0109dcd:	55                   	push   %ebp
c0109dce:	89 e5                	mov    %esp,%ebp
c0109dd0:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109dd3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109dd8:	8b 40 18             	mov    0x18(%eax),%eax
c0109ddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c0109dde:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109de1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c0109de4:	83 ec 08             	sub    $0x8,%esp
c0109de7:	ff 75 ec             	pushl  -0x14(%ebp)
c0109dea:	ff 75 08             	pushl  0x8(%ebp)
c0109ded:	e8 69 0e 00 00       	call   c010ac5b <file_fstat>
c0109df2:	83 c4 10             	add    $0x10,%esp
c0109df5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109df8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109dfc:	74 05                	je     c0109e03 <sysfile_fstat+0x36>
        return ret;
c0109dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e01:	eb 3d                	jmp    c0109e40 <sysfile_fstat+0x73>
    }

    lock_mm(mm);
c0109e03:	83 ec 0c             	sub    $0xc,%esp
c0109e06:	ff 75 f0             	pushl  -0x10(%ebp)
c0109e09:	e8 91 fb ff ff       	call   c010999f <lock_mm>
c0109e0e:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c0109e11:	6a 10                	push   $0x10
c0109e13:	ff 75 ec             	pushl  -0x14(%ebp)
c0109e16:	ff 75 0c             	pushl  0xc(%ebp)
c0109e19:	ff 75 f0             	pushl  -0x10(%ebp)
c0109e1c:	e8 6e 9e ff ff       	call   c0103c8f <copy_to_user>
c0109e21:	83 c4 10             	add    $0x10,%esp
c0109e24:	85 c0                	test   %eax,%eax
c0109e26:	75 07                	jne    c0109e2f <sysfile_fstat+0x62>
            ret = -E_INVAL;
c0109e28:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0109e2f:	83 ec 0c             	sub    $0xc,%esp
c0109e32:	ff 75 f0             	pushl  -0x10(%ebp)
c0109e35:	e8 9d fb ff ff       	call   c01099d7 <unlock_mm>
c0109e3a:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109e40:	c9                   	leave  
c0109e41:	c3                   	ret    

c0109e42 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c0109e42:	55                   	push   %ebp
c0109e43:	89 e5                	mov    %esp,%ebp
c0109e45:	83 ec 08             	sub    $0x8,%esp
    return file_fsync(fd);
c0109e48:	83 ec 0c             	sub    $0xc,%esp
c0109e4b:	ff 75 08             	pushl  0x8(%ebp)
c0109e4e:	e8 c4 0e 00 00       	call   c010ad17 <file_fsync>
c0109e53:	83 c4 10             	add    $0x10,%esp
}
c0109e56:	c9                   	leave  
c0109e57:	c3                   	ret    

c0109e58 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c0109e58:	55                   	push   %ebp
c0109e59:	89 e5                	mov    %esp,%ebp
c0109e5b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0109e5e:	83 ec 08             	sub    $0x8,%esp
c0109e61:	ff 75 08             	pushl  0x8(%ebp)
c0109e64:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109e67:	50                   	push   %eax
c0109e68:	e8 95 fb ff ff       	call   c0109a02 <copy_path>
c0109e6d:	83 c4 10             	add    $0x10,%esp
c0109e70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e77:	74 05                	je     c0109e7e <sysfile_chdir+0x26>
        return ret;
c0109e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e7c:	eb 24                	jmp    c0109ea2 <sysfile_chdir+0x4a>
    }
    ret = vfs_chdir(path);
c0109e7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e81:	83 ec 0c             	sub    $0xc,%esp
c0109e84:	50                   	push   %eax
c0109e85:	e8 7c 4f 00 00       	call   c010ee06 <vfs_chdir>
c0109e8a:	83 c4 10             	add    $0x10,%esp
c0109e8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109e90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e93:	83 ec 0c             	sub    $0xc,%esp
c0109e96:	50                   	push   %eax
c0109e97:	e8 cc b9 ff ff       	call   c0105868 <kfree>
c0109e9c:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109ea2:	c9                   	leave  
c0109ea3:	c3                   	ret    

c0109ea4 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c0109ea4:	55                   	push   %ebp
c0109ea5:	89 e5                	mov    %esp,%ebp
c0109ea7:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0109eaa:	83 ec 08             	sub    $0x8,%esp
c0109ead:	ff 75 08             	pushl  0x8(%ebp)
c0109eb0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109eb3:	50                   	push   %eax
c0109eb4:	e8 49 fb ff ff       	call   c0109a02 <copy_path>
c0109eb9:	83 c4 10             	add    $0x10,%esp
c0109ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ebf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ec3:	74 05                	je     c0109eca <sysfile_link+0x26>
        return ret;
c0109ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ec8:	eb 66                	jmp    c0109f30 <sysfile_link+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0109eca:	83 ec 08             	sub    $0x8,%esp
c0109ecd:	ff 75 0c             	pushl  0xc(%ebp)
c0109ed0:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109ed3:	50                   	push   %eax
c0109ed4:	e8 29 fb ff ff       	call   c0109a02 <copy_path>
c0109ed9:	83 c4 10             	add    $0x10,%esp
c0109edc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ee3:	74 14                	je     c0109ef9 <sysfile_link+0x55>
        kfree(old_path);
c0109ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ee8:	83 ec 0c             	sub    $0xc,%esp
c0109eeb:	50                   	push   %eax
c0109eec:	e8 77 b9 ff ff       	call   c0105868 <kfree>
c0109ef1:	83 c4 10             	add    $0x10,%esp
        return ret;
c0109ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ef7:	eb 37                	jmp    c0109f30 <sysfile_link+0x8c>
    }
    ret = vfs_link(old_path, new_path);
c0109ef9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eff:	83 ec 08             	sub    $0x8,%esp
c0109f02:	52                   	push   %edx
c0109f03:	50                   	push   %eax
c0109f04:	e8 14 56 00 00       	call   c010f51d <vfs_link>
c0109f09:	83 c4 10             	add    $0x10,%esp
c0109f0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0109f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f12:	83 ec 0c             	sub    $0xc,%esp
c0109f15:	50                   	push   %eax
c0109f16:	e8 4d b9 ff ff       	call   c0105868 <kfree>
c0109f1b:	83 c4 10             	add    $0x10,%esp
c0109f1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f21:	83 ec 0c             	sub    $0xc,%esp
c0109f24:	50                   	push   %eax
c0109f25:	e8 3e b9 ff ff       	call   c0105868 <kfree>
c0109f2a:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109f2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109f30:	c9                   	leave  
c0109f31:	c3                   	ret    

c0109f32 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c0109f32:	55                   	push   %ebp
c0109f33:	89 e5                	mov    %esp,%ebp
c0109f35:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0109f38:	83 ec 08             	sub    $0x8,%esp
c0109f3b:	ff 75 08             	pushl  0x8(%ebp)
c0109f3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109f41:	50                   	push   %eax
c0109f42:	e8 bb fa ff ff       	call   c0109a02 <copy_path>
c0109f47:	83 c4 10             	add    $0x10,%esp
c0109f4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f51:	74 05                	je     c0109f58 <sysfile_rename+0x26>
        return ret;
c0109f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f56:	eb 66                	jmp    c0109fbe <sysfile_rename+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0109f58:	83 ec 08             	sub    $0x8,%esp
c0109f5b:	ff 75 0c             	pushl  0xc(%ebp)
c0109f5e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109f61:	50                   	push   %eax
c0109f62:	e8 9b fa ff ff       	call   c0109a02 <copy_path>
c0109f67:	83 c4 10             	add    $0x10,%esp
c0109f6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f71:	74 14                	je     c0109f87 <sysfile_rename+0x55>
        kfree(old_path);
c0109f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f76:	83 ec 0c             	sub    $0xc,%esp
c0109f79:	50                   	push   %eax
c0109f7a:	e8 e9 b8 ff ff       	call   c0105868 <kfree>
c0109f7f:	83 c4 10             	add    $0x10,%esp
        return ret;
c0109f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f85:	eb 37                	jmp    c0109fbe <sysfile_rename+0x8c>
    }
    ret = vfs_rename(old_path, new_path);
c0109f87:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f8d:	83 ec 08             	sub    $0x8,%esp
c0109f90:	52                   	push   %edx
c0109f91:	50                   	push   %eax
c0109f92:	e8 7c 55 00 00       	call   c010f513 <vfs_rename>
c0109f97:	83 c4 10             	add    $0x10,%esp
c0109f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0109f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fa0:	83 ec 0c             	sub    $0xc,%esp
c0109fa3:	50                   	push   %eax
c0109fa4:	e8 bf b8 ff ff       	call   c0105868 <kfree>
c0109fa9:	83 c4 10             	add    $0x10,%esp
c0109fac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109faf:	83 ec 0c             	sub    $0xc,%esp
c0109fb2:	50                   	push   %eax
c0109fb3:	e8 b0 b8 ff ff       	call   c0105868 <kfree>
c0109fb8:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109fbe:	c9                   	leave  
c0109fbf:	c3                   	ret    

c0109fc0 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c0109fc0:	55                   	push   %ebp
c0109fc1:	89 e5                	mov    %esp,%ebp
c0109fc3:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0109fc6:	83 ec 08             	sub    $0x8,%esp
c0109fc9:	ff 75 08             	pushl  0x8(%ebp)
c0109fcc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109fcf:	50                   	push   %eax
c0109fd0:	e8 2d fa ff ff       	call   c0109a02 <copy_path>
c0109fd5:	83 c4 10             	add    $0x10,%esp
c0109fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fdf:	74 05                	je     c0109fe6 <sysfile_unlink+0x26>
        return ret;
c0109fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fe4:	eb 24                	jmp    c010a00a <sysfile_unlink+0x4a>
    }
    ret = vfs_unlink(path);
c0109fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fe9:	83 ec 0c             	sub    $0xc,%esp
c0109fec:	50                   	push   %eax
c0109fed:	e8 17 55 00 00       	call   c010f509 <vfs_unlink>
c0109ff2:	83 c4 10             	add    $0x10,%esp
c0109ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ffb:	83 ec 0c             	sub    $0xc,%esp
c0109ffe:	50                   	push   %eax
c0109fff:	e8 64 b8 ff ff       	call   c0105868 <kfree>
c010a004:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a007:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a00a:	c9                   	leave  
c010a00b:	c3                   	ret    

c010a00c <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010a00c:	55                   	push   %ebp
c010a00d:	89 e5                	mov    %esp,%ebp
c010a00f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a012:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a017:	8b 40 18             	mov    0x18(%eax),%eax
c010a01a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010a01d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a021:	75 07                	jne    c010a02a <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010a023:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a028:	eb 66                	jmp    c010a090 <sysfile_getcwd+0x84>
    }

    int ret = -E_INVAL;
c010a02a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010a031:	83 ec 0c             	sub    $0xc,%esp
c010a034:	ff 75 f0             	pushl  -0x10(%ebp)
c010a037:	e8 63 f9 ff ff       	call   c010999f <lock_mm>
c010a03c:	83 c4 10             	add    $0x10,%esp
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010a03f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a042:	6a 01                	push   $0x1
c010a044:	ff 75 0c             	pushl  0xc(%ebp)
c010a047:	50                   	push   %eax
c010a048:	ff 75 f0             	pushl  -0x10(%ebp)
c010a04b:	e8 f8 a4 ff ff       	call   c0104548 <user_mem_check>
c010a050:	83 c4 10             	add    $0x10,%esp
c010a053:	85 c0                	test   %eax,%eax
c010a055:	74 28                	je     c010a07f <sysfile_getcwd+0x73>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010a057:	6a 00                	push   $0x0
c010a059:	ff 75 0c             	pushl  0xc(%ebp)
c010a05c:	ff 75 08             	pushl  0x8(%ebp)
c010a05f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a062:	50                   	push   %eax
c010a063:	e8 cc 0e 00 00       	call   c010af34 <iobuf_init>
c010a068:	83 c4 10             	add    $0x10,%esp
c010a06b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010a06e:	83 ec 0c             	sub    $0xc,%esp
c010a071:	ff 75 ec             	pushl  -0x14(%ebp)
c010a074:	e8 d4 4d 00 00       	call   c010ee4d <vfs_getcwd>
c010a079:	83 c4 10             	add    $0x10,%esp
c010a07c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a07f:	83 ec 0c             	sub    $0xc,%esp
c010a082:	ff 75 f0             	pushl  -0x10(%ebp)
c010a085:	e8 4d f9 ff ff       	call   c01099d7 <unlock_mm>
c010a08a:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a08d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a090:	c9                   	leave  
c010a091:	c3                   	ret    

c010a092 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010a092:	55                   	push   %ebp
c010a093:	89 e5                	mov    %esp,%ebp
c010a095:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a098:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a09d:	8b 40 18             	mov    0x18(%eax),%eax
c010a0a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010a0a3:	83 ec 0c             	sub    $0xc,%esp
c010a0a6:	68 04 01 00 00       	push   $0x104
c010a0ab:	e8 a0 b7 ff ff       	call   c0105850 <kmalloc>
c010a0b0:	83 c4 10             	add    $0x10,%esp
c010a0b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a0b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a0ba:	75 0a                	jne    c010a0c6 <sysfile_getdirentry+0x34>
        return -E_NO_MEM;
c010a0bc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a0c1:	e9 b6 00 00 00       	jmp    c010a17c <sysfile_getdirentry+0xea>
    }

    int ret = 0;
c010a0c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010a0cd:	83 ec 0c             	sub    $0xc,%esp
c010a0d0:	ff 75 f0             	pushl  -0x10(%ebp)
c010a0d3:	e8 c7 f8 ff ff       	call   c010999f <lock_mm>
c010a0d8:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010a0db:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a0de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0e1:	83 ec 0c             	sub    $0xc,%esp
c010a0e4:	6a 01                	push   $0x1
c010a0e6:	6a 04                	push   $0x4
c010a0e8:	52                   	push   %edx
c010a0e9:	50                   	push   %eax
c010a0ea:	ff 75 f0             	pushl  -0x10(%ebp)
c010a0ed:	e8 5c 9b ff ff       	call   c0103c4e <copy_from_user>
c010a0f2:	83 c4 20             	add    $0x20,%esp
c010a0f5:	85 c0                	test   %eax,%eax
c010a0f7:	75 07                	jne    c010a100 <sysfile_getdirentry+0x6e>
            ret = -E_INVAL;
c010a0f9:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a100:	83 ec 0c             	sub    $0xc,%esp
c010a103:	ff 75 f0             	pushl  -0x10(%ebp)
c010a106:	e8 cc f8 ff ff       	call   c01099d7 <unlock_mm>
c010a10b:	83 c4 10             	add    $0x10,%esp

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010a10e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a112:	75 57                	jne    c010a16b <sysfile_getdirentry+0xd9>
c010a114:	83 ec 08             	sub    $0x8,%esp
c010a117:	ff 75 ec             	pushl  -0x14(%ebp)
c010a11a:	ff 75 08             	pushl  0x8(%ebp)
c010a11d:	e8 ae 0c 00 00       	call   c010add0 <file_getdirentry>
c010a122:	83 c4 10             	add    $0x10,%esp
c010a125:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a12c:	75 3d                	jne    c010a16b <sysfile_getdirentry+0xd9>
        goto out;
    }

    lock_mm(mm);
c010a12e:	83 ec 0c             	sub    $0xc,%esp
c010a131:	ff 75 f0             	pushl  -0x10(%ebp)
c010a134:	e8 66 f8 ff ff       	call   c010999f <lock_mm>
c010a139:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010a13c:	68 04 01 00 00       	push   $0x104
c010a141:	ff 75 ec             	pushl  -0x14(%ebp)
c010a144:	ff 75 0c             	pushl  0xc(%ebp)
c010a147:	ff 75 f0             	pushl  -0x10(%ebp)
c010a14a:	e8 40 9b ff ff       	call   c0103c8f <copy_to_user>
c010a14f:	83 c4 10             	add    $0x10,%esp
c010a152:	85 c0                	test   %eax,%eax
c010a154:	75 07                	jne    c010a15d <sysfile_getdirentry+0xcb>
            ret = -E_INVAL;
c010a156:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a15d:	83 ec 0c             	sub    $0xc,%esp
c010a160:	ff 75 f0             	pushl  -0x10(%ebp)
c010a163:	e8 6f f8 ff ff       	call   c01099d7 <unlock_mm>
c010a168:	83 c4 10             	add    $0x10,%esp

out:
    kfree(direntp);
c010a16b:	83 ec 0c             	sub    $0xc,%esp
c010a16e:	ff 75 ec             	pushl  -0x14(%ebp)
c010a171:	e8 f2 b6 ff ff       	call   c0105868 <kfree>
c010a176:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a179:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a17c:	c9                   	leave  
c010a17d:	c3                   	ret    

c010a17e <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010a17e:	55                   	push   %ebp
c010a17f:	89 e5                	mov    %esp,%ebp
c010a181:	83 ec 08             	sub    $0x8,%esp
    return file_dup(fd1, fd2);
c010a184:	83 ec 08             	sub    $0x8,%esp
c010a187:	ff 75 0c             	pushl  0xc(%ebp)
c010a18a:	ff 75 08             	pushl  0x8(%ebp)
c010a18d:	e8 41 0d 00 00       	call   c010aed3 <file_dup>
c010a192:	83 c4 10             	add    $0x10,%esp
}
c010a195:	c9                   	leave  
c010a196:	c3                   	ret    

c010a197 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010a197:	55                   	push   %ebp
c010a198:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010a19a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010a19f:	5d                   	pop    %ebp
c010a1a0:	c3                   	ret    

c010a1a1 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010a1a1:	55                   	push   %ebp
c010a1a2:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010a1a4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010a1a9:	5d                   	pop    %ebp
c010a1aa:	c3                   	ret    

c010a1ab <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a1ab:	55                   	push   %ebp
c010a1ac:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a1ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b1:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a1b4:	5d                   	pop    %ebp
c010a1b5:	c3                   	ret    

c010a1b6 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a1b6:	55                   	push   %ebp
c010a1b7:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a1b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1bc:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1bf:	5d                   	pop    %ebp
c010a1c0:	c3                   	ret    

c010a1c1 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a1c1:	55                   	push   %ebp
c010a1c2:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c7:	8b 40 18             	mov    0x18(%eax),%eax
c010a1ca:	8d 50 01             	lea    0x1(%eax),%edx
c010a1cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d0:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d6:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1d9:	5d                   	pop    %ebp
c010a1da:	c3                   	ret    

c010a1db <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a1db:	55                   	push   %ebp
c010a1dc:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a1de:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e1:	8b 40 18             	mov    0x18(%eax),%eax
c010a1e4:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a1e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ea:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a1ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f0:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1f3:	5d                   	pop    %ebp
c010a1f4:	c3                   	ret    

c010a1f5 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a1f5:	55                   	push   %ebp
c010a1f6:	89 e5                	mov    %esp,%ebp
c010a1f8:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = current->filesp;
c010a1fb:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a200:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a206:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a209:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a20d:	74 0f                	je     c010a21e <get_fd_array+0x29>
c010a20f:	ff 75 f4             	pushl  -0xc(%ebp)
c010a212:	e8 94 ff ff ff       	call   c010a1ab <files_count>
c010a217:	83 c4 04             	add    $0x4,%esp
c010a21a:	85 c0                	test   %eax,%eax
c010a21c:	7f 16                	jg     c010a234 <get_fd_array+0x3f>
c010a21e:	68 f0 67 11 c0       	push   $0xc01167f0
c010a223:	68 1a 68 11 c0       	push   $0xc011681a
c010a228:	6a 14                	push   $0x14
c010a22a:	68 2f 68 11 c0       	push   $0xc011682f
c010a22f:	e8 b1 62 ff ff       	call   c01004e5 <__panic>
    return filesp->fd_array;
c010a234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a237:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a23a:	c9                   	leave  
c010a23b:	c3                   	ret    

c010a23c <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a23c:	55                   	push   %ebp
c010a23d:	89 e5                	mov    %esp,%ebp
c010a23f:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a242:	8b 45 08             	mov    0x8(%ebp),%eax
c010a245:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a248:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a24f:	eb 24                	jmp    c010a275 <fd_array_init+0x39>
        file->open_count = 0;
c010a251:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a254:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a25b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a25e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a264:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a267:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a26a:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a26d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a271:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a275:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a278:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a27d:	76 d2                	jbe    c010a251 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a27f:	90                   	nop
c010a280:	c9                   	leave  
c010a281:	c3                   	ret    

c010a282 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a282:	55                   	push   %ebp
c010a283:	89 e5                	mov    %esp,%ebp
c010a285:	83 ec 18             	sub    $0x18,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a288:	e8 68 ff ff ff       	call   c010a1f5 <get_fd_array>
c010a28d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a290:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a297:	75 2e                	jne    c010a2c7 <fd_array_alloc+0x45>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a299:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a2a0:	eb 11                	jmp    c010a2b3 <fd_array_alloc+0x31>
            if (file->status == FD_NONE) {
c010a2a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2a5:	8b 00                	mov    (%eax),%eax
c010a2a7:	85 c0                	test   %eax,%eax
c010a2a9:	74 57                	je     c010a302 <fd_array_alloc+0x80>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2ab:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a2af:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a2b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b6:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a2bb:	76 e5                	jbe    c010a2a2 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a2bd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a2c2:	e9 87 00 00 00       	jmp    c010a34e <fd_array_alloc+0xcc>
    }
    else {
        if (testfd(fd)) {
c010a2c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a2cb:	78 2e                	js     c010a2fb <fd_array_alloc+0x79>
c010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d0:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a2d5:	77 24                	ja     c010a2fb <fd_array_alloc+0x79>
            file += fd;
c010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2da:	c1 e0 02             	shl    $0x2,%eax
c010a2dd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a2e4:	29 c2                	sub    %eax,%edx
c010a2e6:	89 d0                	mov    %edx,%eax
c010a2e8:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a2eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2ee:	8b 00                	mov    (%eax),%eax
c010a2f0:	85 c0                	test   %eax,%eax
c010a2f2:	74 11                	je     c010a305 <fd_array_alloc+0x83>
                goto found;
            }
            return -E_BUSY;
c010a2f4:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a2f9:	eb 53                	jmp    c010a34e <fd_array_alloc+0xcc>
        }
        return -E_INVAL;
c010a2fb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a300:	eb 4c                	jmp    c010a34e <fd_array_alloc+0xcc>
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
            if (file->status == FD_NONE) {
                goto found;
c010a302:	90                   	nop
c010a303:	eb 01                	jmp    c010a306 <fd_array_alloc+0x84>
    }
    else {
        if (testfd(fd)) {
            file += fd;
            if (file->status == FD_NONE) {
                goto found;
c010a305:	90                   	nop
            return -E_BUSY;
        }
        return -E_INVAL;
    }
found:
    assert(fopen_count(file) == 0);
c010a306:	83 ec 0c             	sub    $0xc,%esp
c010a309:	ff 75 f4             	pushl  -0xc(%ebp)
c010a30c:	e8 a5 fe ff ff       	call   c010a1b6 <fopen_count>
c010a311:	83 c4 10             	add    $0x10,%esp
c010a314:	85 c0                	test   %eax,%eax
c010a316:	74 16                	je     c010a32e <fd_array_alloc+0xac>
c010a318:	68 3e 68 11 c0       	push   $0xc011683e
c010a31d:	68 1a 68 11 c0       	push   $0xc011681a
c010a322:	6a 3b                	push   $0x3b
c010a324:	68 2f 68 11 c0       	push   $0xc011682f
c010a329:	e8 b7 61 ff ff       	call   c01004e5 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a32e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a331:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a337:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a33a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a341:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a344:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a347:	89 10                	mov    %edx,(%eax)
    return 0;
c010a349:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a34e:	c9                   	leave  
c010a34f:	c3                   	ret    

c010a350 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a350:	55                   	push   %ebp
c010a351:	89 e5                	mov    %esp,%ebp
c010a353:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a356:	8b 45 08             	mov    0x8(%ebp),%eax
c010a359:	8b 00                	mov    (%eax),%eax
c010a35b:	83 f8 01             	cmp    $0x1,%eax
c010a35e:	74 20                	je     c010a380 <fd_array_free+0x30>
c010a360:	8b 45 08             	mov    0x8(%ebp),%eax
c010a363:	8b 00                	mov    (%eax),%eax
c010a365:	83 f8 03             	cmp    $0x3,%eax
c010a368:	74 16                	je     c010a380 <fd_array_free+0x30>
c010a36a:	68 58 68 11 c0       	push   $0xc0116858
c010a36f:	68 1a 68 11 c0       	push   $0xc011681a
c010a374:	6a 44                	push   $0x44
c010a376:	68 2f 68 11 c0       	push   $0xc011682f
c010a37b:	e8 65 61 ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) == 0);
c010a380:	83 ec 0c             	sub    $0xc,%esp
c010a383:	ff 75 08             	pushl  0x8(%ebp)
c010a386:	e8 2b fe ff ff       	call   c010a1b6 <fopen_count>
c010a38b:	83 c4 10             	add    $0x10,%esp
c010a38e:	85 c0                	test   %eax,%eax
c010a390:	74 16                	je     c010a3a8 <fd_array_free+0x58>
c010a392:	68 3e 68 11 c0       	push   $0xc011683e
c010a397:	68 1a 68 11 c0       	push   $0xc011681a
c010a39c:	6a 45                	push   $0x45
c010a39e:	68 2f 68 11 c0       	push   $0xc011682f
c010a3a3:	e8 3d 61 ff ff       	call   c01004e5 <__panic>
    if (file->status == FD_CLOSED) {
c010a3a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ab:	8b 00                	mov    (%eax),%eax
c010a3ad:	83 f8 03             	cmp    $0x3,%eax
c010a3b0:	75 12                	jne    c010a3c4 <fd_array_free+0x74>
        vfs_close(file->node);
c010a3b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3b5:	8b 40 14             	mov    0x14(%eax),%eax
c010a3b8:	83 ec 0c             	sub    $0xc,%esp
c010a3bb:	50                   	push   %eax
c010a3bc:	e8 1f 51 00 00       	call   c010f4e0 <vfs_close>
c010a3c1:	83 c4 10             	add    $0x10,%esp
    }
    file->status = FD_NONE;
c010a3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a3cd:	90                   	nop
c010a3ce:	c9                   	leave  
c010a3cf:	c3                   	ret    

c010a3d0 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a3d0:	55                   	push   %ebp
c010a3d1:	89 e5                	mov    %esp,%ebp
c010a3d3:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3d9:	8b 00                	mov    (%eax),%eax
c010a3db:	83 f8 02             	cmp    $0x2,%eax
c010a3de:	74 16                	je     c010a3f6 <fd_array_acquire+0x26>
c010a3e0:	68 8d 68 11 c0       	push   $0xc011688d
c010a3e5:	68 1a 68 11 c0       	push   $0xc011681a
c010a3ea:	6a 4e                	push   $0x4e
c010a3ec:	68 2f 68 11 c0       	push   $0xc011682f
c010a3f1:	e8 ef 60 ff ff       	call   c01004e5 <__panic>
    fopen_count_inc(file);
c010a3f6:	83 ec 0c             	sub    $0xc,%esp
c010a3f9:	ff 75 08             	pushl  0x8(%ebp)
c010a3fc:	e8 c0 fd ff ff       	call   c010a1c1 <fopen_count_inc>
c010a401:	83 c4 10             	add    $0x10,%esp
}
c010a404:	90                   	nop
c010a405:	c9                   	leave  
c010a406:	c3                   	ret    

c010a407 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a407:	55                   	push   %ebp
c010a408:	89 e5                	mov    %esp,%ebp
c010a40a:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a40d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a410:	8b 00                	mov    (%eax),%eax
c010a412:	83 f8 02             	cmp    $0x2,%eax
c010a415:	74 20                	je     c010a437 <fd_array_release+0x30>
c010a417:	8b 45 08             	mov    0x8(%ebp),%eax
c010a41a:	8b 00                	mov    (%eax),%eax
c010a41c:	83 f8 03             	cmp    $0x3,%eax
c010a41f:	74 16                	je     c010a437 <fd_array_release+0x30>
c010a421:	68 a8 68 11 c0       	push   $0xc01168a8
c010a426:	68 1a 68 11 c0       	push   $0xc011681a
c010a42b:	6a 55                	push   $0x55
c010a42d:	68 2f 68 11 c0       	push   $0xc011682f
c010a432:	e8 ae 60 ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) > 0);
c010a437:	83 ec 0c             	sub    $0xc,%esp
c010a43a:	ff 75 08             	pushl  0x8(%ebp)
c010a43d:	e8 74 fd ff ff       	call   c010a1b6 <fopen_count>
c010a442:	83 c4 10             	add    $0x10,%esp
c010a445:	85 c0                	test   %eax,%eax
c010a447:	7f 16                	jg     c010a45f <fd_array_release+0x58>
c010a449:	68 df 68 11 c0       	push   $0xc01168df
c010a44e:	68 1a 68 11 c0       	push   $0xc011681a
c010a453:	6a 56                	push   $0x56
c010a455:	68 2f 68 11 c0       	push   $0xc011682f
c010a45a:	e8 86 60 ff ff       	call   c01004e5 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a45f:	83 ec 0c             	sub    $0xc,%esp
c010a462:	ff 75 08             	pushl  0x8(%ebp)
c010a465:	e8 71 fd ff ff       	call   c010a1db <fopen_count_dec>
c010a46a:	83 c4 10             	add    $0x10,%esp
c010a46d:	85 c0                	test   %eax,%eax
c010a46f:	75 0e                	jne    c010a47f <fd_array_release+0x78>
        fd_array_free(file);
c010a471:	83 ec 0c             	sub    $0xc,%esp
c010a474:	ff 75 08             	pushl  0x8(%ebp)
c010a477:	e8 d4 fe ff ff       	call   c010a350 <fd_array_free>
c010a47c:	83 c4 10             	add    $0x10,%esp
    }
}
c010a47f:	90                   	nop
c010a480:	c9                   	leave  
c010a481:	c3                   	ret    

c010a482 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a482:	55                   	push   %ebp
c010a483:	89 e5                	mov    %esp,%ebp
c010a485:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a488:	8b 45 08             	mov    0x8(%ebp),%eax
c010a48b:	8b 00                	mov    (%eax),%eax
c010a48d:	83 f8 01             	cmp    $0x1,%eax
c010a490:	75 0a                	jne    c010a49c <fd_array_open+0x1a>
c010a492:	8b 45 08             	mov    0x8(%ebp),%eax
c010a495:	8b 40 14             	mov    0x14(%eax),%eax
c010a498:	85 c0                	test   %eax,%eax
c010a49a:	75 16                	jne    c010a4b2 <fd_array_open+0x30>
c010a49c:	68 f8 68 11 c0       	push   $0xc01168f8
c010a4a1:	68 1a 68 11 c0       	push   $0xc011681a
c010a4a6:	6a 5f                	push   $0x5f
c010a4a8:	68 2f 68 11 c0       	push   $0xc011682f
c010a4ad:	e8 33 60 ff ff       	call   c01004e5 <__panic>
    file->status = FD_OPENED;
c010a4b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4b5:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a4bb:	83 ec 0c             	sub    $0xc,%esp
c010a4be:	ff 75 08             	pushl  0x8(%ebp)
c010a4c1:	e8 fb fc ff ff       	call   c010a1c1 <fopen_count_inc>
c010a4c6:	83 c4 10             	add    $0x10,%esp
}
c010a4c9:	90                   	nop
c010a4ca:	c9                   	leave  
c010a4cb:	c3                   	ret    

c010a4cc <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a4cc:	55                   	push   %ebp
c010a4cd:	89 e5                	mov    %esp,%ebp
c010a4cf:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c010a4d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d5:	8b 00                	mov    (%eax),%eax
c010a4d7:	83 f8 02             	cmp    $0x2,%eax
c010a4da:	74 16                	je     c010a4f2 <fd_array_close+0x26>
c010a4dc:	68 8d 68 11 c0       	push   $0xc011688d
c010a4e1:	68 1a 68 11 c0       	push   $0xc011681a
c010a4e6:	6a 67                	push   $0x67
c010a4e8:	68 2f 68 11 c0       	push   $0xc011682f
c010a4ed:	e8 f3 5f ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) > 0);
c010a4f2:	83 ec 0c             	sub    $0xc,%esp
c010a4f5:	ff 75 08             	pushl  0x8(%ebp)
c010a4f8:	e8 b9 fc ff ff       	call   c010a1b6 <fopen_count>
c010a4fd:	83 c4 10             	add    $0x10,%esp
c010a500:	85 c0                	test   %eax,%eax
c010a502:	7f 16                	jg     c010a51a <fd_array_close+0x4e>
c010a504:	68 df 68 11 c0       	push   $0xc01168df
c010a509:	68 1a 68 11 c0       	push   $0xc011681a
c010a50e:	6a 68                	push   $0x68
c010a510:	68 2f 68 11 c0       	push   $0xc011682f
c010a515:	e8 cb 5f ff ff       	call   c01004e5 <__panic>
    file->status = FD_CLOSED;
c010a51a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a51d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a523:	83 ec 0c             	sub    $0xc,%esp
c010a526:	ff 75 08             	pushl  0x8(%ebp)
c010a529:	e8 ad fc ff ff       	call   c010a1db <fopen_count_dec>
c010a52e:	83 c4 10             	add    $0x10,%esp
c010a531:	85 c0                	test   %eax,%eax
c010a533:	75 0e                	jne    c010a543 <fd_array_close+0x77>
        fd_array_free(file);
c010a535:	83 ec 0c             	sub    $0xc,%esp
c010a538:	ff 75 08             	pushl  0x8(%ebp)
c010a53b:	e8 10 fe ff ff       	call   c010a350 <fd_array_free>
c010a540:	83 c4 10             	add    $0x10,%esp
    }
}
c010a543:	90                   	nop
c010a544:	c9                   	leave  
c010a545:	c3                   	ret    

c010a546 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a546:	55                   	push   %ebp
c010a547:	89 e5                	mov    %esp,%ebp
c010a549:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a54c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a54f:	8b 00                	mov    (%eax),%eax
c010a551:	83 f8 01             	cmp    $0x1,%eax
c010a554:	75 0a                	jne    c010a560 <fd_array_dup+0x1a>
c010a556:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a559:	8b 00                	mov    (%eax),%eax
c010a55b:	83 f8 02             	cmp    $0x2,%eax
c010a55e:	74 16                	je     c010a576 <fd_array_dup+0x30>
c010a560:	68 28 69 11 c0       	push   $0xc0116928
c010a565:	68 1a 68 11 c0       	push   $0xc011681a
c010a56a:	6a 73                	push   $0x73
c010a56c:	68 2f 68 11 c0       	push   $0xc011682f
c010a571:	e8 6f 5f ff ff       	call   c01004e5 <__panic>
    to->pos = from->pos;
c010a576:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a579:	8b 50 10             	mov    0x10(%eax),%edx
c010a57c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57f:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a582:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a585:	8b 50 04             	mov    0x4(%eax),%edx
c010a588:	8b 45 08             	mov    0x8(%ebp),%eax
c010a58b:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a58e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a591:	8b 50 08             	mov    0x8(%eax),%edx
c010a594:	8b 45 08             	mov    0x8(%ebp),%eax
c010a597:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a59a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a59d:	8b 40 14             	mov    0x14(%eax),%eax
c010a5a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a5a3:	83 ec 0c             	sub    $0xc,%esp
c010a5a6:	ff 75 f4             	pushl  -0xc(%ebp)
c010a5a9:	e8 78 50 00 00       	call   c010f626 <inode_ref_inc>
c010a5ae:	83 c4 10             	add    $0x10,%esp
c010a5b1:	83 ec 0c             	sub    $0xc,%esp
c010a5b4:	ff 75 f4             	pushl  -0xc(%ebp)
c010a5b7:	e8 58 51 00 00       	call   c010f714 <inode_open_inc>
c010a5bc:	83 c4 10             	add    $0x10,%esp
    to->node = node;
c010a5bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5c5:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a5c8:	83 ec 0c             	sub    $0xc,%esp
c010a5cb:	ff 75 08             	pushl  0x8(%ebp)
c010a5ce:	e8 af fe ff ff       	call   c010a482 <fd_array_open>
c010a5d3:	83 c4 10             	add    $0x10,%esp
}
c010a5d6:	90                   	nop
c010a5d7:	c9                   	leave  
c010a5d8:	c3                   	ret    

c010a5d9 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a5d9:	55                   	push   %ebp
c010a5da:	89 e5                	mov    %esp,%ebp
c010a5dc:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a5df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a5e3:	78 4b                	js     c010a630 <fd2file+0x57>
c010a5e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e8:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a5ed:	77 41                	ja     c010a630 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a5ef:	e8 01 fc ff ff       	call   c010a1f5 <get_fd_array>
c010a5f4:	89 c1                	mov    %eax,%ecx
c010a5f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f9:	c1 e0 02             	shl    $0x2,%eax
c010a5fc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a603:	29 c2                	sub    %eax,%edx
c010a605:	89 d0                	mov    %edx,%eax
c010a607:	01 c8                	add    %ecx,%eax
c010a609:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a60c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a60f:	8b 00                	mov    (%eax),%eax
c010a611:	83 f8 02             	cmp    $0x2,%eax
c010a614:	75 1a                	jne    c010a630 <fd2file+0x57>
c010a616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a619:	8b 40 0c             	mov    0xc(%eax),%eax
c010a61c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a61f:	75 0f                	jne    c010a630 <fd2file+0x57>
            *file_store = file;
c010a621:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a624:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a627:	89 10                	mov    %edx,(%eax)
            return 0;
c010a629:	b8 00 00 00 00       	mov    $0x0,%eax
c010a62e:	eb 05                	jmp    c010a635 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a630:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a635:	c9                   	leave  
c010a636:	c3                   	ret    

c010a637 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a637:	55                   	push   %ebp
c010a638:	89 e5                	mov    %esp,%ebp
c010a63a:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a63d:	83 ec 08             	sub    $0x8,%esp
c010a640:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a643:	50                   	push   %eax
c010a644:	ff 75 08             	pushl  0x8(%ebp)
c010a647:	e8 8d ff ff ff       	call   c010a5d9 <fd2file>
c010a64c:	83 c4 10             	add    $0x10,%esp
c010a64f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a656:	74 07                	je     c010a65f <file_testfd+0x28>
        return 0;
c010a658:	b8 00 00 00 00       	mov    $0x0,%eax
c010a65d:	eb 33                	jmp    c010a692 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a65f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a663:	74 11                	je     c010a676 <file_testfd+0x3f>
c010a665:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a668:	8b 40 04             	mov    0x4(%eax),%eax
c010a66b:	85 c0                	test   %eax,%eax
c010a66d:	75 07                	jne    c010a676 <file_testfd+0x3f>
        return 0;
c010a66f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a674:	eb 1c                	jmp    c010a692 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a676:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a67a:	74 11                	je     c010a68d <file_testfd+0x56>
c010a67c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a67f:	8b 40 08             	mov    0x8(%eax),%eax
c010a682:	85 c0                	test   %eax,%eax
c010a684:	75 07                	jne    c010a68d <file_testfd+0x56>
        return 0;
c010a686:	b8 00 00 00 00       	mov    $0x0,%eax
c010a68b:	eb 05                	jmp    c010a692 <file_testfd+0x5b>
    }
    return 1;
c010a68d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a692:	c9                   	leave  
c010a693:	c3                   	ret    

c010a694 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a694:	55                   	push   %ebp
c010a695:	89 e5                	mov    %esp,%ebp
c010a697:	83 ec 38             	sub    $0x38,%esp
    bool readable = 0, writable = 0;
c010a69a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a6a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a6a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6ab:	83 e0 03             	and    $0x3,%eax
c010a6ae:	83 f8 01             	cmp    $0x1,%eax
c010a6b1:	74 15                	je     c010a6c8 <file_open+0x34>
c010a6b3:	83 f8 01             	cmp    $0x1,%eax
c010a6b6:	72 07                	jb     c010a6bf <file_open+0x2b>
c010a6b8:	83 f8 02             	cmp    $0x2,%eax
c010a6bb:	74 14                	je     c010a6d1 <file_open+0x3d>
c010a6bd:	eb 21                	jmp    c010a6e0 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a6bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a6c6:	eb 22                	jmp    c010a6ea <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a6c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a6cf:	eb 19                	jmp    c010a6ea <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a6d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a6d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a6de:	eb 0a                	jmp    c010a6ea <file_open+0x56>
    default:
        return -E_INVAL;
c010a6e0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a6e5:	e9 47 01 00 00       	jmp    c010a831 <file_open+0x19d>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a6ea:	83 ec 08             	sub    $0x8,%esp
c010a6ed:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a6f0:	50                   	push   %eax
c010a6f1:	68 d9 6a ff ff       	push   $0xffff6ad9
c010a6f6:	e8 87 fb ff ff       	call   c010a282 <fd_array_alloc>
c010a6fb:	83 c4 10             	add    $0x10,%esp
c010a6fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a701:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a705:	74 08                	je     c010a70f <file_open+0x7b>
        return ret;
c010a707:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a70a:	e9 22 01 00 00       	jmp    c010a831 <file_open+0x19d>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a70f:	83 ec 04             	sub    $0x4,%esp
c010a712:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a715:	50                   	push   %eax
c010a716:	ff 75 0c             	pushl  0xc(%ebp)
c010a719:	ff 75 08             	pushl  0x8(%ebp)
c010a71c:	e8 07 4b 00 00       	call   c010f228 <vfs_open>
c010a721:	83 c4 10             	add    $0x10,%esp
c010a724:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a727:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a72b:	74 17                	je     c010a744 <file_open+0xb0>
        fd_array_free(file);
c010a72d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a730:	83 ec 0c             	sub    $0xc,%esp
c010a733:	50                   	push   %eax
c010a734:	e8 17 fc ff ff       	call   c010a350 <fd_array_free>
c010a739:	83 c4 10             	add    $0x10,%esp
        return ret;
c010a73c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a73f:	e9 ed 00 00 00       	jmp    c010a831 <file_open+0x19d>
    }

    file->pos = 0;
c010a744:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a747:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a74e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a751:	83 e0 20             	and    $0x20,%eax
c010a754:	85 c0                	test   %eax,%eax
c010a756:	0f 84 a5 00 00 00    	je     c010a801 <file_open+0x16d>
        struct stat __stat, *stat = &__stat;
c010a75c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a75f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a762:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a765:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a768:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a76c:	74 17                	je     c010a785 <file_open+0xf1>
c010a76e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a771:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a774:	85 c0                	test   %eax,%eax
c010a776:	74 0d                	je     c010a785 <file_open+0xf1>
c010a778:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a77b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a77e:	8b 40 14             	mov    0x14(%eax),%eax
c010a781:	85 c0                	test   %eax,%eax
c010a783:	75 19                	jne    c010a79e <file_open+0x10a>
c010a785:	68 5c 69 11 c0       	push   $0xc011695c
c010a78a:	68 1a 68 11 c0       	push   $0xc011681a
c010a78f:	68 b8 00 00 00       	push   $0xb8
c010a794:	68 2f 68 11 c0       	push   $0xc011682f
c010a799:	e8 47 5d ff ff       	call   c01004e5 <__panic>
c010a79e:	83 ec 08             	sub    $0x8,%esp
c010a7a1:	68 aa 69 11 c0       	push   $0xc01169aa
c010a7a6:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a7a9:	e8 4a 50 00 00       	call   c010f7f8 <inode_check>
c010a7ae:	83 c4 10             	add    $0x10,%esp
c010a7b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7b7:	8b 40 14             	mov    0x14(%eax),%eax
c010a7ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a7bd:	83 ec 08             	sub    $0x8,%esp
c010a7c0:	ff 75 e8             	pushl  -0x18(%ebp)
c010a7c3:	52                   	push   %edx
c010a7c4:	ff d0                	call   *%eax
c010a7c6:	83 c4 10             	add    $0x10,%esp
c010a7c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7d0:	74 23                	je     c010a7f5 <file_open+0x161>
            vfs_close(node);
c010a7d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a7d5:	83 ec 0c             	sub    $0xc,%esp
c010a7d8:	50                   	push   %eax
c010a7d9:	e8 02 4d 00 00       	call   c010f4e0 <vfs_close>
c010a7de:	83 c4 10             	add    $0x10,%esp
            fd_array_free(file);
c010a7e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7e4:	83 ec 0c             	sub    $0xc,%esp
c010a7e7:	50                   	push   %eax
c010a7e8:	e8 63 fb ff ff       	call   c010a350 <fd_array_free>
c010a7ed:	83 c4 10             	add    $0x10,%esp
            return ret;
c010a7f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7f3:	eb 3c                	jmp    c010a831 <file_open+0x19d>
        }
        file->pos = stat->st_size;
c010a7f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a7fb:	8b 52 0c             	mov    0xc(%edx),%edx
c010a7fe:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a801:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a804:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a807:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a80a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a80d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a810:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a813:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a816:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a819:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a81c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a81f:	83 ec 0c             	sub    $0xc,%esp
c010a822:	50                   	push   %eax
c010a823:	e8 5a fc ff ff       	call   c010a482 <fd_array_open>
c010a828:	83 c4 10             	add    $0x10,%esp
    return file->fd;
c010a82b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a82e:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a831:	c9                   	leave  
c010a832:	c3                   	ret    

c010a833 <file_close>:

// close file
int
file_close(int fd) {
c010a833:	55                   	push   %ebp
c010a834:	89 e5                	mov    %esp,%ebp
c010a836:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a839:	83 ec 08             	sub    $0x8,%esp
c010a83c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a83f:	50                   	push   %eax
c010a840:	ff 75 08             	pushl  0x8(%ebp)
c010a843:	e8 91 fd ff ff       	call   c010a5d9 <fd2file>
c010a848:	83 c4 10             	add    $0x10,%esp
c010a84b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a84e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a852:	74 05                	je     c010a859 <file_close+0x26>
        return ret;
c010a854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a857:	eb 14                	jmp    c010a86d <file_close+0x3a>
    }
    fd_array_close(file);
c010a859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a85c:	83 ec 0c             	sub    $0xc,%esp
c010a85f:	50                   	push   %eax
c010a860:	e8 67 fc ff ff       	call   c010a4cc <fd_array_close>
c010a865:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a868:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a86d:	c9                   	leave  
c010a86e:	c3                   	ret    

c010a86f <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a86f:	55                   	push   %ebp
c010a870:	89 e5                	mov    %esp,%ebp
c010a872:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a875:	8b 45 14             	mov    0x14(%ebp),%eax
c010a878:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a87e:	83 ec 08             	sub    $0x8,%esp
c010a881:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a884:	50                   	push   %eax
c010a885:	ff 75 08             	pushl  0x8(%ebp)
c010a888:	e8 4c fd ff ff       	call   c010a5d9 <fd2file>
c010a88d:	83 c4 10             	add    $0x10,%esp
c010a890:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a893:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a897:	74 08                	je     c010a8a1 <file_read+0x32>
        return ret;
c010a899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a89c:	e9 f9 00 00 00       	jmp    c010a99a <file_read+0x12b>
    }
    if (!file->readable) {
c010a8a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8a4:	8b 40 04             	mov    0x4(%eax),%eax
c010a8a7:	85 c0                	test   %eax,%eax
c010a8a9:	75 0a                	jne    c010a8b5 <file_read+0x46>
        return -E_INVAL;
c010a8ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a8b0:	e9 e5 00 00 00       	jmp    c010a99a <file_read+0x12b>
    }
    fd_array_acquire(file);
c010a8b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8b8:	83 ec 0c             	sub    $0xc,%esp
c010a8bb:	50                   	push   %eax
c010a8bc:	e8 0f fb ff ff       	call   c010a3d0 <fd_array_acquire>
c010a8c1:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a8c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8c7:	8b 40 10             	mov    0x10(%eax),%eax
c010a8ca:	50                   	push   %eax
c010a8cb:	ff 75 10             	pushl  0x10(%ebp)
c010a8ce:	ff 75 0c             	pushl  0xc(%ebp)
c010a8d1:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a8d4:	50                   	push   %eax
c010a8d5:	e8 5a 06 00 00       	call   c010af34 <iobuf_init>
c010a8da:	83 c4 10             	add    $0x10,%esp
c010a8dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a8e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8e3:	8b 40 14             	mov    0x14(%eax),%eax
c010a8e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8ed:	74 17                	je     c010a906 <file_read+0x97>
c010a8ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8f2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8f5:	85 c0                	test   %eax,%eax
c010a8f7:	74 0d                	je     c010a906 <file_read+0x97>
c010a8f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8fc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8ff:	8b 40 0c             	mov    0xc(%eax),%eax
c010a902:	85 c0                	test   %eax,%eax
c010a904:	75 19                	jne    c010a91f <file_read+0xb0>
c010a906:	68 b0 69 11 c0       	push   $0xc01169b0
c010a90b:	68 1a 68 11 c0       	push   $0xc011681a
c010a910:	68 e2 00 00 00       	push   $0xe2
c010a915:	68 2f 68 11 c0       	push   $0xc011682f
c010a91a:	e8 c6 5b ff ff       	call   c01004e5 <__panic>
c010a91f:	83 ec 08             	sub    $0x8,%esp
c010a922:	68 fd 69 11 c0       	push   $0xc01169fd
c010a927:	ff 75 ec             	pushl  -0x14(%ebp)
c010a92a:	e8 c9 4e 00 00       	call   c010f7f8 <inode_check>
c010a92f:	83 c4 10             	add    $0x10,%esp
c010a932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a935:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a938:	8b 40 0c             	mov    0xc(%eax),%eax
c010a93b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a93e:	8b 52 14             	mov    0x14(%edx),%edx
c010a941:	83 ec 08             	sub    $0x8,%esp
c010a944:	ff 75 f0             	pushl  -0x10(%ebp)
c010a947:	52                   	push   %edx
c010a948:	ff d0                	call   *%eax
c010a94a:	83 c4 10             	add    $0x10,%esp
c010a94d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a950:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a953:	8b 50 08             	mov    0x8(%eax),%edx
c010a956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a959:	8b 40 0c             	mov    0xc(%eax),%eax
c010a95c:	29 c2                	sub    %eax,%edx
c010a95e:	89 d0                	mov    %edx,%eax
c010a960:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a963:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a966:	8b 00                	mov    (%eax),%eax
c010a968:	83 f8 02             	cmp    $0x2,%eax
c010a96b:	75 13                	jne    c010a980 <file_read+0x111>
        file->pos += copied;
c010a96d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a970:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a973:	8b 52 10             	mov    0x10(%edx),%edx
c010a976:	89 d1                	mov    %edx,%ecx
c010a978:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a97b:	01 ca                	add    %ecx,%edx
c010a97d:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a980:	8b 45 14             	mov    0x14(%ebp),%eax
c010a983:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a986:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a988:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a98b:	83 ec 0c             	sub    $0xc,%esp
c010a98e:	50                   	push   %eax
c010a98f:	e8 73 fa ff ff       	call   c010a407 <fd_array_release>
c010a994:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a997:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a99a:	c9                   	leave  
c010a99b:	c3                   	ret    

c010a99c <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010a99c:	55                   	push   %ebp
c010a99d:	89 e5                	mov    %esp,%ebp
c010a99f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a9a2:	8b 45 14             	mov    0x14(%ebp),%eax
c010a9a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a9ab:	83 ec 08             	sub    $0x8,%esp
c010a9ae:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a9b1:	50                   	push   %eax
c010a9b2:	ff 75 08             	pushl  0x8(%ebp)
c010a9b5:	e8 1f fc ff ff       	call   c010a5d9 <fd2file>
c010a9ba:	83 c4 10             	add    $0x10,%esp
c010a9bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9c4:	74 08                	je     c010a9ce <file_write+0x32>
        return ret;
c010a9c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c9:	e9 f9 00 00 00       	jmp    c010aac7 <file_write+0x12b>
    }
    if (!file->writable) {
c010a9ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9d1:	8b 40 08             	mov    0x8(%eax),%eax
c010a9d4:	85 c0                	test   %eax,%eax
c010a9d6:	75 0a                	jne    c010a9e2 <file_write+0x46>
        return -E_INVAL;
c010a9d8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a9dd:	e9 e5 00 00 00       	jmp    c010aac7 <file_write+0x12b>
    }
    fd_array_acquire(file);
c010a9e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9e5:	83 ec 0c             	sub    $0xc,%esp
c010a9e8:	50                   	push   %eax
c010a9e9:	e8 e2 f9 ff ff       	call   c010a3d0 <fd_array_acquire>
c010a9ee:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9f4:	8b 40 10             	mov    0x10(%eax),%eax
c010a9f7:	50                   	push   %eax
c010a9f8:	ff 75 10             	pushl  0x10(%ebp)
c010a9fb:	ff 75 0c             	pushl  0xc(%ebp)
c010a9fe:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aa01:	50                   	push   %eax
c010aa02:	e8 2d 05 00 00       	call   c010af34 <iobuf_init>
c010aa07:	83 c4 10             	add    $0x10,%esp
c010aa0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010aa0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa10:	8b 40 14             	mov    0x14(%eax),%eax
c010aa13:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa1a:	74 17                	je     c010aa33 <file_write+0x97>
c010aa1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa1f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa22:	85 c0                	test   %eax,%eax
c010aa24:	74 0d                	je     c010aa33 <file_write+0x97>
c010aa26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa29:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa2c:	8b 40 10             	mov    0x10(%eax),%eax
c010aa2f:	85 c0                	test   %eax,%eax
c010aa31:	75 19                	jne    c010aa4c <file_write+0xb0>
c010aa33:	68 04 6a 11 c0       	push   $0xc0116a04
c010aa38:	68 1a 68 11 c0       	push   $0xc011681a
c010aa3d:	68 fc 00 00 00       	push   $0xfc
c010aa42:	68 2f 68 11 c0       	push   $0xc011682f
c010aa47:	e8 99 5a ff ff       	call   c01004e5 <__panic>
c010aa4c:	83 ec 08             	sub    $0x8,%esp
c010aa4f:	68 52 6a 11 c0       	push   $0xc0116a52
c010aa54:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa57:	e8 9c 4d 00 00       	call   c010f7f8 <inode_check>
c010aa5c:	83 c4 10             	add    $0x10,%esp
c010aa5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa62:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa65:	8b 40 10             	mov    0x10(%eax),%eax
c010aa68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa6b:	8b 52 14             	mov    0x14(%edx),%edx
c010aa6e:	83 ec 08             	sub    $0x8,%esp
c010aa71:	ff 75 f0             	pushl  -0x10(%ebp)
c010aa74:	52                   	push   %edx
c010aa75:	ff d0                	call   *%eax
c010aa77:	83 c4 10             	add    $0x10,%esp
c010aa7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa80:	8b 50 08             	mov    0x8(%eax),%edx
c010aa83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa86:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa89:	29 c2                	sub    %eax,%edx
c010aa8b:	89 d0                	mov    %edx,%eax
c010aa8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa93:	8b 00                	mov    (%eax),%eax
c010aa95:	83 f8 02             	cmp    $0x2,%eax
c010aa98:	75 13                	jne    c010aaad <file_write+0x111>
        file->pos += copied;
c010aa9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa9d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aaa0:	8b 52 10             	mov    0x10(%edx),%edx
c010aaa3:	89 d1                	mov    %edx,%ecx
c010aaa5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aaa8:	01 ca                	add    %ecx,%edx
c010aaaa:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aaad:	8b 45 14             	mov    0x14(%ebp),%eax
c010aab0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aab3:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aab8:	83 ec 0c             	sub    $0xc,%esp
c010aabb:	50                   	push   %eax
c010aabc:	e8 46 f9 ff ff       	call   c010a407 <fd_array_release>
c010aac1:	83 c4 10             	add    $0x10,%esp
    return ret;
c010aac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aac7:	c9                   	leave  
c010aac8:	c3                   	ret    

c010aac9 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010aac9:	55                   	push   %ebp
c010aaca:	89 e5                	mov    %esp,%ebp
c010aacc:	83 ec 38             	sub    $0x38,%esp
    struct stat __stat, *stat = &__stat;
c010aacf:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010aad2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aad5:	83 ec 08             	sub    $0x8,%esp
c010aad8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aadb:	50                   	push   %eax
c010aadc:	ff 75 08             	pushl  0x8(%ebp)
c010aadf:	e8 f5 fa ff ff       	call   c010a5d9 <fd2file>
c010aae4:	83 c4 10             	add    $0x10,%esp
c010aae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aaee:	74 08                	je     c010aaf8 <file_seek+0x2f>
        return ret;
c010aaf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaf3:	e9 61 01 00 00       	jmp    c010ac59 <file_seek+0x190>
    }
    fd_array_acquire(file);
c010aaf8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aafb:	83 ec 0c             	sub    $0xc,%esp
c010aafe:	50                   	push   %eax
c010aaff:	e8 cc f8 ff ff       	call   c010a3d0 <fd_array_acquire>
c010ab04:	83 c4 10             	add    $0x10,%esp

    switch (whence) {
c010ab07:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab0a:	83 f8 01             	cmp    $0x1,%eax
c010ab0d:	74 12                	je     c010ab21 <file_seek+0x58>
c010ab0f:	83 f8 02             	cmp    $0x2,%eax
c010ab12:	74 1b                	je     c010ab2f <file_seek+0x66>
c010ab14:	85 c0                	test   %eax,%eax
c010ab16:	0f 84 a2 00 00 00    	je     c010abbe <file_seek+0xf5>
c010ab1c:	e9 94 00 00 00       	jmp    c010abb5 <file_seek+0xec>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ab21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab24:	8b 40 10             	mov    0x10(%eax),%eax
c010ab27:	01 45 0c             	add    %eax,0xc(%ebp)
c010ab2a:	e9 93 00 00 00       	jmp    c010abc2 <file_seek+0xf9>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ab2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab32:	8b 40 14             	mov    0x14(%eax),%eax
c010ab35:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab38:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab3c:	74 17                	je     c010ab55 <file_seek+0x8c>
c010ab3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab41:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab44:	85 c0                	test   %eax,%eax
c010ab46:	74 0d                	je     c010ab55 <file_seek+0x8c>
c010ab48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab4b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab4e:	8b 40 14             	mov    0x14(%eax),%eax
c010ab51:	85 c0                	test   %eax,%eax
c010ab53:	75 19                	jne    c010ab6e <file_seek+0xa5>
c010ab55:	68 5c 69 11 c0       	push   $0xc011695c
c010ab5a:	68 1a 68 11 c0       	push   $0xc011681a
c010ab5f:	68 16 01 00 00       	push   $0x116
c010ab64:	68 2f 68 11 c0       	push   $0xc011682f
c010ab69:	e8 77 59 ff ff       	call   c01004e5 <__panic>
c010ab6e:	83 ec 08             	sub    $0x8,%esp
c010ab71:	68 aa 69 11 c0       	push   $0xc01169aa
c010ab76:	ff 75 ec             	pushl  -0x14(%ebp)
c010ab79:	e8 7a 4c 00 00       	call   c010f7f8 <inode_check>
c010ab7e:	83 c4 10             	add    $0x10,%esp
c010ab81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab84:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab87:	8b 40 14             	mov    0x14(%eax),%eax
c010ab8a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ab8d:	8b 52 14             	mov    0x14(%edx),%edx
c010ab90:	83 ec 08             	sub    $0x8,%esp
c010ab93:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab96:	52                   	push   %edx
c010ab97:	ff d0                	call   *%eax
c010ab99:	83 c4 10             	add    $0x10,%esp
c010ab9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aba3:	75 1c                	jne    c010abc1 <file_seek+0xf8>
            pos += stat->st_size;
c010aba5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aba8:	8b 50 0c             	mov    0xc(%eax),%edx
c010abab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abae:	01 d0                	add    %edx,%eax
c010abb0:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010abb3:	eb 0c                	jmp    c010abc1 <file_seek+0xf8>
    default: ret = -E_INVAL;
c010abb5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010abbc:	eb 04                	jmp    c010abc2 <file_seek+0xf9>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010abbe:	90                   	nop
c010abbf:	eb 01                	jmp    c010abc2 <file_seek+0xf9>
    case LSEEK_CUR: pos += file->pos; break;
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
            pos += stat->st_size;
        }
        break;
c010abc1:	90                   	nop
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010abc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abc6:	75 7f                	jne    c010ac47 <file_seek+0x17e>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010abc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abcb:	8b 40 14             	mov    0x14(%eax),%eax
c010abce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010abd1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010abd5:	74 17                	je     c010abee <file_seek+0x125>
c010abd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abda:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abdd:	85 c0                	test   %eax,%eax
c010abdf:	74 0d                	je     c010abee <file_seek+0x125>
c010abe1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abe4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abe7:	8b 40 2c             	mov    0x2c(%eax),%eax
c010abea:	85 c0                	test   %eax,%eax
c010abec:	75 19                	jne    c010ac07 <file_seek+0x13e>
c010abee:	68 58 6a 11 c0       	push   $0xc0116a58
c010abf3:	68 1a 68 11 c0       	push   $0xc011681a
c010abf8:	68 1e 01 00 00       	push   $0x11e
c010abfd:	68 2f 68 11 c0       	push   $0xc011682f
c010ac02:	e8 de 58 ff ff       	call   c01004e5 <__panic>
c010ac07:	83 ec 08             	sub    $0x8,%esp
c010ac0a:	68 a8 6a 11 c0       	push   $0xc0116aa8
c010ac0f:	ff 75 e8             	pushl  -0x18(%ebp)
c010ac12:	e8 e1 4b 00 00       	call   c010f7f8 <inode_check>
c010ac17:	83 c4 10             	add    $0x10,%esp
c010ac1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac1d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac20:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ac23:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ac26:	8b 52 14             	mov    0x14(%edx),%edx
c010ac29:	83 ec 08             	sub    $0x8,%esp
c010ac2c:	ff 75 0c             	pushl  0xc(%ebp)
c010ac2f:	52                   	push   %edx
c010ac30:	ff d0                	call   *%eax
c010ac32:	83 c4 10             	add    $0x10,%esp
c010ac35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac3c:	75 09                	jne    c010ac47 <file_seek+0x17e>
            file->pos = pos;
c010ac3e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac41:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ac44:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ac47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac4a:	83 ec 0c             	sub    $0xc,%esp
c010ac4d:	50                   	push   %eax
c010ac4e:	e8 b4 f7 ff ff       	call   c010a407 <fd_array_release>
c010ac53:	83 c4 10             	add    $0x10,%esp
    return ret;
c010ac56:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ac59:	c9                   	leave  
c010ac5a:	c3                   	ret    

c010ac5b <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ac5b:	55                   	push   %ebp
c010ac5c:	89 e5                	mov    %esp,%ebp
c010ac5e:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ac61:	83 ec 08             	sub    $0x8,%esp
c010ac64:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ac67:	50                   	push   %eax
c010ac68:	ff 75 08             	pushl  0x8(%ebp)
c010ac6b:	e8 69 f9 ff ff       	call   c010a5d9 <fd2file>
c010ac70:	83 c4 10             	add    $0x10,%esp
c010ac73:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac7a:	74 08                	je     c010ac84 <file_fstat+0x29>
        return ret;
c010ac7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac7f:	e9 91 00 00 00       	jmp    c010ad15 <file_fstat+0xba>
    }
    fd_array_acquire(file);
c010ac84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac87:	83 ec 0c             	sub    $0xc,%esp
c010ac8a:	50                   	push   %eax
c010ac8b:	e8 40 f7 ff ff       	call   c010a3d0 <fd_array_acquire>
c010ac90:	83 c4 10             	add    $0x10,%esp
    ret = vop_fstat(file->node, stat);
c010ac93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac96:	8b 40 14             	mov    0x14(%eax),%eax
c010ac99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ac9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aca0:	74 17                	je     c010acb9 <file_fstat+0x5e>
c010aca2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aca5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aca8:	85 c0                	test   %eax,%eax
c010acaa:	74 0d                	je     c010acb9 <file_fstat+0x5e>
c010acac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acaf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acb2:	8b 40 14             	mov    0x14(%eax),%eax
c010acb5:	85 c0                	test   %eax,%eax
c010acb7:	75 19                	jne    c010acd2 <file_fstat+0x77>
c010acb9:	68 5c 69 11 c0       	push   $0xc011695c
c010acbe:	68 1a 68 11 c0       	push   $0xc011681a
c010acc3:	68 30 01 00 00       	push   $0x130
c010acc8:	68 2f 68 11 c0       	push   $0xc011682f
c010accd:	e8 13 58 ff ff       	call   c01004e5 <__panic>
c010acd2:	83 ec 08             	sub    $0x8,%esp
c010acd5:	68 aa 69 11 c0       	push   $0xc01169aa
c010acda:	ff 75 f0             	pushl  -0x10(%ebp)
c010acdd:	e8 16 4b 00 00       	call   c010f7f8 <inode_check>
c010ace2:	83 c4 10             	add    $0x10,%esp
c010ace5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ace8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aceb:	8b 40 14             	mov    0x14(%eax),%eax
c010acee:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010acf1:	8b 52 14             	mov    0x14(%edx),%edx
c010acf4:	83 ec 08             	sub    $0x8,%esp
c010acf7:	ff 75 0c             	pushl  0xc(%ebp)
c010acfa:	52                   	push   %edx
c010acfb:	ff d0                	call   *%eax
c010acfd:	83 c4 10             	add    $0x10,%esp
c010ad00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ad03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad06:	83 ec 0c             	sub    $0xc,%esp
c010ad09:	50                   	push   %eax
c010ad0a:	e8 f8 f6 ff ff       	call   c010a407 <fd_array_release>
c010ad0f:	83 c4 10             	add    $0x10,%esp
    return ret;
c010ad12:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad15:	c9                   	leave  
c010ad16:	c3                   	ret    

c010ad17 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010ad17:	55                   	push   %ebp
c010ad18:	89 e5                	mov    %esp,%ebp
c010ad1a:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad1d:	83 ec 08             	sub    $0x8,%esp
c010ad20:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ad23:	50                   	push   %eax
c010ad24:	ff 75 08             	pushl  0x8(%ebp)
c010ad27:	e8 ad f8 ff ff       	call   c010a5d9 <fd2file>
c010ad2c:	83 c4 10             	add    $0x10,%esp
c010ad2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad36:	74 08                	je     c010ad40 <file_fsync+0x29>
        return ret;
c010ad38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad3b:	e9 8e 00 00 00       	jmp    c010adce <file_fsync+0xb7>
    }
    fd_array_acquire(file);
c010ad40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad43:	83 ec 0c             	sub    $0xc,%esp
c010ad46:	50                   	push   %eax
c010ad47:	e8 84 f6 ff ff       	call   c010a3d0 <fd_array_acquire>
c010ad4c:	83 c4 10             	add    $0x10,%esp
    ret = vop_fsync(file->node);
c010ad4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad52:	8b 40 14             	mov    0x14(%eax),%eax
c010ad55:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad58:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad5c:	74 17                	je     c010ad75 <file_fsync+0x5e>
c010ad5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad61:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad64:	85 c0                	test   %eax,%eax
c010ad66:	74 0d                	je     c010ad75 <file_fsync+0x5e>
c010ad68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad6b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad6e:	8b 40 18             	mov    0x18(%eax),%eax
c010ad71:	85 c0                	test   %eax,%eax
c010ad73:	75 19                	jne    c010ad8e <file_fsync+0x77>
c010ad75:	68 b0 6a 11 c0       	push   $0xc0116ab0
c010ad7a:	68 1a 68 11 c0       	push   $0xc011681a
c010ad7f:	68 3e 01 00 00       	push   $0x13e
c010ad84:	68 2f 68 11 c0       	push   $0xc011682f
c010ad89:	e8 57 57 ff ff       	call   c01004e5 <__panic>
c010ad8e:	83 ec 08             	sub    $0x8,%esp
c010ad91:	68 fe 6a 11 c0       	push   $0xc0116afe
c010ad96:	ff 75 f0             	pushl  -0x10(%ebp)
c010ad99:	e8 5a 4a 00 00       	call   c010f7f8 <inode_check>
c010ad9e:	83 c4 10             	add    $0x10,%esp
c010ada1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ada4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ada7:	8b 40 18             	mov    0x18(%eax),%eax
c010adaa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010adad:	8b 52 14             	mov    0x14(%edx),%edx
c010adb0:	83 ec 0c             	sub    $0xc,%esp
c010adb3:	52                   	push   %edx
c010adb4:	ff d0                	call   *%eax
c010adb6:	83 c4 10             	add    $0x10,%esp
c010adb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010adbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adbf:	83 ec 0c             	sub    $0xc,%esp
c010adc2:	50                   	push   %eax
c010adc3:	e8 3f f6 ff ff       	call   c010a407 <fd_array_release>
c010adc8:	83 c4 10             	add    $0x10,%esp
    return ret;
c010adcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010adce:	c9                   	leave  
c010adcf:	c3                   	ret    

c010add0 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010add0:	55                   	push   %ebp
c010add1:	89 e5                	mov    %esp,%ebp
c010add3:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010add6:	83 ec 08             	sub    $0x8,%esp
c010add9:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010addc:	50                   	push   %eax
c010addd:	ff 75 08             	pushl  0x8(%ebp)
c010ade0:	e8 f4 f7 ff ff       	call   c010a5d9 <fd2file>
c010ade5:	83 c4 10             	add    $0x10,%esp
c010ade8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adef:	74 08                	je     c010adf9 <file_getdirentry+0x29>
        return ret;
c010adf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adf4:	e9 d8 00 00 00       	jmp    c010aed1 <file_getdirentry+0x101>
    }
    fd_array_acquire(file);
c010adf9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010adfc:	83 ec 0c             	sub    $0xc,%esp
c010adff:	50                   	push   %eax
c010ae00:	e8 cb f5 ff ff       	call   c010a3d0 <fd_array_acquire>
c010ae05:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010ae08:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae0b:	8b 00                	mov    (%eax),%eax
c010ae0d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae10:	83 c2 04             	add    $0x4,%edx
c010ae13:	50                   	push   %eax
c010ae14:	68 00 01 00 00       	push   $0x100
c010ae19:	52                   	push   %edx
c010ae1a:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ae1d:	50                   	push   %eax
c010ae1e:	e8 11 01 00 00       	call   c010af34 <iobuf_init>
c010ae23:	83 c4 10             	add    $0x10,%esp
c010ae26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010ae29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae2c:	8b 40 14             	mov    0x14(%eax),%eax
c010ae2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ae36:	74 17                	je     c010ae4f <file_getdirentry+0x7f>
c010ae38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae3b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae3e:	85 c0                	test   %eax,%eax
c010ae40:	74 0d                	je     c010ae4f <file_getdirentry+0x7f>
c010ae42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae45:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae48:	8b 40 20             	mov    0x20(%eax),%eax
c010ae4b:	85 c0                	test   %eax,%eax
c010ae4d:	75 19                	jne    c010ae68 <file_getdirentry+0x98>
c010ae4f:	68 04 6b 11 c0       	push   $0xc0116b04
c010ae54:	68 1a 68 11 c0       	push   $0xc011681a
c010ae59:	68 4e 01 00 00       	push   $0x14e
c010ae5e:	68 2f 68 11 c0       	push   $0xc011682f
c010ae63:	e8 7d 56 ff ff       	call   c01004e5 <__panic>
c010ae68:	83 ec 08             	sub    $0x8,%esp
c010ae6b:	68 58 6b 11 c0       	push   $0xc0116b58
c010ae70:	ff 75 ec             	pushl  -0x14(%ebp)
c010ae73:	e8 80 49 00 00       	call   c010f7f8 <inode_check>
c010ae78:	83 c4 10             	add    $0x10,%esp
c010ae7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae7e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae81:	8b 40 20             	mov    0x20(%eax),%eax
c010ae84:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae87:	8b 52 14             	mov    0x14(%edx),%edx
c010ae8a:	83 ec 08             	sub    $0x8,%esp
c010ae8d:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae90:	52                   	push   %edx
c010ae91:	ff d0                	call   *%eax
c010ae93:	83 c4 10             	add    $0x10,%esp
c010ae96:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae9d:	75 20                	jne    c010aebf <file_getdirentry+0xef>
        direntp->offset += iobuf_used(iob);
c010ae9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aea2:	8b 00                	mov    (%eax),%eax
c010aea4:	89 c1                	mov    %eax,%ecx
c010aea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aea9:	8b 50 08             	mov    0x8(%eax),%edx
c010aeac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeaf:	8b 40 0c             	mov    0xc(%eax),%eax
c010aeb2:	29 c2                	sub    %eax,%edx
c010aeb4:	89 d0                	mov    %edx,%eax
c010aeb6:	01 c8                	add    %ecx,%eax
c010aeb8:	89 c2                	mov    %eax,%edx
c010aeba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aebd:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010aebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aec2:	83 ec 0c             	sub    $0xc,%esp
c010aec5:	50                   	push   %eax
c010aec6:	e8 3c f5 ff ff       	call   c010a407 <fd_array_release>
c010aecb:	83 c4 10             	add    $0x10,%esp
    return ret;
c010aece:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aed1:	c9                   	leave  
c010aed2:	c3                   	ret    

c010aed3 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010aed3:	55                   	push   %ebp
c010aed4:	89 e5                	mov    %esp,%ebp
c010aed6:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010aed9:	83 ec 08             	sub    $0x8,%esp
c010aedc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010aedf:	50                   	push   %eax
c010aee0:	ff 75 08             	pushl  0x8(%ebp)
c010aee3:	e8 f1 f6 ff ff       	call   c010a5d9 <fd2file>
c010aee8:	83 c4 10             	add    $0x10,%esp
c010aeeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aeee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aef2:	74 05                	je     c010aef9 <file_dup+0x26>
        return ret;
c010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef7:	eb 39                	jmp    c010af32 <file_dup+0x5f>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010aef9:	83 ec 08             	sub    $0x8,%esp
c010aefc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010aeff:	50                   	push   %eax
c010af00:	ff 75 0c             	pushl  0xc(%ebp)
c010af03:	e8 7a f3 ff ff       	call   c010a282 <fd_array_alloc>
c010af08:	83 c4 10             	add    $0x10,%esp
c010af0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af12:	74 05                	je     c010af19 <file_dup+0x46>
        return ret;
c010af14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af17:	eb 19                	jmp    c010af32 <file_dup+0x5f>
    }
    fd_array_dup(file2, file1);
c010af19:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af1f:	83 ec 08             	sub    $0x8,%esp
c010af22:	52                   	push   %edx
c010af23:	50                   	push   %eax
c010af24:	e8 1d f6 ff ff       	call   c010a546 <fd_array_dup>
c010af29:	83 c4 10             	add    $0x10,%esp
    return file2->fd;
c010af2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af2f:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010af32:	c9                   	leave  
c010af33:	c3                   	ret    

c010af34 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010af34:	55                   	push   %ebp
c010af35:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010af37:	8b 45 08             	mov    0x8(%ebp),%eax
c010af3a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af3d:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010af3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af42:	8b 55 14             	mov    0x14(%ebp),%edx
c010af45:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010af48:	8b 45 08             	mov    0x8(%ebp),%eax
c010af4b:	8b 55 10             	mov    0x10(%ebp),%edx
c010af4e:	89 50 0c             	mov    %edx,0xc(%eax)
c010af51:	8b 45 08             	mov    0x8(%ebp),%eax
c010af54:	8b 50 0c             	mov    0xc(%eax),%edx
c010af57:	8b 45 08             	mov    0x8(%ebp),%eax
c010af5a:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010af5d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010af60:	5d                   	pop    %ebp
c010af61:	c3                   	ret    

c010af62 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010af62:	55                   	push   %ebp
c010af63:	89 e5                	mov    %esp,%ebp
c010af65:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010af68:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6b:	8b 40 0c             	mov    0xc(%eax),%eax
c010af6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af74:	3b 45 10             	cmp    0x10(%ebp),%eax
c010af77:	76 06                	jbe    c010af7f <iobuf_move+0x1d>
        alen = len;
c010af79:	8b 45 10             	mov    0x10(%ebp),%eax
c010af7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010af7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af83:	74 51                	je     c010afd6 <iobuf_move+0x74>
        void *src = iob->io_base, *dst = data;
c010af85:	8b 45 08             	mov    0x8(%ebp),%eax
c010af88:	8b 00                	mov    (%eax),%eax
c010af8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010af8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af90:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010af93:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010af97:	74 12                	je     c010afab <iobuf_move+0x49>
            void *tmp = src;
c010af99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010af9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010afa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010afa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010afab:	83 ec 04             	sub    $0x4,%esp
c010afae:	ff 75 f4             	pushl  -0xc(%ebp)
c010afb1:	ff 75 f0             	pushl  -0x10(%ebp)
c010afb4:	ff 75 ec             	pushl  -0x14(%ebp)
c010afb7:	e8 94 8a 00 00       	call   c0113a50 <memmove>
c010afbc:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010afbf:	83 ec 08             	sub    $0x8,%esp
c010afc2:	ff 75 f4             	pushl  -0xc(%ebp)
c010afc5:	ff 75 08             	pushl  0x8(%ebp)
c010afc8:	e8 9d 00 00 00       	call   c010b06a <iobuf_skip>
c010afcd:	83 c4 10             	add    $0x10,%esp
c010afd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afd3:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010afd6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010afda:	74 08                	je     c010afe4 <iobuf_move+0x82>
        *copiedp = alen;
c010afdc:	8b 45 18             	mov    0x18(%ebp),%eax
c010afdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010afe2:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010afe4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010afe8:	75 07                	jne    c010aff1 <iobuf_move+0x8f>
c010afea:	b8 00 00 00 00       	mov    $0x0,%eax
c010afef:	eb 05                	jmp    c010aff6 <iobuf_move+0x94>
c010aff1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010aff6:	c9                   	leave  
c010aff7:	c3                   	ret    

c010aff8 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010aff8:	55                   	push   %ebp
c010aff9:	89 e5                	mov    %esp,%ebp
c010affb:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010affe:	8b 45 08             	mov    0x8(%ebp),%eax
c010b001:	8b 40 0c             	mov    0xc(%eax),%eax
c010b004:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b007:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b00a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b00d:	76 06                	jbe    c010b015 <iobuf_move_zeros+0x1d>
        alen = len;
c010b00f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b012:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b015:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b019:	74 2d                	je     c010b048 <iobuf_move_zeros+0x50>
        memset(iob->io_base, 0, alen);
c010b01b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b01e:	8b 00                	mov    (%eax),%eax
c010b020:	83 ec 04             	sub    $0x4,%esp
c010b023:	ff 75 f4             	pushl  -0xc(%ebp)
c010b026:	6a 00                	push   $0x0
c010b028:	50                   	push   %eax
c010b029:	e8 e2 89 00 00       	call   c0113a10 <memset>
c010b02e:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010b031:	83 ec 08             	sub    $0x8,%esp
c010b034:	ff 75 f4             	pushl  -0xc(%ebp)
c010b037:	ff 75 08             	pushl  0x8(%ebp)
c010b03a:	e8 2b 00 00 00       	call   c010b06a <iobuf_skip>
c010b03f:	83 c4 10             	add    $0x10,%esp
c010b042:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b045:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b048:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b04c:	74 08                	je     c010b056 <iobuf_move_zeros+0x5e>
        *copiedp = alen;
c010b04e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b051:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b054:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b056:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b05a:	75 07                	jne    c010b063 <iobuf_move_zeros+0x6b>
c010b05c:	b8 00 00 00 00       	mov    $0x0,%eax
c010b061:	eb 05                	jmp    c010b068 <iobuf_move_zeros+0x70>
c010b063:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b068:	c9                   	leave  
c010b069:	c3                   	ret    

c010b06a <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b06a:	55                   	push   %ebp
c010b06b:	89 e5                	mov    %esp,%ebp
c010b06d:	83 ec 08             	sub    $0x8,%esp
    assert(iob->io_resid >= n);
c010b070:	8b 45 08             	mov    0x8(%ebp),%eax
c010b073:	8b 40 0c             	mov    0xc(%eax),%eax
c010b076:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b079:	73 16                	jae    c010b091 <iobuf_skip+0x27>
c010b07b:	68 64 6b 11 c0       	push   $0xc0116b64
c010b080:	68 77 6b 11 c0       	push   $0xc0116b77
c010b085:	6a 4a                	push   $0x4a
c010b087:	68 8c 6b 11 c0       	push   $0xc0116b8c
c010b08c:	e8 54 54 ff ff       	call   c01004e5 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b091:	8b 45 08             	mov    0x8(%ebp),%eax
c010b094:	8b 10                	mov    (%eax),%edx
c010b096:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b099:	01 c2                	add    %eax,%edx
c010b09b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b09e:	89 10                	mov    %edx,(%eax)
c010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a3:	8b 40 04             	mov    0x4(%eax),%eax
c010b0a6:	89 c2                	mov    %eax,%edx
c010b0a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0ab:	01 d0                	add    %edx,%eax
c010b0ad:	89 c2                	mov    %eax,%edx
c010b0af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b2:	89 50 04             	mov    %edx,0x4(%eax)
c010b0b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b8:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0bb:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b0be:	89 c2                	mov    %eax,%edx
c010b0c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c3:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b0c6:	90                   	nop
c010b0c7:	c9                   	leave  
c010b0c8:	c3                   	ret    

c010b0c9 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b0c9:	55                   	push   %ebp
c010b0ca:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b0cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cf:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b0d2:	5d                   	pop    %ebp
c010b0d3:	c3                   	ret    

c010b0d4 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b0d4:	55                   	push   %ebp
c010b0d5:	89 e5                	mov    %esp,%ebp
c010b0d7:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b0da:	e8 08 48 00 00       	call   c010f8e7 <vfs_init>
    dev_init();
c010b0df:	e8 c7 55 00 00       	call   c01106ab <dev_init>
    sfs_init();
c010b0e4:	e8 13 56 00 00       	call   c01106fc <sfs_init>
}
c010b0e9:	90                   	nop
c010b0ea:	c9                   	leave  
c010b0eb:	c3                   	ret    

c010b0ec <fs_cleanup>:

void
fs_cleanup(void) {
c010b0ec:	55                   	push   %ebp
c010b0ed:	89 e5                	mov    %esp,%ebp
c010b0ef:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b0f2:	e8 d0 33 00 00       	call   c010e4c7 <vfs_cleanup>
}
c010b0f7:	90                   	nop
c010b0f8:	c9                   	leave  
c010b0f9:	c3                   	ret    

c010b0fa <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b0fa:	55                   	push   %ebp
c010b0fb:	89 e5                	mov    %esp,%ebp
c010b0fd:	83 ec 08             	sub    $0x8,%esp
    down(&(filesp->files_sem));
c010b100:	8b 45 08             	mov    0x8(%ebp),%eax
c010b103:	83 c0 0c             	add    $0xc,%eax
c010b106:	83 ec 0c             	sub    $0xc,%esp
c010b109:	50                   	push   %eax
c010b10a:	e8 bc e5 ff ff       	call   c01096cb <down>
c010b10f:	83 c4 10             	add    $0x10,%esp
}
c010b112:	90                   	nop
c010b113:	c9                   	leave  
c010b114:	c3                   	ret    

c010b115 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b115:	55                   	push   %ebp
c010b116:	89 e5                	mov    %esp,%ebp
c010b118:	83 ec 08             	sub    $0x8,%esp
    up(&(filesp->files_sem));
c010b11b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b11e:	83 c0 0c             	add    $0xc,%eax
c010b121:	83 ec 0c             	sub    $0xc,%esp
c010b124:	50                   	push   %eax
c010b125:	e8 85 e5 ff ff       	call   c01096af <up>
c010b12a:	83 c4 10             	add    $0x10,%esp
}
c010b12d:	90                   	nop
c010b12e:	c9                   	leave  
c010b12f:	c3                   	ret    

c010b130 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b130:	55                   	push   %ebp
c010b131:	89 e5                	mov    %esp,%ebp
c010b133:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b136:	83 ec 0c             	sub    $0xc,%esp
c010b139:	68 00 10 00 00       	push   $0x1000
c010b13e:	e8 0d a7 ff ff       	call   c0105850 <kmalloc>
c010b143:	83 c4 10             	add    $0x10,%esp
c010b146:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b149:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b14d:	74 45                	je     c010b194 <files_create+0x64>
        filesp->pwd = NULL;
c010b14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b152:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b15b:	8d 50 18             	lea    0x18(%eax),%edx
c010b15e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b161:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b164:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b167:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b16e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b171:	83 c0 0c             	add    $0xc,%eax
c010b174:	83 ec 08             	sub    $0x8,%esp
c010b177:	6a 01                	push   $0x1
c010b179:	50                   	push   %eax
c010b17a:	e8 c3 e3 ff ff       	call   c0109542 <sem_init>
c010b17f:	83 c4 10             	add    $0x10,%esp
        fd_array_init(filesp->fd_array);
c010b182:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b185:	8b 40 04             	mov    0x4(%eax),%eax
c010b188:	83 ec 0c             	sub    $0xc,%esp
c010b18b:	50                   	push   %eax
c010b18c:	e8 ab f0 ff ff       	call   c010a23c <fd_array_init>
c010b191:	83 c4 10             	add    $0x10,%esp
    }
    return filesp;
c010b194:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b197:	c9                   	leave  
c010b198:	c3                   	ret    

c010b199 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b199:	55                   	push   %ebp
c010b19a:	89 e5                	mov    %esp,%ebp
c010b19c:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b19f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b1a3:	74 0f                	je     c010b1b4 <files_destroy+0x1b>
c010b1a5:	ff 75 08             	pushl  0x8(%ebp)
c010b1a8:	e8 1c ff ff ff       	call   c010b0c9 <files_count>
c010b1ad:	83 c4 04             	add    $0x4,%esp
c010b1b0:	85 c0                	test   %eax,%eax
c010b1b2:	74 16                	je     c010b1ca <files_destroy+0x31>
c010b1b4:	68 9c 6b 11 c0       	push   $0xc0116b9c
c010b1b9:	68 c7 6b 11 c0       	push   $0xc0116bc7
c010b1be:	6a 33                	push   $0x33
c010b1c0:	68 dc 6b 11 c0       	push   $0xc0116bdc
c010b1c5:	e8 1b 53 ff ff       	call   c01004e5 <__panic>
    if (filesp->pwd != NULL) {
c010b1ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1cd:	8b 00                	mov    (%eax),%eax
c010b1cf:	85 c0                	test   %eax,%eax
c010b1d1:	74 11                	je     c010b1e4 <files_destroy+0x4b>
        vop_ref_dec(filesp->pwd);
c010b1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d6:	8b 00                	mov    (%eax),%eax
c010b1d8:	83 ec 0c             	sub    $0xc,%esp
c010b1db:	50                   	push   %eax
c010b1dc:	e8 5f 44 00 00       	call   c010f640 <inode_ref_dec>
c010b1e1:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *file = filesp->fd_array;
c010b1e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1e7:	8b 40 04             	mov    0x4(%eax),%eax
c010b1ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b1f4:	eb 3f                	jmp    c010b235 <files_destroy+0x9c>
        if (file->status == FD_OPENED) {
c010b1f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1f9:	8b 00                	mov    (%eax),%eax
c010b1fb:	83 f8 02             	cmp    $0x2,%eax
c010b1fe:	75 0e                	jne    c010b20e <files_destroy+0x75>
            fd_array_close(file);
c010b200:	83 ec 0c             	sub    $0xc,%esp
c010b203:	ff 75 f0             	pushl  -0x10(%ebp)
c010b206:	e8 c1 f2 ff ff       	call   c010a4cc <fd_array_close>
c010b20b:	83 c4 10             	add    $0x10,%esp
        }
        assert(file->status == FD_NONE);
c010b20e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b211:	8b 00                	mov    (%eax),%eax
c010b213:	85 c0                	test   %eax,%eax
c010b215:	74 16                	je     c010b22d <files_destroy+0x94>
c010b217:	68 e9 6b 11 c0       	push   $0xc0116be9
c010b21c:	68 c7 6b 11 c0       	push   $0xc0116bc7
c010b221:	6a 3d                	push   $0x3d
c010b223:	68 dc 6b 11 c0       	push   $0xc0116bdc
c010b228:	e8 b8 52 ff ff       	call   c01004e5 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b22d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b231:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b235:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b238:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b23d:	76 b7                	jbe    c010b1f6 <files_destroy+0x5d>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b23f:	83 ec 0c             	sub    $0xc,%esp
c010b242:	ff 75 08             	pushl  0x8(%ebp)
c010b245:	e8 1e a6 ff ff       	call   c0105868 <kfree>
c010b24a:	83 c4 10             	add    $0x10,%esp
}
c010b24d:	90                   	nop
c010b24e:	c9                   	leave  
c010b24f:	c3                   	ret    

c010b250 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b250:	55                   	push   %ebp
c010b251:	89 e5                	mov    %esp,%ebp
c010b253:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b256:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b25a:	74 0f                	je     c010b26b <files_closeall+0x1b>
c010b25c:	ff 75 08             	pushl  0x8(%ebp)
c010b25f:	e8 65 fe ff ff       	call   c010b0c9 <files_count>
c010b264:	83 c4 04             	add    $0x4,%esp
c010b267:	85 c0                	test   %eax,%eax
c010b269:	7f 16                	jg     c010b281 <files_closeall+0x31>
c010b26b:	68 04 6c 11 c0       	push   $0xc0116c04
c010b270:	68 c7 6b 11 c0       	push   $0xc0116bc7
c010b275:	6a 45                	push   $0x45
c010b277:	68 dc 6b 11 c0       	push   $0xc0116bdc
c010b27c:	e8 64 52 ff ff       	call   c01004e5 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b281:	8b 45 08             	mov    0x8(%ebp),%eax
c010b284:	8b 40 04             	mov    0x4(%eax),%eax
c010b287:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b28a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b291:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b295:	eb 20                	jmp    c010b2b7 <files_closeall+0x67>
        if (file->status == FD_OPENED) {
c010b297:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b29a:	8b 00                	mov    (%eax),%eax
c010b29c:	83 f8 02             	cmp    $0x2,%eax
c010b29f:	75 0e                	jne    c010b2af <files_closeall+0x5f>
            fd_array_close(file);
c010b2a1:	83 ec 0c             	sub    $0xc,%esp
c010b2a4:	ff 75 f0             	pushl  -0x10(%ebp)
c010b2a7:	e8 20 f2 ff ff       	call   c010a4cc <fd_array_close>
c010b2ac:	83 c4 10             	add    $0x10,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b2af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2b3:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b2b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2ba:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b2bf:	76 d6                	jbe    c010b297 <files_closeall+0x47>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b2c1:	90                   	nop
c010b2c2:	c9                   	leave  
c010b2c3:	c3                   	ret    

c010b2c4 <dup_fs>:

int
dup_fs(struct files_struct *to, struct files_struct *from) {
c010b2c4:	55                   	push   %ebp
c010b2c5:	89 e5                	mov    %esp,%ebp
c010b2c7:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b2ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2ce:	74 06                	je     c010b2d6 <dup_fs+0x12>
c010b2d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b2d4:	75 16                	jne    c010b2ec <dup_fs+0x28>
c010b2d6:	68 2e 6c 11 c0       	push   $0xc0116c2e
c010b2db:	68 c7 6b 11 c0       	push   $0xc0116bc7
c010b2e0:	6a 53                	push   $0x53
c010b2e2:	68 dc 6b 11 c0       	push   $0xc0116bdc
c010b2e7:	e8 f9 51 ff ff       	call   c01004e5 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b2ec:	83 ec 0c             	sub    $0xc,%esp
c010b2ef:	ff 75 08             	pushl  0x8(%ebp)
c010b2f2:	e8 d2 fd ff ff       	call   c010b0c9 <files_count>
c010b2f7:	83 c4 10             	add    $0x10,%esp
c010b2fa:	85 c0                	test   %eax,%eax
c010b2fc:	75 12                	jne    c010b310 <dup_fs+0x4c>
c010b2fe:	83 ec 0c             	sub    $0xc,%esp
c010b301:	ff 75 0c             	pushl  0xc(%ebp)
c010b304:	e8 c0 fd ff ff       	call   c010b0c9 <files_count>
c010b309:	83 c4 10             	add    $0x10,%esp
c010b30c:	85 c0                	test   %eax,%eax
c010b30e:	7f 16                	jg     c010b326 <dup_fs+0x62>
c010b310:	68 4c 6c 11 c0       	push   $0xc0116c4c
c010b315:	68 c7 6b 11 c0       	push   $0xc0116bc7
c010b31a:	6a 54                	push   $0x54
c010b31c:	68 dc 6b 11 c0       	push   $0xc0116bdc
c010b321:	e8 bf 51 ff ff       	call   c01004e5 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b326:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b329:	8b 10                	mov    (%eax),%edx
c010b32b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b32e:	89 10                	mov    %edx,(%eax)
c010b330:	8b 45 08             	mov    0x8(%ebp),%eax
c010b333:	8b 00                	mov    (%eax),%eax
c010b335:	85 c0                	test   %eax,%eax
c010b337:	74 11                	je     c010b34a <dup_fs+0x86>
        vop_ref_inc(to->pwd);
c010b339:	8b 45 08             	mov    0x8(%ebp),%eax
c010b33c:	8b 00                	mov    (%eax),%eax
c010b33e:	83 ec 0c             	sub    $0xc,%esp
c010b341:	50                   	push   %eax
c010b342:	e8 df 42 00 00       	call   c010f626 <inode_ref_inc>
c010b347:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b34a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34d:	8b 40 04             	mov    0x4(%eax),%eax
c010b350:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b353:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b356:	8b 40 04             	mov    0x4(%eax),%eax
c010b359:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b35c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b363:	eb 30                	jmp    c010b395 <dup_fs+0xd1>
        if (from_file->status == FD_OPENED) {
c010b365:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b368:	8b 00                	mov    (%eax),%eax
c010b36a:	83 f8 02             	cmp    $0x2,%eax
c010b36d:	75 1a                	jne    c010b389 <dup_fs+0xc5>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b36f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b372:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b378:	83 ec 08             	sub    $0x8,%esp
c010b37b:	ff 75 ec             	pushl  -0x14(%ebp)
c010b37e:	ff 75 f0             	pushl  -0x10(%ebp)
c010b381:	e8 c0 f1 ff ff       	call   c010a546 <fd_array_dup>
c010b386:	83 c4 10             	add    $0x10,%esp
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b389:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b38d:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b391:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b398:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b39d:	76 c6                	jbe    c010b365 <dup_fs+0xa1>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b39f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b3a4:	c9                   	leave  
c010b3a5:	c3                   	ret    

c010b3a6 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010b3a6:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010b3aa:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010b3ac:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010b3af:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010b3b2:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010b3b5:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010b3b8:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010b3bb:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010b3be:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010b3c1:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010b3c5:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010b3c8:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010b3cb:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010b3ce:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010b3d1:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010b3d4:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010b3d7:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010b3da:	ff 30                	pushl  (%eax)

    ret
c010b3dc:	c3                   	ret    

c010b3dd <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010b3dd:	52                   	push   %edx
    call *%ebx              # call fn
c010b3de:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010b3e0:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010b3e1:	e8 d0 0d 00 00       	call   c010c1b6 <do_exit>

c010b3e6 <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010b3e6:	55                   	push   %ebp
c010b3e7:	89 e5                	mov    %esp,%ebp
c010b3e9:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010b3ec:	8b 55 10             	mov    0x10(%ebp),%edx
c010b3ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f2:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010b3f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b3fa:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010b3fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b400:	83 c0 08             	add    $0x8,%eax
c010b403:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b406:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b409:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b40c:	89 50 04             	mov    %edx,0x4(%eax)
c010b40f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b412:	8b 50 04             	mov    0x4(%eax),%edx
c010b415:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b418:	89 10                	mov    %edx,(%eax)
    return timer;
c010b41a:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b41d:	c9                   	leave  
c010b41e:	c3                   	ret    

c010b41f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b41f:	55                   	push   %ebp
c010b420:	89 e5                	mov    %esp,%ebp
c010b422:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b425:	9c                   	pushf  
c010b426:	58                   	pop    %eax
c010b427:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b42a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b42d:	25 00 02 00 00       	and    $0x200,%eax
c010b432:	85 c0                	test   %eax,%eax
c010b434:	74 0c                	je     c010b442 <__intr_save+0x23>
        intr_disable();
c010b436:	e8 6c 6e ff ff       	call   c01022a7 <intr_disable>
        return 1;
c010b43b:	b8 01 00 00 00       	mov    $0x1,%eax
c010b440:	eb 05                	jmp    c010b447 <__intr_save+0x28>
    }
    return 0;
c010b442:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b447:	c9                   	leave  
c010b448:	c3                   	ret    

c010b449 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b449:	55                   	push   %ebp
c010b44a:	89 e5                	mov    %esp,%ebp
c010b44c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b44f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b453:	74 05                	je     c010b45a <__intr_restore+0x11>
        intr_enable();
c010b455:	e8 46 6e ff ff       	call   c01022a0 <intr_enable>
    }
}
c010b45a:	90                   	nop
c010b45b:	c9                   	leave  
c010b45c:	c3                   	ret    

c010b45d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010b45d:	55                   	push   %ebp
c010b45e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010b460:	8b 45 08             	mov    0x8(%ebp),%eax
c010b463:	8b 15 00 52 15 c0    	mov    0xc0155200,%edx
c010b469:	29 d0                	sub    %edx,%eax
c010b46b:	c1 f8 02             	sar    $0x2,%eax
c010b46e:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010b474:	5d                   	pop    %ebp
c010b475:	c3                   	ret    

c010b476 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010b476:	55                   	push   %ebp
c010b477:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010b479:	ff 75 08             	pushl  0x8(%ebp)
c010b47c:	e8 dc ff ff ff       	call   c010b45d <page2ppn>
c010b481:	83 c4 04             	add    $0x4,%esp
c010b484:	c1 e0 0c             	shl    $0xc,%eax
}
c010b487:	c9                   	leave  
c010b488:	c3                   	ret    

c010b489 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010b489:	55                   	push   %ebp
c010b48a:	89 e5                	mov    %esp,%ebp
c010b48c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010b48f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b492:	c1 e8 0c             	shr    $0xc,%eax
c010b495:	89 c2                	mov    %eax,%edx
c010b497:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010b49c:	39 c2                	cmp    %eax,%edx
c010b49e:	72 14                	jb     c010b4b4 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010b4a0:	83 ec 04             	sub    $0x4,%esp
c010b4a3:	68 7c 6c 11 c0       	push   $0xc0116c7c
c010b4a8:	6a 5e                	push   $0x5e
c010b4aa:	68 9b 6c 11 c0       	push   $0xc0116c9b
c010b4af:	e8 31 50 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c010b4b4:	8b 0d 00 52 15 c0    	mov    0xc0155200,%ecx
c010b4ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4bd:	c1 e8 0c             	shr    $0xc,%eax
c010b4c0:	89 c2                	mov    %eax,%edx
c010b4c2:	89 d0                	mov    %edx,%eax
c010b4c4:	c1 e0 03             	shl    $0x3,%eax
c010b4c7:	01 d0                	add    %edx,%eax
c010b4c9:	c1 e0 02             	shl    $0x2,%eax
c010b4cc:	01 c8                	add    %ecx,%eax
}
c010b4ce:	c9                   	leave  
c010b4cf:	c3                   	ret    

c010b4d0 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010b4d0:	55                   	push   %ebp
c010b4d1:	89 e5                	mov    %esp,%ebp
c010b4d3:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010b4d6:	ff 75 08             	pushl  0x8(%ebp)
c010b4d9:	e8 98 ff ff ff       	call   c010b476 <page2pa>
c010b4de:	83 c4 04             	add    $0x4,%esp
c010b4e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4e7:	c1 e8 0c             	shr    $0xc,%eax
c010b4ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4ed:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010b4f2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b4f5:	72 14                	jb     c010b50b <page2kva+0x3b>
c010b4f7:	ff 75 f4             	pushl  -0xc(%ebp)
c010b4fa:	68 ac 6c 11 c0       	push   $0xc0116cac
c010b4ff:	6a 65                	push   $0x65
c010b501:	68 9b 6c 11 c0       	push   $0xc0116c9b
c010b506:	e8 da 4f ff ff       	call   c01004e5 <__panic>
c010b50b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b50e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010b513:	c9                   	leave  
c010b514:	c3                   	ret    

c010b515 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010b515:	55                   	push   %ebp
c010b516:	89 e5                	mov    %esp,%ebp
c010b518:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c010b51b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b51e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b521:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010b528:	77 14                	ja     c010b53e <kva2page+0x29>
c010b52a:	ff 75 f4             	pushl  -0xc(%ebp)
c010b52d:	68 d0 6c 11 c0       	push   $0xc0116cd0
c010b532:	6a 6a                	push   $0x6a
c010b534:	68 9b 6c 11 c0       	push   $0xc0116c9b
c010b539:	e8 a7 4f ff ff       	call   c01004e5 <__panic>
c010b53e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b541:	05 00 00 00 40       	add    $0x40000000,%eax
c010b546:	83 ec 0c             	sub    $0xc,%esp
c010b549:	50                   	push   %eax
c010b54a:	e8 3a ff ff ff       	call   c010b489 <pa2page>
c010b54f:	83 c4 10             	add    $0x10,%esp
}
c010b552:	c9                   	leave  
c010b553:	c3                   	ret    

c010b554 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010b554:	55                   	push   %ebp
c010b555:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010b557:	8b 45 08             	mov    0x8(%ebp),%eax
c010b55a:	8b 40 18             	mov    0x18(%eax),%eax
c010b55d:	8d 50 01             	lea    0x1(%eax),%edx
c010b560:	8b 45 08             	mov    0x8(%ebp),%eax
c010b563:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b566:	8b 45 08             	mov    0x8(%ebp),%eax
c010b569:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b56c:	5d                   	pop    %ebp
c010b56d:	c3                   	ret    

c010b56e <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010b56e:	55                   	push   %ebp
c010b56f:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010b571:	8b 45 08             	mov    0x8(%ebp),%eax
c010b574:	8b 40 18             	mov    0x18(%eax),%eax
c010b577:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b57a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b57d:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b580:	8b 45 08             	mov    0x8(%ebp),%eax
c010b583:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b586:	5d                   	pop    %ebp
c010b587:	c3                   	ret    

c010b588 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010b588:	55                   	push   %ebp
c010b589:	89 e5                	mov    %esp,%ebp
c010b58b:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010b58e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b592:	74 29                	je     c010b5bd <lock_mm+0x35>
        down(&(mm->mm_sem));
c010b594:	8b 45 08             	mov    0x8(%ebp),%eax
c010b597:	83 c0 1c             	add    $0x1c,%eax
c010b59a:	83 ec 0c             	sub    $0xc,%esp
c010b59d:	50                   	push   %eax
c010b59e:	e8 28 e1 ff ff       	call   c01096cb <down>
c010b5a3:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c010b5a6:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010b5ab:	85 c0                	test   %eax,%eax
c010b5ad:	74 0e                	je     c010b5bd <lock_mm+0x35>
            mm->locked_by = current->pid;
c010b5af:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010b5b4:	8b 50 04             	mov    0x4(%eax),%edx
c010b5b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ba:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b5bd:	90                   	nop
c010b5be:	c9                   	leave  
c010b5bf:	c3                   	ret    

c010b5c0 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b5c0:	55                   	push   %ebp
c010b5c1:	89 e5                	mov    %esp,%ebp
c010b5c3:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010b5c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5ca:	74 1c                	je     c010b5e8 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c010b5cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5cf:	83 c0 1c             	add    $0x1c,%eax
c010b5d2:	83 ec 0c             	sub    $0xc,%esp
c010b5d5:	50                   	push   %eax
c010b5d6:	e8 d4 e0 ff ff       	call   c01096af <up>
c010b5db:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c010b5de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b5e8:	90                   	nop
c010b5e9:	c9                   	leave  
c010b5ea:	c3                   	ret    

c010b5eb <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010b5eb:	55                   	push   %ebp
c010b5ec:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010b5ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f1:	8b 40 08             	mov    0x8(%eax),%eax
c010b5f4:	8d 50 01             	lea    0x1(%eax),%edx
c010b5f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5fa:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010b5fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b600:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b603:	5d                   	pop    %ebp
c010b604:	c3                   	ret    

c010b605 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010b605:	55                   	push   %ebp
c010b606:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010b608:	8b 45 08             	mov    0x8(%ebp),%eax
c010b60b:	8b 40 08             	mov    0x8(%eax),%eax
c010b60e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b611:	8b 45 08             	mov    0x8(%ebp),%eax
c010b614:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010b617:	8b 45 08             	mov    0x8(%ebp),%eax
c010b61a:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b61d:	5d                   	pop    %ebp
c010b61e:	c3                   	ret    

c010b61f <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010b61f:	55                   	push   %ebp
c010b620:	89 e5                	mov    %esp,%ebp
c010b622:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010b625:	83 ec 0c             	sub    $0xc,%esp
c010b628:	68 c8 00 00 00       	push   $0xc8
c010b62d:	e8 1e a2 ff ff       	call   c0105850 <kmalloc>
c010b632:	83 c4 10             	add    $0x10,%esp
c010b635:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010b638:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b63c:	0f 84 60 01 00 00    	je     c010b7a2 <alloc_proc+0x183>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010b642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b645:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010b64b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b64e:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010b655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b658:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010b65f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b662:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010b669:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b66c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010b673:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010b67d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b680:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010b687:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b68a:	83 c0 1c             	add    $0x1c,%eax
c010b68d:	83 ec 04             	sub    $0x4,%esp
c010b690:	6a 20                	push   $0x20
c010b692:	6a 00                	push   $0x0
c010b694:	50                   	push   %eax
c010b695:	e8 76 83 00 00       	call   c0113a10 <memset>
c010b69a:	83 c4 10             	add    $0x10,%esp
        proc->tf = NULL;
c010b69d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6a0:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010b6a7:	8b 15 fc 51 15 c0    	mov    0xc01551fc,%edx
c010b6ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6b0:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010b6b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6b6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010b6bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6c0:	83 c0 48             	add    $0x48,%eax
c010b6c3:	83 ec 04             	sub    $0x4,%esp
c010b6c6:	6a 32                	push   $0x32
c010b6c8:	6a 00                	push   $0x0
c010b6ca:	50                   	push   %eax
c010b6cb:	e8 40 83 00 00       	call   c0113a10 <memset>
c010b6d0:	83 c4 10             	add    $0x10,%esp
        proc->wait_state = 0;
c010b6d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6d6:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b6dd:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010b6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6e3:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b6ea:	00 00 00 
c010b6ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6f0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b6f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6f9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b6ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b702:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010b708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b70b:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010b711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b714:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010b71b:	00 00 00 
        list_init(&(proc->run_link));
c010b71e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b721:	05 a4 00 00 00       	add    $0xa4,%eax
c010b726:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b729:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b72c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b72f:	89 50 04             	mov    %edx,0x4(%eax)
c010b732:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b735:	8b 50 04             	mov    0x4(%eax),%edx
c010b738:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b73b:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010b73d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b740:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010b747:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010b74a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b74d:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010b754:	00 00 00 
c010b757:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b75a:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010b760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b763:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010b769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b76c:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010b772:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b775:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010b77b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b77e:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010b785:	00 00 00 
        proc->lab6_priority = 0;
c010b788:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b78b:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010b792:	00 00 00 
        proc->filesp = NULL;
c010b795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b798:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010b79f:	00 00 00 
    }
    return proc;
c010b7a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b7a5:	c9                   	leave  
c010b7a6:	c3                   	ret    

c010b7a7 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010b7a7:	55                   	push   %ebp
c010b7a8:	89 e5                	mov    %esp,%ebp
c010b7aa:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010b7ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7b0:	83 c0 48             	add    $0x48,%eax
c010b7b3:	83 ec 04             	sub    $0x4,%esp
c010b7b6:	6a 33                	push   $0x33
c010b7b8:	6a 00                	push   $0x0
c010b7ba:	50                   	push   %eax
c010b7bb:	e8 50 82 00 00       	call   c0113a10 <memset>
c010b7c0:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010b7c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7c6:	83 c0 48             	add    $0x48,%eax
c010b7c9:	83 ec 04             	sub    $0x4,%esp
c010b7cc:	6a 32                	push   $0x32
c010b7ce:	ff 75 0c             	pushl  0xc(%ebp)
c010b7d1:	50                   	push   %eax
c010b7d2:	e8 1c 83 00 00       	call   c0113af3 <memcpy>
c010b7d7:	83 c4 10             	add    $0x10,%esp
}
c010b7da:	c9                   	leave  
c010b7db:	c3                   	ret    

c010b7dc <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010b7dc:	55                   	push   %ebp
c010b7dd:	89 e5                	mov    %esp,%ebp
c010b7df:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010b7e2:	83 ec 04             	sub    $0x4,%esp
c010b7e5:	6a 33                	push   $0x33
c010b7e7:	6a 00                	push   $0x0
c010b7e9:	68 60 40 15 c0       	push   $0xc0154060
c010b7ee:	e8 1d 82 00 00       	call   c0113a10 <memset>
c010b7f3:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010b7f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7f9:	83 c0 48             	add    $0x48,%eax
c010b7fc:	83 ec 04             	sub    $0x4,%esp
c010b7ff:	6a 32                	push   $0x32
c010b801:	50                   	push   %eax
c010b802:	68 60 40 15 c0       	push   $0xc0154060
c010b807:	e8 e7 82 00 00       	call   c0113af3 <memcpy>
c010b80c:	83 c4 10             	add    $0x10,%esp
}
c010b80f:	c9                   	leave  
c010b810:	c3                   	ret    

c010b811 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010b811:	55                   	push   %ebp
c010b812:	89 e5                	mov    %esp,%ebp
c010b814:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010b817:	8b 45 08             	mov    0x8(%ebp),%eax
c010b81a:	83 c0 7c             	add    $0x7c,%eax
c010b81d:	c7 45 fc fc 52 15 c0 	movl   $0xc01552fc,-0x4(%ebp)
c010b824:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010b827:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b82a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b82d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b830:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010b833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b836:	8b 40 04             	mov    0x4(%eax),%eax
c010b839:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b83c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b83f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b842:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b845:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b848:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b84b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b84e:	89 10                	mov    %edx,(%eax)
c010b850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b853:	8b 10                	mov    (%eax),%edx
c010b855:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b858:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b85e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b861:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b864:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b867:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b86a:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010b86c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b86f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b876:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010b879:	8b 45 08             	mov    0x8(%ebp),%eax
c010b87c:	8b 40 14             	mov    0x14(%eax),%eax
c010b87f:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b885:	8b 45 08             	mov    0x8(%ebp),%eax
c010b888:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b88e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b891:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b897:	85 c0                	test   %eax,%eax
c010b899:	74 12                	je     c010b8ad <set_links+0x9c>
        proc->optr->yptr = proc;
c010b89b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b89e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b8a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010b8a7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010b8ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8b0:	8b 40 14             	mov    0x14(%eax),%eax
c010b8b3:	8b 55 08             	mov    0x8(%ebp),%edx
c010b8b6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010b8bc:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010b8c1:	83 c0 01             	add    $0x1,%eax
c010b8c4:	a3 40 40 15 c0       	mov    %eax,0xc0154040
}
c010b8c9:	90                   	nop
c010b8ca:	c9                   	leave  
c010b8cb:	c3                   	ret    

c010b8cc <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010b8cc:	55                   	push   %ebp
c010b8cd:	89 e5                	mov    %esp,%ebp
c010b8cf:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010b8d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8d5:	83 c0 7c             	add    $0x7c,%eax
c010b8d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b8db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b8de:	8b 40 04             	mov    0x4(%eax),%eax
c010b8e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b8e4:	8b 12                	mov    (%edx),%edx
c010b8e6:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b8e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b8ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b8ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b8f2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b8f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8f8:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b8fb:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010b8fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b900:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b906:	85 c0                	test   %eax,%eax
c010b908:	74 18                	je     c010b922 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010b90a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b90d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b913:	8b 55 08             	mov    0x8(%ebp),%edx
c010b916:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010b91c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010b922:	8b 45 08             	mov    0x8(%ebp),%eax
c010b925:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b92b:	85 c0                	test   %eax,%eax
c010b92d:	74 1a                	je     c010b949 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010b92f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b932:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b938:	8b 55 08             	mov    0x8(%ebp),%edx
c010b93b:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b941:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b947:	eb 15                	jmp    c010b95e <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010b949:	8b 45 08             	mov    0x8(%ebp),%eax
c010b94c:	8b 40 14             	mov    0x14(%eax),%eax
c010b94f:	8b 55 08             	mov    0x8(%ebp),%edx
c010b952:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b958:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010b95e:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010b963:	83 e8 01             	sub    $0x1,%eax
c010b966:	a3 40 40 15 c0       	mov    %eax,0xc0154040
}
c010b96b:	90                   	nop
c010b96c:	c9                   	leave  
c010b96d:	c3                   	ret    

c010b96e <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010b96e:	55                   	push   %ebp
c010b96f:	89 e5                	mov    %esp,%ebp
c010b971:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010b974:	c7 45 f8 fc 52 15 c0 	movl   $0xc01552fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010b97b:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010b980:	83 c0 01             	add    $0x1,%eax
c010b983:	a3 7c ea 14 c0       	mov    %eax,0xc014ea7c
c010b988:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010b98d:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010b992:	7e 0c                	jle    c010b9a0 <get_pid+0x32>
        last_pid = 1;
c010b994:	c7 05 7c ea 14 c0 01 	movl   $0x1,0xc014ea7c
c010b99b:	00 00 00 
        goto inside;
c010b99e:	eb 13                	jmp    c010b9b3 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010b9a0:	8b 15 7c ea 14 c0    	mov    0xc014ea7c,%edx
c010b9a6:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010b9ab:	39 c2                	cmp    %eax,%edx
c010b9ad:	0f 8c ac 00 00 00    	jl     c010ba5f <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010b9b3:	c7 05 80 ea 14 c0 00 	movl   $0x2000,0xc014ea80
c010b9ba:	20 00 00 
    repeat:
        le = list;
c010b9bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b9c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010b9c3:	eb 7f                	jmp    c010ba44 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010b9c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b9c8:	83 e8 7c             	sub    $0x7c,%eax
c010b9cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010b9ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9d1:	8b 50 04             	mov    0x4(%eax),%edx
c010b9d4:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010b9d9:	39 c2                	cmp    %eax,%edx
c010b9db:	75 3e                	jne    c010ba1b <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010b9dd:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010b9e2:	83 c0 01             	add    $0x1,%eax
c010b9e5:	a3 7c ea 14 c0       	mov    %eax,0xc014ea7c
c010b9ea:	8b 15 7c ea 14 c0    	mov    0xc014ea7c,%edx
c010b9f0:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010b9f5:	39 c2                	cmp    %eax,%edx
c010b9f7:	7c 4b                	jl     c010ba44 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010b9f9:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010b9fe:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ba03:	7e 0a                	jle    c010ba0f <get_pid+0xa1>
                        last_pid = 1;
c010ba05:	c7 05 7c ea 14 c0 01 	movl   $0x1,0xc014ea7c
c010ba0c:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010ba0f:	c7 05 80 ea 14 c0 00 	movl   $0x2000,0xc014ea80
c010ba16:	20 00 00 
                    goto repeat;
c010ba19:	eb a2                	jmp    c010b9bd <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010ba1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba1e:	8b 50 04             	mov    0x4(%eax),%edx
c010ba21:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010ba26:	39 c2                	cmp    %eax,%edx
c010ba28:	7e 1a                	jle    c010ba44 <get_pid+0xd6>
c010ba2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba2d:	8b 50 04             	mov    0x4(%eax),%edx
c010ba30:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010ba35:	39 c2                	cmp    %eax,%edx
c010ba37:	7d 0b                	jge    c010ba44 <get_pid+0xd6>
                next_safe = proc->pid;
c010ba39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba3c:	8b 40 04             	mov    0x4(%eax),%eax
c010ba3f:	a3 80 ea 14 c0       	mov    %eax,0xc014ea80
c010ba44:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ba47:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ba4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba4d:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010ba50:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ba53:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ba56:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ba59:	0f 85 66 ff ff ff    	jne    c010b9c5 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010ba5f:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
}
c010ba64:	c9                   	leave  
c010ba65:	c3                   	ret    

c010ba66 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010ba66:	55                   	push   %ebp
c010ba67:	89 e5                	mov    %esp,%ebp
c010ba69:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010ba6c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ba71:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ba74:	74 6b                	je     c010bae1 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010ba76:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ba7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba81:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010ba84:	e8 96 f9 ff ff       	call   c010b41f <__intr_save>
c010ba89:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010ba8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba8f:	a3 28 20 15 c0       	mov    %eax,0xc0152028
            load_esp0(next->kstack + KSTACKSIZE);
c010ba94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba97:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba9a:	05 00 20 00 00       	add    $0x2000,%eax
c010ba9f:	83 ec 0c             	sub    $0xc,%esp
c010baa2:	50                   	push   %eax
c010baa3:	e8 5b b5 ff ff       	call   c0107003 <load_esp0>
c010baa8:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010baab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baae:	8b 40 40             	mov    0x40(%eax),%eax
c010bab1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bab4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bab7:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010baba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010babd:	8d 50 1c             	lea    0x1c(%eax),%edx
c010bac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bac3:	83 c0 1c             	add    $0x1c,%eax
c010bac6:	83 ec 08             	sub    $0x8,%esp
c010bac9:	52                   	push   %edx
c010baca:	50                   	push   %eax
c010bacb:	e8 d6 f8 ff ff       	call   c010b3a6 <switch_to>
c010bad0:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010bad3:	83 ec 0c             	sub    $0xc,%esp
c010bad6:	ff 75 ec             	pushl  -0x14(%ebp)
c010bad9:	e8 6b f9 ff ff       	call   c010b449 <__intr_restore>
c010bade:	83 c4 10             	add    $0x10,%esp
    }
}
c010bae1:	90                   	nop
c010bae2:	c9                   	leave  
c010bae3:	c3                   	ret    

c010bae4 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010bae4:	55                   	push   %ebp
c010bae5:	89 e5                	mov    %esp,%ebp
c010bae7:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010baea:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010baef:	8b 40 3c             	mov    0x3c(%eax),%eax
c010baf2:	83 ec 0c             	sub    $0xc,%esp
c010baf5:	50                   	push   %eax
c010baf6:	e8 4e 7a ff ff       	call   c0103549 <forkrets>
c010bafb:	83 c4 10             	add    $0x10,%esp
}
c010bafe:	90                   	nop
c010baff:	c9                   	leave  
c010bb00:	c3                   	ret    

c010bb01 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010bb01:	55                   	push   %ebp
c010bb02:	89 e5                	mov    %esp,%ebp
c010bb04:	53                   	push   %ebx
c010bb05:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010bb08:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb0b:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010bb11:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb14:	8b 40 04             	mov    0x4(%eax),%eax
c010bb17:	83 ec 08             	sub    $0x8,%esp
c010bb1a:	6a 0a                	push   $0xa
c010bb1c:	50                   	push   %eax
c010bb1d:	e8 c9 86 00 00       	call   c01141eb <hash32>
c010bb22:	83 c4 10             	add    $0x10,%esp
c010bb25:	c1 e0 03             	shl    $0x3,%eax
c010bb28:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010bb2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb30:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010bb33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb36:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bb39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010bb3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb42:	8b 40 04             	mov    0x4(%eax),%eax
c010bb45:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bb48:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010bb4b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb4e:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010bb51:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010bb54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bb57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bb5a:	89 10                	mov    %edx,(%eax)
c010bb5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bb5f:	8b 10                	mov    (%eax),%edx
c010bb61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bb64:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010bb67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010bb6d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010bb70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb73:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010bb76:	89 10                	mov    %edx,(%eax)
}
c010bb78:	90                   	nop
c010bb79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010bb7c:	c9                   	leave  
c010bb7d:	c3                   	ret    

c010bb7e <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010bb7e:	55                   	push   %ebp
c010bb7f:	89 e5                	mov    %esp,%ebp
c010bb81:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010bb84:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb87:	05 84 00 00 00       	add    $0x84,%eax
c010bb8c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010bb8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bb92:	8b 40 04             	mov    0x4(%eax),%eax
c010bb95:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bb98:	8b 12                	mov    (%edx),%edx
c010bb9a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010bb9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010bba0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bba3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bba6:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010bba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbac:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010bbaf:	89 10                	mov    %edx,(%eax)
}
c010bbb1:	90                   	nop
c010bbb2:	c9                   	leave  
c010bbb3:	c3                   	ret    

c010bbb4 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010bbb4:	55                   	push   %ebp
c010bbb5:	89 e5                	mov    %esp,%ebp
c010bbb7:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010bbba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bbbe:	7e 5f                	jle    c010bc1f <find_proc+0x6b>
c010bbc0:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010bbc7:	7f 56                	jg     c010bc1f <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010bbc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbcc:	83 ec 08             	sub    $0x8,%esp
c010bbcf:	6a 0a                	push   $0xa
c010bbd1:	50                   	push   %eax
c010bbd2:	e8 14 86 00 00       	call   c01141eb <hash32>
c010bbd7:	83 c4 10             	add    $0x10,%esp
c010bbda:	c1 e0 03             	shl    $0x3,%eax
c010bbdd:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010bbe2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bbe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010bbeb:	eb 1b                	jmp    c010bc08 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010bbed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbf0:	2d 84 00 00 00       	sub    $0x84,%eax
c010bbf5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010bbf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbfb:	8b 40 04             	mov    0x4(%eax),%eax
c010bbfe:	3b 45 08             	cmp    0x8(%ebp),%eax
c010bc01:	75 05                	jne    c010bc08 <find_proc+0x54>
                return proc;
c010bc03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc06:	eb 1c                	jmp    c010bc24 <find_proc+0x70>
c010bc08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bc0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc11:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010bc14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc1a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010bc1d:	75 ce                	jne    c010bbed <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010bc1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc24:	c9                   	leave  
c010bc25:	c3                   	ret    

c010bc26 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010bc26:	55                   	push   %ebp
c010bc27:	89 e5                	mov    %esp,%ebp
c010bc29:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010bc2c:	83 ec 04             	sub    $0x4,%esp
c010bc2f:	6a 4c                	push   $0x4c
c010bc31:	6a 00                	push   $0x0
c010bc33:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bc36:	50                   	push   %eax
c010bc37:	e8 d4 7d 00 00       	call   c0113a10 <memset>
c010bc3c:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010bc3f:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010bc45:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010bc4b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010bc4f:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010bc53:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010bc57:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010bc5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc5e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010bc61:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc64:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010bc67:	b8 dd b3 10 c0       	mov    $0xc010b3dd,%eax
c010bc6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010bc6f:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc72:	80 cc 01             	or     $0x1,%ah
c010bc75:	89 c2                	mov    %eax,%edx
c010bc77:	83 ec 04             	sub    $0x4,%esp
c010bc7a:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bc7d:	50                   	push   %eax
c010bc7e:	6a 00                	push   $0x0
c010bc80:	52                   	push   %edx
c010bc81:	e8 d8 03 00 00       	call   c010c05e <do_fork>
c010bc86:	83 c4 10             	add    $0x10,%esp
}
c010bc89:	c9                   	leave  
c010bc8a:	c3                   	ret    

c010bc8b <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010bc8b:	55                   	push   %ebp
c010bc8c:	89 e5                	mov    %esp,%ebp
c010bc8e:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010bc91:	83 ec 0c             	sub    $0xc,%esp
c010bc94:	6a 02                	push   $0x2
c010bc96:	e8 bc b4 ff ff       	call   c0107157 <alloc_pages>
c010bc9b:	83 c4 10             	add    $0x10,%esp
c010bc9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010bca1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bca5:	74 1d                	je     c010bcc4 <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010bca7:	83 ec 0c             	sub    $0xc,%esp
c010bcaa:	ff 75 f4             	pushl  -0xc(%ebp)
c010bcad:	e8 1e f8 ff ff       	call   c010b4d0 <page2kva>
c010bcb2:	83 c4 10             	add    $0x10,%esp
c010bcb5:	89 c2                	mov    %eax,%edx
c010bcb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcba:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010bcbd:	b8 00 00 00 00       	mov    $0x0,%eax
c010bcc2:	eb 05                	jmp    c010bcc9 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010bcc4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010bcc9:	c9                   	leave  
c010bcca:	c3                   	ret    

c010bccb <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010bccb:	55                   	push   %ebp
c010bccc:	89 e5                	mov    %esp,%ebp
c010bcce:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010bcd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcd4:	8b 40 0c             	mov    0xc(%eax),%eax
c010bcd7:	83 ec 0c             	sub    $0xc,%esp
c010bcda:	50                   	push   %eax
c010bcdb:	e8 35 f8 ff ff       	call   c010b515 <kva2page>
c010bce0:	83 c4 10             	add    $0x10,%esp
c010bce3:	83 ec 08             	sub    $0x8,%esp
c010bce6:	6a 02                	push   $0x2
c010bce8:	50                   	push   %eax
c010bce9:	e8 d5 b4 ff ff       	call   c01071c3 <free_pages>
c010bcee:	83 c4 10             	add    $0x10,%esp
}
c010bcf1:	90                   	nop
c010bcf2:	c9                   	leave  
c010bcf3:	c3                   	ret    

c010bcf4 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010bcf4:	55                   	push   %ebp
c010bcf5:	89 e5                	mov    %esp,%ebp
c010bcf7:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010bcfa:	83 ec 0c             	sub    $0xc,%esp
c010bcfd:	6a 01                	push   $0x1
c010bcff:	e8 53 b4 ff ff       	call   c0107157 <alloc_pages>
c010bd04:	83 c4 10             	add    $0x10,%esp
c010bd07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd0e:	75 07                	jne    c010bd17 <setup_pgdir+0x23>
        return -E_NO_MEM;
c010bd10:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bd15:	eb 74                	jmp    c010bd8b <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010bd17:	83 ec 0c             	sub    $0xc,%esp
c010bd1a:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd1d:	e8 ae f7 ff ff       	call   c010b4d0 <page2kva>
c010bd22:	83 c4 10             	add    $0x10,%esp
c010bd25:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010bd28:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010bd2d:	83 ec 04             	sub    $0x4,%esp
c010bd30:	68 00 10 00 00       	push   $0x1000
c010bd35:	50                   	push   %eax
c010bd36:	ff 75 f0             	pushl  -0x10(%ebp)
c010bd39:	e8 b5 7d 00 00       	call   c0113af3 <memcpy>
c010bd3e:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010bd41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd44:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010bd4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bd50:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010bd57:	77 17                	ja     c010bd70 <setup_pgdir+0x7c>
c010bd59:	ff 75 ec             	pushl  -0x14(%ebp)
c010bd5c:	68 d0 6c 11 c0       	push   $0xc0116cd0
c010bd61:	68 39 01 00 00       	push   $0x139
c010bd66:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010bd6b:	e8 75 47 ff ff       	call   c01004e5 <__panic>
c010bd70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd73:	05 00 00 00 40       	add    $0x40000000,%eax
c010bd78:	83 c8 03             	or     $0x3,%eax
c010bd7b:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010bd7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bd83:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010bd86:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd8b:	c9                   	leave  
c010bd8c:	c3                   	ret    

c010bd8d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010bd8d:	55                   	push   %ebp
c010bd8e:	89 e5                	mov    %esp,%ebp
c010bd90:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010bd93:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd96:	8b 40 0c             	mov    0xc(%eax),%eax
c010bd99:	83 ec 0c             	sub    $0xc,%esp
c010bd9c:	50                   	push   %eax
c010bd9d:	e8 73 f7 ff ff       	call   c010b515 <kva2page>
c010bda2:	83 c4 10             	add    $0x10,%esp
c010bda5:	83 ec 08             	sub    $0x8,%esp
c010bda8:	6a 01                	push   $0x1
c010bdaa:	50                   	push   %eax
c010bdab:	e8 13 b4 ff ff       	call   c01071c3 <free_pages>
c010bdb0:	83 c4 10             	add    $0x10,%esp
}
c010bdb3:	90                   	nop
c010bdb4:	c9                   	leave  
c010bdb5:	c3                   	ret    

c010bdb6 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010bdb6:	55                   	push   %ebp
c010bdb7:	89 e5                	mov    %esp,%ebp
c010bdb9:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010bdbc:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010bdc1:	8b 40 18             	mov    0x18(%eax),%eax
c010bdc4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010bdc7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bdcb:	75 0a                	jne    c010bdd7 <copy_mm+0x21>
        return 0;
c010bdcd:	b8 00 00 00 00       	mov    $0x0,%eax
c010bdd2:	e9 03 01 00 00       	jmp    c010beda <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010bdd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdda:	25 00 01 00 00       	and    $0x100,%eax
c010bddf:	85 c0                	test   %eax,%eax
c010bde1:	74 08                	je     c010bdeb <copy_mm+0x35>
        mm = oldmm;
c010bde3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bde6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010bde9:	eb 65                	jmp    c010be50 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010bdeb:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010bdf2:	e8 d5 77 ff ff       	call   c01035cc <mm_create>
c010bdf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bdfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bdfe:	0f 84 d2 00 00 00    	je     c010bed6 <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010be04:	83 ec 0c             	sub    $0xc,%esp
c010be07:	ff 75 f4             	pushl  -0xc(%ebp)
c010be0a:	e8 e5 fe ff ff       	call   c010bcf4 <setup_pgdir>
c010be0f:	83 c4 10             	add    $0x10,%esp
c010be12:	85 c0                	test   %eax,%eax
c010be14:	0f 85 ab 00 00 00    	jne    c010bec5 <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010be1a:	83 ec 0c             	sub    $0xc,%esp
c010be1d:	ff 75 ec             	pushl  -0x14(%ebp)
c010be20:	e8 63 f7 ff ff       	call   c010b588 <lock_mm>
c010be25:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010be28:	83 ec 08             	sub    $0x8,%esp
c010be2b:	ff 75 ec             	pushl  -0x14(%ebp)
c010be2e:	ff 75 f4             	pushl  -0xc(%ebp)
c010be31:	e8 69 7c ff ff       	call   c0103a9f <dup_mmap>
c010be36:	83 c4 10             	add    $0x10,%esp
c010be39:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010be3c:	83 ec 0c             	sub    $0xc,%esp
c010be3f:	ff 75 ec             	pushl  -0x14(%ebp)
c010be42:	e8 79 f7 ff ff       	call   c010b5c0 <unlock_mm>
c010be47:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010be4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010be4e:	75 56                	jne    c010bea6 <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010be50:	83 ec 0c             	sub    $0xc,%esp
c010be53:	ff 75 f4             	pushl  -0xc(%ebp)
c010be56:	e8 f9 f6 ff ff       	call   c010b554 <mm_count_inc>
c010be5b:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010be5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010be64:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010be67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be6a:	8b 40 0c             	mov    0xc(%eax),%eax
c010be6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010be70:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010be77:	77 17                	ja     c010be90 <copy_mm+0xda>
c010be79:	ff 75 e8             	pushl  -0x18(%ebp)
c010be7c:	68 d0 6c 11 c0       	push   $0xc0116cd0
c010be81:	68 68 01 00 00       	push   $0x168
c010be86:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010be8b:	e8 55 46 ff ff       	call   c01004e5 <__panic>
c010be90:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be93:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010be99:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be9c:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010be9f:	b8 00 00 00 00       	mov    $0x0,%eax
c010bea4:	eb 34                	jmp    c010beda <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010bea6:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010bea7:	83 ec 0c             	sub    $0xc,%esp
c010beaa:	ff 75 f4             	pushl  -0xc(%ebp)
c010bead:	e8 d4 7c ff ff       	call   c0103b86 <exit_mmap>
c010beb2:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010beb5:	83 ec 0c             	sub    $0xc,%esp
c010beb8:	ff 75 f4             	pushl  -0xc(%ebp)
c010bebb:	e8 cd fe ff ff       	call   c010bd8d <put_pgdir>
c010bec0:	83 c4 10             	add    $0x10,%esp
c010bec3:	eb 01                	jmp    c010bec6 <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010bec5:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bec6:	83 ec 0c             	sub    $0xc,%esp
c010bec9:	ff 75 f4             	pushl  -0xc(%ebp)
c010becc:	e8 27 7a ff ff       	call   c01038f8 <mm_destroy>
c010bed1:	83 c4 10             	add    $0x10,%esp
c010bed4:	eb 01                	jmp    c010bed7 <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010bed6:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010bed7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010beda:	c9                   	leave  
c010bedb:	c3                   	ret    

c010bedc <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010bedc:	55                   	push   %ebp
c010bedd:	89 e5                	mov    %esp,%ebp
c010bedf:	57                   	push   %edi
c010bee0:	56                   	push   %esi
c010bee1:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010bee2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee5:	8b 40 0c             	mov    0xc(%eax),%eax
c010bee8:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010beed:	89 c2                	mov    %eax,%edx
c010beef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef2:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010bef5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010befb:	8b 55 10             	mov    0x10(%ebp),%edx
c010befe:	89 d3                	mov    %edx,%ebx
c010bf00:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010bf05:	8b 0b                	mov    (%ebx),%ecx
c010bf07:	89 08                	mov    %ecx,(%eax)
c010bf09:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010bf0d:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010bf11:	8d 78 04             	lea    0x4(%eax),%edi
c010bf14:	83 e7 fc             	and    $0xfffffffc,%edi
c010bf17:	29 f8                	sub    %edi,%eax
c010bf19:	29 c3                	sub    %eax,%ebx
c010bf1b:	01 c2                	add    %eax,%edx
c010bf1d:	83 e2 fc             	and    $0xfffffffc,%edx
c010bf20:	89 d0                	mov    %edx,%eax
c010bf22:	c1 e8 02             	shr    $0x2,%eax
c010bf25:	89 de                	mov    %ebx,%esi
c010bf27:	89 c1                	mov    %eax,%ecx
c010bf29:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010bf2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf2e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bf31:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010bf38:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf3b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bf3e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bf41:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010bf44:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf47:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bf4a:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf4d:	8b 52 3c             	mov    0x3c(%edx),%edx
c010bf50:	8b 52 40             	mov    0x40(%edx),%edx
c010bf53:	80 ce 02             	or     $0x2,%dh
c010bf56:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010bf59:	ba e4 ba 10 c0       	mov    $0xc010bae4,%edx
c010bf5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf61:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010bf64:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf67:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bf6a:	89 c2                	mov    %eax,%edx
c010bf6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf6f:	89 50 20             	mov    %edx,0x20(%eax)
}
c010bf72:	90                   	nop
c010bf73:	5b                   	pop    %ebx
c010bf74:	5e                   	pop    %esi
c010bf75:	5f                   	pop    %edi
c010bf76:	5d                   	pop    %ebp
c010bf77:	c3                   	ret    

c010bf78 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c010bf78:	55                   	push   %ebp
c010bf79:	89 e5                	mov    %esp,%ebp
c010bf7b:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010bf7e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010bf83:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010bf89:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010bf8c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bf90:	75 19                	jne    c010bfab <copy_fs+0x33>
c010bf92:	68 08 6d 11 c0       	push   $0xc0116d08
c010bf97:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010bf9c:	68 85 01 00 00       	push   $0x185
c010bfa1:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010bfa6:	e8 3a 45 ff ff       	call   c01004e5 <__panic>

    if (clone_flags & CLONE_FS) {
c010bfab:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfae:	25 00 08 00 00       	and    $0x800,%eax
c010bfb3:	85 c0                	test   %eax,%eax
c010bfb5:	74 08                	je     c010bfbf <copy_fs+0x47>
        filesp = old_filesp;
c010bfb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bfba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010bfbd:	eb 2f                	jmp    c010bfee <copy_fs+0x76>
    }

    int ret = -E_NO_MEM;
c010bfbf:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010bfc6:	e8 65 f1 ff ff       	call   c010b130 <files_create>
c010bfcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bfce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bfd2:	74 4c                	je     c010c020 <copy_fs+0xa8>
        goto bad_files_struct;
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
c010bfd4:	83 ec 08             	sub    $0x8,%esp
c010bfd7:	ff 75 ec             	pushl  -0x14(%ebp)
c010bfda:	ff 75 f4             	pushl  -0xc(%ebp)
c010bfdd:	e8 e2 f2 ff ff       	call   c010b2c4 <dup_fs>
c010bfe2:	83 c4 10             	add    $0x10,%esp
c010bfe5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bfe8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bfec:	75 21                	jne    c010c00f <copy_fs+0x97>
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010bfee:	83 ec 0c             	sub    $0xc,%esp
c010bff1:	ff 75 f4             	pushl  -0xc(%ebp)
c010bff4:	e8 f2 f5 ff ff       	call   c010b5eb <files_count_inc>
c010bff9:	83 c4 10             	add    $0x10,%esp
    proc->filesp = filesp;
c010bffc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c002:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c008:	b8 00 00 00 00       	mov    $0x0,%eax
c010c00d:	eb 15                	jmp    c010c024 <copy_fs+0xac>
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
c010c00f:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c010:	83 ec 0c             	sub    $0xc,%esp
c010c013:	ff 75 f4             	pushl  -0xc(%ebp)
c010c016:	e8 7e f1 ff ff       	call   c010b199 <files_destroy>
c010c01b:	83 c4 10             	add    $0x10,%esp
c010c01e:	eb 01                	jmp    c010c021 <copy_fs+0xa9>
        goto good_files_struct;
    }

    int ret = -E_NO_MEM;
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
c010c020:	90                   	nop
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c021:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c024:	c9                   	leave  
c010c025:	c3                   	ret    

c010c026 <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c010c026:	55                   	push   %ebp
c010c027:	89 e5                	mov    %esp,%ebp
c010c029:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = proc->filesp;
c010c02c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c02f:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c035:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c038:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c03c:	74 1d                	je     c010c05b <put_fs+0x35>
        if (files_count_dec(filesp) == 0) {
c010c03e:	ff 75 f4             	pushl  -0xc(%ebp)
c010c041:	e8 bf f5 ff ff       	call   c010b605 <files_count_dec>
c010c046:	83 c4 04             	add    $0x4,%esp
c010c049:	85 c0                	test   %eax,%eax
c010c04b:	75 0e                	jne    c010c05b <put_fs+0x35>
            files_destroy(filesp);
c010c04d:	83 ec 0c             	sub    $0xc,%esp
c010c050:	ff 75 f4             	pushl  -0xc(%ebp)
c010c053:	e8 41 f1 ff ff       	call   c010b199 <files_destroy>
c010c058:	83 c4 10             	add    $0x10,%esp
        }
    }
}
c010c05b:	90                   	nop
c010c05c:	c9                   	leave  
c010c05d:	c3                   	ret    

c010c05e <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c05e:	55                   	push   %ebp
c010c05f:	89 e5                	mov    %esp,%ebp
c010c061:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010c064:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c06b:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010c070:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c075:	0f 8f fd 00 00 00    	jg     c010c178 <do_fork+0x11a>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010c07b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010c082:	e8 98 f5 ff ff       	call   c010b61f <alloc_proc>
c010c087:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c08a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c08e:	0f 84 e7 00 00 00    	je     c010c17b <do_fork+0x11d>
        goto fork_out;
    }

    proc->parent = current;
c010c094:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c09a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c09d:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010c0a0:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c0a5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c0ab:	85 c0                	test   %eax,%eax
c010c0ad:	74 19                	je     c010c0c8 <do_fork+0x6a>
c010c0af:	68 30 6d 11 c0       	push   $0xc0116d30
c010c0b4:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c0b9:	68 de 01 00 00       	push   $0x1de
c010c0be:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c0c3:	e8 1d 44 ff ff       	call   c01004e5 <__panic>

    if (setup_kstack(proc) != 0) {
c010c0c8:	83 ec 0c             	sub    $0xc,%esp
c010c0cb:	ff 75 f0             	pushl  -0x10(%ebp)
c010c0ce:	e8 b8 fb ff ff       	call   c010bc8b <setup_kstack>
c010c0d3:	83 c4 10             	add    $0x10,%esp
c010c0d6:	85 c0                	test   %eax,%eax
c010c0d8:	0f 85 c5 00 00 00    	jne    c010c1a3 <do_fork+0x145>
        goto bad_fork_cleanup_proc;
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c010c0de:	83 ec 08             	sub    $0x8,%esp
c010c0e1:	ff 75 f0             	pushl  -0x10(%ebp)
c010c0e4:	ff 75 08             	pushl  0x8(%ebp)
c010c0e7:	e8 8c fe ff ff       	call   c010bf78 <copy_fs>
c010c0ec:	83 c4 10             	add    $0x10,%esp
c010c0ef:	85 c0                	test   %eax,%eax
c010c0f1:	0f 85 9b 00 00 00    	jne    c010c192 <do_fork+0x134>
        goto bad_fork_cleanup_kstack;
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010c0f7:	83 ec 08             	sub    $0x8,%esp
c010c0fa:	ff 75 f0             	pushl  -0x10(%ebp)
c010c0fd:	ff 75 08             	pushl  0x8(%ebp)
c010c100:	e8 b1 fc ff ff       	call   c010bdb6 <copy_mm>
c010c105:	83 c4 10             	add    $0x10,%esp
c010c108:	85 c0                	test   %eax,%eax
c010c10a:	75 75                	jne    c010c181 <do_fork+0x123>
        goto bad_fork_cleanup_fs;
    }
    copy_thread(proc, stack, tf);
c010c10c:	83 ec 04             	sub    $0x4,%esp
c010c10f:	ff 75 10             	pushl  0x10(%ebp)
c010c112:	ff 75 0c             	pushl  0xc(%ebp)
c010c115:	ff 75 f0             	pushl  -0x10(%ebp)
c010c118:	e8 bf fd ff ff       	call   c010bedc <copy_thread>
c010c11d:	83 c4 10             	add    $0x10,%esp

    bool intr_flag;
    local_intr_save(intr_flag);
c010c120:	e8 fa f2 ff ff       	call   c010b41f <__intr_save>
c010c125:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010c128:	e8 41 f8 ff ff       	call   c010b96e <get_pid>
c010c12d:	89 c2                	mov    %eax,%edx
c010c12f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c132:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010c135:	83 ec 0c             	sub    $0xc,%esp
c010c138:	ff 75 f0             	pushl  -0x10(%ebp)
c010c13b:	e8 c1 f9 ff ff       	call   c010bb01 <hash_proc>
c010c140:	83 c4 10             	add    $0x10,%esp
        set_links(proc);
c010c143:	83 ec 0c             	sub    $0xc,%esp
c010c146:	ff 75 f0             	pushl  -0x10(%ebp)
c010c149:	e8 c3 f6 ff ff       	call   c010b811 <set_links>
c010c14e:	83 c4 10             	add    $0x10,%esp

    }
    local_intr_restore(intr_flag);
c010c151:	83 ec 0c             	sub    $0xc,%esp
c010c154:	ff 75 ec             	pushl  -0x14(%ebp)
c010c157:	e8 ed f2 ff ff       	call   c010b449 <__intr_restore>
c010c15c:	83 c4 10             	add    $0x10,%esp

    wakeup_proc(proc);
c010c15f:	83 ec 0c             	sub    $0xc,%esp
c010c162:	ff 75 f0             	pushl  -0x10(%ebp)
c010c165:	e8 f3 15 00 00       	call   c010d75d <wakeup_proc>
c010c16a:	83 c4 10             	add    $0x10,%esp

    ret = proc->pid;
c010c16d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c170:	8b 40 04             	mov    0x4(%eax),%eax
c010c173:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c176:	eb 04                	jmp    c010c17c <do_fork+0x11e>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010c178:	90                   	nop
c010c179:	eb 01                	jmp    c010c17c <do_fork+0x11e>
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
        goto fork_out;
c010c17b:	90                   	nop

    wakeup_proc(proc);

    ret = proc->pid;
fork_out:
    return ret;
c010c17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c17f:	eb 33                	jmp    c010c1b4 <do_fork+0x156>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
        goto bad_fork_cleanup_kstack;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_fs;
c010c181:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
c010c182:	83 ec 0c             	sub    $0xc,%esp
c010c185:	ff 75 f0             	pushl  -0x10(%ebp)
c010c188:	e8 99 fe ff ff       	call   c010c026 <put_fs>
c010c18d:	83 c4 10             	add    $0x10,%esp
c010c190:	eb 01                	jmp    c010c193 <do_fork+0x135>

    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
        goto bad_fork_cleanup_kstack;
c010c192:	90                   	nop
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010c193:	83 ec 0c             	sub    $0xc,%esp
c010c196:	ff 75 f0             	pushl  -0x10(%ebp)
c010c199:	e8 2d fb ff ff       	call   c010bccb <put_kstack>
c010c19e:	83 c4 10             	add    $0x10,%esp
c010c1a1:	eb 01                	jmp    c010c1a4 <do_fork+0x146>

    proc->parent = current;
    assert(current->wait_state == 0);

    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010c1a3:	90                   	nop
bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010c1a4:	83 ec 0c             	sub    $0xc,%esp
c010c1a7:	ff 75 f0             	pushl  -0x10(%ebp)
c010c1aa:	e8 b9 96 ff ff       	call   c0105868 <kfree>
c010c1af:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010c1b2:	eb c8                	jmp    c010c17c <do_fork+0x11e>
}
c010c1b4:	c9                   	leave  
c010c1b5:	c3                   	ret    

c010c1b6 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010c1b6:	55                   	push   %ebp
c010c1b7:	89 e5                	mov    %esp,%ebp
c010c1b9:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010c1bc:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c1c2:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010c1c7:	39 c2                	cmp    %eax,%edx
c010c1c9:	75 17                	jne    c010c1e2 <do_exit+0x2c>
        panic("idleproc exit.\n");
c010c1cb:	83 ec 04             	sub    $0x4,%esp
c010c1ce:	68 49 6d 11 c0       	push   $0xc0116d49
c010c1d3:	68 0b 02 00 00       	push   $0x20b
c010c1d8:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c1dd:	e8 03 43 ff ff       	call   c01004e5 <__panic>
    }
    if (current == initproc) {
c010c1e2:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c1e8:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c1ed:	39 c2                	cmp    %eax,%edx
c010c1ef:	75 17                	jne    c010c208 <do_exit+0x52>
        panic("initproc exit.\n");
c010c1f1:	83 ec 04             	sub    $0x4,%esp
c010c1f4:	68 59 6d 11 c0       	push   $0xc0116d59
c010c1f9:	68 0e 02 00 00       	push   $0x20e
c010c1fe:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c203:	e8 dd 42 ff ff       	call   c01004e5 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010c208:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c20d:	8b 40 18             	mov    0x18(%eax),%eax
c010c210:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010c213:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c217:	74 56                	je     c010c26f <do_exit+0xb9>
        lcr3(boot_cr3);
c010c219:	a1 fc 51 15 c0       	mov    0xc01551fc,%eax
c010c21e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c221:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c224:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010c227:	83 ec 0c             	sub    $0xc,%esp
c010c22a:	ff 75 f4             	pushl  -0xc(%ebp)
c010c22d:	e8 3c f3 ff ff       	call   c010b56e <mm_count_dec>
c010c232:	83 c4 10             	add    $0x10,%esp
c010c235:	85 c0                	test   %eax,%eax
c010c237:	75 2a                	jne    c010c263 <do_exit+0xad>
            exit_mmap(mm);
c010c239:	83 ec 0c             	sub    $0xc,%esp
c010c23c:	ff 75 f4             	pushl  -0xc(%ebp)
c010c23f:	e8 42 79 ff ff       	call   c0103b86 <exit_mmap>
c010c244:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010c247:	83 ec 0c             	sub    $0xc,%esp
c010c24a:	ff 75 f4             	pushl  -0xc(%ebp)
c010c24d:	e8 3b fb ff ff       	call   c010bd8d <put_pgdir>
c010c252:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010c255:	83 ec 0c             	sub    $0xc,%esp
c010c258:	ff 75 f4             	pushl  -0xc(%ebp)
c010c25b:	e8 98 76 ff ff       	call   c01038f8 <mm_destroy>
c010c260:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010c263:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c268:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c010c26f:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c274:	83 ec 0c             	sub    $0xc,%esp
c010c277:	50                   	push   %eax
c010c278:	e8 a9 fd ff ff       	call   c010c026 <put_fs>
c010c27d:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_ZOMBIE;
c010c280:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c285:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010c28b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c290:	8b 55 08             	mov    0x8(%ebp),%edx
c010c293:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010c299:	e8 81 f1 ff ff       	call   c010b41f <__intr_save>
c010c29e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010c2a1:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c2a6:	8b 40 14             	mov    0x14(%eax),%eax
c010c2a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010c2ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2af:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c2b5:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c2ba:	0f 85 be 00 00 00    	jne    c010c37e <do_exit+0x1c8>
            wakeup_proc(proc);
c010c2c0:	83 ec 0c             	sub    $0xc,%esp
c010c2c3:	ff 75 ec             	pushl  -0x14(%ebp)
c010c2c6:	e8 92 14 00 00       	call   c010d75d <wakeup_proc>
c010c2cb:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010c2ce:	e9 ab 00 00 00       	jmp    c010c37e <do_exit+0x1c8>
            proc = current->cptr;
c010c2d3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c2d8:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c2de:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010c2e1:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c2e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c2e9:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c2ef:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010c2f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2f8:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c2ff:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010c302:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c307:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c30d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c310:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c316:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c319:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c31f:	85 c0                	test   %eax,%eax
c010c321:	74 14                	je     c010c337 <do_exit+0x181>
                initproc->cptr->yptr = proc;
c010c323:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c328:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c32e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c331:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010c337:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010c33d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c340:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010c343:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c348:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c34b:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010c351:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c354:	8b 00                	mov    (%eax),%eax
c010c356:	83 f8 03             	cmp    $0x3,%eax
c010c359:	75 23                	jne    c010c37e <do_exit+0x1c8>
                if (initproc->wait_state == WT_CHILD) {
c010c35b:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c360:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c366:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c36b:	75 11                	jne    c010c37e <do_exit+0x1c8>
                    wakeup_proc(initproc);
c010c36d:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c372:	83 ec 0c             	sub    $0xc,%esp
c010c375:	50                   	push   %eax
c010c376:	e8 e2 13 00 00       	call   c010d75d <wakeup_proc>
c010c37b:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010c37e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c383:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c389:	85 c0                	test   %eax,%eax
c010c38b:	0f 85 42 ff ff ff    	jne    c010c2d3 <do_exit+0x11d>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010c391:	83 ec 0c             	sub    $0xc,%esp
c010c394:	ff 75 f0             	pushl  -0x10(%ebp)
c010c397:	e8 ad f0 ff ff       	call   c010b449 <__intr_restore>
c010c39c:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010c39f:	e8 49 14 00 00       	call   c010d7ed <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010c3a4:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c3a9:	8b 40 04             	mov    0x4(%eax),%eax
c010c3ac:	50                   	push   %eax
c010c3ad:	68 6c 6d 11 c0       	push   $0xc0116d6c
c010c3b2:	68 3b 02 00 00       	push   $0x23b
c010c3b7:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c3bc:	e8 24 41 ff ff       	call   c01004e5 <__panic>

c010c3c1 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010c3c1:	55                   	push   %ebp
c010c3c2:	89 e5                	mov    %esp,%ebp
c010c3c4:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010c3c7:	83 ec 04             	sub    $0x4,%esp
c010c3ca:	6a 00                	push   $0x0
c010c3cc:	ff 75 14             	pushl  0x14(%ebp)
c010c3cf:	ff 75 08             	pushl  0x8(%ebp)
c010c3d2:	e8 da d9 ff ff       	call   c0109db1 <sysfile_seek>
c010c3d7:	83 c4 10             	add    $0x10,%esp
c010c3da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c3e1:	74 05                	je     c010c3e8 <load_icode_read+0x27>
        return ret;
c010c3e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3e6:	eb 33                	jmp    c010c41b <load_icode_read+0x5a>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010c3e8:	83 ec 04             	sub    $0x4,%esp
c010c3eb:	ff 75 10             	pushl  0x10(%ebp)
c010c3ee:	ff 75 0c             	pushl  0xc(%ebp)
c010c3f1:	ff 75 08             	pushl  0x8(%ebp)
c010c3f4:	e8 08 d7 ff ff       	call   c0109b01 <sysfile_read>
c010c3f9:	83 c4 10             	add    $0x10,%esp
c010c3fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c402:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c405:	74 0f                	je     c010c416 <load_icode_read+0x55>
        return (ret < 0) ? ret : -1;
c010c407:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010c40c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c410:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010c414:	eb 05                	jmp    c010c41b <load_icode_read+0x5a>
    }
    return 0;
c010c416:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c41b:	c9                   	leave  
c010c41c:	c3                   	ret    

c010c41d <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010c41d:	55                   	push   %ebp
c010c41e:	89 e5                	mov    %esp,%ebp
c010c420:	53                   	push   %ebx
c010c421:	81 ec c4 00 00 00    	sub    $0xc4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010c427:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c42b:	78 06                	js     c010c433 <load_icode+0x16>
c010c42d:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010c431:	7e 19                	jle    c010c44c <load_icode+0x2f>
c010c433:	68 8c 6d 11 c0       	push   $0xc0116d8c
c010c438:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c43d:	68 67 02 00 00       	push   $0x267
c010c442:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c447:	e8 99 40 ff ff       	call   c01004e5 <__panic>

    if (current->mm != NULL) {
c010c44c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c451:	8b 40 18             	mov    0x18(%eax),%eax
c010c454:	85 c0                	test   %eax,%eax
c010c456:	74 17                	je     c010c46f <load_icode+0x52>
        panic("load_icode: current->mm must be empty.\n");
c010c458:	83 ec 04             	sub    $0x4,%esp
c010c45b:	68 b4 6d 11 c0       	push   $0xc0116db4
c010c460:	68 6a 02 00 00       	push   $0x26a
c010c465:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c46a:	e8 76 40 ff ff       	call   c01004e5 <__panic>
    }

    int ret = -E_NO_MEM;
c010c46f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010c476:	e8 51 71 ff ff       	call   c01035cc <mm_create>
c010c47b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010c47e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010c482:	0f 84 ff 06 00 00    	je     c010cb87 <load_icode+0x76a>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010c488:	83 ec 0c             	sub    $0xc,%esp
c010c48b:	ff 75 c8             	pushl  -0x38(%ebp)
c010c48e:	e8 61 f8 ff ff       	call   c010bcf4 <setup_pgdir>
c010c493:	83 c4 10             	add    $0x10,%esp
c010c496:	85 c0                	test   %eax,%eax
c010c498:	0f 85 d8 06 00 00    	jne    c010cb76 <load_icode+0x759>
        goto bad_pgdir_cleanup_mm;
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c010c49e:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010c4a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010c4a7:	6a 00                	push   $0x0
c010c4a9:	6a 34                	push   $0x34
c010c4ab:	ff 75 c4             	pushl  -0x3c(%ebp)
c010c4ae:	ff 75 08             	pushl  0x8(%ebp)
c010c4b1:	e8 0b ff ff ff       	call   c010c3c1 <load_icode_read>
c010c4b6:	83 c4 10             	add    $0x10,%esp
c010c4b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4c0:	0f 85 9f 06 00 00    	jne    c010cb65 <load_icode+0x748>
        goto bad_elf_cleanup_pgdir;
    }

    if (elf->e_magic != ELF_MAGIC) {
c010c4c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c4c9:	8b 00                	mov    (%eax),%eax
c010c4cb:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010c4d0:	74 0c                	je     c010c4de <load_icode+0xc1>
        ret = -E_INVAL_ELF;
c010c4d2:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010c4d9:	e9 88 06 00 00       	jmp    c010cb66 <load_icode+0x749>
    }

    struct proghdr __ph, *ph = &__ph;
c010c4de:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010c4e4:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010c4e7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010c4ee:	e9 2e 03 00 00       	jmp    c010c821 <load_icode+0x404>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010c4f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c4f6:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c4f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c4fc:	c1 e2 05             	shl    $0x5,%edx
c010c4ff:	01 d0                	add    %edx,%eax
c010c501:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010c504:	ff 75 bc             	pushl  -0x44(%ebp)
c010c507:	6a 20                	push   $0x20
c010c509:	ff 75 c0             	pushl  -0x40(%ebp)
c010c50c:	ff 75 08             	pushl  0x8(%ebp)
c010c50f:	e8 ad fe ff ff       	call   c010c3c1 <load_icode_read>
c010c514:	83 c4 10             	add    $0x10,%esp
c010c517:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c51a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c51e:	0f 85 27 06 00 00    	jne    c010cb4b <load_icode+0x72e>
            goto bad_cleanup_mmap;
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010c524:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c527:	8b 00                	mov    (%eax),%eax
c010c529:	83 f8 01             	cmp    $0x1,%eax
c010c52c:	0f 85 e4 02 00 00    	jne    c010c816 <load_icode+0x3f9>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010c532:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c535:	8b 50 10             	mov    0x10(%eax),%edx
c010c538:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c53b:	8b 40 14             	mov    0x14(%eax),%eax
c010c53e:	39 c2                	cmp    %eax,%edx
c010c540:	76 0c                	jbe    c010c54e <load_icode+0x131>
            ret = -E_INVAL_ELF;
c010c542:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010c549:	e9 07 06 00 00       	jmp    c010cb55 <load_icode+0x738>
        }
        if (ph->p_filesz == 0) {
c010c54e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c551:	8b 40 10             	mov    0x10(%eax),%eax
c010c554:	85 c0                	test   %eax,%eax
c010c556:	0f 84 bd 02 00 00    	je     c010c819 <load_icode+0x3fc>
            continue ;
        }
        vm_flags = 0, perm = PTE_U;
c010c55c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010c563:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010c56a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c56d:	8b 40 18             	mov    0x18(%eax),%eax
c010c570:	83 e0 01             	and    $0x1,%eax
c010c573:	85 c0                	test   %eax,%eax
c010c575:	74 04                	je     c010c57b <load_icode+0x15e>
c010c577:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010c57b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c57e:	8b 40 18             	mov    0x18(%eax),%eax
c010c581:	83 e0 02             	and    $0x2,%eax
c010c584:	85 c0                	test   %eax,%eax
c010c586:	74 04                	je     c010c58c <load_icode+0x16f>
c010c588:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010c58c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c58f:	8b 40 18             	mov    0x18(%eax),%eax
c010c592:	83 e0 04             	and    $0x4,%eax
c010c595:	85 c0                	test   %eax,%eax
c010c597:	74 04                	je     c010c59d <load_icode+0x180>
c010c599:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010c59d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5a0:	83 e0 02             	and    $0x2,%eax
c010c5a3:	85 c0                	test   %eax,%eax
c010c5a5:	74 04                	je     c010c5ab <load_icode+0x18e>
c010c5a7:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010c5ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5ae:	8b 50 14             	mov    0x14(%eax),%edx
c010c5b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5b4:	8b 40 08             	mov    0x8(%eax),%eax
c010c5b7:	83 ec 0c             	sub    $0xc,%esp
c010c5ba:	6a 00                	push   $0x0
c010c5bc:	ff 75 ec             	pushl  -0x14(%ebp)
c010c5bf:	52                   	push   %edx
c010c5c0:	50                   	push   %eax
c010c5c1:	ff 75 c8             	pushl  -0x38(%ebp)
c010c5c4:	e8 ce 73 ff ff       	call   c0103997 <mm_map>
c010c5c9:	83 c4 20             	add    $0x20,%esp
c010c5cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c5d3:	0f 85 75 05 00 00    	jne    c010cb4e <load_icode+0x731>
            goto bad_cleanup_mmap;
        }
        off_t offset = ph->p_offset;
c010c5d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5dc:	8b 40 04             	mov    0x4(%eax),%eax
c010c5df:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010c5e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5e5:	8b 40 08             	mov    0x8(%eax),%eax
c010c5e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c5eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c5ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010c5f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010c5f4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010c5f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010c5fc:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010c603:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c606:	8b 50 08             	mov    0x8(%eax),%edx
c010c609:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c60c:	8b 40 10             	mov    0x10(%eax),%eax
c010c60f:	01 d0                	add    %edx,%eax
c010c611:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010c614:	e9 9e 00 00 00       	jmp    c010c6b7 <load_icode+0x29a>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c619:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c61c:	8b 40 0c             	mov    0xc(%eax),%eax
c010c61f:	83 ec 04             	sub    $0x4,%esp
c010c622:	ff 75 e8             	pushl  -0x18(%ebp)
c010c625:	ff 75 d4             	pushl  -0x2c(%ebp)
c010c628:	50                   	push   %eax
c010c629:	e8 5f b8 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c62e:	83 c4 10             	add    $0x10,%esp
c010c631:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c634:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c638:	75 0c                	jne    c010c646 <load_icode+0x229>
                ret = -E_NO_MEM;
c010c63a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010c641:	e9 0f 05 00 00       	jmp    c010cb55 <load_icode+0x738>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c646:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c649:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c64c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c64f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c654:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c657:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c65a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c661:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c664:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c667:	73 09                	jae    c010c672 <load_icode+0x255>
                size -= la - end;
c010c669:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c66c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c66f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010c672:	83 ec 0c             	sub    $0xc,%esp
c010c675:	ff 75 f0             	pushl  -0x10(%ebp)
c010c678:	e8 53 ee ff ff       	call   c010b4d0 <page2kva>
c010c67d:	83 c4 10             	add    $0x10,%esp
c010c680:	89 c2                	mov    %eax,%edx
c010c682:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c685:	01 d0                	add    %edx,%eax
c010c687:	ff 75 e0             	pushl  -0x20(%ebp)
c010c68a:	ff 75 dc             	pushl  -0x24(%ebp)
c010c68d:	50                   	push   %eax
c010c68e:	ff 75 08             	pushl  0x8(%ebp)
c010c691:	e8 2b fd ff ff       	call   c010c3c1 <load_icode_read>
c010c696:	83 c4 10             	add    $0x10,%esp
c010c699:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c69c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6a0:	0f 85 ab 04 00 00    	jne    c010cb51 <load_icode+0x734>
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
c010c6a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6a9:	01 45 d8             	add    %eax,-0x28(%ebp)
c010c6ac:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c6af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6b2:	01 d0                	add    %edx,%eax
c010c6b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010c6b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6ba:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c6bd:	0f 82 56 ff ff ff    	jb     c010c619 <load_icode+0x1fc>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c010c6c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6c6:	8b 50 08             	mov    0x8(%eax),%edx
c010c6c9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6cc:	8b 40 14             	mov    0x14(%eax),%eax
c010c6cf:	01 d0                	add    %edx,%eax
c010c6d1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c010c6d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6d7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c6da:	0f 83 28 01 00 00    	jae    c010c808 <load_icode+0x3eb>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010c6e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6e3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c6e6:	0f 84 30 01 00 00    	je     c010c81c <load_icode+0x3ff>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010c6ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6ef:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c6f2:	05 00 10 00 00       	add    $0x1000,%eax
c010c6f7:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c6fa:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c6ff:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c702:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010c705:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c708:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c70b:	73 09                	jae    c010c716 <load_icode+0x2f9>
                size -= la - end;
c010c70d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c710:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c713:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c716:	83 ec 0c             	sub    $0xc,%esp
c010c719:	ff 75 f0             	pushl  -0x10(%ebp)
c010c71c:	e8 af ed ff ff       	call   c010b4d0 <page2kva>
c010c721:	83 c4 10             	add    $0x10,%esp
c010c724:	89 c2                	mov    %eax,%edx
c010c726:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c729:	01 d0                	add    %edx,%eax
c010c72b:	83 ec 04             	sub    $0x4,%esp
c010c72e:	ff 75 dc             	pushl  -0x24(%ebp)
c010c731:	6a 00                	push   $0x0
c010c733:	50                   	push   %eax
c010c734:	e8 d7 72 00 00       	call   c0113a10 <memset>
c010c739:	83 c4 10             	add    $0x10,%esp
            start += size;
c010c73c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c73f:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010c742:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c745:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c748:	73 0c                	jae    c010c756 <load_icode+0x339>
c010c74a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c74d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c750:	0f 84 b2 00 00 00    	je     c010c808 <load_icode+0x3eb>
c010c756:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c759:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c75c:	72 0c                	jb     c010c76a <load_icode+0x34d>
c010c75e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c761:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c764:	0f 84 9e 00 00 00    	je     c010c808 <load_icode+0x3eb>
c010c76a:	68 dc 6d 11 c0       	push   $0xc0116ddc
c010c76f:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c774:	68 bd 02 00 00       	push   $0x2bd
c010c779:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c77e:	e8 62 3d ff ff       	call   c01004e5 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c783:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c786:	8b 40 0c             	mov    0xc(%eax),%eax
c010c789:	83 ec 04             	sub    $0x4,%esp
c010c78c:	ff 75 e8             	pushl  -0x18(%ebp)
c010c78f:	ff 75 d4             	pushl  -0x2c(%ebp)
c010c792:	50                   	push   %eax
c010c793:	e8 f5 b6 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c798:	83 c4 10             	add    $0x10,%esp
c010c79b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c79e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c7a2:	75 0c                	jne    c010c7b0 <load_icode+0x393>
                ret = -E_NO_MEM;
c010c7a4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010c7ab:	e9 a5 03 00 00       	jmp    c010cb55 <load_icode+0x738>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c7b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7b3:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c7b6:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c7b9:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c7be:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c7c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c7c4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c7cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c7ce:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c7d1:	73 09                	jae    c010c7dc <load_icode+0x3bf>
                size -= la - end;
c010c7d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c7d6:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c7d9:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c7dc:	83 ec 0c             	sub    $0xc,%esp
c010c7df:	ff 75 f0             	pushl  -0x10(%ebp)
c010c7e2:	e8 e9 ec ff ff       	call   c010b4d0 <page2kva>
c010c7e7:	83 c4 10             	add    $0x10,%esp
c010c7ea:	89 c2                	mov    %eax,%edx
c010c7ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c7ef:	01 d0                	add    %edx,%eax
c010c7f1:	83 ec 04             	sub    $0x4,%esp
c010c7f4:	ff 75 dc             	pushl  -0x24(%ebp)
c010c7f7:	6a 00                	push   $0x0
c010c7f9:	50                   	push   %eax
c010c7fa:	e8 11 72 00 00       	call   c0113a10 <memset>
c010c7ff:	83 c4 10             	add    $0x10,%esp
            start += size;
c010c802:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c805:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010c808:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c80b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c80e:	0f 82 6f ff ff ff    	jb     c010c783 <load_icode+0x366>
c010c814:	eb 07                	jmp    c010c81d <load_icode+0x400>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
            goto bad_cleanup_mmap;
        }
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010c816:	90                   	nop
c010c817:	eb 04                	jmp    c010c81d <load_icode+0x400>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010c819:	90                   	nop
c010c81a:	eb 01                	jmp    c010c81d <load_icode+0x400>
        end = ph->p_va + ph->p_memsz;

        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010c81c:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010c81d:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010c821:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c824:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010c828:	0f b7 c0             	movzwl %ax,%eax
c010c82b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010c82e:	0f 87 bf fc ff ff    	ja     c010c4f3 <load_icode+0xd6>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010c834:	83 ec 0c             	sub    $0xc,%esp
c010c837:	ff 75 08             	pushl  0x8(%ebp)
c010c83a:	e8 ac d2 ff ff       	call   c0109aeb <sysfile_close>
c010c83f:	83 c4 10             	add    $0x10,%esp

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010c842:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010c849:	83 ec 0c             	sub    $0xc,%esp
c010c84c:	6a 00                	push   $0x0
c010c84e:	ff 75 ec             	pushl  -0x14(%ebp)
c010c851:	68 00 00 10 00       	push   $0x100000
c010c856:	68 00 00 f0 af       	push   $0xaff00000
c010c85b:	ff 75 c8             	pushl  -0x38(%ebp)
c010c85e:	e8 34 71 ff ff       	call   c0103997 <mm_map>
c010c863:	83 c4 20             	add    $0x20,%esp
c010c866:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c869:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c86d:	0f 85 e1 02 00 00    	jne    c010cb54 <load_icode+0x737>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010c873:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c876:	8b 40 0c             	mov    0xc(%eax),%eax
c010c879:	83 ec 04             	sub    $0x4,%esp
c010c87c:	6a 07                	push   $0x7
c010c87e:	68 00 f0 ff af       	push   $0xaffff000
c010c883:	50                   	push   %eax
c010c884:	e8 04 b6 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c889:	83 c4 10             	add    $0x10,%esp
c010c88c:	85 c0                	test   %eax,%eax
c010c88e:	75 19                	jne    c010c8a9 <load_icode+0x48c>
c010c890:	68 18 6e 11 c0       	push   $0xc0116e18
c010c895:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c89a:	68 d2 02 00 00       	push   $0x2d2
c010c89f:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c8a4:	e8 3c 3c ff ff       	call   c01004e5 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010c8a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c8ac:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8af:	83 ec 04             	sub    $0x4,%esp
c010c8b2:	6a 07                	push   $0x7
c010c8b4:	68 00 e0 ff af       	push   $0xafffe000
c010c8b9:	50                   	push   %eax
c010c8ba:	e8 ce b5 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c8bf:	83 c4 10             	add    $0x10,%esp
c010c8c2:	85 c0                	test   %eax,%eax
c010c8c4:	75 19                	jne    c010c8df <load_icode+0x4c2>
c010c8c6:	68 5c 6e 11 c0       	push   $0xc0116e5c
c010c8cb:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c8d0:	68 d3 02 00 00       	push   $0x2d3
c010c8d5:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c8da:	e8 06 3c ff ff       	call   c01004e5 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010c8df:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c8e2:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8e5:	83 ec 04             	sub    $0x4,%esp
c010c8e8:	6a 07                	push   $0x7
c010c8ea:	68 00 d0 ff af       	push   $0xafffd000
c010c8ef:	50                   	push   %eax
c010c8f0:	e8 98 b5 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c8f5:	83 c4 10             	add    $0x10,%esp
c010c8f8:	85 c0                	test   %eax,%eax
c010c8fa:	75 19                	jne    c010c915 <load_icode+0x4f8>
c010c8fc:	68 a0 6e 11 c0       	push   $0xc0116ea0
c010c901:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c906:	68 d4 02 00 00       	push   $0x2d4
c010c90b:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c910:	e8 d0 3b ff ff       	call   c01004e5 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010c915:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c918:	8b 40 0c             	mov    0xc(%eax),%eax
c010c91b:	83 ec 04             	sub    $0x4,%esp
c010c91e:	6a 07                	push   $0x7
c010c920:	68 00 c0 ff af       	push   $0xafffc000
c010c925:	50                   	push   %eax
c010c926:	e8 62 b5 ff ff       	call   c0107e8d <pgdir_alloc_page>
c010c92b:	83 c4 10             	add    $0x10,%esp
c010c92e:	85 c0                	test   %eax,%eax
c010c930:	75 19                	jne    c010c94b <load_icode+0x52e>
c010c932:	68 e4 6e 11 c0       	push   $0xc0116ee4
c010c937:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010c93c:	68 d5 02 00 00       	push   $0x2d5
c010c941:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c946:	e8 9a 3b ff ff       	call   c01004e5 <__panic>
    
    mm_count_inc(mm);
c010c94b:	83 ec 0c             	sub    $0xc,%esp
c010c94e:	ff 75 c8             	pushl  -0x38(%ebp)
c010c951:	e8 fe eb ff ff       	call   c010b554 <mm_count_inc>
c010c956:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010c959:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c95e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010c961:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010c964:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c969:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010c96c:	8b 52 0c             	mov    0xc(%edx),%edx
c010c96f:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010c972:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010c979:	77 17                	ja     c010c992 <load_icode+0x575>
c010c97b:	ff 75 ac             	pushl  -0x54(%ebp)
c010c97e:	68 d0 6c 11 c0       	push   $0xc0116cd0
c010c983:	68 d9 02 00 00       	push   $0x2d9
c010c988:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c98d:	e8 53 3b ff ff       	call   c01004e5 <__panic>
c010c992:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010c995:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010c99b:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010c99e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c9a1:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9a4:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010c9a7:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010c9ae:	77 17                	ja     c010c9c7 <load_icode+0x5aa>
c010c9b0:	ff 75 a8             	pushl  -0x58(%ebp)
c010c9b3:	68 d0 6c 11 c0       	push   $0xc0116cd0
c010c9b8:	68 da 02 00 00       	push   $0x2da
c010c9bd:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010c9c2:	e8 1e 3b ff ff       	call   c01004e5 <__panic>
c010c9c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010c9ca:	05 00 00 00 40       	add    $0x40000000,%eax
c010c9cf:	89 45 98             	mov    %eax,-0x68(%ebp)
c010c9d2:	8b 45 98             	mov    -0x68(%ebp),%eax
c010c9d5:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c010c9d8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010c9df:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010c9e6:	eb 2c                	jmp    c010ca14 <load_icode+0x5f7>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010c9e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c9eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010c9f2:	8b 45 10             	mov    0x10(%ebp),%eax
c010c9f5:	01 d0                	add    %edx,%eax
c010c9f7:	8b 00                	mov    (%eax),%eax
c010c9f9:	83 ec 08             	sub    $0x8,%esp
c010c9fc:	68 00 10 00 00       	push   $0x1000
c010ca01:	50                   	push   %eax
c010ca02:	e8 d7 6c 00 00       	call   c01136de <strnlen>
c010ca07:	83 c4 10             	add    $0x10,%esp
c010ca0a:	83 c0 01             	add    $0x1,%eax
c010ca0d:	01 45 d0             	add    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c010ca10:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010ca14:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca17:	39 45 cc             	cmp    %eax,-0x34(%ebp)
c010ca1a:	72 cc                	jb     c010c9e8 <load_icode+0x5cb>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010ca1c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca1f:	c1 e8 02             	shr    $0x2,%eax
c010ca22:	89 c2                	mov    %eax,%edx
c010ca24:	b8 00 00 00 00       	mov    $0x0,%eax
c010ca29:	29 d0                	sub    %edx,%eax
c010ca2b:	c1 e0 02             	shl    $0x2,%eax
c010ca2e:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010ca33:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010ca36:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ca40:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010ca43:	29 d0                	sub    %edx,%eax
c010ca45:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c010ca48:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010ca4f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010ca56:	eb 64                	jmp    c010cabc <load_icode+0x69f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010ca58:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ca5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ca62:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010ca65:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010ca68:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ca6b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ca72:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca75:	01 d0                	add    %edx,%eax
c010ca77:	8b 00                	mov    (%eax),%eax
c010ca79:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010ca7c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ca7f:	01 ca                	add    %ecx,%edx
c010ca81:	83 ec 08             	sub    $0x8,%esp
c010ca84:	50                   	push   %eax
c010ca85:	52                   	push   %edx
c010ca86:	e8 ac 6c 00 00       	call   c0113737 <strcpy>
c010ca8b:	83 c4 10             	add    $0x10,%esp
c010ca8e:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010ca90:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ca93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ca9a:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca9d:	01 d0                	add    %edx,%eax
c010ca9f:	8b 00                	mov    (%eax),%eax
c010caa1:	83 ec 08             	sub    $0x8,%esp
c010caa4:	68 00 10 00 00       	push   $0x1000
c010caa9:	50                   	push   %eax
c010caaa:	e8 2f 6c 00 00       	call   c01136de <strnlen>
c010caaf:	83 c4 10             	add    $0x10,%esp
c010cab2:	83 c0 01             	add    $0x1,%eax
c010cab5:	01 45 d0             	add    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010cab8:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010cabc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cabf:	39 45 cc             	cmp    %eax,-0x34(%ebp)
c010cac2:	72 94                	jb     c010ca58 <load_icode+0x63b>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c010cac4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010cac7:	83 e8 04             	sub    $0x4,%eax
c010caca:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010cacd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010cad0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cad3:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c010cad5:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cada:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cadd:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010cae0:	83 ec 04             	sub    $0x4,%esp
c010cae3:	6a 4c                	push   $0x4c
c010cae5:	6a 00                	push   $0x0
c010cae7:	ff 75 9c             	pushl  -0x64(%ebp)
c010caea:	e8 21 6f 00 00       	call   c0113a10 <memset>
c010caef:	83 c4 10             	add    $0x10,%esp
    tf->tf_cs = USER_CS;
c010caf2:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010caf5:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010cafb:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cafe:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010cb04:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb07:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010cb0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb0e:	66 89 50 28          	mov    %dx,0x28(%eax)
c010cb12:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb15:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010cb19:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb1c:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010cb20:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb23:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010cb26:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010cb29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cb2c:	8b 50 18             	mov    0x18(%eax),%edx
c010cb2f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb32:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010cb35:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cb38:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010cb3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010cb46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb49:	eb 3f                	jmp    c010cb8a <load_icode+0x76d>
    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
            goto bad_cleanup_mmap;
c010cb4b:	90                   	nop
c010cb4c:	eb 07                	jmp    c010cb55 <load_icode+0x738>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010cb4e:	90                   	nop
c010cb4f:	eb 04                	jmp    c010cb55 <load_icode+0x738>
            off = start - la, size = PGSIZE - off, la += PGSIZE;
            if (end < la) {
                size -= la - end;
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
c010cb51:	90                   	nop
c010cb52:	eb 01                	jmp    c010cb55 <load_icode+0x738>
    }
    sysfile_close(fd);

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010cb54:	90                   	nop
    tf->tf_eflags = FL_IF;
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010cb55:	83 ec 0c             	sub    $0xc,%esp
c010cb58:	ff 75 c8             	pushl  -0x38(%ebp)
c010cb5b:	e8 26 70 ff ff       	call   c0103b86 <exit_mmap>
c010cb60:	83 c4 10             	add    $0x10,%esp
c010cb63:	eb 01                	jmp    c010cb66 <load_icode+0x749>

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
        goto bad_elf_cleanup_pgdir;
c010cb65:	90                   	nop
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010cb66:	83 ec 0c             	sub    $0xc,%esp
c010cb69:	ff 75 c8             	pushl  -0x38(%ebp)
c010cb6c:	e8 1c f2 ff ff       	call   c010bd8d <put_pgdir>
c010cb71:	83 c4 10             	add    $0x10,%esp
c010cb74:	eb 01                	jmp    c010cb77 <load_icode+0x75a>
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010cb76:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010cb77:	83 ec 0c             	sub    $0xc,%esp
c010cb7a:	ff 75 c8             	pushl  -0x38(%ebp)
c010cb7d:	e8 76 6d ff ff       	call   c01038f8 <mm_destroy>
c010cb82:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010cb85:	eb bf                	jmp    c010cb46 <load_icode+0x729>
    }

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010cb87:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cb88:	eb bc                	jmp    c010cb46 <load_icode+0x729>
}
c010cb8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010cb8d:	c9                   	leave  
c010cb8e:	c3                   	ret    

c010cb8f <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010cb8f:	55                   	push   %ebp
c010cb90:	89 e5                	mov    %esp,%ebp
c010cb92:	83 ec 08             	sub    $0x8,%esp
    while (argc > 0) {
c010cb95:	eb 21                	jmp    c010cbb8 <put_kargv+0x29>
        kfree(kargv[-- argc]);
c010cb97:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010cb9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cba8:	01 d0                	add    %edx,%eax
c010cbaa:	8b 00                	mov    (%eax),%eax
c010cbac:	83 ec 0c             	sub    $0xc,%esp
c010cbaf:	50                   	push   %eax
c010cbb0:	e8 b3 8c ff ff       	call   c0105868 <kfree>
c010cbb5:	83 c4 10             	add    $0x10,%esp
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010cbb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cbbc:	7f d9                	jg     c010cb97 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010cbbe:	90                   	nop
c010cbbf:	c9                   	leave  
c010cbc0:	c3                   	ret    

c010cbc1 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010cbc1:	55                   	push   %ebp
c010cbc2:	89 e5                	mov    %esp,%ebp
c010cbc4:	83 ec 18             	sub    $0x18,%esp
    int i, ret = -E_INVAL;
c010cbc7:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010cbce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cbd8:	8b 45 14             	mov    0x14(%ebp),%eax
c010cbdb:	6a 00                	push   $0x0
c010cbdd:	52                   	push   %edx
c010cbde:	50                   	push   %eax
c010cbdf:	ff 75 08             	pushl  0x8(%ebp)
c010cbe2:	e8 61 79 ff ff       	call   c0104548 <user_mem_check>
c010cbe7:	83 c4 10             	add    $0x10,%esp
c010cbea:	85 c0                	test   %eax,%eax
c010cbec:	75 08                	jne    c010cbf6 <copy_kargv+0x35>
        return ret;
c010cbee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbf1:	e9 9e 00 00 00       	jmp    c010cc94 <copy_kargv+0xd3>
    }
    for (i = 0; i < argc; i ++) {
c010cbf6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010cbfd:	eb 6a                	jmp    c010cc69 <copy_kargv+0xa8>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010cbff:	83 ec 0c             	sub    $0xc,%esp
c010cc02:	68 00 10 00 00       	push   $0x1000
c010cc07:	e8 44 8c ff ff       	call   c0105850 <kmalloc>
c010cc0c:	83 c4 10             	add    $0x10,%esp
c010cc0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cc12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010cc16:	74 60                	je     c010cc78 <copy_kargv+0xb7>
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010cc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cc22:	8b 45 14             	mov    0x14(%ebp),%eax
c010cc25:	01 d0                	add    %edx,%eax
c010cc27:	8b 00                	mov    (%eax),%eax
c010cc29:	68 00 10 00 00       	push   $0x1000
c010cc2e:	50                   	push   %eax
c010cc2f:	ff 75 ec             	pushl  -0x14(%ebp)
c010cc32:	ff 75 08             	pushl  0x8(%ebp)
c010cc35:	e8 2e 7a ff ff       	call   c0104668 <copy_string>
c010cc3a:	83 c4 10             	add    $0x10,%esp
c010cc3d:	85 c0                	test   %eax,%eax
c010cc3f:	75 10                	jne    c010cc51 <copy_kargv+0x90>
            kfree(buffer);
c010cc41:	83 ec 0c             	sub    $0xc,%esp
c010cc44:	ff 75 ec             	pushl  -0x14(%ebp)
c010cc47:	e8 1c 8c ff ff       	call   c0105868 <kfree>
c010cc4c:	83 c4 10             	add    $0x10,%esp
            goto failed_cleanup;
c010cc4f:	eb 2f                	jmp    c010cc80 <copy_kargv+0xbf>
        }
        kargv[i] = buffer;
c010cc51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cc5b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc5e:	01 c2                	add    %eax,%edx
c010cc60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc63:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010cc65:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010cc69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc6c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010cc6f:	7c 8e                	jl     c010cbff <copy_kargv+0x3e>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010cc71:	b8 00 00 00 00       	mov    $0x0,%eax
c010cc76:	eb 1c                	jmp    c010cc94 <copy_kargv+0xd3>
        return ret;
    }
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
c010cc78:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010cc79:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
failed_cleanup:
    put_kargv(i, kargv);
c010cc80:	83 ec 08             	sub    $0x8,%esp
c010cc83:	ff 75 10             	pushl  0x10(%ebp)
c010cc86:	ff 75 f4             	pushl  -0xc(%ebp)
c010cc89:	e8 01 ff ff ff       	call   c010cb8f <put_kargv>
c010cc8e:	83 c4 10             	add    $0x10,%esp
    return ret;
c010cc91:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010cc94:	c9                   	leave  
c010cc95:	c3                   	ret    

c010cc96 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010cc96:	55                   	push   %ebp
c010cc97:	89 e5                	mov    %esp,%ebp
c010cc99:	81 ec d8 00 00 00    	sub    $0xd8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010cc9f:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cca4:	8b 40 18             	mov    0x18(%eax),%eax
c010cca7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010ccaa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ccae:	7e 06                	jle    c010ccb6 <do_execve+0x20>
c010ccb0:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010ccb4:	7e 0a                	jle    c010ccc0 <do_execve+0x2a>
        return -E_INVAL;
c010ccb6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ccbb:	e9 f4 01 00 00       	jmp    c010ceb4 <do_execve+0x21e>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010ccc0:	83 ec 04             	sub    $0x4,%esp
c010ccc3:	6a 33                	push   $0x33
c010ccc5:	6a 00                	push   $0x0
c010ccc7:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010ccca:	50                   	push   %eax
c010cccb:	e8 40 6d 00 00       	call   c0113a10 <memset>
c010ccd0:	83 c4 10             	add    $0x10,%esp
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010ccd3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010ccda:	83 ec 0c             	sub    $0xc,%esp
c010ccdd:	ff 75 f0             	pushl  -0x10(%ebp)
c010cce0:	e8 a3 e8 ff ff       	call   c010b588 <lock_mm>
c010cce5:	83 c4 10             	add    $0x10,%esp
    if (name == NULL) {
c010cce8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ccec:	75 1e                	jne    c010cd0c <do_execve+0x76>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010ccee:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ccf3:	8b 40 04             	mov    0x4(%eax),%eax
c010ccf6:	50                   	push   %eax
c010ccf7:	68 27 6f 11 c0       	push   $0xc0116f27
c010ccfc:	6a 33                	push   $0x33
c010ccfe:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010cd01:	50                   	push   %eax
c010cd02:	e8 59 74 00 00       	call   c0114160 <snprintf>
c010cd07:	83 c4 10             	add    $0x10,%esp
c010cd0a:	eb 2e                	jmp    c010cd3a <do_execve+0xa4>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010cd0c:	6a 33                	push   $0x33
c010cd0e:	ff 75 08             	pushl  0x8(%ebp)
c010cd11:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010cd14:	50                   	push   %eax
c010cd15:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd18:	e8 4b 79 ff ff       	call   c0104668 <copy_string>
c010cd1d:	83 c4 10             	add    $0x10,%esp
c010cd20:	85 c0                	test   %eax,%eax
c010cd22:	75 16                	jne    c010cd3a <do_execve+0xa4>
            unlock_mm(mm);
c010cd24:	83 ec 0c             	sub    $0xc,%esp
c010cd27:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd2a:	e8 91 e8 ff ff       	call   c010b5c0 <unlock_mm>
c010cd2f:	83 c4 10             	add    $0x10,%esp
            return ret;
c010cd32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd35:	e9 7a 01 00 00       	jmp    c010ceb4 <do_execve+0x21e>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010cd3a:	ff 75 10             	pushl  0x10(%ebp)
c010cd3d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010cd43:	50                   	push   %eax
c010cd44:	ff 75 0c             	pushl  0xc(%ebp)
c010cd47:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd4a:	e8 72 fe ff ff       	call   c010cbc1 <copy_kargv>
c010cd4f:	83 c4 10             	add    $0x10,%esp
c010cd52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd59:	74 16                	je     c010cd71 <do_execve+0xdb>
        unlock_mm(mm);
c010cd5b:	83 ec 0c             	sub    $0xc,%esp
c010cd5e:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd61:	e8 5a e8 ff ff       	call   c010b5c0 <unlock_mm>
c010cd66:	83 c4 10             	add    $0x10,%esp
        return ret;
c010cd69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd6c:	e9 43 01 00 00       	jmp    c010ceb4 <do_execve+0x21e>
    }
    path = argv[0];
c010cd71:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd74:	8b 00                	mov    (%eax),%eax
c010cd76:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010cd79:	83 ec 0c             	sub    $0xc,%esp
c010cd7c:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd7f:	e8 3c e8 ff ff       	call   c010b5c0 <unlock_mm>
c010cd84:	83 c4 10             	add    $0x10,%esp
    files_closeall(current->filesp);
c010cd87:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cd8c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010cd92:	83 ec 0c             	sub    $0xc,%esp
c010cd95:	50                   	push   %eax
c010cd96:	e8 b5 e4 ff ff       	call   c010b250 <files_closeall>
c010cd9b:	83 c4 10             	add    $0x10,%esp

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010cd9e:	83 ec 08             	sub    $0x8,%esp
c010cda1:	6a 00                	push   $0x0
c010cda3:	ff 75 ec             	pushl  -0x14(%ebp)
c010cda6:	e8 f1 cc ff ff       	call   c0109a9c <sysfile_open>
c010cdab:	83 c4 10             	add    $0x10,%esp
c010cdae:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cdb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cdb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cdb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cdbb:	0f 88 b5 00 00 00    	js     c010ce76 <do_execve+0x1e0>
        goto execve_exit;
    }
    if (mm != NULL) {
c010cdc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cdc5:	74 56                	je     c010ce1d <do_execve+0x187>
        lcr3(boot_cr3);
c010cdc7:	a1 fc 51 15 c0       	mov    0xc01551fc,%eax
c010cdcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cdcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cdd2:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cdd5:	83 ec 0c             	sub    $0xc,%esp
c010cdd8:	ff 75 f0             	pushl  -0x10(%ebp)
c010cddb:	e8 8e e7 ff ff       	call   c010b56e <mm_count_dec>
c010cde0:	83 c4 10             	add    $0x10,%esp
c010cde3:	85 c0                	test   %eax,%eax
c010cde5:	75 2a                	jne    c010ce11 <do_execve+0x17b>
            exit_mmap(mm);
c010cde7:	83 ec 0c             	sub    $0xc,%esp
c010cdea:	ff 75 f0             	pushl  -0x10(%ebp)
c010cded:	e8 94 6d ff ff       	call   c0103b86 <exit_mmap>
c010cdf2:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010cdf5:	83 ec 0c             	sub    $0xc,%esp
c010cdf8:	ff 75 f0             	pushl  -0x10(%ebp)
c010cdfb:	e8 8d ef ff ff       	call   c010bd8d <put_pgdir>
c010ce00:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010ce03:	83 ec 0c             	sub    $0xc,%esp
c010ce06:	ff 75 f0             	pushl  -0x10(%ebp)
c010ce09:	e8 ea 6a ff ff       	call   c01038f8 <mm_destroy>
c010ce0e:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010ce11:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ce16:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010ce1d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010ce24:	83 ec 04             	sub    $0x4,%esp
c010ce27:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010ce2d:	50                   	push   %eax
c010ce2e:	ff 75 0c             	pushl  0xc(%ebp)
c010ce31:	ff 75 e8             	pushl  -0x18(%ebp)
c010ce34:	e8 e4 f5 ff ff       	call   c010c41d <load_icode>
c010ce39:	83 c4 10             	add    $0x10,%esp
c010ce3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce43:	75 34                	jne    c010ce79 <do_execve+0x1e3>
        goto execve_exit;
    }
    put_kargv(argc, kargv);
c010ce45:	83 ec 08             	sub    $0x8,%esp
c010ce48:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010ce4e:	50                   	push   %eax
c010ce4f:	ff 75 0c             	pushl  0xc(%ebp)
c010ce52:	e8 38 fd ff ff       	call   c010cb8f <put_kargv>
c010ce57:	83 c4 10             	add    $0x10,%esp
    set_proc_name(current, local_name);
c010ce5a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ce5f:	83 ec 08             	sub    $0x8,%esp
c010ce62:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010ce65:	52                   	push   %edx
c010ce66:	50                   	push   %eax
c010ce67:	e8 3b e9 ff ff       	call   c010b7a7 <set_proc_name>
c010ce6c:	83 c4 10             	add    $0x10,%esp
    return 0;
c010ce6f:	b8 00 00 00 00       	mov    $0x0,%eax
c010ce74:	eb 3e                	jmp    c010ceb4 <do_execve+0x21e>
    files_closeall(current->filesp);

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
        goto execve_exit;
c010ce76:	90                   	nop
c010ce77:	eb 01                	jmp    c010ce7a <do_execve+0x1e4>
        }
        current->mm = NULL;
    }
    ret= -E_NO_MEM;;
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
        goto execve_exit;
c010ce79:	90                   	nop
    put_kargv(argc, kargv);
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    put_kargv(argc, kargv);
c010ce7a:	83 ec 08             	sub    $0x8,%esp
c010ce7d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010ce83:	50                   	push   %eax
c010ce84:	ff 75 0c             	pushl  0xc(%ebp)
c010ce87:	e8 03 fd ff ff       	call   c010cb8f <put_kargv>
c010ce8c:	83 c4 10             	add    $0x10,%esp
    do_exit(ret);
c010ce8f:	83 ec 0c             	sub    $0xc,%esp
c010ce92:	ff 75 f4             	pushl  -0xc(%ebp)
c010ce95:	e8 1c f3 ff ff       	call   c010c1b6 <do_exit>
c010ce9a:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010ce9d:	ff 75 f4             	pushl  -0xc(%ebp)
c010cea0:	68 31 6f 11 c0       	push   $0xc0116f31
c010cea5:	68 61 03 00 00       	push   $0x361
c010ceaa:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010ceaf:	e8 31 36 ff ff       	call   c01004e5 <__panic>
}
c010ceb4:	c9                   	leave  
c010ceb5:	c3                   	ret    

c010ceb6 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010ceb6:	55                   	push   %ebp
c010ceb7:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010ceb9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cebe:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010cec5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ceca:	5d                   	pop    %ebp
c010cecb:	c3                   	ret    

c010cecc <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010cecc:	55                   	push   %ebp
c010cecd:	89 e5                	mov    %esp,%ebp
c010cecf:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010ced2:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ced7:	8b 40 18             	mov    0x18(%eax),%eax
c010ceda:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010cedd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cee1:	74 21                	je     c010cf04 <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010cee3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cee6:	6a 01                	push   $0x1
c010cee8:	6a 04                	push   $0x4
c010ceea:	50                   	push   %eax
c010ceeb:	ff 75 ec             	pushl  -0x14(%ebp)
c010ceee:	e8 55 76 ff ff       	call   c0104548 <user_mem_check>
c010cef3:	83 c4 10             	add    $0x10,%esp
c010cef6:	85 c0                	test   %eax,%eax
c010cef8:	75 0a                	jne    c010cf04 <do_wait+0x38>
            return -E_INVAL;
c010cefa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ceff:	e9 63 01 00 00       	jmp    c010d067 <do_wait+0x19b>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010cf04:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010cf0b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cf0f:	74 3c                	je     c010cf4d <do_wait+0x81>
        proc = find_proc(pid);
c010cf11:	83 ec 0c             	sub    $0xc,%esp
c010cf14:	ff 75 08             	pushl  0x8(%ebp)
c010cf17:	e8 98 ec ff ff       	call   c010bbb4 <find_proc>
c010cf1c:	83 c4 10             	add    $0x10,%esp
c010cf1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010cf22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf26:	74 58                	je     c010cf80 <do_wait+0xb4>
c010cf28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf2b:	8b 50 14             	mov    0x14(%eax),%edx
c010cf2e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf33:	39 c2                	cmp    %eax,%edx
c010cf35:	75 49                	jne    c010cf80 <do_wait+0xb4>
            haskid = 1;
c010cf37:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010cf3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf41:	8b 00                	mov    (%eax),%eax
c010cf43:	83 f8 03             	cmp    $0x3,%eax
c010cf46:	75 38                	jne    c010cf80 <do_wait+0xb4>
                goto found;
c010cf48:	e9 88 00 00 00       	jmp    c010cfd5 <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010cf4d:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf52:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cf58:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010cf5b:	eb 1d                	jmp    c010cf7a <do_wait+0xae>
            haskid = 1;
c010cf5d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010cf64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf67:	8b 00                	mov    (%eax),%eax
c010cf69:	83 f8 03             	cmp    $0x3,%eax
c010cf6c:	74 66                	je     c010cfd4 <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010cf6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf71:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cf77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf7e:	75 dd                	jne    c010cf5d <do_wait+0x91>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010cf80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf84:	74 44                	je     c010cfca <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010cf86:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf8b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010cf91:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf96:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010cf9d:	00 00 80 
        schedule();
c010cfa0:	e8 48 08 00 00       	call   c010d7ed <schedule>
        if (current->flags & PF_EXITING) {
c010cfa5:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cfaa:	8b 40 44             	mov    0x44(%eax),%eax
c010cfad:	83 e0 01             	and    $0x1,%eax
c010cfb0:	85 c0                	test   %eax,%eax
c010cfb2:	0f 84 4c ff ff ff    	je     c010cf04 <do_wait+0x38>
            do_exit(-E_KILLED);
c010cfb8:	83 ec 0c             	sub    $0xc,%esp
c010cfbb:	6a f7                	push   $0xfffffff7
c010cfbd:	e8 f4 f1 ff ff       	call   c010c1b6 <do_exit>
c010cfc2:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010cfc5:	e9 3a ff ff ff       	jmp    c010cf04 <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010cfca:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010cfcf:	e9 93 00 00 00       	jmp    c010d067 <do_wait+0x19b>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010cfd4:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010cfd5:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010cfda:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010cfdd:	74 0a                	je     c010cfe9 <do_wait+0x11d>
c010cfdf:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010cfe4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010cfe7:	75 17                	jne    c010d000 <do_wait+0x134>
        panic("wait idleproc or initproc.\n");
c010cfe9:	83 ec 04             	sub    $0x4,%esp
c010cfec:	68 44 6f 11 c0       	push   $0xc0116f44
c010cff1:	68 9a 03 00 00       	push   $0x39a
c010cff6:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010cffb:	e8 e5 34 ff ff       	call   c01004e5 <__panic>
    }
    if (code_store != NULL) {
c010d000:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d004:	74 0e                	je     c010d014 <do_wait+0x148>
        *code_store = proc->exit_code;
c010d006:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d009:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010d00f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d012:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010d014:	e8 06 e4 ff ff       	call   c010b41f <__intr_save>
c010d019:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010d01c:	83 ec 0c             	sub    $0xc,%esp
c010d01f:	ff 75 f4             	pushl  -0xc(%ebp)
c010d022:	e8 57 eb ff ff       	call   c010bb7e <unhash_proc>
c010d027:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010d02a:	83 ec 0c             	sub    $0xc,%esp
c010d02d:	ff 75 f4             	pushl  -0xc(%ebp)
c010d030:	e8 97 e8 ff ff       	call   c010b8cc <remove_links>
c010d035:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010d038:	83 ec 0c             	sub    $0xc,%esp
c010d03b:	ff 75 e8             	pushl  -0x18(%ebp)
c010d03e:	e8 06 e4 ff ff       	call   c010b449 <__intr_restore>
c010d043:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010d046:	83 ec 0c             	sub    $0xc,%esp
c010d049:	ff 75 f4             	pushl  -0xc(%ebp)
c010d04c:	e8 7a ec ff ff       	call   c010bccb <put_kstack>
c010d051:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010d054:	83 ec 0c             	sub    $0xc,%esp
c010d057:	ff 75 f4             	pushl  -0xc(%ebp)
c010d05a:	e8 09 88 ff ff       	call   c0105868 <kfree>
c010d05f:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d062:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d067:	c9                   	leave  
c010d068:	c3                   	ret    

c010d069 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010d069:	55                   	push   %ebp
c010d06a:	89 e5                	mov    %esp,%ebp
c010d06c:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010d06f:	83 ec 0c             	sub    $0xc,%esp
c010d072:	ff 75 08             	pushl  0x8(%ebp)
c010d075:	e8 3a eb ff ff       	call   c010bbb4 <find_proc>
c010d07a:	83 c4 10             	add    $0x10,%esp
c010d07d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d080:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d084:	74 47                	je     c010d0cd <do_kill+0x64>
        if (!(proc->flags & PF_EXITING)) {
c010d086:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d089:	8b 40 44             	mov    0x44(%eax),%eax
c010d08c:	83 e0 01             	and    $0x1,%eax
c010d08f:	85 c0                	test   %eax,%eax
c010d091:	75 33                	jne    c010d0c6 <do_kill+0x5d>
            proc->flags |= PF_EXITING;
c010d093:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d096:	8b 40 44             	mov    0x44(%eax),%eax
c010d099:	83 c8 01             	or     $0x1,%eax
c010d09c:	89 c2                	mov    %eax,%edx
c010d09e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0a1:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010d0a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0a7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010d0ad:	85 c0                	test   %eax,%eax
c010d0af:	79 0e                	jns    c010d0bf <do_kill+0x56>
                wakeup_proc(proc);
c010d0b1:	83 ec 0c             	sub    $0xc,%esp
c010d0b4:	ff 75 f4             	pushl  -0xc(%ebp)
c010d0b7:	e8 a1 06 00 00       	call   c010d75d <wakeup_proc>
c010d0bc:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010d0bf:	b8 00 00 00 00       	mov    $0x0,%eax
c010d0c4:	eb 0c                	jmp    c010d0d2 <do_kill+0x69>
        }
        return -E_KILLED;
c010d0c6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010d0cb:	eb 05                	jmp    c010d0d2 <do_kill+0x69>
    }
    return -E_INVAL;
c010d0cd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010d0d2:	c9                   	leave  
c010d0d3:	c3                   	ret    

c010d0d4 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010d0d4:	55                   	push   %ebp
c010d0d5:	89 e5                	mov    %esp,%ebp
c010d0d7:	53                   	push   %ebx
c010d0d8:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010d0db:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010d0e2:	eb 04                	jmp    c010d0e8 <kernel_execve+0x14>
        argc ++;
c010d0e4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010d0e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d0eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d0f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0f5:	01 d0                	add    %edx,%eax
c010d0f7:	8b 00                	mov    (%eax),%eax
c010d0f9:	85 c0                	test   %eax,%eax
c010d0fb:	75 e7                	jne    c010d0e4 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010d0fd:	b8 04 00 00 00       	mov    $0x4,%eax
c010d102:	8b 55 08             	mov    0x8(%ebp),%edx
c010d105:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010d108:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010d10b:	cd 80                	int    $0x80
c010d10d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010d110:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d113:	83 c4 10             	add    $0x10,%esp
c010d116:	5b                   	pop    %ebx
c010d117:	5d                   	pop    %ebp
c010d118:	c3                   	ret    

c010d119 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010d119:	55                   	push   %ebp
c010d11a:	89 e5                	mov    %esp,%ebp
c010d11c:	83 ec 18             	sub    $0x18,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010d11f:	c7 45 f0 60 6f 11 c0 	movl   $0xc0116f60,-0x10(%ebp)
c010d126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d12d:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d132:	8b 40 04             	mov    0x4(%eax),%eax
c010d135:	83 ec 04             	sub    $0x4,%esp
c010d138:	68 60 6f 11 c0       	push   $0xc0116f60
c010d13d:	50                   	push   %eax
c010d13e:	68 64 6f 11 c0       	push   $0xc0116f64
c010d143:	e8 37 32 ff ff       	call   c010037f <cprintf>
c010d148:	83 c4 10             	add    $0x10,%esp
c010d14b:	83 ec 08             	sub    $0x8,%esp
c010d14e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d151:	50                   	push   %eax
c010d152:	68 60 6f 11 c0       	push   $0xc0116f60
c010d157:	e8 78 ff ff ff       	call   c010d0d4 <kernel_execve>
c010d15c:	83 c4 10             	add    $0x10,%esp
#endif
    panic("user_main execve failed.\n");
c010d15f:	83 ec 04             	sub    $0x4,%esp
c010d162:	68 8b 6f 11 c0       	push   $0xc0116f8b
c010d167:	68 e5 03 00 00       	push   $0x3e5
c010d16c:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d171:	e8 6f 33 ff ff       	call   c01004e5 <__panic>

c010d176 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010d176:	55                   	push   %ebp
c010d177:	89 e5                	mov    %esp,%ebp
c010d179:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010d17c:	83 ec 0c             	sub    $0xc,%esp
c010d17f:	68 a5 6f 11 c0       	push   $0xc0116fa5
c010d184:	e8 e7 27 00 00       	call   c010f970 <vfs_set_bootfs>
c010d189:	83 c4 10             	add    $0x10,%esp
c010d18c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d18f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d193:	74 17                	je     c010d1ac <init_main+0x36>
        panic("set boot fs failed: %e.\n", ret);
c010d195:	ff 75 f4             	pushl  -0xc(%ebp)
c010d198:	68 ac 6f 11 c0       	push   $0xc0116fac
c010d19d:	68 ed 03 00 00       	push   $0x3ed
c010d1a2:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d1a7:	e8 39 33 ff ff       	call   c01004e5 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010d1ac:	e8 47 a0 ff ff       	call   c01071f8 <nr_free_pages>
c010d1b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010d1b4:	e8 7a 85 ff ff       	call   c0105733 <kallocated>
c010d1b9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010d1bc:	83 ec 04             	sub    $0x4,%esp
c010d1bf:	6a 00                	push   $0x0
c010d1c1:	6a 00                	push   $0x0
c010d1c3:	68 19 d1 10 c0       	push   $0xc010d119
c010d1c8:	e8 59 ea ff ff       	call   c010bc26 <kernel_thread>
c010d1cd:	83 c4 10             	add    $0x10,%esp
c010d1d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010d1d3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d1d7:	7f 17                	jg     c010d1f0 <init_main+0x7a>
        panic("create user_main failed.\n");
c010d1d9:	83 ec 04             	sub    $0x4,%esp
c010d1dc:	68 c5 6f 11 c0       	push   $0xc0116fc5
c010d1e1:	68 f5 03 00 00       	push   $0x3f5
c010d1e6:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d1eb:	e8 f5 32 ff ff       	call   c01004e5 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010d1f0:	e8 6d bd ff ff       	call   c0108f62 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010d1f5:	eb 05                	jmp    c010d1fc <init_main+0x86>
        schedule();
c010d1f7:	e8 f1 05 00 00       	call   c010d7ed <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010d1fc:	83 ec 08             	sub    $0x8,%esp
c010d1ff:	6a 00                	push   $0x0
c010d201:	6a 00                	push   $0x0
c010d203:	e8 c4 fc ff ff       	call   c010cecc <do_wait>
c010d208:	83 c4 10             	add    $0x10,%esp
c010d20b:	85 c0                	test   %eax,%eax
c010d20d:	74 e8                	je     c010d1f7 <init_main+0x81>
        schedule();
    }

    fs_cleanup();
c010d20f:	e8 d8 de ff ff       	call   c010b0ec <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010d214:	83 ec 0c             	sub    $0xc,%esp
c010d217:	68 e0 6f 11 c0       	push   $0xc0116fe0
c010d21c:	e8 5e 31 ff ff       	call   c010037f <cprintf>
c010d221:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010d224:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d229:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d22f:	85 c0                	test   %eax,%eax
c010d231:	75 1e                	jne    c010d251 <init_main+0xdb>
c010d233:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d238:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010d23e:	85 c0                	test   %eax,%eax
c010d240:	75 0f                	jne    c010d251 <init_main+0xdb>
c010d242:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d247:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d24d:	85 c0                	test   %eax,%eax
c010d24f:	74 19                	je     c010d26a <init_main+0xf4>
c010d251:	68 04 70 11 c0       	push   $0xc0117004
c010d256:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d25b:	68 01 04 00 00       	push   $0x401
c010d260:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d265:	e8 7b 32 ff ff       	call   c01004e5 <__panic>
    assert(nr_process == 2);
c010d26a:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010d26f:	83 f8 02             	cmp    $0x2,%eax
c010d272:	74 19                	je     c010d28d <init_main+0x117>
c010d274:	68 4f 70 11 c0       	push   $0xc011704f
c010d279:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d27e:	68 02 04 00 00       	push   $0x402
c010d283:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d288:	e8 58 32 ff ff       	call   c01004e5 <__panic>
c010d28d:	c7 45 e0 fc 52 15 c0 	movl   $0xc01552fc,-0x20(%ebp)
c010d294:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d297:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010d29a:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010d2a0:	83 c2 7c             	add    $0x7c,%edx
c010d2a3:	39 d0                	cmp    %edx,%eax
c010d2a5:	74 19                	je     c010d2c0 <init_main+0x14a>
c010d2a7:	68 60 70 11 c0       	push   $0xc0117060
c010d2ac:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d2b1:	68 03 04 00 00       	push   $0x403
c010d2b6:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d2bb:	e8 25 32 ff ff       	call   c01004e5 <__panic>
c010d2c0:	c7 45 e4 fc 52 15 c0 	movl   $0xc01552fc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010d2c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d2ca:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010d2cc:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010d2d2:	83 c2 7c             	add    $0x7c,%edx
c010d2d5:	39 d0                	cmp    %edx,%eax
c010d2d7:	74 19                	je     c010d2f2 <init_main+0x17c>
c010d2d9:	68 90 70 11 c0       	push   $0xc0117090
c010d2de:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d2e3:	68 04 04 00 00       	push   $0x404
c010d2e8:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d2ed:	e8 f3 31 ff ff       	call   c01004e5 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010d2f2:	e8 01 9f ff ff       	call   c01071f8 <nr_free_pages>
c010d2f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d2fa:	74 19                	je     c010d315 <init_main+0x19f>
c010d2fc:	68 c0 70 11 c0       	push   $0xc01170c0
c010d301:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d306:	68 05 04 00 00       	push   $0x405
c010d30b:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d310:	e8 d0 31 ff ff       	call   c01004e5 <__panic>
    assert(kernel_allocated_store == kallocated());
c010d315:	e8 19 84 ff ff       	call   c0105733 <kallocated>
c010d31a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d31d:	74 19                	je     c010d338 <init_main+0x1c2>
c010d31f:	68 e8 70 11 c0       	push   $0xc01170e8
c010d324:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d329:	68 06 04 00 00       	push   $0x406
c010d32e:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d333:	e8 ad 31 ff ff       	call   c01004e5 <__panic>
    cprintf("init check memory pass.\n");
c010d338:	83 ec 0c             	sub    $0xc,%esp
c010d33b:	68 0f 71 11 c0       	push   $0xc011710f
c010d340:	e8 3a 30 ff ff       	call   c010037f <cprintf>
c010d345:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d348:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d34d:	c9                   	leave  
c010d34e:	c3                   	ret    

c010d34f <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010d34f:	55                   	push   %ebp
c010d350:	89 e5                	mov    %esp,%ebp
c010d352:	53                   	push   %ebx
c010d353:	83 ec 14             	sub    $0x14,%esp
c010d356:	c7 45 e8 fc 52 15 c0 	movl   $0xc01552fc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010d35d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d360:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d363:	89 50 04             	mov    %edx,0x4(%eax)
c010d366:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d369:	8b 50 04             	mov    0x4(%eax),%edx
c010d36c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d36f:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d371:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d378:	eb 26                	jmp    c010d3a0 <proc_init+0x51>
        list_init(hash_list + i);
c010d37a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d37d:	c1 e0 03             	shl    $0x3,%eax
c010d380:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010d385:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d388:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d38b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d38e:	89 50 04             	mov    %edx,0x4(%eax)
c010d391:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d394:	8b 50 04             	mov    0x4(%eax),%edx
c010d397:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d39a:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d39c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d3a0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010d3a7:	7e d1                	jle    c010d37a <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010d3a9:	e8 71 e2 ff ff       	call   c010b61f <alloc_proc>
c010d3ae:	a3 20 20 15 c0       	mov    %eax,0xc0152020
c010d3b3:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d3b8:	85 c0                	test   %eax,%eax
c010d3ba:	75 17                	jne    c010d3d3 <proc_init+0x84>
        panic("cannot alloc idleproc.\n");
c010d3bc:	83 ec 04             	sub    $0x4,%esp
c010d3bf:	68 28 71 11 c0       	push   $0xc0117128
c010d3c4:	68 17 04 00 00       	push   $0x417
c010d3c9:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d3ce:	e8 12 31 ff ff       	call   c01004e5 <__panic>
    }

    idleproc->pid = 0;
c010d3d3:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d3d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010d3df:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d3e4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010d3ea:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d3ef:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010d3f4:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010d3f7:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d3fc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010d403:	8b 1d 20 20 15 c0    	mov    0xc0152020,%ebx
c010d409:	e8 22 dd ff ff       	call   c010b130 <files_create>
c010d40e:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010d414:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010d41a:	85 c0                	test   %eax,%eax
c010d41c:	75 17                	jne    c010d435 <proc_init+0xe6>
        panic("create filesp (idleproc) failed.\n");
c010d41e:	83 ec 04             	sub    $0x4,%esp
c010d421:	68 40 71 11 c0       	push   $0xc0117140
c010d426:	68 20 04 00 00       	push   $0x420
c010d42b:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d430:	e8 b0 30 ff ff       	call   c01004e5 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010d435:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d43a:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d440:	83 ec 0c             	sub    $0xc,%esp
c010d443:	50                   	push   %eax
c010d444:	e8 a2 e1 ff ff       	call   c010b5eb <files_count_inc>
c010d449:	83 c4 10             	add    $0x10,%esp
    
    set_proc_name(idleproc, "idle");
c010d44c:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d451:	83 ec 08             	sub    $0x8,%esp
c010d454:	68 62 71 11 c0       	push   $0xc0117162
c010d459:	50                   	push   %eax
c010d45a:	e8 48 e3 ff ff       	call   c010b7a7 <set_proc_name>
c010d45f:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010d462:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010d467:	83 c0 01             	add    $0x1,%eax
c010d46a:	a3 40 40 15 c0       	mov    %eax,0xc0154040

    current = idleproc;
c010d46f:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d474:	a3 28 20 15 c0       	mov    %eax,0xc0152028

    int pid = kernel_thread(init_main, NULL, 0);
c010d479:	83 ec 04             	sub    $0x4,%esp
c010d47c:	6a 00                	push   $0x0
c010d47e:	6a 00                	push   $0x0
c010d480:	68 76 d1 10 c0       	push   $0xc010d176
c010d485:	e8 9c e7 ff ff       	call   c010bc26 <kernel_thread>
c010d48a:	83 c4 10             	add    $0x10,%esp
c010d48d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010d490:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d494:	7f 17                	jg     c010d4ad <proc_init+0x15e>
        panic("create init_main failed.\n");
c010d496:	83 ec 04             	sub    $0x4,%esp
c010d499:	68 67 71 11 c0       	push   $0xc0117167
c010d49e:	68 2b 04 00 00       	push   $0x42b
c010d4a3:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d4a8:	e8 38 30 ff ff       	call   c01004e5 <__panic>
    }

    initproc = find_proc(pid);
c010d4ad:	83 ec 0c             	sub    $0xc,%esp
c010d4b0:	ff 75 ec             	pushl  -0x14(%ebp)
c010d4b3:	e8 fc e6 ff ff       	call   c010bbb4 <find_proc>
c010d4b8:	83 c4 10             	add    $0x10,%esp
c010d4bb:	a3 24 20 15 c0       	mov    %eax,0xc0152024
    set_proc_name(initproc, "init");
c010d4c0:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d4c5:	83 ec 08             	sub    $0x8,%esp
c010d4c8:	68 81 71 11 c0       	push   $0xc0117181
c010d4cd:	50                   	push   %eax
c010d4ce:	e8 d4 e2 ff ff       	call   c010b7a7 <set_proc_name>
c010d4d3:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010d4d6:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d4db:	85 c0                	test   %eax,%eax
c010d4dd:	74 0c                	je     c010d4eb <proc_init+0x19c>
c010d4df:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d4e4:	8b 40 04             	mov    0x4(%eax),%eax
c010d4e7:	85 c0                	test   %eax,%eax
c010d4e9:	74 19                	je     c010d504 <proc_init+0x1b5>
c010d4eb:	68 88 71 11 c0       	push   $0xc0117188
c010d4f0:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d4f5:	68 31 04 00 00       	push   $0x431
c010d4fa:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d4ff:	e8 e1 2f ff ff       	call   c01004e5 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010d504:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d509:	85 c0                	test   %eax,%eax
c010d50b:	74 0d                	je     c010d51a <proc_init+0x1cb>
c010d50d:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d512:	8b 40 04             	mov    0x4(%eax),%eax
c010d515:	83 f8 01             	cmp    $0x1,%eax
c010d518:	74 19                	je     c010d533 <proc_init+0x1e4>
c010d51a:	68 b0 71 11 c0       	push   $0xc01171b0
c010d51f:	68 1b 6d 11 c0       	push   $0xc0116d1b
c010d524:	68 32 04 00 00       	push   $0x432
c010d529:	68 f4 6c 11 c0       	push   $0xc0116cf4
c010d52e:	e8 b2 2f ff ff       	call   c01004e5 <__panic>
}
c010d533:	90                   	nop
c010d534:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010d537:	c9                   	leave  
c010d538:	c3                   	ret    

c010d539 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010d539:	55                   	push   %ebp
c010d53a:	89 e5                	mov    %esp,%ebp
c010d53c:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010d53f:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d544:	8b 40 10             	mov    0x10(%eax),%eax
c010d547:	85 c0                	test   %eax,%eax
c010d549:	74 f4                	je     c010d53f <cpu_idle+0x6>
            schedule();
c010d54b:	e8 9d 02 00 00       	call   c010d7ed <schedule>
        }
    }
c010d550:	eb ed                	jmp    c010d53f <cpu_idle+0x6>

c010d552 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010d552:	55                   	push   %ebp
c010d553:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010d555:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d559:	75 11                	jne    c010d56c <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010d55b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d560:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010d567:	00 00 00 
    else current->lab6_priority = priority;
}
c010d56a:	eb 0e                	jmp    c010d57a <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010d56c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d571:	8b 55 08             	mov    0x8(%ebp),%edx
c010d574:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010d57a:	90                   	nop
c010d57b:	5d                   	pop    %ebp
c010d57c:	c3                   	ret    

c010d57d <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010d57d:	55                   	push   %ebp
c010d57e:	89 e5                	mov    %esp,%ebp
c010d580:	83 ec 28             	sub    $0x28,%esp
    if (time == 0) {
c010d583:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d587:	75 07                	jne    c010d590 <do_sleep+0x13>
        return 0;
c010d589:	b8 00 00 00 00       	mov    $0x0,%eax
c010d58e:	eb 72                	jmp    c010d602 <do_sleep+0x85>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010d590:	e8 8a de ff ff       	call   c010b41f <__intr_save>
c010d595:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010d598:	8b 55 08             	mov    0x8(%ebp),%edx
c010d59b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5a0:	83 ec 04             	sub    $0x4,%esp
c010d5a3:	52                   	push   %edx
c010d5a4:	50                   	push   %eax
c010d5a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010d5a8:	50                   	push   %eax
c010d5a9:	e8 38 de ff ff       	call   c010b3e6 <timer_init>
c010d5ae:	83 c4 10             	add    $0x10,%esp
c010d5b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010d5b4:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5b9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010d5bf:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5c4:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010d5cb:	00 00 80 
    add_timer(timer);
c010d5ce:	83 ec 0c             	sub    $0xc,%esp
c010d5d1:	ff 75 f0             	pushl  -0x10(%ebp)
c010d5d4:	e8 ad 02 00 00       	call   c010d886 <add_timer>
c010d5d9:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010d5dc:	83 ec 0c             	sub    $0xc,%esp
c010d5df:	ff 75 f4             	pushl  -0xc(%ebp)
c010d5e2:	e8 62 de ff ff       	call   c010b449 <__intr_restore>
c010d5e7:	83 c4 10             	add    $0x10,%esp

    schedule();
c010d5ea:	e8 fe 01 00 00       	call   c010d7ed <schedule>

    del_timer(timer);
c010d5ef:	83 ec 0c             	sub    $0xc,%esp
c010d5f2:	ff 75 f0             	pushl  -0x10(%ebp)
c010d5f5:	e8 b2 03 00 00       	call   c010d9ac <del_timer>
c010d5fa:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d5fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d602:	c9                   	leave  
c010d603:	c3                   	ret    

c010d604 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010d604:	55                   	push   %ebp
c010d605:	89 e5                	mov    %esp,%ebp
c010d607:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010d60a:	9c                   	pushf  
c010d60b:	58                   	pop    %eax
c010d60c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010d60f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010d612:	25 00 02 00 00       	and    $0x200,%eax
c010d617:	85 c0                	test   %eax,%eax
c010d619:	74 0c                	je     c010d627 <__intr_save+0x23>
        intr_disable();
c010d61b:	e8 87 4c ff ff       	call   c01022a7 <intr_disable>
        return 1;
c010d620:	b8 01 00 00 00       	mov    $0x1,%eax
c010d625:	eb 05                	jmp    c010d62c <__intr_save+0x28>
    }
    return 0;
c010d627:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d62c:	c9                   	leave  
c010d62d:	c3                   	ret    

c010d62e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010d62e:	55                   	push   %ebp
c010d62f:	89 e5                	mov    %esp,%ebp
c010d631:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010d634:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d638:	74 05                	je     c010d63f <__intr_restore+0x11>
        intr_enable();
c010d63a:	e8 61 4c ff ff       	call   c01022a0 <intr_enable>
    }
}
c010d63f:	90                   	nop
c010d640:	c9                   	leave  
c010d641:	c3                   	ret    

c010d642 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010d642:	55                   	push   %ebp
c010d643:	89 e5                	mov    %esp,%ebp
c010d645:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010d648:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d64d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d650:	74 1a                	je     c010d66c <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010d652:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d657:	8b 40 08             	mov    0x8(%eax),%eax
c010d65a:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d660:	83 ec 08             	sub    $0x8,%esp
c010d663:	ff 75 08             	pushl  0x8(%ebp)
c010d666:	52                   	push   %edx
c010d667:	ff d0                	call   *%eax
c010d669:	83 c4 10             	add    $0x10,%esp
    }
}
c010d66c:	90                   	nop
c010d66d:	c9                   	leave  
c010d66e:	c3                   	ret    

c010d66f <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010d66f:	55                   	push   %ebp
c010d670:	89 e5                	mov    %esp,%ebp
c010d672:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010d675:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d67a:	8b 40 0c             	mov    0xc(%eax),%eax
c010d67d:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d683:	83 ec 08             	sub    $0x8,%esp
c010d686:	ff 75 08             	pushl  0x8(%ebp)
c010d689:	52                   	push   %edx
c010d68a:	ff d0                	call   *%eax
c010d68c:	83 c4 10             	add    $0x10,%esp
}
c010d68f:	90                   	nop
c010d690:	c9                   	leave  
c010d691:	c3                   	ret    

c010d692 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010d692:	55                   	push   %ebp
c010d693:	89 e5                	mov    %esp,%ebp
c010d695:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010d698:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d69d:	8b 40 10             	mov    0x10(%eax),%eax
c010d6a0:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d6a6:	83 ec 0c             	sub    $0xc,%esp
c010d6a9:	52                   	push   %edx
c010d6aa:	ff d0                	call   *%eax
c010d6ac:	83 c4 10             	add    $0x10,%esp
}
c010d6af:	c9                   	leave  
c010d6b0:	c3                   	ret    

c010d6b1 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010d6b1:	55                   	push   %ebp
c010d6b2:	89 e5                	mov    %esp,%ebp
c010d6b4:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010d6b7:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d6bc:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d6bf:	74 1c                	je     c010d6dd <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010d6c1:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d6c6:	8b 40 14             	mov    0x14(%eax),%eax
c010d6c9:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d6cf:	83 ec 08             	sub    $0x8,%esp
c010d6d2:	ff 75 08             	pushl  0x8(%ebp)
c010d6d5:	52                   	push   %edx
c010d6d6:	ff d0                	call   *%eax
c010d6d8:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010d6db:	eb 0a                	jmp    c010d6e7 <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010d6dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6e0:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010d6e7:	90                   	nop
c010d6e8:	c9                   	leave  
c010d6e9:	c3                   	ret    

c010d6ea <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010d6ea:	55                   	push   %ebp
c010d6eb:	89 e5                	mov    %esp,%ebp
c010d6ed:	83 ec 18             	sub    $0x18,%esp
c010d6f0:	c7 45 f4 94 40 15 c0 	movl   $0xc0154094,-0xc(%ebp)
c010d6f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d6fd:	89 50 04             	mov    %edx,0x4(%eax)
c010d700:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d703:	8b 50 04             	mov    0x4(%eax),%edx
c010d706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d709:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010d70b:	c7 05 9c 40 15 c0 84 	movl   $0xc014ea84,0xc015409c
c010d712:	ea 14 c0 

    rq = &__rq;
c010d715:	c7 05 a0 40 15 c0 a4 	movl   $0xc01540a4,0xc01540a0
c010d71c:	40 15 c0 
    rq->max_time_slice = 5;
c010d71f:	a1 a0 40 15 c0       	mov    0xc01540a0,%eax
c010d724:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010d72b:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d730:	8b 40 04             	mov    0x4(%eax),%eax
c010d733:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d739:	83 ec 0c             	sub    $0xc,%esp
c010d73c:	52                   	push   %edx
c010d73d:	ff d0                	call   *%eax
c010d73f:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010d742:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d747:	8b 00                	mov    (%eax),%eax
c010d749:	83 ec 08             	sub    $0x8,%esp
c010d74c:	50                   	push   %eax
c010d74d:	68 d8 71 11 c0       	push   $0xc01171d8
c010d752:	e8 28 2c ff ff       	call   c010037f <cprintf>
c010d757:	83 c4 10             	add    $0x10,%esp
}
c010d75a:	90                   	nop
c010d75b:	c9                   	leave  
c010d75c:	c3                   	ret    

c010d75d <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010d75d:	55                   	push   %ebp
c010d75e:	89 e5                	mov    %esp,%ebp
c010d760:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010d763:	8b 45 08             	mov    0x8(%ebp),%eax
c010d766:	8b 00                	mov    (%eax),%eax
c010d768:	83 f8 03             	cmp    $0x3,%eax
c010d76b:	75 16                	jne    c010d783 <wakeup_proc+0x26>
c010d76d:	68 e9 71 11 c0       	push   $0xc01171e9
c010d772:	68 04 72 11 c0       	push   $0xc0117204
c010d777:	6a 3b                	push   $0x3b
c010d779:	68 19 72 11 c0       	push   $0xc0117219
c010d77e:	e8 62 2d ff ff       	call   c01004e5 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010d783:	e8 7c fe ff ff       	call   c010d604 <__intr_save>
c010d788:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010d78b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d78e:	8b 00                	mov    (%eax),%eax
c010d790:	83 f8 02             	cmp    $0x2,%eax
c010d793:	74 30                	je     c010d7c5 <wakeup_proc+0x68>
            proc->state = PROC_RUNNABLE;
c010d795:	8b 45 08             	mov    0x8(%ebp),%eax
c010d798:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010d79e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7a1:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010d7a8:	00 00 00 
            if (proc != current) {
c010d7ab:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d7b0:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d7b3:	74 27                	je     c010d7dc <wakeup_proc+0x7f>
                sched_class_enqueue(proc);
c010d7b5:	83 ec 0c             	sub    $0xc,%esp
c010d7b8:	ff 75 08             	pushl  0x8(%ebp)
c010d7bb:	e8 82 fe ff ff       	call   c010d642 <sched_class_enqueue>
c010d7c0:	83 c4 10             	add    $0x10,%esp
c010d7c3:	eb 17                	jmp    c010d7dc <wakeup_proc+0x7f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010d7c5:	83 ec 04             	sub    $0x4,%esp
c010d7c8:	68 2f 72 11 c0       	push   $0xc011722f
c010d7cd:	6a 47                	push   $0x47
c010d7cf:	68 19 72 11 c0       	push   $0xc0117219
c010d7d4:	e8 8f 2d ff ff       	call   c0100568 <__warn>
c010d7d9:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010d7dc:	83 ec 0c             	sub    $0xc,%esp
c010d7df:	ff 75 f4             	pushl  -0xc(%ebp)
c010d7e2:	e8 47 fe ff ff       	call   c010d62e <__intr_restore>
c010d7e7:	83 c4 10             	add    $0x10,%esp
}
c010d7ea:	90                   	nop
c010d7eb:	c9                   	leave  
c010d7ec:	c3                   	ret    

c010d7ed <schedule>:

void
schedule(void) {
c010d7ed:	55                   	push   %ebp
c010d7ee:	89 e5                	mov    %esp,%ebp
c010d7f0:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010d7f3:	e8 0c fe ff ff       	call   c010d604 <__intr_save>
c010d7f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010d7fb:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d800:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010d807:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d80c:	8b 00                	mov    (%eax),%eax
c010d80e:	83 f8 02             	cmp    $0x2,%eax
c010d811:	75 11                	jne    c010d824 <schedule+0x37>
            sched_class_enqueue(current);
c010d813:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d818:	83 ec 0c             	sub    $0xc,%esp
c010d81b:	50                   	push   %eax
c010d81c:	e8 21 fe ff ff       	call   c010d642 <sched_class_enqueue>
c010d821:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010d824:	e8 69 fe ff ff       	call   c010d692 <sched_class_pick_next>
c010d829:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d82c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d830:	74 0e                	je     c010d840 <schedule+0x53>
            sched_class_dequeue(next);
c010d832:	83 ec 0c             	sub    $0xc,%esp
c010d835:	ff 75 f4             	pushl  -0xc(%ebp)
c010d838:	e8 32 fe ff ff       	call   c010d66f <sched_class_dequeue>
c010d83d:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010d840:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d844:	75 08                	jne    c010d84e <schedule+0x61>
            next = idleproc;
c010d846:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d84b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010d84e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d851:	8b 40 08             	mov    0x8(%eax),%eax
c010d854:	8d 50 01             	lea    0x1(%eax),%edx
c010d857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d85a:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010d85d:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d862:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d865:	74 0e                	je     c010d875 <schedule+0x88>
            proc_run(next);
c010d867:	83 ec 0c             	sub    $0xc,%esp
c010d86a:	ff 75 f4             	pushl  -0xc(%ebp)
c010d86d:	e8 f4 e1 ff ff       	call   c010ba66 <proc_run>
c010d872:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010d875:	83 ec 0c             	sub    $0xc,%esp
c010d878:	ff 75 f0             	pushl  -0x10(%ebp)
c010d87b:	e8 ae fd ff ff       	call   c010d62e <__intr_restore>
c010d880:	83 c4 10             	add    $0x10,%esp
}
c010d883:	90                   	nop
c010d884:	c9                   	leave  
c010d885:	c3                   	ret    

c010d886 <add_timer>:

void
add_timer(timer_t *timer) {
c010d886:	55                   	push   %ebp
c010d887:	89 e5                	mov    %esp,%ebp
c010d889:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010d88c:	e8 73 fd ff ff       	call   c010d604 <__intr_save>
c010d891:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010d894:	8b 45 08             	mov    0x8(%ebp),%eax
c010d897:	8b 00                	mov    (%eax),%eax
c010d899:	85 c0                	test   %eax,%eax
c010d89b:	74 0a                	je     c010d8a7 <add_timer+0x21>
c010d89d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8a0:	8b 40 04             	mov    0x4(%eax),%eax
c010d8a3:	85 c0                	test   %eax,%eax
c010d8a5:	75 16                	jne    c010d8bd <add_timer+0x37>
c010d8a7:	68 4c 72 11 c0       	push   $0xc011724c
c010d8ac:	68 04 72 11 c0       	push   $0xc0117204
c010d8b1:	6a 6a                	push   $0x6a
c010d8b3:	68 19 72 11 c0       	push   $0xc0117219
c010d8b8:	e8 28 2c ff ff       	call   c01004e5 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010d8bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8c0:	83 c0 08             	add    $0x8,%eax
c010d8c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d8c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d8c9:	8b 40 04             	mov    0x4(%eax),%eax
c010d8cc:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010d8cf:	0f 94 c0             	sete   %al
c010d8d2:	0f b6 c0             	movzbl %al,%eax
c010d8d5:	85 c0                	test   %eax,%eax
c010d8d7:	75 16                	jne    c010d8ef <add_timer+0x69>
c010d8d9:	68 78 72 11 c0       	push   $0xc0117278
c010d8de:	68 04 72 11 c0       	push   $0xc0117204
c010d8e3:	6a 6b                	push   $0x6b
c010d8e5:	68 19 72 11 c0       	push   $0xc0117219
c010d8ea:	e8 f6 2b ff ff       	call   c01004e5 <__panic>
c010d8ef:	c7 45 ec 94 40 15 c0 	movl   $0xc0154094,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d8f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8f9:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010d8fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010d8ff:	eb 4a                	jmp    c010d94b <add_timer+0xc5>
            timer_t *next = le2timer(le, timer_link);
c010d901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d904:	83 e8 08             	sub    $0x8,%eax
c010d907:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (timer->expires < next->expires) {
c010d90a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d90d:	8b 10                	mov    (%eax),%edx
c010d90f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d912:	8b 00                	mov    (%eax),%eax
c010d914:	39 c2                	cmp    %eax,%edx
c010d916:	73 13                	jae    c010d92b <add_timer+0xa5>
                next->expires -= timer->expires;
c010d918:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d91b:	8b 10                	mov    (%eax),%edx
c010d91d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d920:	8b 00                	mov    (%eax),%eax
c010d922:	29 c2                	sub    %eax,%edx
c010d924:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d927:	89 10                	mov    %edx,(%eax)
                break;
c010d929:	eb 29                	jmp    c010d954 <add_timer+0xce>
            }
            timer->expires -= next->expires;
c010d92b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d92e:	8b 10                	mov    (%eax),%edx
c010d930:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d933:	8b 00                	mov    (%eax),%eax
c010d935:	29 c2                	sub    %eax,%edx
c010d937:	8b 45 08             	mov    0x8(%ebp),%eax
c010d93a:	89 10                	mov    %edx,(%eax)
c010d93c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d93f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d942:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d945:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010d948:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010d94b:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010d952:	75 ad                	jne    c010d901 <add_timer+0x7b>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010d954:	8b 45 08             	mov    0x8(%ebp),%eax
c010d957:	8d 50 08             	lea    0x8(%eax),%edx
c010d95a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d95d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d960:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010d963:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d966:	8b 00                	mov    (%eax),%eax
c010d968:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d96b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d96e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d971:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d974:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010d977:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d97a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d97d:	89 10                	mov    %edx,(%eax)
c010d97f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d982:	8b 10                	mov    (%eax),%edx
c010d984:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d987:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010d98a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d98d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010d990:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010d993:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d996:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d999:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010d99b:	83 ec 0c             	sub    $0xc,%esp
c010d99e:	ff 75 f0             	pushl  -0x10(%ebp)
c010d9a1:	e8 88 fc ff ff       	call   c010d62e <__intr_restore>
c010d9a6:	83 c4 10             	add    $0x10,%esp
}
c010d9a9:	90                   	nop
c010d9aa:	c9                   	leave  
c010d9ab:	c3                   	ret    

c010d9ac <del_timer>:

void
del_timer(timer_t *timer) {
c010d9ac:	55                   	push   %ebp
c010d9ad:	89 e5                	mov    %esp,%ebp
c010d9af:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010d9b2:	e8 4d fc ff ff       	call   c010d604 <__intr_save>
c010d9b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010d9ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9bd:	83 c0 08             	add    $0x8,%eax
c010d9c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d9c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9c6:	8b 40 04             	mov    0x4(%eax),%eax
c010d9c9:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010d9cc:	0f 94 c0             	sete   %al
c010d9cf:	0f b6 c0             	movzbl %al,%eax
c010d9d2:	85 c0                	test   %eax,%eax
c010d9d4:	0f 85 89 00 00 00    	jne    c010da63 <del_timer+0xb7>
            if (timer->expires != 0) {
c010d9da:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9dd:	8b 00                	mov    (%eax),%eax
c010d9df:	85 c0                	test   %eax,%eax
c010d9e1:	74 35                	je     c010da18 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010d9e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9e6:	83 c0 08             	add    $0x8,%eax
c010d9e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d9ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9ef:	8b 40 04             	mov    0x4(%eax),%eax
c010d9f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (le != &timer_list) {
c010d9f5:	81 7d e8 94 40 15 c0 	cmpl   $0xc0154094,-0x18(%ebp)
c010d9fc:	74 1a                	je     c010da18 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010d9fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da01:	83 e8 08             	sub    $0x8,%eax
c010da04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    next->expires += timer->expires;
c010da07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da0a:	8b 10                	mov    (%eax),%edx
c010da0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010da0f:	8b 00                	mov    (%eax),%eax
c010da11:	01 c2                	add    %eax,%edx
c010da13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da16:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010da18:	8b 45 08             	mov    0x8(%ebp),%eax
c010da1b:	83 c0 08             	add    $0x8,%eax
c010da1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da24:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010da27:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010da2a:	8b 40 04             	mov    0x4(%eax),%eax
c010da2d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010da30:	8b 12                	mov    (%edx),%edx
c010da32:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010da35:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010da38:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010da3b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010da3e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010da41:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010da44:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010da47:	89 10                	mov    %edx,(%eax)
c010da49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010da4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010da52:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010da55:	89 50 04             	mov    %edx,0x4(%eax)
c010da58:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010da5b:	8b 50 04             	mov    0x4(%eax),%edx
c010da5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010da61:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010da63:	83 ec 0c             	sub    $0xc,%esp
c010da66:	ff 75 f4             	pushl  -0xc(%ebp)
c010da69:	e8 c0 fb ff ff       	call   c010d62e <__intr_restore>
c010da6e:	83 c4 10             	add    $0x10,%esp
}
c010da71:	90                   	nop
c010da72:	c9                   	leave  
c010da73:	c3                   	ret    

c010da74 <run_timer_list>:

void
run_timer_list(void) {
c010da74:	55                   	push   %ebp
c010da75:	89 e5                	mov    %esp,%ebp
c010da77:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010da7a:	e8 85 fb ff ff       	call   c010d604 <__intr_save>
c010da7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da82:	c7 45 e0 94 40 15 c0 	movl   $0xc0154094,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010da89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010da8c:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010da8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010da92:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010da99:	0f 84 e4 00 00 00    	je     c010db83 <run_timer_list+0x10f>
            timer_t *timer = le2timer(le, timer_link);
c010da9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daa2:	83 e8 08             	sub    $0x8,%eax
c010daa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010daa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010daab:	8b 00                	mov    (%eax),%eax
c010daad:	85 c0                	test   %eax,%eax
c010daaf:	75 19                	jne    c010daca <run_timer_list+0x56>
c010dab1:	68 99 72 11 c0       	push   $0xc0117299
c010dab6:	68 04 72 11 c0       	push   $0xc0117204
c010dabb:	68 96 00 00 00       	push   $0x96
c010dac0:	68 19 72 11 c0       	push   $0xc0117219
c010dac5:	e8 1b 2a ff ff       	call   c01004e5 <__panic>
            timer->expires --;
c010daca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dacd:	8b 00                	mov    (%eax),%eax
c010dacf:	8d 50 ff             	lea    -0x1(%eax),%edx
c010dad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dad5:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010dad7:	e9 97 00 00 00       	jmp    c010db73 <run_timer_list+0xff>
c010dadc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dadf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dae2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dae5:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010dae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010daeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010daee:	8b 40 04             	mov    0x4(%eax),%eax
c010daf1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (proc->wait_state != 0) {
c010daf4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010daf7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dafd:	85 c0                	test   %eax,%eax
c010daff:	74 26                	je     c010db27 <run_timer_list+0xb3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010db01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010db04:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010db0a:	85 c0                	test   %eax,%eax
c010db0c:	78 37                	js     c010db45 <run_timer_list+0xd1>
c010db0e:	68 b0 72 11 c0       	push   $0xc01172b0
c010db13:	68 04 72 11 c0       	push   $0xc0117204
c010db18:	68 9c 00 00 00       	push   $0x9c
c010db1d:	68 19 72 11 c0       	push   $0xc0117219
c010db22:	e8 be 29 ff ff       	call   c01004e5 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010db27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010db2a:	8b 40 04             	mov    0x4(%eax),%eax
c010db2d:	50                   	push   %eax
c010db2e:	68 d4 72 11 c0       	push   $0xc01172d4
c010db33:	68 9f 00 00 00       	push   $0x9f
c010db38:	68 19 72 11 c0       	push   $0xc0117219
c010db3d:	e8 26 2a ff ff       	call   c0100568 <__warn>
c010db42:	83 c4 10             	add    $0x10,%esp
                }
                wakeup_proc(proc);
c010db45:	83 ec 0c             	sub    $0xc,%esp
c010db48:	ff 75 e4             	pushl  -0x1c(%ebp)
c010db4b:	e8 0d fc ff ff       	call   c010d75d <wakeup_proc>
c010db50:	83 c4 10             	add    $0x10,%esp
                del_timer(timer);
c010db53:	83 ec 0c             	sub    $0xc,%esp
c010db56:	ff 75 f0             	pushl  -0x10(%ebp)
c010db59:	e8 4e fe ff ff       	call   c010d9ac <del_timer>
c010db5e:	83 c4 10             	add    $0x10,%esp
                if (le == &timer_list) {
c010db61:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010db68:	74 18                	je     c010db82 <run_timer_list+0x10e>
                    break;
                }
                timer = le2timer(le, timer_link);
c010db6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db6d:	83 e8 08             	sub    $0x8,%eax
c010db70:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010db73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db76:	8b 00                	mov    (%eax),%eax
c010db78:	85 c0                	test   %eax,%eax
c010db7a:	0f 84 5c ff ff ff    	je     c010dadc <run_timer_list+0x68>
c010db80:	eb 01                	jmp    c010db83 <run_timer_list+0x10f>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010db82:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010db83:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010db88:	83 ec 0c             	sub    $0xc,%esp
c010db8b:	50                   	push   %eax
c010db8c:	e8 20 fb ff ff       	call   c010d6b1 <sched_class_proc_tick>
c010db91:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010db94:	83 ec 0c             	sub    $0xc,%esp
c010db97:	ff 75 ec             	pushl  -0x14(%ebp)
c010db9a:	e8 8f fa ff ff       	call   c010d62e <__intr_restore>
c010db9f:	83 c4 10             	add    $0x10,%esp
}
c010dba2:	90                   	nop
c010dba3:	c9                   	leave  
c010dba4:	c3                   	ret    

c010dba5 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010dba5:	55                   	push   %ebp
c010dba6:	89 e5                	mov    %esp,%ebp
c010dba8:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010dbab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dbaf:	75 08                	jne    c010dbb9 <skew_heap_merge+0x14>
c010dbb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dbb4:	e9 b4 00 00 00       	jmp    c010dc6d <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010dbb9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dbbd:	75 08                	jne    c010dbc7 <skew_heap_merge+0x22>
c010dbbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbc2:	e9 a6 00 00 00       	jmp    c010dc6d <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010dbc7:	83 ec 08             	sub    $0x8,%esp
c010dbca:	ff 75 0c             	pushl  0xc(%ebp)
c010dbcd:	ff 75 08             	pushl  0x8(%ebp)
c010dbd0:	8b 45 10             	mov    0x10(%ebp),%eax
c010dbd3:	ff d0                	call   *%eax
c010dbd5:	83 c4 10             	add    $0x10,%esp
c010dbd8:	83 f8 ff             	cmp    $0xffffffff,%eax
c010dbdb:	75 49                	jne    c010dc26 <skew_heap_merge+0x81>
     {
          r = a->left;
c010dbdd:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbe0:	8b 40 04             	mov    0x4(%eax),%eax
c010dbe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010dbe6:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbe9:	8b 40 08             	mov    0x8(%eax),%eax
c010dbec:	83 ec 04             	sub    $0x4,%esp
c010dbef:	ff 75 10             	pushl  0x10(%ebp)
c010dbf2:	ff 75 0c             	pushl  0xc(%ebp)
c010dbf5:	50                   	push   %eax
c010dbf6:	e8 aa ff ff ff       	call   c010dba5 <skew_heap_merge>
c010dbfb:	83 c4 10             	add    $0x10,%esp
c010dbfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010dc01:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc04:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dc07:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010dc0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc10:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010dc13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dc17:	74 08                	je     c010dc21 <skew_heap_merge+0x7c>
c010dc19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc1c:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc1f:	89 10                	mov    %edx,(%eax)

          return a;
c010dc21:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc24:	eb 47                	jmp    c010dc6d <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010dc26:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc29:	8b 40 04             	mov    0x4(%eax),%eax
c010dc2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010dc2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc32:	8b 40 08             	mov    0x8(%eax),%eax
c010dc35:	83 ec 04             	sub    $0x4,%esp
c010dc38:	ff 75 10             	pushl  0x10(%ebp)
c010dc3b:	50                   	push   %eax
c010dc3c:	ff 75 08             	pushl  0x8(%ebp)
c010dc3f:	e8 61 ff ff ff       	call   c010dba5 <skew_heap_merge>
c010dc44:	83 c4 10             	add    $0x10,%esp
c010dc47:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010dc4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dc50:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010dc53:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc59:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010dc5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dc60:	74 08                	je     c010dc6a <skew_heap_merge+0xc5>
c010dc62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc65:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc68:	89 10                	mov    %edx,(%eax)

          return b;
c010dc6a:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010dc6d:	c9                   	leave  
c010dc6e:	c3                   	ret    

c010dc6f <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010dc6f:	55                   	push   %ebp
c010dc70:	89 e5                	mov    %esp,%ebp
c010dc72:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010dc75:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc78:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dc7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010dc80:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc83:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dc88:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010dc8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dc8e:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010dc94:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dc97:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010dc9d:	29 c2                	sub    %eax,%edx
c010dc9f:	89 d0                	mov    %edx,%eax
c010dca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010dca4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dca8:	7e 07                	jle    c010dcb1 <proc_stride_comp_f+0x42>
c010dcaa:	b8 01 00 00 00       	mov    $0x1,%eax
c010dcaf:	eb 12                	jmp    c010dcc3 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010dcb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dcb5:	75 07                	jne    c010dcbe <proc_stride_comp_f+0x4f>
c010dcb7:	b8 00 00 00 00       	mov    $0x0,%eax
c010dcbc:	eb 05                	jmp    c010dcc3 <proc_stride_comp_f+0x54>
     else return -1;
c010dcbe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010dcc3:	c9                   	leave  
c010dcc4:	c3                   	ret    

c010dcc5 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010dcc5:	55                   	push   %ebp
c010dcc6:	89 e5                	mov    %esp,%ebp
c010dcc8:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010dccb:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcce:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dcd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dcd4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010dcd7:	89 50 04             	mov    %edx,0x4(%eax)
c010dcda:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dcdd:	8b 50 04             	mov    0x4(%eax),%edx
c010dce0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dce3:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010dce5:	8b 45 08             	mov    0x8(%ebp),%eax
c010dce8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010dcef:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcf2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010dcf9:	90                   	nop
c010dcfa:	c9                   	leave  
c010dcfb:	c3                   	ret    

c010dcfc <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010dcfc:	55                   	push   %ebp
c010dcfd:	89 e5                	mov    %esp,%ebp
c010dcff:	83 ec 18             	sub    $0x18,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010dd02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd05:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010dd0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd0e:	8b 40 10             	mov    0x10(%eax),%eax
c010dd11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd14:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010dd17:	c7 45 ec 6f dc 10 c0 	movl   $0xc010dc6f,-0x14(%ebp)
c010dd1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd21:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010dd24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd27:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010dd2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd30:	8b 10                	mov    (%eax),%edx
c010dd32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd35:	89 50 08             	mov    %edx,0x8(%eax)
c010dd38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd3b:	8b 50 08             	mov    0x8(%eax),%edx
c010dd3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd41:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010dd44:	83 ec 04             	sub    $0x4,%esp
c010dd47:	ff 75 ec             	pushl  -0x14(%ebp)
c010dd4a:	ff 75 f0             	pushl  -0x10(%ebp)
c010dd4d:	ff 75 f4             	pushl  -0xc(%ebp)
c010dd50:	e8 50 fe ff ff       	call   c010dba5 <skew_heap_merge>
c010dd55:	83 c4 10             	add    $0x10,%esp
c010dd58:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010dd5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd5d:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010dd60:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd63:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010dd69:	85 c0                	test   %eax,%eax
c010dd6b:	74 13                	je     c010dd80 <stride_enqueue+0x84>
c010dd6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd70:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010dd76:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd79:	8b 40 0c             	mov    0xc(%eax),%eax
c010dd7c:	39 c2                	cmp    %eax,%edx
c010dd7e:	7e 0f                	jle    c010dd8f <stride_enqueue+0x93>
          proc->time_slice = rq->max_time_slice;
c010dd80:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd83:	8b 50 0c             	mov    0xc(%eax),%edx
c010dd86:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd89:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010dd8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd92:	8b 55 08             	mov    0x8(%ebp),%edx
c010dd95:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010dd9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd9e:	8b 40 08             	mov    0x8(%eax),%eax
c010dda1:	8d 50 01             	lea    0x1(%eax),%edx
c010dda4:	8b 45 08             	mov    0x8(%ebp),%eax
c010dda7:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ddaa:	90                   	nop
c010ddab:	c9                   	leave  
c010ddac:	c3                   	ret    

c010ddad <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010ddad:	55                   	push   %ebp
c010ddae:	89 e5                	mov    %esp,%ebp
c010ddb0:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010ddb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddb6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010ddbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddbf:	8b 40 10             	mov    0x10(%eax),%eax
c010ddc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ddc5:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010ddc8:	c7 45 ec 6f dc 10 c0 	movl   $0xc010dc6f,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010ddcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddd2:	8b 00                	mov    (%eax),%eax
c010ddd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010ddd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddda:	8b 50 08             	mov    0x8(%eax),%edx
c010dddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dde0:	8b 40 04             	mov    0x4(%eax),%eax
c010dde3:	83 ec 04             	sub    $0x4,%esp
c010dde6:	ff 75 ec             	pushl  -0x14(%ebp)
c010dde9:	52                   	push   %edx
c010ddea:	50                   	push   %eax
c010ddeb:	e8 b5 fd ff ff       	call   c010dba5 <skew_heap_merge>
c010ddf0:	83 c4 10             	add    $0x10,%esp
c010ddf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010ddf6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ddfa:	74 08                	je     c010de04 <stride_dequeue+0x57>
c010ddfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ddff:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010de02:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010de04:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de08:	74 24                	je     c010de2e <stride_dequeue+0x81>
     {
          if (p->left == b)
c010de0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de0d:	8b 40 04             	mov    0x4(%eax),%eax
c010de10:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010de13:	75 0b                	jne    c010de20 <stride_dequeue+0x73>
               p->left = rep;
c010de15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de18:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010de1b:	89 50 04             	mov    %edx,0x4(%eax)
c010de1e:	eb 09                	jmp    c010de29 <stride_dequeue+0x7c>
          else p->right = rep;
c010de20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010de26:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010de29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de2c:	eb 03                	jmp    c010de31 <stride_dequeue+0x84>
     }
     else return rep;
c010de2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010de31:	8b 55 08             	mov    0x8(%ebp),%edx
c010de34:	89 42 10             	mov    %eax,0x10(%edx)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010de37:	8b 45 08             	mov    0x8(%ebp),%eax
c010de3a:	8b 40 08             	mov    0x8(%eax),%eax
c010de3d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010de40:	8b 45 08             	mov    0x8(%ebp),%eax
c010de43:	89 50 08             	mov    %edx,0x8(%eax)
}
c010de46:	90                   	nop
c010de47:	c9                   	leave  
c010de48:	c3                   	ret    

c010de49 <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010de49:	55                   	push   %ebp
c010de4a:	89 e5                	mov    %esp,%ebp
c010de4c:	53                   	push   %ebx
c010de4d:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010de50:	8b 45 08             	mov    0x8(%ebp),%eax
c010de53:	8b 40 10             	mov    0x10(%eax),%eax
c010de56:	85 c0                	test   %eax,%eax
c010de58:	75 07                	jne    c010de61 <stride_pick_next+0x18>
c010de5a:	b8 00 00 00 00       	mov    $0x0,%eax
c010de5f:	eb 62                	jmp    c010dec3 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010de61:	8b 45 08             	mov    0x8(%ebp),%eax
c010de64:	8b 40 10             	mov    0x10(%eax),%eax
c010de67:	2d b0 00 00 00       	sub    $0xb0,%eax
c010de6c:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010de6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de72:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010de78:	85 c0                	test   %eax,%eax
c010de7a:	75 1a                	jne    c010de96 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010de7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de7f:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010de85:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010de8b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de8e:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010de94:	eb 2a                	jmp    c010dec0 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010de96:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de99:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010de9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dea2:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010dea8:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010dead:	ba 00 00 00 00       	mov    $0x0,%edx
c010deb2:	f7 f3                	div    %ebx
c010deb4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010deb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010deba:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010dec0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010dec3:	83 c4 10             	add    $0x10,%esp
c010dec6:	5b                   	pop    %ebx
c010dec7:	5d                   	pop    %ebp
c010dec8:	c3                   	ret    

c010dec9 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010dec9:	55                   	push   %ebp
c010deca:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010decc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010decf:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010ded5:	85 c0                	test   %eax,%eax
c010ded7:	7e 15                	jle    c010deee <stride_proc_tick+0x25>
          proc->time_slice --;
c010ded9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dedc:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010dee2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010dee5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dee8:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010deee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010def1:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010def7:	85 c0                	test   %eax,%eax
c010def9:	75 0a                	jne    c010df05 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010defb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010defe:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010df05:	90                   	nop
c010df06:	5d                   	pop    %ebp
c010df07:	c3                   	ret    

c010df08 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010df08:	55                   	push   %ebp
c010df09:	89 e5                	mov    %esp,%ebp
c010df0b:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010df0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010df11:	8b 00                	mov    (%eax),%eax
c010df13:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010df16:	83 ec 0c             	sub    $0xc,%esp
c010df19:	ff 75 f4             	pushl  -0xc(%ebp)
c010df1c:	e8 95 e2 ff ff       	call   c010c1b6 <do_exit>
c010df21:	83 c4 10             	add    $0x10,%esp
}
c010df24:	c9                   	leave  
c010df25:	c3                   	ret    

c010df26 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010df26:	55                   	push   %ebp
c010df27:	89 e5                	mov    %esp,%ebp
c010df29:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010df2c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010df31:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010df37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df3a:	8b 40 44             	mov    0x44(%eax),%eax
c010df3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010df40:	83 ec 04             	sub    $0x4,%esp
c010df43:	ff 75 f4             	pushl  -0xc(%ebp)
c010df46:	ff 75 f0             	pushl  -0x10(%ebp)
c010df49:	6a 00                	push   $0x0
c010df4b:	e8 0e e1 ff ff       	call   c010c05e <do_fork>
c010df50:	83 c4 10             	add    $0x10,%esp
}
c010df53:	c9                   	leave  
c010df54:	c3                   	ret    

c010df55 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010df55:	55                   	push   %ebp
c010df56:	89 e5                	mov    %esp,%ebp
c010df58:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010df5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010df5e:	8b 00                	mov    (%eax),%eax
c010df60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010df63:	8b 45 08             	mov    0x8(%ebp),%eax
c010df66:	83 c0 04             	add    $0x4,%eax
c010df69:	8b 00                	mov    (%eax),%eax
c010df6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010df6e:	83 ec 08             	sub    $0x8,%esp
c010df71:	ff 75 f0             	pushl  -0x10(%ebp)
c010df74:	ff 75 f4             	pushl  -0xc(%ebp)
c010df77:	e8 50 ef ff ff       	call   c010cecc <do_wait>
c010df7c:	83 c4 10             	add    $0x10,%esp
}
c010df7f:	c9                   	leave  
c010df80:	c3                   	ret    

c010df81 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010df81:	55                   	push   %ebp
c010df82:	89 e5                	mov    %esp,%ebp
c010df84:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010df87:	8b 45 08             	mov    0x8(%ebp),%eax
c010df8a:	8b 00                	mov    (%eax),%eax
c010df8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010df8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010df92:	83 c0 04             	add    $0x4,%eax
c010df95:	8b 00                	mov    (%eax),%eax
c010df97:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010df9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010df9d:	83 c0 08             	add    $0x8,%eax
c010dfa0:	8b 00                	mov    (%eax),%eax
c010dfa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010dfa5:	83 ec 04             	sub    $0x4,%esp
c010dfa8:	ff 75 ec             	pushl  -0x14(%ebp)
c010dfab:	ff 75 f0             	pushl  -0x10(%ebp)
c010dfae:	ff 75 f4             	pushl  -0xc(%ebp)
c010dfb1:	e8 e0 ec ff ff       	call   c010cc96 <do_execve>
c010dfb6:	83 c4 10             	add    $0x10,%esp
}
c010dfb9:	c9                   	leave  
c010dfba:	c3                   	ret    

c010dfbb <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010dfbb:	55                   	push   %ebp
c010dfbc:	89 e5                	mov    %esp,%ebp
c010dfbe:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010dfc1:	e8 f0 ee ff ff       	call   c010ceb6 <do_yield>
}
c010dfc6:	c9                   	leave  
c010dfc7:	c3                   	ret    

c010dfc8 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010dfc8:	55                   	push   %ebp
c010dfc9:	89 e5                	mov    %esp,%ebp
c010dfcb:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010dfce:	8b 45 08             	mov    0x8(%ebp),%eax
c010dfd1:	8b 00                	mov    (%eax),%eax
c010dfd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010dfd6:	83 ec 0c             	sub    $0xc,%esp
c010dfd9:	ff 75 f4             	pushl  -0xc(%ebp)
c010dfdc:	e8 88 f0 ff ff       	call   c010d069 <do_kill>
c010dfe1:	83 c4 10             	add    $0x10,%esp
}
c010dfe4:	c9                   	leave  
c010dfe5:	c3                   	ret    

c010dfe6 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010dfe6:	55                   	push   %ebp
c010dfe7:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010dfe9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010dfee:	8b 40 04             	mov    0x4(%eax),%eax
}
c010dff1:	5d                   	pop    %ebp
c010dff2:	c3                   	ret    

c010dff3 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010dff3:	55                   	push   %ebp
c010dff4:	89 e5                	mov    %esp,%ebp
c010dff6:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010dff9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dffc:	8b 00                	mov    (%eax),%eax
c010dffe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010e001:	83 ec 0c             	sub    $0xc,%esp
c010e004:	ff 75 f4             	pushl  -0xc(%ebp)
c010e007:	e8 99 23 ff ff       	call   c01003a5 <cputchar>
c010e00c:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e00f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e014:	c9                   	leave  
c010e015:	c3                   	ret    

c010e016 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010e016:	55                   	push   %ebp
c010e017:	89 e5                	mov    %esp,%ebp
c010e019:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010e01c:	e8 a1 a8 ff ff       	call   c01088c2 <print_pgdir>
    return 0;
c010e021:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e026:	c9                   	leave  
c010e027:	c3                   	ret    

c010e028 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010e028:	55                   	push   %ebp
c010e029:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010e02b:	a1 00 51 15 c0       	mov    0xc0155100,%eax
}
c010e030:	5d                   	pop    %ebp
c010e031:	c3                   	ret    

c010e032 <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010e032:	55                   	push   %ebp
c010e033:	89 e5                	mov    %esp,%ebp
c010e035:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010e038:	8b 45 08             	mov    0x8(%ebp),%eax
c010e03b:	8b 00                	mov    (%eax),%eax
c010e03d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010e040:	83 ec 0c             	sub    $0xc,%esp
c010e043:	ff 75 f4             	pushl  -0xc(%ebp)
c010e046:	e8 07 f5 ff ff       	call   c010d552 <lab6_set_priority>
c010e04b:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e04e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e053:	c9                   	leave  
c010e054:	c3                   	ret    

c010e055 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010e055:	55                   	push   %ebp
c010e056:	89 e5                	mov    %esp,%ebp
c010e058:	83 ec 18             	sub    $0x18,%esp
    unsigned int time = (unsigned int)arg[0];
c010e05b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e05e:	8b 00                	mov    (%eax),%eax
c010e060:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010e063:	83 ec 0c             	sub    $0xc,%esp
c010e066:	ff 75 f4             	pushl  -0xc(%ebp)
c010e069:	e8 0f f5 ff ff       	call   c010d57d <do_sleep>
c010e06e:	83 c4 10             	add    $0x10,%esp
}
c010e071:	c9                   	leave  
c010e072:	c3                   	ret    

c010e073 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010e073:	55                   	push   %ebp
c010e074:	89 e5                	mov    %esp,%ebp
c010e076:	83 ec 18             	sub    $0x18,%esp
    const char *path = (const char *)arg[0];
c010e079:	8b 45 08             	mov    0x8(%ebp),%eax
c010e07c:	8b 00                	mov    (%eax),%eax
c010e07e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010e081:	8b 45 08             	mov    0x8(%ebp),%eax
c010e084:	83 c0 04             	add    $0x4,%eax
c010e087:	8b 00                	mov    (%eax),%eax
c010e089:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010e08c:	83 ec 08             	sub    $0x8,%esp
c010e08f:	ff 75 f0             	pushl  -0x10(%ebp)
c010e092:	ff 75 f4             	pushl  -0xc(%ebp)
c010e095:	e8 02 ba ff ff       	call   c0109a9c <sysfile_open>
c010e09a:	83 c4 10             	add    $0x10,%esp
}
c010e09d:	c9                   	leave  
c010e09e:	c3                   	ret    

c010e09f <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010e09f:	55                   	push   %ebp
c010e0a0:	89 e5                	mov    %esp,%ebp
c010e0a2:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e0a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0a8:	8b 00                	mov    (%eax),%eax
c010e0aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010e0ad:	83 ec 0c             	sub    $0xc,%esp
c010e0b0:	ff 75 f4             	pushl  -0xc(%ebp)
c010e0b3:	e8 33 ba ff ff       	call   c0109aeb <sysfile_close>
c010e0b8:	83 c4 10             	add    $0x10,%esp
}
c010e0bb:	c9                   	leave  
c010e0bc:	c3                   	ret    

c010e0bd <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010e0bd:	55                   	push   %ebp
c010e0be:	89 e5                	mov    %esp,%ebp
c010e0c0:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e0c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0c6:	8b 00                	mov    (%eax),%eax
c010e0c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e0cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0ce:	83 c0 04             	add    $0x4,%eax
c010e0d1:	8b 00                	mov    (%eax),%eax
c010e0d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e0d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0d9:	83 c0 08             	add    $0x8,%eax
c010e0dc:	8b 00                	mov    (%eax),%eax
c010e0de:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010e0e1:	83 ec 04             	sub    $0x4,%esp
c010e0e4:	ff 75 ec             	pushl  -0x14(%ebp)
c010e0e7:	ff 75 f0             	pushl  -0x10(%ebp)
c010e0ea:	ff 75 f4             	pushl  -0xc(%ebp)
c010e0ed:	e8 0f ba ff ff       	call   c0109b01 <sysfile_read>
c010e0f2:	83 c4 10             	add    $0x10,%esp
}
c010e0f5:	c9                   	leave  
c010e0f6:	c3                   	ret    

c010e0f7 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010e0f7:	55                   	push   %ebp
c010e0f8:	89 e5                	mov    %esp,%ebp
c010e0fa:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e100:	8b 00                	mov    (%eax),%eax
c010e102:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e105:	8b 45 08             	mov    0x8(%ebp),%eax
c010e108:	83 c0 04             	add    $0x4,%eax
c010e10b:	8b 00                	mov    (%eax),%eax
c010e10d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e110:	8b 45 08             	mov    0x8(%ebp),%eax
c010e113:	83 c0 08             	add    $0x8,%eax
c010e116:	8b 00                	mov    (%eax),%eax
c010e118:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010e11b:	83 ec 04             	sub    $0x4,%esp
c010e11e:	ff 75 ec             	pushl  -0x14(%ebp)
c010e121:	ff 75 f0             	pushl  -0x10(%ebp)
c010e124:	ff 75 f4             	pushl  -0xc(%ebp)
c010e127:	e8 2a bb ff ff       	call   c0109c56 <sysfile_write>
c010e12c:	83 c4 10             	add    $0x10,%esp
}
c010e12f:	c9                   	leave  
c010e130:	c3                   	ret    

c010e131 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010e131:	55                   	push   %ebp
c010e132:	89 e5                	mov    %esp,%ebp
c010e134:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e137:	8b 45 08             	mov    0x8(%ebp),%eax
c010e13a:	8b 00                	mov    (%eax),%eax
c010e13c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010e13f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e142:	83 c0 04             	add    $0x4,%eax
c010e145:	8b 00                	mov    (%eax),%eax
c010e147:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010e14a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e14d:	83 c0 08             	add    $0x8,%eax
c010e150:	8b 00                	mov    (%eax),%eax
c010e152:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010e155:	83 ec 04             	sub    $0x4,%esp
c010e158:	ff 75 ec             	pushl  -0x14(%ebp)
c010e15b:	ff 75 f0             	pushl  -0x10(%ebp)
c010e15e:	ff 75 f4             	pushl  -0xc(%ebp)
c010e161:	e8 4b bc ff ff       	call   c0109db1 <sysfile_seek>
c010e166:	83 c4 10             	add    $0x10,%esp
}
c010e169:	c9                   	leave  
c010e16a:	c3                   	ret    

c010e16b <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010e16b:	55                   	push   %ebp
c010e16c:	89 e5                	mov    %esp,%ebp
c010e16e:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e171:	8b 45 08             	mov    0x8(%ebp),%eax
c010e174:	8b 00                	mov    (%eax),%eax
c010e176:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010e179:	8b 45 08             	mov    0x8(%ebp),%eax
c010e17c:	83 c0 04             	add    $0x4,%eax
c010e17f:	8b 00                	mov    (%eax),%eax
c010e181:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010e184:	83 ec 08             	sub    $0x8,%esp
c010e187:	ff 75 f0             	pushl  -0x10(%ebp)
c010e18a:	ff 75 f4             	pushl  -0xc(%ebp)
c010e18d:	e8 3b bc ff ff       	call   c0109dcd <sysfile_fstat>
c010e192:	83 c4 10             	add    $0x10,%esp
}
c010e195:	c9                   	leave  
c010e196:	c3                   	ret    

c010e197 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010e197:	55                   	push   %ebp
c010e198:	89 e5                	mov    %esp,%ebp
c010e19a:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e19d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1a0:	8b 00                	mov    (%eax),%eax
c010e1a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010e1a5:	83 ec 0c             	sub    $0xc,%esp
c010e1a8:	ff 75 f4             	pushl  -0xc(%ebp)
c010e1ab:	e8 92 bc ff ff       	call   c0109e42 <sysfile_fsync>
c010e1b0:	83 c4 10             	add    $0x10,%esp
}
c010e1b3:	c9                   	leave  
c010e1b4:	c3                   	ret    

c010e1b5 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010e1b5:	55                   	push   %ebp
c010e1b6:	89 e5                	mov    %esp,%ebp
c010e1b8:	83 ec 18             	sub    $0x18,%esp
    char *buf = (char *)arg[0];
c010e1bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1be:	8b 00                	mov    (%eax),%eax
c010e1c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010e1c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1c6:	83 c0 04             	add    $0x4,%eax
c010e1c9:	8b 00                	mov    (%eax),%eax
c010e1cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010e1ce:	83 ec 08             	sub    $0x8,%esp
c010e1d1:	ff 75 f0             	pushl  -0x10(%ebp)
c010e1d4:	ff 75 f4             	pushl  -0xc(%ebp)
c010e1d7:	e8 30 be ff ff       	call   c010a00c <sysfile_getcwd>
c010e1dc:	83 c4 10             	add    $0x10,%esp
}
c010e1df:	c9                   	leave  
c010e1e0:	c3                   	ret    

c010e1e1 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010e1e1:	55                   	push   %ebp
c010e1e2:	89 e5                	mov    %esp,%ebp
c010e1e4:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e1e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1ea:	8b 00                	mov    (%eax),%eax
c010e1ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010e1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1f2:	83 c0 04             	add    $0x4,%eax
c010e1f5:	8b 00                	mov    (%eax),%eax
c010e1f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010e1fa:	83 ec 08             	sub    $0x8,%esp
c010e1fd:	ff 75 f0             	pushl  -0x10(%ebp)
c010e200:	ff 75 f4             	pushl  -0xc(%ebp)
c010e203:	e8 8a be ff ff       	call   c010a092 <sysfile_getdirentry>
c010e208:	83 c4 10             	add    $0x10,%esp
}
c010e20b:	c9                   	leave  
c010e20c:	c3                   	ret    

c010e20d <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010e20d:	55                   	push   %ebp
c010e20e:	89 e5                	mov    %esp,%ebp
c010e210:	83 ec 18             	sub    $0x18,%esp
    int fd1 = (int)arg[0];
c010e213:	8b 45 08             	mov    0x8(%ebp),%eax
c010e216:	8b 00                	mov    (%eax),%eax
c010e218:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010e21b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e21e:	83 c0 04             	add    $0x4,%eax
c010e221:	8b 00                	mov    (%eax),%eax
c010e223:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010e226:	83 ec 08             	sub    $0x8,%esp
c010e229:	ff 75 f0             	pushl  -0x10(%ebp)
c010e22c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e22f:	e8 4a bf ff ff       	call   c010a17e <sysfile_dup>
c010e234:	83 c4 10             	add    $0x10,%esp
}
c010e237:	c9                   	leave  
c010e238:	c3                   	ret    

c010e239 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010e239:	55                   	push   %ebp
c010e23a:	89 e5                	mov    %esp,%ebp
c010e23c:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e23f:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e244:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e247:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010e24a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e24d:	8b 40 1c             	mov    0x1c(%eax),%eax
c010e250:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010e253:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e257:	78 64                	js     c010e2bd <syscall+0x84>
c010e259:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e25c:	3d ff 00 00 00       	cmp    $0xff,%eax
c010e261:	77 5a                	ja     c010e2bd <syscall+0x84>
        if (syscalls[num] != NULL) {
c010e263:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e266:	8b 04 85 a0 ea 14 c0 	mov    -0x3feb1560(,%eax,4),%eax
c010e26d:	85 c0                	test   %eax,%eax
c010e26f:	74 4c                	je     c010e2bd <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010e271:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e274:	8b 40 14             	mov    0x14(%eax),%eax
c010e277:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010e27a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e27d:	8b 40 18             	mov    0x18(%eax),%eax
c010e280:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010e283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e286:	8b 40 10             	mov    0x10(%eax),%eax
c010e289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010e28c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e28f:	8b 00                	mov    (%eax),%eax
c010e291:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010e294:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e297:	8b 40 04             	mov    0x4(%eax),%eax
c010e29a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010e29d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2a0:	8b 04 85 a0 ea 14 c0 	mov    -0x3feb1560(,%eax,4),%eax
c010e2a7:	83 ec 0c             	sub    $0xc,%esp
c010e2aa:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010e2ad:	52                   	push   %edx
c010e2ae:	ff d0                	call   *%eax
c010e2b0:	83 c4 10             	add    $0x10,%esp
c010e2b3:	89 c2                	mov    %eax,%edx
c010e2b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2b8:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010e2bb:	eb 3a                	jmp    c010e2f7 <syscall+0xbe>
        }
    }
    print_trapframe(tf);
c010e2bd:	83 ec 0c             	sub    $0xc,%esp
c010e2c0:	ff 75 f4             	pushl  -0xc(%ebp)
c010e2c3:	e8 b7 41 ff ff       	call   c010247f <print_trapframe>
c010e2c8:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010e2cb:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e2d0:	8d 50 48             	lea    0x48(%eax),%edx
c010e2d3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e2d8:	8b 40 04             	mov    0x4(%eax),%eax
c010e2db:	83 ec 08             	sub    $0x8,%esp
c010e2de:	52                   	push   %edx
c010e2df:	50                   	push   %eax
c010e2e0:	ff 75 f0             	pushl  -0x10(%ebp)
c010e2e3:	68 04 73 11 c0       	push   $0xc0117304
c010e2e8:	68 cd 00 00 00       	push   $0xcd
c010e2ed:	68 30 73 11 c0       	push   $0xc0117330
c010e2f2:	e8 ee 21 ff ff       	call   c01004e5 <__panic>
            num, current->pid, current->name);
}
c010e2f7:	c9                   	leave  
c010e2f8:	c3                   	ret    

c010e2f9 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010e2f9:	55                   	push   %ebp
c010e2fa:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010e2fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ff:	8b 15 00 52 15 c0    	mov    0xc0155200,%edx
c010e305:	29 d0                	sub    %edx,%eax
c010e307:	c1 f8 02             	sar    $0x2,%eax
c010e30a:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010e310:	5d                   	pop    %ebp
c010e311:	c3                   	ret    

c010e312 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010e312:	55                   	push   %ebp
c010e313:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010e315:	ff 75 08             	pushl  0x8(%ebp)
c010e318:	e8 dc ff ff ff       	call   c010e2f9 <page2ppn>
c010e31d:	83 c4 04             	add    $0x4,%esp
c010e320:	c1 e0 0c             	shl    $0xc,%eax
}
c010e323:	c9                   	leave  
c010e324:	c3                   	ret    

c010e325 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010e325:	55                   	push   %ebp
c010e326:	89 e5                	mov    %esp,%ebp
c010e328:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010e32b:	ff 75 08             	pushl  0x8(%ebp)
c010e32e:	e8 df ff ff ff       	call   c010e312 <page2pa>
c010e333:	83 c4 04             	add    $0x4,%esp
c010e336:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e33c:	c1 e8 0c             	shr    $0xc,%eax
c010e33f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e342:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010e347:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e34a:	72 14                	jb     c010e360 <page2kva+0x3b>
c010e34c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e34f:	68 48 73 11 c0       	push   $0xc0117348
c010e354:	6a 65                	push   $0x65
c010e356:	68 6b 73 11 c0       	push   $0xc011736b
c010e35b:	e8 85 21 ff ff       	call   c01004e5 <__panic>
c010e360:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e363:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010e368:	c9                   	leave  
c010e369:	c3                   	ret    

c010e36a <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010e36a:	55                   	push   %ebp
c010e36b:	89 e5                	mov    %esp,%ebp
c010e36d:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010e370:	83 ec 0c             	sub    $0xc,%esp
c010e373:	6a 01                	push   $0x1
c010e375:	e8 40 2f ff ff       	call   c01012ba <ide_device_valid>
c010e37a:	83 c4 10             	add    $0x10,%esp
c010e37d:	85 c0                	test   %eax,%eax
c010e37f:	75 14                	jne    c010e395 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c010e381:	83 ec 04             	sub    $0x4,%esp
c010e384:	68 79 73 11 c0       	push   $0xc0117379
c010e389:	6a 0d                	push   $0xd
c010e38b:	68 93 73 11 c0       	push   $0xc0117393
c010e390:	e8 50 21 ff ff       	call   c01004e5 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010e395:	83 ec 0c             	sub    $0xc,%esp
c010e398:	6a 01                	push   $0x1
c010e39a:	e8 5b 2f ff ff       	call   c01012fa <ide_device_size>
c010e39f:	83 c4 10             	add    $0x10,%esp
c010e3a2:	c1 e8 03             	shr    $0x3,%eax
c010e3a5:	a3 bc 51 15 c0       	mov    %eax,0xc01551bc
}
c010e3aa:	90                   	nop
c010e3ab:	c9                   	leave  
c010e3ac:	c3                   	ret    

c010e3ad <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010e3ad:	55                   	push   %ebp
c010e3ae:	89 e5                	mov    %esp,%ebp
c010e3b0:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010e3b3:	83 ec 0c             	sub    $0xc,%esp
c010e3b6:	ff 75 0c             	pushl  0xc(%ebp)
c010e3b9:	e8 67 ff ff ff       	call   c010e325 <page2kva>
c010e3be:	83 c4 10             	add    $0x10,%esp
c010e3c1:	89 c2                	mov    %eax,%edx
c010e3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3c6:	c1 e8 08             	shr    $0x8,%eax
c010e3c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e3cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e3d0:	74 0a                	je     c010e3dc <swapfs_read+0x2f>
c010e3d2:	a1 bc 51 15 c0       	mov    0xc01551bc,%eax
c010e3d7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e3da:	72 14                	jb     c010e3f0 <swapfs_read+0x43>
c010e3dc:	ff 75 08             	pushl  0x8(%ebp)
c010e3df:	68 a9 73 11 c0       	push   $0xc01173a9
c010e3e4:	6a 14                	push   $0x14
c010e3e6:	68 93 73 11 c0       	push   $0xc0117393
c010e3eb:	e8 f5 20 ff ff       	call   c01004e5 <__panic>
c010e3f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3f3:	c1 e0 03             	shl    $0x3,%eax
c010e3f6:	6a 08                	push   $0x8
c010e3f8:	52                   	push   %edx
c010e3f9:	50                   	push   %eax
c010e3fa:	6a 01                	push   $0x1
c010e3fc:	e8 39 2f ff ff       	call   c010133a <ide_read_secs>
c010e401:	83 c4 10             	add    $0x10,%esp
}
c010e404:	c9                   	leave  
c010e405:	c3                   	ret    

c010e406 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010e406:	55                   	push   %ebp
c010e407:	89 e5                	mov    %esp,%ebp
c010e409:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010e40c:	83 ec 0c             	sub    $0xc,%esp
c010e40f:	ff 75 0c             	pushl  0xc(%ebp)
c010e412:	e8 0e ff ff ff       	call   c010e325 <page2kva>
c010e417:	83 c4 10             	add    $0x10,%esp
c010e41a:	89 c2                	mov    %eax,%edx
c010e41c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e41f:	c1 e8 08             	shr    $0x8,%eax
c010e422:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e425:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e429:	74 0a                	je     c010e435 <swapfs_write+0x2f>
c010e42b:	a1 bc 51 15 c0       	mov    0xc01551bc,%eax
c010e430:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e433:	72 14                	jb     c010e449 <swapfs_write+0x43>
c010e435:	ff 75 08             	pushl  0x8(%ebp)
c010e438:	68 a9 73 11 c0       	push   $0xc01173a9
c010e43d:	6a 19                	push   $0x19
c010e43f:	68 93 73 11 c0       	push   $0xc0117393
c010e444:	e8 9c 20 ff ff       	call   c01004e5 <__panic>
c010e449:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e44c:	c1 e0 03             	shl    $0x3,%eax
c010e44f:	6a 08                	push   $0x8
c010e451:	52                   	push   %edx
c010e452:	50                   	push   %eax
c010e453:	6a 01                	push   $0x1
c010e455:	e8 0a 31 ff ff       	call   c0101564 <ide_write_secs>
c010e45a:	83 c4 10             	add    $0x10,%esp
}
c010e45d:	c9                   	leave  
c010e45e:	c3                   	ret    

c010e45f <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010e45f:	55                   	push   %ebp
c010e460:	89 e5                	mov    %esp,%ebp
c010e462:	83 ec 08             	sub    $0x8,%esp
    down(&vdev_list_sem);
c010e465:	83 ec 0c             	sub    $0xc,%esp
c010e468:	68 c0 40 15 c0       	push   $0xc01540c0
c010e46d:	e8 59 b2 ff ff       	call   c01096cb <down>
c010e472:	83 c4 10             	add    $0x10,%esp
}
c010e475:	90                   	nop
c010e476:	c9                   	leave  
c010e477:	c3                   	ret    

c010e478 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010e478:	55                   	push   %ebp
c010e479:	89 e5                	mov    %esp,%ebp
c010e47b:	83 ec 08             	sub    $0x8,%esp
    up(&vdev_list_sem);
c010e47e:	83 ec 0c             	sub    $0xc,%esp
c010e481:	68 c0 40 15 c0       	push   $0xc01540c0
c010e486:	e8 24 b2 ff ff       	call   c01096af <up>
c010e48b:	83 c4 10             	add    $0x10,%esp
}
c010e48e:	90                   	nop
c010e48f:	c9                   	leave  
c010e490:	c3                   	ret    

c010e491 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010e491:	55                   	push   %ebp
c010e492:	89 e5                	mov    %esp,%ebp
c010e494:	83 ec 18             	sub    $0x18,%esp
c010e497:	c7 45 f4 b8 40 15 c0 	movl   $0xc01540b8,-0xc(%ebp)
c010e49e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e4a4:	89 50 04             	mov    %edx,0x4(%eax)
c010e4a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4aa:	8b 50 04             	mov    0x4(%eax),%edx
c010e4ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4b0:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010e4b2:	83 ec 08             	sub    $0x8,%esp
c010e4b5:	6a 01                	push   $0x1
c010e4b7:	68 c0 40 15 c0       	push   $0xc01540c0
c010e4bc:	e8 81 b0 ff ff       	call   c0109542 <sem_init>
c010e4c1:	83 c4 10             	add    $0x10,%esp
}
c010e4c4:	90                   	nop
c010e4c5:	c9                   	leave  
c010e4c6:	c3                   	ret    

c010e4c7 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010e4c7:	55                   	push   %ebp
c010e4c8:	89 e5                	mov    %esp,%ebp
c010e4ca:	83 ec 28             	sub    $0x28,%esp
c010e4cd:	c7 45 e4 b8 40 15 c0 	movl   $0xc01540b8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e4d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e4d7:	8b 40 04             	mov    0x4(%eax),%eax
c010e4da:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010e4dd:	0f 94 c0             	sete   %al
c010e4e0:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010e4e3:	85 c0                	test   %eax,%eax
c010e4e5:	75 5b                	jne    c010e542 <vfs_cleanup+0x7b>
        lock_vdev_list();
c010e4e7:	e8 73 ff ff ff       	call   c010e45f <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010e4ec:	c7 45 ec b8 40 15 c0 	movl   $0xc01540b8,-0x14(%ebp)
c010e4f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e4f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010e4f9:	eb 2b                	jmp    c010e526 <vfs_cleanup+0x5f>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e4fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4fe:	83 e8 10             	sub    $0x10,%eax
c010e501:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->fs != NULL) {
c010e504:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e507:	8b 40 08             	mov    0x8(%eax),%eax
c010e50a:	85 c0                	test   %eax,%eax
c010e50c:	74 18                	je     c010e526 <vfs_cleanup+0x5f>
                    fsop_cleanup(vdev->fs);
c010e50e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e511:	8b 40 08             	mov    0x8(%eax),%eax
c010e514:	8b 40 7c             	mov    0x7c(%eax),%eax
c010e517:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e51a:	8b 52 08             	mov    0x8(%edx),%edx
c010e51d:	83 ec 0c             	sub    $0xc,%esp
c010e520:	52                   	push   %edx
c010e521:	ff d0                	call   *%eax
c010e523:	83 c4 10             	add    $0x10,%esp
c010e526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e529:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e52c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e52f:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010e532:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e535:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e538:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010e53b:	75 be                	jne    c010e4fb <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010e53d:	e8 36 ff ff ff       	call   c010e478 <unlock_vdev_list>
    }
}
c010e542:	90                   	nop
c010e543:	c9                   	leave  
c010e544:	c3                   	ret    

c010e545 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010e545:	55                   	push   %ebp
c010e546:	89 e5                	mov    %esp,%ebp
c010e548:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010e54b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e54f:	75 16                	jne    c010e567 <vfs_get_root+0x22>
c010e551:	68 c8 73 11 c0       	push   $0xc01173c8
c010e556:	68 d8 73 11 c0       	push   $0xc01173d8
c010e55b:	6a 45                	push   $0x45
c010e55d:	68 ed 73 11 c0       	push   $0xc01173ed
c010e562:	e8 7e 1f ff ff       	call   c01004e5 <__panic>
    int ret = -E_NO_DEV;
c010e567:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010e56e:	c7 45 dc b8 40 15 c0 	movl   $0xc01540b8,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e575:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e578:	8b 40 04             	mov    0x4(%eax),%eax
c010e57b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010e57e:	0f 94 c0             	sete   %al
c010e581:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010e584:	85 c0                	test   %eax,%eax
c010e586:	0f 85 cb 00 00 00    	jne    c010e657 <vfs_get_root+0x112>
        lock_vdev_list();
c010e58c:	e8 ce fe ff ff       	call   c010e45f <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010e591:	c7 45 e4 b8 40 15 c0 	movl   $0xc01540b8,-0x1c(%ebp)
c010e598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e59b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010e59e:	e9 94 00 00 00       	jmp    c010e637 <vfs_get_root+0xf2>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e5a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e5a6:	83 e8 10             	sub    $0x10,%eax
c010e5a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010e5ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5af:	8b 00                	mov    (%eax),%eax
c010e5b1:	83 ec 08             	sub    $0x8,%esp
c010e5b4:	50                   	push   %eax
c010e5b5:	ff 75 08             	pushl  0x8(%ebp)
c010e5b8:	e8 f4 51 00 00       	call   c01137b1 <strcmp>
c010e5bd:	83 c4 10             	add    $0x10,%esp
c010e5c0:	85 c0                	test   %eax,%eax
c010e5c2:	75 73                	jne    c010e637 <vfs_get_root+0xf2>
                    struct inode *found = NULL;
c010e5c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010e5cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5ce:	8b 40 08             	mov    0x8(%eax),%eax
c010e5d1:	85 c0                	test   %eax,%eax
c010e5d3:	74 1d                	je     c010e5f2 <vfs_get_root+0xad>
                        found = fsop_get_root(vdev->fs);
c010e5d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5d8:	8b 40 08             	mov    0x8(%eax),%eax
c010e5db:	8b 40 74             	mov    0x74(%eax),%eax
c010e5de:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e5e1:	8b 52 08             	mov    0x8(%edx),%edx
c010e5e4:	83 ec 0c             	sub    $0xc,%esp
c010e5e7:	52                   	push   %edx
c010e5e8:	ff d0                	call   *%eax
c010e5ea:	83 c4 10             	add    $0x10,%esp
c010e5ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e5f0:	eb 25                	jmp    c010e617 <vfs_get_root+0xd2>
                    }
                    else if (!vdev->mountable) {
c010e5f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5f5:	8b 40 0c             	mov    0xc(%eax),%eax
c010e5f8:	85 c0                	test   %eax,%eax
c010e5fa:	75 1b                	jne    c010e617 <vfs_get_root+0xd2>
                        vop_ref_inc(vdev->devnode);
c010e5fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e5ff:	8b 40 04             	mov    0x4(%eax),%eax
c010e602:	83 ec 0c             	sub    $0xc,%esp
c010e605:	50                   	push   %eax
c010e606:	e8 1b 10 00 00       	call   c010f626 <inode_ref_inc>
c010e60b:	83 c4 10             	add    $0x10,%esp
                        found = vdev->devnode;
c010e60e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e611:	8b 40 04             	mov    0x4(%eax),%eax
c010e614:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010e617:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e61b:	74 11                	je     c010e62e <vfs_get_root+0xe9>
                        ret = 0, *node_store = found;
c010e61d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e624:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e627:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e62a:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010e62c:	eb 24                	jmp    c010e652 <vfs_get_root+0x10d>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010e62e:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010e635:	eb 1b                	jmp    c010e652 <vfs_get_root+0x10d>
c010e637:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e63a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e63d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e640:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010e643:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e646:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e649:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010e64c:	0f 85 51 ff ff ff    	jne    c010e5a3 <vfs_get_root+0x5e>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010e652:	e8 21 fe ff ff       	call   c010e478 <unlock_vdev_list>
    }
    return ret;
c010e657:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e65a:	c9                   	leave  
c010e65b:	c3                   	ret    

c010e65c <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010e65c:	55                   	push   %ebp
c010e65d:	89 e5                	mov    %esp,%ebp
c010e65f:	83 ec 18             	sub    $0x18,%esp
    assert(fs != NULL);
c010e662:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e666:	75 16                	jne    c010e67e <vfs_get_devname+0x22>
c010e668:	68 02 74 11 c0       	push   $0xc0117402
c010e66d:	68 d8 73 11 c0       	push   $0xc01173d8
c010e672:	6a 6a                	push   $0x6a
c010e674:	68 ed 73 11 c0       	push   $0xc01173ed
c010e679:	e8 67 1e ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010e67e:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e685:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e688:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e68b:	eb 1b                	jmp    c010e6a8 <vfs_get_devname+0x4c>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e68d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e690:	83 e8 10             	sub    $0x10,%eax
c010e693:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010e696:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e699:	8b 40 08             	mov    0x8(%eax),%eax
c010e69c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010e69f:	75 07                	jne    c010e6a8 <vfs_get_devname+0x4c>
            return vdev->devname;
c010e6a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6a4:	8b 00                	mov    (%eax),%eax
c010e6a6:	eb 1c                	jmp    c010e6c4 <vfs_get_devname+0x68>
c010e6a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e6ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e6b1:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e6b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e6b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e6bd:	75 ce                	jne    c010e68d <vfs_get_devname+0x31>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010e6bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e6c4:	c9                   	leave  
c010e6c5:	c3                   	ret    

c010e6c6 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010e6c6:	55                   	push   %ebp
c010e6c7:	89 e5                	mov    %esp,%ebp
c010e6c9:	83 ec 18             	sub    $0x18,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010e6cc:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e6d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e6d9:	eb 28                	jmp    c010e703 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e6db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6de:	83 e8 10             	sub    $0x10,%eax
c010e6e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010e6e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6e7:	8b 00                	mov    (%eax),%eax
c010e6e9:	83 ec 08             	sub    $0x8,%esp
c010e6ec:	ff 75 08             	pushl  0x8(%ebp)
c010e6ef:	50                   	push   %eax
c010e6f0:	e8 bc 50 00 00       	call   c01137b1 <strcmp>
c010e6f5:	83 c4 10             	add    $0x10,%esp
c010e6f8:	85 c0                	test   %eax,%eax
c010e6fa:	75 07                	jne    c010e703 <check_devname_conflict+0x3d>
            return 0;
c010e6fc:	b8 00 00 00 00       	mov    $0x0,%eax
c010e701:	eb 1c                	jmp    c010e71f <check_devname_conflict+0x59>
c010e703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e706:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e709:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e70c:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e70f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e715:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e718:	75 c1                	jne    c010e6db <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010e71a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e71f:	c9                   	leave  
c010e720:	c3                   	ret    

c010e721 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010e721:	55                   	push   %ebp
c010e722:	89 e5                	mov    %esp,%ebp
c010e724:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010e727:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e72b:	75 19                	jne    c010e746 <vfs_do_add+0x25>
c010e72d:	68 c8 73 11 c0       	push   $0xc01173c8
c010e732:	68 d8 73 11 c0       	push   $0xc01173d8
c010e737:	68 8e 00 00 00       	push   $0x8e
c010e73c:	68 ed 73 11 c0       	push   $0xc01173ed
c010e741:	e8 9f 1d ff ff       	call   c01004e5 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010e746:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e74a:	75 06                	jne    c010e752 <vfs_do_add+0x31>
c010e74c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010e750:	74 2c                	je     c010e77e <vfs_do_add+0x5d>
c010e752:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e756:	74 0d                	je     c010e765 <vfs_do_add+0x44>
c010e758:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e75b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e75e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010e763:	74 19                	je     c010e77e <vfs_do_add+0x5d>
c010e765:	68 10 74 11 c0       	push   $0xc0117410
c010e76a:	68 d8 73 11 c0       	push   $0xc01173d8
c010e76f:	68 8f 00 00 00       	push   $0x8f
c010e774:	68 ed 73 11 c0       	push   $0xc01173ed
c010e779:	e8 67 1d ff ff       	call   c01004e5 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010e77e:	83 ec 0c             	sub    $0xc,%esp
c010e781:	ff 75 08             	pushl  0x8(%ebp)
c010e784:	e8 2d 4f 00 00       	call   c01136b6 <strlen>
c010e789:	83 c4 10             	add    $0x10,%esp
c010e78c:	83 f8 1f             	cmp    $0x1f,%eax
c010e78f:	76 0a                	jbe    c010e79b <vfs_do_add+0x7a>
        return -E_TOO_BIG;
c010e791:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010e796:	e9 0d 01 00 00       	jmp    c010e8a8 <vfs_do_add+0x187>
    }

    int ret = -E_NO_MEM;
c010e79b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010e7a2:	83 ec 0c             	sub    $0xc,%esp
c010e7a5:	ff 75 08             	pushl  0x8(%ebp)
c010e7a8:	e8 9a 1a ff ff       	call   c0100247 <strdup>
c010e7ad:	83 c4 10             	add    $0x10,%esp
c010e7b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e7b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e7b7:	75 08                	jne    c010e7c1 <vfs_do_add+0xa0>
        return ret;
c010e7b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7bc:	e9 e7 00 00 00       	jmp    c010e8a8 <vfs_do_add+0x187>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010e7c1:	83 ec 0c             	sub    $0xc,%esp
c010e7c4:	6a 18                	push   $0x18
c010e7c6:	e8 85 70 ff ff       	call   c0105850 <kmalloc>
c010e7cb:	83 c4 10             	add    $0x10,%esp
c010e7ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e7d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e7d5:	0f 84 bb 00 00 00    	je     c010e896 <vfs_do_add+0x175>
        goto failed_cleanup_name;
    }

    ret = -E_EXISTS;
c010e7db:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010e7e2:	e8 78 fc ff ff       	call   c010e45f <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010e7e7:	83 ec 0c             	sub    $0xc,%esp
c010e7ea:	ff 75 f0             	pushl  -0x10(%ebp)
c010e7ed:	e8 d4 fe ff ff       	call   c010e6c6 <check_devname_conflict>
c010e7f2:	83 c4 10             	add    $0x10,%esp
c010e7f5:	85 c0                	test   %eax,%eax
c010e7f7:	75 19                	jne    c010e812 <vfs_do_add+0xf1>
        unlock_vdev_list();
c010e7f9:	e8 7a fc ff ff       	call   c010e478 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010e7fe:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010e7ff:	83 ec 0c             	sub    $0xc,%esp
c010e802:	ff 75 ec             	pushl  -0x14(%ebp)
c010e805:	e8 5e 70 ff ff       	call   c0105868 <kfree>
c010e80a:	83 c4 10             	add    $0x10,%esp
c010e80d:	e9 85 00 00 00       	jmp    c010e897 <vfs_do_add+0x176>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010e812:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e815:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e818:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010e81a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e81d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e820:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010e823:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e826:	8b 55 14             	mov    0x14(%ebp),%edx
c010e829:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010e82c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e82f:	8b 55 10             	mov    0x10(%ebp),%edx
c010e832:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010e835:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e838:	83 c0 10             	add    $0x10,%eax
c010e83b:	c7 45 e8 b8 40 15 c0 	movl   $0xc01540b8,-0x18(%ebp)
c010e842:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e845:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e848:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e84b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e84e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010e851:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e854:	8b 40 04             	mov    0x4(%eax),%eax
c010e857:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e85a:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e85d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e860:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e863:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e866:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e869:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e86c:	89 10                	mov    %edx,(%eax)
c010e86e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e871:	8b 10                	mov    (%eax),%edx
c010e873:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e876:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e879:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e87c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e87f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e882:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e885:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e888:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010e88a:	e8 e9 fb ff ff       	call   c010e478 <unlock_vdev_list>
    return 0;
c010e88f:	b8 00 00 00 00       	mov    $0x0,%eax
c010e894:	eb 12                	jmp    c010e8a8 <vfs_do_add+0x187>
        return ret;
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
        goto failed_cleanup_name;
c010e896:	90                   	nop
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010e897:	83 ec 0c             	sub    $0xc,%esp
c010e89a:	ff 75 f0             	pushl  -0x10(%ebp)
c010e89d:	e8 c6 6f ff ff       	call   c0105868 <kfree>
c010e8a2:	83 c4 10             	add    $0x10,%esp
    return ret;
c010e8a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e8a8:	c9                   	leave  
c010e8a9:	c3                   	ret    

c010e8aa <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010e8aa:	55                   	push   %ebp
c010e8ab:	89 e5                	mov    %esp,%ebp
c010e8ad:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010e8b0:	6a 00                	push   $0x0
c010e8b2:	ff 75 0c             	pushl  0xc(%ebp)
c010e8b5:	6a 00                	push   $0x0
c010e8b7:	ff 75 08             	pushl  0x8(%ebp)
c010e8ba:	e8 62 fe ff ff       	call   c010e721 <vfs_do_add>
c010e8bf:	83 c4 10             	add    $0x10,%esp
}
c010e8c2:	c9                   	leave  
c010e8c3:	c3                   	ret    

c010e8c4 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010e8c4:	55                   	push   %ebp
c010e8c5:	89 e5                	mov    %esp,%ebp
c010e8c7:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010e8ca:	ff 75 10             	pushl  0x10(%ebp)
c010e8cd:	6a 00                	push   $0x0
c010e8cf:	ff 75 0c             	pushl  0xc(%ebp)
c010e8d2:	ff 75 08             	pushl  0x8(%ebp)
c010e8d5:	e8 47 fe ff ff       	call   c010e721 <vfs_do_add>
c010e8da:	83 c4 10             	add    $0x10,%esp
}
c010e8dd:	c9                   	leave  
c010e8de:	c3                   	ret    

c010e8df <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010e8df:	55                   	push   %ebp
c010e8e0:	89 e5                	mov    %esp,%ebp
c010e8e2:	83 ec 18             	sub    $0x18,%esp
    assert(devname != NULL);
c010e8e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e8e9:	75 19                	jne    c010e904 <find_mount+0x25>
c010e8eb:	68 c8 73 11 c0       	push   $0xc01173c8
c010e8f0:	68 d8 73 11 c0       	push   $0xc01173d8
c010e8f5:	68 cd 00 00 00       	push   $0xcd
c010e8fa:	68 ed 73 11 c0       	push   $0xc01173ed
c010e8ff:	e8 e1 1b ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010e904:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e90b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e90e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e911:	eb 3a                	jmp    c010e94d <find_mount+0x6e>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e916:	83 e8 10             	sub    $0x10,%eax
c010e919:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010e91c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e91f:	8b 40 0c             	mov    0xc(%eax),%eax
c010e922:	85 c0                	test   %eax,%eax
c010e924:	74 27                	je     c010e94d <find_mount+0x6e>
c010e926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e929:	8b 00                	mov    (%eax),%eax
c010e92b:	83 ec 08             	sub    $0x8,%esp
c010e92e:	ff 75 08             	pushl  0x8(%ebp)
c010e931:	50                   	push   %eax
c010e932:	e8 7a 4e 00 00       	call   c01137b1 <strcmp>
c010e937:	83 c4 10             	add    $0x10,%esp
c010e93a:	85 c0                	test   %eax,%eax
c010e93c:	75 0f                	jne    c010e94d <find_mount+0x6e>
            *vdev_store = vdev;
c010e93e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e941:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e944:	89 10                	mov    %edx,(%eax)
            return 0;
c010e946:	b8 00 00 00 00       	mov    $0x0,%eax
c010e94b:	eb 1c                	jmp    c010e969 <find_mount+0x8a>
c010e94d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e950:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e953:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e956:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e959:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e95c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e95f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e962:	75 af                	jne    c010e913 <find_mount+0x34>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010e964:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010e969:	c9                   	leave  
c010e96a:	c3                   	ret    

c010e96b <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010e96b:	55                   	push   %ebp
c010e96c:	89 e5                	mov    %esp,%ebp
c010e96e:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010e971:	e8 e9 fa ff ff       	call   c010e45f <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010e976:	83 ec 08             	sub    $0x8,%esp
c010e979:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010e97c:	50                   	push   %eax
c010e97d:	ff 75 08             	pushl  0x8(%ebp)
c010e980:	e8 5a ff ff ff       	call   c010e8df <find_mount>
c010e985:	83 c4 10             	add    $0x10,%esp
c010e988:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e98b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e98f:	0f 85 d6 00 00 00    	jne    c010ea6b <vfs_mount+0x100>
        goto out;
    }
    if (vdev->fs != NULL) {
c010e995:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e998:	8b 40 08             	mov    0x8(%eax),%eax
c010e99b:	85 c0                	test   %eax,%eax
c010e99d:	74 0c                	je     c010e9ab <vfs_mount+0x40>
        ret = -E_BUSY;
c010e99f:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010e9a6:	e9 c1 00 00 00       	jmp    c010ea6c <vfs_mount+0x101>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010e9ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9ae:	8b 00                	mov    (%eax),%eax
c010e9b0:	85 c0                	test   %eax,%eax
c010e9b2:	74 0a                	je     c010e9be <vfs_mount+0x53>
c010e9b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9b7:	8b 40 0c             	mov    0xc(%eax),%eax
c010e9ba:	85 c0                	test   %eax,%eax
c010e9bc:	75 19                	jne    c010e9d7 <vfs_mount+0x6c>
c010e9be:	68 6c 74 11 c0       	push   $0xc011746c
c010e9c3:	68 d8 73 11 c0       	push   $0xc01173d8
c010e9c8:	68 eb 00 00 00       	push   $0xeb
c010e9cd:	68 ed 73 11 c0       	push   $0xc01173ed
c010e9d2:	e8 0e 1b ff ff       	call   c01004e5 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010e9d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9da:	8b 40 04             	mov    0x4(%eax),%eax
c010e9dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e9e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e9e4:	74 0d                	je     c010e9f3 <vfs_mount+0x88>
c010e9e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9e9:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e9ec:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010e9f1:	74 19                	je     c010ea0c <vfs_mount+0xa1>
c010e9f3:	68 98 74 11 c0       	push   $0xc0117498
c010e9f8:	68 d8 73 11 c0       	push   $0xc01173d8
c010e9fd:	68 ed 00 00 00       	push   $0xed
c010ea02:	68 ed 73 11 c0       	push   $0xc01173ed
c010ea07:	e8 d9 1a ff ff       	call   c01004e5 <__panic>
c010ea0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010ea12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea15:	83 c0 08             	add    $0x8,%eax
c010ea18:	83 ec 08             	sub    $0x8,%esp
c010ea1b:	50                   	push   %eax
c010ea1c:	ff 75 ec             	pushl  -0x14(%ebp)
c010ea1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea22:	ff d0                	call   *%eax
c010ea24:	83 c4 10             	add    $0x10,%esp
c010ea27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ea2e:	75 3c                	jne    c010ea6c <vfs_mount+0x101>
        assert(vdev->fs != NULL);
c010ea30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea33:	8b 40 08             	mov    0x8(%eax),%eax
c010ea36:	85 c0                	test   %eax,%eax
c010ea38:	75 19                	jne    c010ea53 <vfs_mount+0xe8>
c010ea3a:	68 cb 74 11 c0       	push   $0xc01174cb
c010ea3f:	68 d8 73 11 c0       	push   $0xc01173d8
c010ea44:	68 ef 00 00 00       	push   $0xef
c010ea49:	68 ed 73 11 c0       	push   $0xc01173ed
c010ea4e:	e8 92 1a ff ff       	call   c01004e5 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010ea53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea56:	8b 00                	mov    (%eax),%eax
c010ea58:	83 ec 08             	sub    $0x8,%esp
c010ea5b:	50                   	push   %eax
c010ea5c:	68 dc 74 11 c0       	push   $0xc01174dc
c010ea61:	e8 19 19 ff ff       	call   c010037f <cprintf>
c010ea66:	83 c4 10             	add    $0x10,%esp
c010ea69:	eb 01                	jmp    c010ea6c <vfs_mount+0x101>
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010ea6b:	90                   	nop
        assert(vdev->fs != NULL);
        cprintf("vfs: mount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010ea6c:	e8 07 fa ff ff       	call   c010e478 <unlock_vdev_list>
    return ret;
c010ea71:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ea74:	c9                   	leave  
c010ea75:	c3                   	ret    

c010ea76 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010ea76:	55                   	push   %ebp
c010ea77:	89 e5                	mov    %esp,%ebp
c010ea79:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010ea7c:	e8 de f9 ff ff       	call   c010e45f <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010ea81:	83 ec 08             	sub    $0x8,%esp
c010ea84:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ea87:	50                   	push   %eax
c010ea88:	ff 75 08             	pushl  0x8(%ebp)
c010ea8b:	e8 4f fe ff ff       	call   c010e8df <find_mount>
c010ea90:	83 c4 10             	add    $0x10,%esp
c010ea93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ea9a:	0f 85 a6 00 00 00    	jne    c010eb46 <vfs_unmount+0xd0>
        goto out;
    }
    if (vdev->fs == NULL) {
c010eaa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaa3:	8b 40 08             	mov    0x8(%eax),%eax
c010eaa6:	85 c0                	test   %eax,%eax
c010eaa8:	75 0c                	jne    c010eab6 <vfs_unmount+0x40>
        ret = -E_INVAL;
c010eaaa:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010eab1:	e9 94 00 00 00       	jmp    c010eb4a <vfs_unmount+0xd4>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010eab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eab9:	8b 00                	mov    (%eax),%eax
c010eabb:	85 c0                	test   %eax,%eax
c010eabd:	74 0a                	je     c010eac9 <vfs_unmount+0x53>
c010eabf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eac2:	8b 40 0c             	mov    0xc(%eax),%eax
c010eac5:	85 c0                	test   %eax,%eax
c010eac7:	75 19                	jne    c010eae2 <vfs_unmount+0x6c>
c010eac9:	68 6c 74 11 c0       	push   $0xc011746c
c010eace:	68 d8 73 11 c0       	push   $0xc01173d8
c010ead3:	68 08 01 00 00       	push   $0x108
c010ead8:	68 ed 73 11 c0       	push   $0xc01173ed
c010eadd:	e8 03 1a ff ff       	call   c01004e5 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010eae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eae5:	8b 40 08             	mov    0x8(%eax),%eax
c010eae8:	8b 40 70             	mov    0x70(%eax),%eax
c010eaeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010eaee:	8b 52 08             	mov    0x8(%edx),%edx
c010eaf1:	83 ec 0c             	sub    $0xc,%esp
c010eaf4:	52                   	push   %edx
c010eaf5:	ff d0                	call   *%eax
c010eaf7:	83 c4 10             	add    $0x10,%esp
c010eafa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eafd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eb01:	75 46                	jne    c010eb49 <vfs_unmount+0xd3>
        goto out;
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010eb03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb06:	8b 40 08             	mov    0x8(%eax),%eax
c010eb09:	8b 40 78             	mov    0x78(%eax),%eax
c010eb0c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010eb0f:	8b 52 08             	mov    0x8(%edx),%edx
c010eb12:	83 ec 0c             	sub    $0xc,%esp
c010eb15:	52                   	push   %edx
c010eb16:	ff d0                	call   *%eax
c010eb18:	83 c4 10             	add    $0x10,%esp
c010eb1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eb1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eb22:	75 26                	jne    c010eb4a <vfs_unmount+0xd4>
        vdev->fs = NULL;
c010eb24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb27:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010eb2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb31:	8b 00                	mov    (%eax),%eax
c010eb33:	83 ec 08             	sub    $0x8,%esp
c010eb36:	50                   	push   %eax
c010eb37:	68 ec 74 11 c0       	push   $0xc01174ec
c010eb3c:	e8 3e 18 ff ff       	call   c010037f <cprintf>
c010eb41:	83 c4 10             	add    $0x10,%esp
c010eb44:	eb 04                	jmp    c010eb4a <vfs_unmount+0xd4>
vfs_unmount(const char *devname) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010eb46:	90                   	nop
c010eb47:	eb 01                	jmp    c010eb4a <vfs_unmount+0xd4>
        goto out;
    }
    assert(vdev->devname != NULL && vdev->mountable);

    if ((ret = fsop_sync(vdev->fs)) != 0) {
        goto out;
c010eb49:	90                   	nop
        vdev->fs = NULL;
        cprintf("vfs: unmount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010eb4a:	e8 29 f9 ff ff       	call   c010e478 <unlock_vdev_list>
    return ret;
c010eb4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010eb52:	c9                   	leave  
c010eb53:	c3                   	ret    

c010eb54 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010eb54:	55                   	push   %ebp
c010eb55:	89 e5                	mov    %esp,%ebp
c010eb57:	83 ec 28             	sub    $0x28,%esp
c010eb5a:	c7 45 e0 b8 40 15 c0 	movl   $0xc01540b8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010eb61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb64:	8b 40 04             	mov    0x4(%eax),%eax
c010eb67:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010eb6a:	0f 94 c0             	sete   %al
c010eb6d:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010eb70:	85 c0                	test   %eax,%eax
c010eb72:	0f 85 f4 00 00 00    	jne    c010ec6c <vfs_unmount_all+0x118>
        lock_vdev_list();
c010eb78:	e8 e2 f8 ff ff       	call   c010e45f <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010eb7d:	c7 45 ec b8 40 15 c0 	movl   $0xc01540b8,-0x14(%ebp)
c010eb84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb87:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010eb8a:	e9 bd 00 00 00       	jmp    c010ec4c <vfs_unmount_all+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010eb8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb92:	83 e8 10             	sub    $0x10,%eax
c010eb95:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010eb98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb9b:	8b 40 0c             	mov    0xc(%eax),%eax
c010eb9e:	85 c0                	test   %eax,%eax
c010eba0:	0f 84 a6 00 00 00    	je     c010ec4c <vfs_unmount_all+0xf8>
c010eba6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eba9:	8b 40 08             	mov    0x8(%eax),%eax
c010ebac:	85 c0                	test   %eax,%eax
c010ebae:	0f 84 98 00 00 00    	je     c010ec4c <vfs_unmount_all+0xf8>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010ebb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ebb7:	8b 40 08             	mov    0x8(%eax),%eax
c010ebba:	8b 40 70             	mov    0x70(%eax),%eax
c010ebbd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ebc0:	8b 52 08             	mov    0x8(%edx),%edx
c010ebc3:	83 ec 0c             	sub    $0xc,%esp
c010ebc6:	52                   	push   %edx
c010ebc7:	ff d0                	call   *%eax
c010ebc9:	83 c4 10             	add    $0x10,%esp
c010ebcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ebcf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ebd3:	74 1b                	je     c010ebf0 <vfs_unmount_all+0x9c>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010ebd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ebd8:	8b 00                	mov    (%eax),%eax
c010ebda:	83 ec 04             	sub    $0x4,%esp
c010ebdd:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ebe0:	50                   	push   %eax
c010ebe1:	68 00 75 11 c0       	push   $0xc0117500
c010ebe6:	e8 94 17 ff ff       	call   c010037f <cprintf>
c010ebeb:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010ebee:	eb 5c                	jmp    c010ec4c <vfs_unmount_all+0xf8>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010ebf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ebf3:	8b 40 08             	mov    0x8(%eax),%eax
c010ebf6:	8b 40 78             	mov    0x78(%eax),%eax
c010ebf9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ebfc:	8b 52 08             	mov    0x8(%edx),%edx
c010ebff:	83 ec 0c             	sub    $0xc,%esp
c010ec02:	52                   	push   %edx
c010ec03:	ff d0                	call   *%eax
c010ec05:	83 c4 10             	add    $0x10,%esp
c010ec08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ec0b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ec0f:	74 1b                	je     c010ec2c <vfs_unmount_all+0xd8>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010ec11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec14:	8b 00                	mov    (%eax),%eax
c010ec16:	83 ec 04             	sub    $0x4,%esp
c010ec19:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ec1c:	50                   	push   %eax
c010ec1d:	68 28 75 11 c0       	push   $0xc0117528
c010ec22:	e8 58 17 ff ff       	call   c010037f <cprintf>
c010ec27:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010ec2a:	eb 20                	jmp    c010ec4c <vfs_unmount_all+0xf8>
                    }
                    vdev->fs = NULL;
c010ec2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec2f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010ec36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec39:	8b 00                	mov    (%eax),%eax
c010ec3b:	83 ec 08             	sub    $0x8,%esp
c010ec3e:	50                   	push   %eax
c010ec3f:	68 ec 74 11 c0       	push   $0xc01174ec
c010ec44:	e8 36 17 ff ff       	call   c010037f <cprintf>
c010ec49:	83 c4 10             	add    $0x10,%esp
c010ec4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ec52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec55:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010ec58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ec5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec5e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010ec61:	0f 85 28 ff ff ff    	jne    c010eb8f <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010ec67:	e8 0c f8 ff ff       	call   c010e478 <unlock_vdev_list>
    }
    return 0;
c010ec6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec71:	c9                   	leave  
c010ec72:	c3                   	ret    

c010ec73 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c010ec73:	55                   	push   %ebp
c010ec74:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c010ec76:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ec7b:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ec81:	8b 00                	mov    (%eax),%eax
}
c010ec83:	5d                   	pop    %ebp
c010ec84:	c3                   	ret    

c010ec85 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c010ec85:	55                   	push   %ebp
c010ec86:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c010ec88:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ec8d:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ec93:	8b 55 08             	mov    0x8(%ebp),%edx
c010ec96:	89 10                	mov    %edx,(%eax)
}
c010ec98:	90                   	nop
c010ec99:	5d                   	pop    %ebp
c010ec9a:	c3                   	ret    

c010ec9b <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c010ec9b:	55                   	push   %ebp
c010ec9c:	89 e5                	mov    %esp,%ebp
c010ec9e:	83 ec 08             	sub    $0x8,%esp
    lock_files(current->filesp);
c010eca1:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010eca6:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ecac:	83 ec 0c             	sub    $0xc,%esp
c010ecaf:	50                   	push   %eax
c010ecb0:	e8 45 c4 ff ff       	call   c010b0fa <lock_files>
c010ecb5:	83 c4 10             	add    $0x10,%esp
}
c010ecb8:	90                   	nop
c010ecb9:	c9                   	leave  
c010ecba:	c3                   	ret    

c010ecbb <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c010ecbb:	55                   	push   %ebp
c010ecbc:	89 e5                	mov    %esp,%ebp
c010ecbe:	83 ec 08             	sub    $0x8,%esp
    unlock_files(current->filesp);
c010ecc1:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ecc6:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010eccc:	83 ec 0c             	sub    $0xc,%esp
c010eccf:	50                   	push   %eax
c010ecd0:	e8 40 c4 ff ff       	call   c010b115 <unlock_files>
c010ecd5:	83 c4 10             	add    $0x10,%esp
}
c010ecd8:	90                   	nop
c010ecd9:	c9                   	leave  
c010ecda:	c3                   	ret    

c010ecdb <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c010ecdb:	55                   	push   %ebp
c010ecdc:	89 e5                	mov    %esp,%ebp
c010ecde:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c010ece1:	e8 8d ff ff ff       	call   c010ec73 <get_cwd_nolock>
c010ece6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ece9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eced:	74 1d                	je     c010ed0c <vfs_get_curdir+0x31>
        vop_ref_inc(node);
c010ecef:	83 ec 0c             	sub    $0xc,%esp
c010ecf2:	ff 75 f4             	pushl  -0xc(%ebp)
c010ecf5:	e8 2c 09 00 00       	call   c010f626 <inode_ref_inc>
c010ecfa:	83 c4 10             	add    $0x10,%esp
        *dir_store = node;
c010ecfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed00:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ed03:	89 10                	mov    %edx,(%eax)
        return 0;
c010ed05:	b8 00 00 00 00       	mov    $0x0,%eax
c010ed0a:	eb 05                	jmp    c010ed11 <vfs_get_curdir+0x36>
    }
    return -E_NOENT;
c010ed0c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c010ed11:	c9                   	leave  
c010ed12:	c3                   	ret    

c010ed13 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c010ed13:	55                   	push   %ebp
c010ed14:	89 e5                	mov    %esp,%ebp
c010ed16:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c010ed19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c010ed20:	e8 76 ff ff ff       	call   c010ec9b <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c010ed25:	e8 49 ff ff ff       	call   c010ec73 <get_cwd_nolock>
c010ed2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ed2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed30:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ed33:	0f 84 c3 00 00 00    	je     c010edfc <vfs_set_curdir+0xe9>
        if (dir != NULL) {
c010ed39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ed3d:	0f 84 94 00 00 00    	je     c010edd7 <vfs_set_curdir+0xc4>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c010ed43:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed46:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ed49:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ed4d:	74 17                	je     c010ed66 <vfs_set_curdir+0x53>
c010ed4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed52:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed55:	85 c0                	test   %eax,%eax
c010ed57:	74 0d                	je     c010ed66 <vfs_set_curdir+0x53>
c010ed59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed5f:	8b 40 28             	mov    0x28(%eax),%eax
c010ed62:	85 c0                	test   %eax,%eax
c010ed64:	75 16                	jne    c010ed7c <vfs_set_curdir+0x69>
c010ed66:	68 54 75 11 c0       	push   $0xc0117554
c010ed6b:	68 a4 75 11 c0       	push   $0xc01175a4
c010ed70:	6a 43                	push   $0x43
c010ed72:	68 b9 75 11 c0       	push   $0xc01175b9
c010ed77:	e8 69 17 ff ff       	call   c01004e5 <__panic>
c010ed7c:	83 ec 08             	sub    $0x8,%esp
c010ed7f:	68 cf 75 11 c0       	push   $0xc01175cf
c010ed84:	ff 75 ec             	pushl  -0x14(%ebp)
c010ed87:	e8 6c 0a 00 00       	call   c010f7f8 <inode_check>
c010ed8c:	83 c4 10             	add    $0x10,%esp
c010ed8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed92:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ed95:	8b 40 28             	mov    0x28(%eax),%eax
c010ed98:	83 ec 08             	sub    $0x8,%esp
c010ed9b:	8d 55 e8             	lea    -0x18(%ebp),%edx
c010ed9e:	52                   	push   %edx
c010ed9f:	ff 75 08             	pushl  0x8(%ebp)
c010eda2:	ff d0                	call   *%eax
c010eda4:	83 c4 10             	add    $0x10,%esp
c010eda7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010edaa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010edae:	75 4b                	jne    c010edfb <vfs_set_curdir+0xe8>
                goto out;
            }
            if (!S_ISDIR(type)) {
c010edb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010edb3:	25 00 70 00 00       	and    $0x7000,%eax
c010edb8:	3d 00 20 00 00       	cmp    $0x2000,%eax
c010edbd:	74 0a                	je     c010edc9 <vfs_set_curdir+0xb6>
                ret = -E_NOTDIR;
c010edbf:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c010edc6:	90                   	nop
c010edc7:	eb 33                	jmp    c010edfc <vfs_set_curdir+0xe9>
            }
            vop_ref_inc(dir);
c010edc9:	83 ec 0c             	sub    $0xc,%esp
c010edcc:	ff 75 08             	pushl  0x8(%ebp)
c010edcf:	e8 52 08 00 00       	call   c010f626 <inode_ref_inc>
c010edd4:	83 c4 10             	add    $0x10,%esp
        }
        set_cwd_nolock(dir);
c010edd7:	83 ec 0c             	sub    $0xc,%esp
c010edda:	ff 75 08             	pushl  0x8(%ebp)
c010eddd:	e8 a3 fe ff ff       	call   c010ec85 <set_cwd_nolock>
c010ede2:	83 c4 10             	add    $0x10,%esp
        if (old_dir != NULL) {
c010ede5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ede9:	74 11                	je     c010edfc <vfs_set_curdir+0xe9>
            vop_ref_dec(old_dir);
c010edeb:	83 ec 0c             	sub    $0xc,%esp
c010edee:	ff 75 f0             	pushl  -0x10(%ebp)
c010edf1:	e8 4a 08 00 00       	call   c010f640 <inode_ref_dec>
c010edf6:	83 c4 10             	add    $0x10,%esp
c010edf9:	eb 01                	jmp    c010edfc <vfs_set_curdir+0xe9>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
        if (dir != NULL) {
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
                goto out;
c010edfb:	90                   	nop
        if (old_dir != NULL) {
            vop_ref_dec(old_dir);
        }
    }
out:
    unlock_cfs();
c010edfc:	e8 ba fe ff ff       	call   c010ecbb <unlock_cfs>
    return ret;
c010ee01:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ee04:	c9                   	leave  
c010ee05:	c3                   	ret    

c010ee06 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c010ee06:	55                   	push   %ebp
c010ee07:	89 e5                	mov    %esp,%ebp
c010ee09:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c010ee0c:	83 ec 08             	sub    $0x8,%esp
c010ee0f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ee12:	50                   	push   %eax
c010ee13:	ff 75 08             	pushl  0x8(%ebp)
c010ee16:	e8 05 03 00 00       	call   c010f120 <vfs_lookup>
c010ee1b:	83 c4 10             	add    $0x10,%esp
c010ee1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee25:	75 21                	jne    c010ee48 <vfs_chdir+0x42>
        ret = vfs_set_curdir(node);
c010ee27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee2a:	83 ec 0c             	sub    $0xc,%esp
c010ee2d:	50                   	push   %eax
c010ee2e:	e8 e0 fe ff ff       	call   c010ed13 <vfs_set_curdir>
c010ee33:	83 c4 10             	add    $0x10,%esp
c010ee36:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010ee39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee3c:	83 ec 0c             	sub    $0xc,%esp
c010ee3f:	50                   	push   %eax
c010ee40:	e8 fb 07 00 00       	call   c010f640 <inode_ref_dec>
c010ee45:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c010ee48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ee4b:	c9                   	leave  
c010ee4c:	c3                   	ret    

c010ee4d <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c010ee4d:	55                   	push   %ebp
c010ee4e:	89 e5                	mov    %esp,%ebp
c010ee50:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c010ee53:	83 ec 0c             	sub    $0xc,%esp
c010ee56:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010ee59:	50                   	push   %eax
c010ee5a:	e8 7c fe ff ff       	call   c010ecdb <vfs_get_curdir>
c010ee5f:	83 c4 10             	add    $0x10,%esp
c010ee62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee69:	74 08                	je     c010ee73 <vfs_getcwd+0x26>
        return ret;
c010ee6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee6e:	e9 0a 01 00 00       	jmp    c010ef7d <vfs_getcwd+0x130>
    }
    assert(node->in_fs != NULL);
c010ee73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee76:	8b 40 38             	mov    0x38(%eax),%eax
c010ee79:	85 c0                	test   %eax,%eax
c010ee7b:	75 16                	jne    c010ee93 <vfs_getcwd+0x46>
c010ee7d:	68 d7 75 11 c0       	push   $0xc01175d7
c010ee82:	68 a4 75 11 c0       	push   $0xc01175a4
c010ee87:	6a 6e                	push   $0x6e
c010ee89:	68 b9 75 11 c0       	push   $0xc01175b9
c010ee8e:	e8 52 16 ff ff       	call   c01004e5 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c010ee93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee96:	8b 40 38             	mov    0x38(%eax),%eax
c010ee99:	83 ec 0c             	sub    $0xc,%esp
c010ee9c:	50                   	push   %eax
c010ee9d:	e8 ba f7 ff ff       	call   c010e65c <vfs_get_devname>
c010eea2:	83 c4 10             	add    $0x10,%esp
c010eea5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c010eea8:	83 ec 0c             	sub    $0xc,%esp
c010eeab:	ff 75 f0             	pushl  -0x10(%ebp)
c010eeae:	e8 03 48 00 00       	call   c01136b6 <strlen>
c010eeb3:	83 c4 10             	add    $0x10,%esp
c010eeb6:	83 ec 0c             	sub    $0xc,%esp
c010eeb9:	6a 00                	push   $0x0
c010eebb:	6a 01                	push   $0x1
c010eebd:	50                   	push   %eax
c010eebe:	ff 75 f0             	pushl  -0x10(%ebp)
c010eec1:	ff 75 08             	pushl  0x8(%ebp)
c010eec4:	e8 99 c0 ff ff       	call   c010af62 <iobuf_move>
c010eec9:	83 c4 20             	add    $0x20,%esp
c010eecc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eecf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eed3:	0f 85 8e 00 00 00    	jne    c010ef67 <vfs_getcwd+0x11a>
        goto out;
    }
    char colon = ':';
c010eed9:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c010eedd:	83 ec 0c             	sub    $0xc,%esp
c010eee0:	6a 00                	push   $0x0
c010eee2:	6a 01                	push   $0x1
c010eee4:	6a 01                	push   $0x1
c010eee6:	8d 45 e7             	lea    -0x19(%ebp),%eax
c010eee9:	50                   	push   %eax
c010eeea:	ff 75 08             	pushl  0x8(%ebp)
c010eeed:	e8 70 c0 ff ff       	call   c010af62 <iobuf_move>
c010eef2:	83 c4 20             	add    $0x20,%esp
c010eef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eef8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eefc:	75 6c                	jne    c010ef6a <vfs_getcwd+0x11d>
        goto out;
    }
    ret = vop_namefile(node, iob);
c010eefe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ef01:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ef04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ef08:	74 17                	je     c010ef21 <vfs_getcwd+0xd4>
c010ef0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef10:	85 c0                	test   %eax,%eax
c010ef12:	74 0d                	je     c010ef21 <vfs_getcwd+0xd4>
c010ef14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef17:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef1a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ef1d:	85 c0                	test   %eax,%eax
c010ef1f:	75 16                	jne    c010ef37 <vfs_getcwd+0xea>
c010ef21:	68 ec 75 11 c0       	push   $0xc01175ec
c010ef26:	68 a4 75 11 c0       	push   $0xc01175a4
c010ef2b:	6a 78                	push   $0x78
c010ef2d:	68 b9 75 11 c0       	push   $0xc01175b9
c010ef32:	e8 ae 15 ff ff       	call   c01004e5 <__panic>
c010ef37:	83 ec 08             	sub    $0x8,%esp
c010ef3a:	68 3d 76 11 c0       	push   $0xc011763d
c010ef3f:	ff 75 ec             	pushl  -0x14(%ebp)
c010ef42:	e8 b1 08 00 00       	call   c010f7f8 <inode_check>
c010ef47:	83 c4 10             	add    $0x10,%esp
c010ef4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef4d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef50:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ef53:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ef56:	83 ec 08             	sub    $0x8,%esp
c010ef59:	ff 75 08             	pushl  0x8(%ebp)
c010ef5c:	52                   	push   %edx
c010ef5d:	ff d0                	call   *%eax
c010ef5f:	83 c4 10             	add    $0x10,%esp
c010ef62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef65:	eb 04                	jmp    c010ef6b <vfs_getcwd+0x11e>
    }
    assert(node->in_fs != NULL);

    const char *devname = vfs_get_devname(node->in_fs);
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
        goto out;
c010ef67:	90                   	nop
c010ef68:	eb 01                	jmp    c010ef6b <vfs_getcwd+0x11e>
    }
    char colon = ':';
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
        goto out;
c010ef6a:	90                   	nop
    }
    ret = vop_namefile(node, iob);

out:
    vop_ref_dec(node);
c010ef6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ef6e:	83 ec 0c             	sub    $0xc,%esp
c010ef71:	50                   	push   %eax
c010ef72:	e8 c9 06 00 00       	call   c010f640 <inode_ref_dec>
c010ef77:	83 c4 10             	add    $0x10,%esp
    return ret;
c010ef7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ef7d:	c9                   	leave  
c010ef7e:	c3                   	ret    

c010ef7f <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010ef7f:	55                   	push   %ebp
c010ef80:	89 e5                	mov    %esp,%ebp
c010ef82:	83 ec 28             	sub    $0x28,%esp
    int i, slash = -1, colon = -1;
c010ef85:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010ef8c:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010ef93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ef9a:	eb 32                	jmp    c010efce <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010ef9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ef9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010efa2:	01 d0                	add    %edx,%eax
c010efa4:	0f b6 00             	movzbl (%eax),%eax
c010efa7:	3c 3a                	cmp    $0x3a,%al
c010efa9:	75 08                	jne    c010efb3 <get_device+0x34>
c010efab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010efb1:	eb 2a                	jmp    c010efdd <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010efb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010efb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010efb9:	01 d0                	add    %edx,%eax
c010efbb:	0f b6 00             	movzbl (%eax),%eax
c010efbe:	3c 2f                	cmp    $0x2f,%al
c010efc0:	75 08                	jne    c010efca <get_device+0x4b>
c010efc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010efc8:	eb 13                	jmp    c010efdd <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c010efca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010efce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010efd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010efd4:	01 d0                	add    %edx,%eax
c010efd6:	0f b6 00             	movzbl (%eax),%eax
c010efd9:	84 c0                	test   %al,%al
c010efdb:	75 bf                	jne    c010ef9c <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c010efdd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010efe1:	79 21                	jns    c010f004 <get_device+0x85>
c010efe3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010efe7:	74 1b                	je     c010f004 <get_device+0x85>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c010efe9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010efec:	8b 55 08             	mov    0x8(%ebp),%edx
c010efef:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c010eff1:	83 ec 0c             	sub    $0xc,%esp
c010eff4:	ff 75 10             	pushl  0x10(%ebp)
c010eff7:	e8 df fc ff ff       	call   c010ecdb <vfs_get_curdir>
c010effc:	83 c4 10             	add    $0x10,%esp
c010efff:	e9 1a 01 00 00       	jmp    c010f11e <get_device+0x19f>
    }
    if (colon > 0) {
c010f004:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f008:	7e 41                	jle    c010f04b <get_device+0xcc>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c010f00a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f00d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f010:	01 d0                	add    %edx,%eax
c010f012:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c010f015:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010f019:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f01c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f01f:	01 d0                	add    %edx,%eax
c010f021:	0f b6 00             	movzbl (%eax),%eax
c010f024:	3c 2f                	cmp    $0x2f,%al
c010f026:	74 ed                	je     c010f015 <get_device+0x96>
        *subpath = path + colon;
c010f028:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f02e:	01 c2                	add    %eax,%edx
c010f030:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f033:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c010f035:	83 ec 08             	sub    $0x8,%esp
c010f038:	ff 75 10             	pushl  0x10(%ebp)
c010f03b:	ff 75 08             	pushl  0x8(%ebp)
c010f03e:	e8 02 f5 ff ff       	call   c010e545 <vfs_get_root>
c010f043:	83 c4 10             	add    $0x10,%esp
c010f046:	e9 d3 00 00 00       	jmp    c010f11e <get_device+0x19f>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c010f04b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f04e:	0f b6 00             	movzbl (%eax),%eax
c010f051:	3c 2f                	cmp    $0x2f,%al
c010f053:	75 23                	jne    c010f078 <get_device+0xf9>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c010f055:	83 ec 0c             	sub    $0xc,%esp
c010f058:	ff 75 10             	pushl  0x10(%ebp)
c010f05b:	e8 9f 09 00 00       	call   c010f9ff <vfs_get_bootfs>
c010f060:	83 c4 10             	add    $0x10,%esp
c010f063:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f066:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f06a:	0f 84 93 00 00 00    	je     c010f103 <get_device+0x184>
            return ret;
c010f070:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f073:	e9 a6 00 00 00       	jmp    c010f11e <get_device+0x19f>
        }
    }
    else {
        assert(*path == ':');
c010f078:	8b 45 08             	mov    0x8(%ebp),%eax
c010f07b:	0f b6 00             	movzbl (%eax),%eax
c010f07e:	3c 3a                	cmp    $0x3a,%al
c010f080:	74 16                	je     c010f098 <get_device+0x119>
c010f082:	68 48 76 11 c0       	push   $0xc0117648
c010f087:	68 55 76 11 c0       	push   $0xc0117655
c010f08c:	6a 33                	push   $0x33
c010f08e:	68 6a 76 11 c0       	push   $0xc011766a
c010f093:	e8 4d 14 ff ff       	call   c01004e5 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f098:	83 ec 0c             	sub    $0xc,%esp
c010f09b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010f09e:	50                   	push   %eax
c010f09f:	e8 37 fc ff ff       	call   c010ecdb <vfs_get_curdir>
c010f0a4:	83 c4 10             	add    $0x10,%esp
c010f0a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f0aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f0ae:	74 05                	je     c010f0b5 <get_device+0x136>
            return ret;
c010f0b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0b3:	eb 69                	jmp    c010f11e <get_device+0x19f>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c010f0b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0b8:	8b 40 38             	mov    0x38(%eax),%eax
c010f0bb:	85 c0                	test   %eax,%eax
c010f0bd:	75 16                	jne    c010f0d5 <get_device+0x156>
c010f0bf:	68 82 76 11 c0       	push   $0xc0117682
c010f0c4:	68 55 76 11 c0       	push   $0xc0117655
c010f0c9:	6a 39                	push   $0x39
c010f0cb:	68 6a 76 11 c0       	push   $0xc011766a
c010f0d0:	e8 10 14 ff ff       	call   c01004e5 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c010f0d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0d8:	8b 40 38             	mov    0x38(%eax),%eax
c010f0db:	8b 40 74             	mov    0x74(%eax),%eax
c010f0de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f0e1:	8b 52 38             	mov    0x38(%edx),%edx
c010f0e4:	83 ec 0c             	sub    $0xc,%esp
c010f0e7:	52                   	push   %edx
c010f0e8:	ff d0                	call   *%eax
c010f0ea:	83 c4 10             	add    $0x10,%esp
c010f0ed:	89 c2                	mov    %eax,%edx
c010f0ef:	8b 45 10             	mov    0x10(%ebp),%eax
c010f0f2:	89 10                	mov    %edx,(%eax)
        vop_ref_dec(node);
c010f0f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0f7:	83 ec 0c             	sub    $0xc,%esp
c010f0fa:	50                   	push   %eax
c010f0fb:	e8 40 05 00 00       	call   c010f640 <inode_ref_dec>
c010f100:	83 c4 10             	add    $0x10,%esp
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c010f103:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010f107:	8b 45 08             	mov    0x8(%ebp),%eax
c010f10a:	0f b6 00             	movzbl (%eax),%eax
c010f10d:	3c 2f                	cmp    $0x2f,%al
c010f10f:	74 f2                	je     c010f103 <get_device+0x184>
    *subpath = path;
c010f111:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f114:	8b 55 08             	mov    0x8(%ebp),%edx
c010f117:	89 10                	mov    %edx,(%eax)
    return 0;
c010f119:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f11e:	c9                   	leave  
c010f11f:	c3                   	ret    

c010f120 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c010f120:	55                   	push   %ebp
c010f121:	89 e5                	mov    %esp,%ebp
c010f123:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010f126:	8b 45 08             	mov    0x8(%ebp),%eax
c010f129:	83 ec 04             	sub    $0x4,%esp
c010f12c:	8d 55 ec             	lea    -0x14(%ebp),%edx
c010f12f:	52                   	push   %edx
c010f130:	8d 55 08             	lea    0x8(%ebp),%edx
c010f133:	52                   	push   %edx
c010f134:	50                   	push   %eax
c010f135:	e8 45 fe ff ff       	call   c010ef7f <get_device>
c010f13a:	83 c4 10             	add    $0x10,%esp
c010f13d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f140:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f144:	74 08                	je     c010f14e <vfs_lookup+0x2e>
        return ret;
c010f146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f149:	e9 96 00 00 00       	jmp    c010f1e4 <vfs_lookup+0xc4>
    }
    if (*path != '\0') {
c010f14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f151:	0f b6 00             	movzbl (%eax),%eax
c010f154:	84 c0                	test   %al,%al
c010f156:	74 7f                	je     c010f1d7 <vfs_lookup+0xb7>
        ret = vop_lookup(node, path, node_store);
c010f158:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f15b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f15e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f162:	74 17                	je     c010f17b <vfs_lookup+0x5b>
c010f164:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f167:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f16a:	85 c0                	test   %eax,%eax
c010f16c:	74 0d                	je     c010f17b <vfs_lookup+0x5b>
c010f16e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f171:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f174:	8b 40 38             	mov    0x38(%eax),%eax
c010f177:	85 c0                	test   %eax,%eax
c010f179:	75 16                	jne    c010f191 <vfs_lookup+0x71>
c010f17b:	68 98 76 11 c0       	push   $0xc0117698
c010f180:	68 55 76 11 c0       	push   $0xc0117655
c010f185:	6a 4f                	push   $0x4f
c010f187:	68 6a 76 11 c0       	push   $0xc011766a
c010f18c:	e8 54 13 ff ff       	call   c01004e5 <__panic>
c010f191:	83 ec 08             	sub    $0x8,%esp
c010f194:	68 e7 76 11 c0       	push   $0xc01176e7
c010f199:	ff 75 f0             	pushl  -0x10(%ebp)
c010f19c:	e8 57 06 00 00       	call   c010f7f8 <inode_check>
c010f1a1:	83 c4 10             	add    $0x10,%esp
c010f1a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1a7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1aa:	8b 40 38             	mov    0x38(%eax),%eax
c010f1ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010f1b0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f1b3:	83 ec 04             	sub    $0x4,%esp
c010f1b6:	ff 75 0c             	pushl  0xc(%ebp)
c010f1b9:	51                   	push   %ecx
c010f1ba:	52                   	push   %edx
c010f1bb:	ff d0                	call   *%eax
c010f1bd:	83 c4 10             	add    $0x10,%esp
c010f1c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010f1c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1c6:	83 ec 0c             	sub    $0xc,%esp
c010f1c9:	50                   	push   %eax
c010f1ca:	e8 71 04 00 00       	call   c010f640 <inode_ref_dec>
c010f1cf:	83 c4 10             	add    $0x10,%esp
        return ret;
c010f1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f1d5:	eb 0d                	jmp    c010f1e4 <vfs_lookup+0xc4>
    }
    *node_store = node;
c010f1d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f1da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f1dd:	89 10                	mov    %edx,(%eax)
    return 0;
c010f1df:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f1e4:	c9                   	leave  
c010f1e5:	c3                   	ret    

c010f1e6 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c010f1e6:	55                   	push   %ebp
c010f1e7:	89 e5                	mov    %esp,%ebp
c010f1e9:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010f1ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1ef:	83 ec 04             	sub    $0x4,%esp
c010f1f2:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010f1f5:	52                   	push   %edx
c010f1f6:	8d 55 08             	lea    0x8(%ebp),%edx
c010f1f9:	52                   	push   %edx
c010f1fa:	50                   	push   %eax
c010f1fb:	e8 7f fd ff ff       	call   c010ef7f <get_device>
c010f200:	83 c4 10             	add    $0x10,%esp
c010f203:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f206:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f20a:	74 05                	je     c010f211 <vfs_lookup_parent+0x2b>
        return ret;
c010f20c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f20f:	eb 15                	jmp    c010f226 <vfs_lookup_parent+0x40>
    }
    *endp = path;
c010f211:	8b 55 08             	mov    0x8(%ebp),%edx
c010f214:	8b 45 10             	mov    0x10(%ebp),%eax
c010f217:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c010f219:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f21c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f21f:	89 10                	mov    %edx,(%eax)
    return 0;
c010f221:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f226:	c9                   	leave  
c010f227:	c3                   	ret    

c010f228 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010f228:	55                   	push   %ebp
c010f229:	89 e5                	mov    %esp,%ebp
c010f22b:	53                   	push   %ebx
c010f22c:	83 ec 34             	sub    $0x34,%esp
    bool can_write = 0;
c010f22f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010f236:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f239:	83 e0 03             	and    $0x3,%eax
c010f23c:	85 c0                	test   %eax,%eax
c010f23e:	74 18                	je     c010f258 <vfs_open+0x30>
c010f240:	83 f8 02             	cmp    $0x2,%eax
c010f243:	77 09                	ja     c010f24e <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010f245:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010f24c:	eb 0b                	jmp    c010f259 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010f24e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f253:	e9 83 02 00 00       	jmp    c010f4db <vfs_open+0x2b3>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010f258:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010f259:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f25c:	83 e0 10             	and    $0x10,%eax
c010f25f:	85 c0                	test   %eax,%eax
c010f261:	74 10                	je     c010f273 <vfs_open+0x4b>
        if (!can_write) {
c010f263:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f267:	75 0a                	jne    c010f273 <vfs_open+0x4b>
            return -E_INVAL;
c010f269:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f26e:	e9 68 02 00 00       	jmp    c010f4db <vfs_open+0x2b3>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010f273:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f276:	83 e0 08             	and    $0x8,%eax
c010f279:	85 c0                	test   %eax,%eax
c010f27b:	0f 95 c0             	setne  %al
c010f27e:	0f b6 c0             	movzbl %al,%eax
c010f281:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010f284:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f287:	83 e0 04             	and    $0x4,%eax
c010f28a:	85 c0                	test   %eax,%eax
c010f28c:	0f 95 c0             	setne  %al
c010f28f:	0f b6 c0             	movzbl %al,%eax
c010f292:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010f295:	83 ec 08             	sub    $0x8,%esp
c010f298:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010f29b:	50                   	push   %eax
c010f29c:	ff 75 08             	pushl  0x8(%ebp)
c010f29f:	e8 7c fe ff ff       	call   c010f120 <vfs_lookup>
c010f2a4:	83 c4 10             	add    $0x10,%esp
c010f2a7:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010f2aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f2ae:	0f 84 b1 00 00 00    	je     c010f365 <vfs_open+0x13d>
        if (ret == -16 && (create)) {
c010f2b4:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010f2b8:	0f 85 9f 00 00 00    	jne    c010f35d <vfs_open+0x135>
c010f2be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2c2:	0f 84 95 00 00 00    	je     c010f35d <vfs_open+0x135>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010f2c8:	83 ec 04             	sub    $0x4,%esp
c010f2cb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010f2ce:	50                   	push   %eax
c010f2cf:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010f2d2:	50                   	push   %eax
c010f2d3:	ff 75 08             	pushl  0x8(%ebp)
c010f2d6:	e8 0b ff ff ff       	call   c010f1e6 <vfs_lookup_parent>
c010f2db:	83 c4 10             	add    $0x10,%esp
c010f2de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f2e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f2e5:	74 08                	je     c010f2ef <vfs_open+0xc7>
                return ret;
c010f2e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f2ea:	e9 ec 01 00 00       	jmp    c010f4db <vfs_open+0x2b3>
            }
            ret = vop_create(dir, name, excl, &node);
c010f2ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f2f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f2f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f2f9:	74 17                	je     c010f312 <vfs_open+0xea>
c010f2fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f2fe:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f301:	85 c0                	test   %eax,%eax
c010f303:	74 0d                	je     c010f312 <vfs_open+0xea>
c010f305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f308:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f30b:	8b 40 34             	mov    0x34(%eax),%eax
c010f30e:	85 c0                	test   %eax,%eax
c010f310:	75 16                	jne    c010f328 <vfs_open+0x100>
c010f312:	68 f0 76 11 c0       	push   $0xc01176f0
c010f317:	68 3f 77 11 c0       	push   $0xc011773f
c010f31c:	6a 2c                	push   $0x2c
c010f31e:	68 54 77 11 c0       	push   $0xc0117754
c010f323:	e8 bd 11 ff ff       	call   c01004e5 <__panic>
c010f328:	83 ec 08             	sub    $0x8,%esp
c010f32b:	68 6a 77 11 c0       	push   $0xc011776a
c010f330:	ff 75 e4             	pushl  -0x1c(%ebp)
c010f333:	e8 c0 04 00 00       	call   c010f7f8 <inode_check>
c010f338:	83 c4 10             	add    $0x10,%esp
c010f33b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f33e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f341:	8b 40 34             	mov    0x34(%eax),%eax
c010f344:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010f347:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f34a:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010f34d:	53                   	push   %ebx
c010f34e:	ff 75 f0             	pushl  -0x10(%ebp)
c010f351:	51                   	push   %ecx
c010f352:	52                   	push   %edx
c010f353:	ff d0                	call   *%eax
c010f355:	83 c4 10             	add    $0x10,%esp
c010f358:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010f35b:	eb 1e                	jmp    c010f37b <vfs_open+0x153>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010f35d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f360:	e9 76 01 00 00       	jmp    c010f4db <vfs_open+0x2b3>
    } else if (excl && create) {
c010f365:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f369:	74 10                	je     c010f37b <vfs_open+0x153>
c010f36b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f36f:	74 0a                	je     c010f37b <vfs_open+0x153>
        return -E_EXISTS;
c010f371:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010f376:	e9 60 01 00 00       	jmp    c010f4db <vfs_open+0x2b3>
    }
    assert(node != NULL);
c010f37b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f37e:	85 c0                	test   %eax,%eax
c010f380:	75 16                	jne    c010f398 <vfs_open+0x170>
c010f382:	68 71 77 11 c0       	push   $0xc0117771
c010f387:	68 3f 77 11 c0       	push   $0xc011773f
c010f38c:	6a 31                	push   $0x31
c010f38e:	68 54 77 11 c0       	push   $0xc0117754
c010f393:	e8 4d 11 ff ff       	call   c01004e5 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010f398:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f39b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f39e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010f3a2:	74 17                	je     c010f3bb <vfs_open+0x193>
c010f3a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f3a7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3aa:	85 c0                	test   %eax,%eax
c010f3ac:	74 0d                	je     c010f3bb <vfs_open+0x193>
c010f3ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f3b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3b4:	8b 40 04             	mov    0x4(%eax),%eax
c010f3b7:	85 c0                	test   %eax,%eax
c010f3b9:	75 16                	jne    c010f3d1 <vfs_open+0x1a9>
c010f3bb:	68 80 77 11 c0       	push   $0xc0117780
c010f3c0:	68 3f 77 11 c0       	push   $0xc011773f
c010f3c5:	6a 33                	push   $0x33
c010f3c7:	68 54 77 11 c0       	push   $0xc0117754
c010f3cc:	e8 14 11 ff ff       	call   c01004e5 <__panic>
c010f3d1:	83 ec 08             	sub    $0x8,%esp
c010f3d4:	68 cd 77 11 c0       	push   $0xc01177cd
c010f3d9:	ff 75 e0             	pushl  -0x20(%ebp)
c010f3dc:	e8 17 04 00 00       	call   c010f7f8 <inode_check>
c010f3e1:	83 c4 10             	add    $0x10,%esp
c010f3e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f3e7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3ea:	8b 40 04             	mov    0x4(%eax),%eax
c010f3ed:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f3f0:	83 ec 08             	sub    $0x8,%esp
c010f3f3:	ff 75 0c             	pushl  0xc(%ebp)
c010f3f6:	52                   	push   %edx
c010f3f7:	ff d0                	call   *%eax
c010f3f9:	83 c4 10             	add    $0x10,%esp
c010f3fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f3ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f403:	74 17                	je     c010f41c <vfs_open+0x1f4>
        vop_ref_dec(node);
c010f405:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f408:	83 ec 0c             	sub    $0xc,%esp
c010f40b:	50                   	push   %eax
c010f40c:	e8 2f 02 00 00       	call   c010f640 <inode_ref_dec>
c010f411:	83 c4 10             	add    $0x10,%esp
        return ret;
c010f414:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f417:	e9 bf 00 00 00       	jmp    c010f4db <vfs_open+0x2b3>
    }

    vop_open_inc(node);
c010f41c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f41f:	83 ec 0c             	sub    $0xc,%esp
c010f422:	50                   	push   %eax
c010f423:	e8 ec 02 00 00       	call   c010f714 <inode_open_inc>
c010f428:	83 c4 10             	add    $0x10,%esp
    if (open_flags & O_TRUNC || create) {
c010f42b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f42e:	83 e0 10             	and    $0x10,%eax
c010f431:	85 c0                	test   %eax,%eax
c010f433:	75 0a                	jne    c010f43f <vfs_open+0x217>
c010f435:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f439:	0f 84 8f 00 00 00    	je     c010f4ce <vfs_open+0x2a6>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010f43f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f442:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010f445:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010f449:	74 17                	je     c010f462 <vfs_open+0x23a>
c010f44b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f44e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f451:	85 c0                	test   %eax,%eax
c010f453:	74 0d                	je     c010f462 <vfs_open+0x23a>
c010f455:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f458:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f45b:	8b 40 30             	mov    0x30(%eax),%eax
c010f45e:	85 c0                	test   %eax,%eax
c010f460:	75 16                	jne    c010f478 <vfs_open+0x250>
c010f462:	68 d4 77 11 c0       	push   $0xc01177d4
c010f467:	68 3f 77 11 c0       	push   $0xc011773f
c010f46c:	6a 3a                	push   $0x3a
c010f46e:	68 54 77 11 c0       	push   $0xc0117754
c010f473:	e8 6d 10 ff ff       	call   c01004e5 <__panic>
c010f478:	83 ec 08             	sub    $0x8,%esp
c010f47b:	68 25 78 11 c0       	push   $0xc0117825
c010f480:	ff 75 dc             	pushl  -0x24(%ebp)
c010f483:	e8 70 03 00 00       	call   c010f7f8 <inode_check>
c010f488:	83 c4 10             	add    $0x10,%esp
c010f48b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f48e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f491:	8b 40 30             	mov    0x30(%eax),%eax
c010f494:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f497:	83 ec 08             	sub    $0x8,%esp
c010f49a:	6a 00                	push   $0x0
c010f49c:	52                   	push   %edx
c010f49d:	ff d0                	call   *%eax
c010f49f:	83 c4 10             	add    $0x10,%esp
c010f4a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f4a5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f4a9:	74 23                	je     c010f4ce <vfs_open+0x2a6>
            vop_open_dec(node);
c010f4ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f4ae:	83 ec 0c             	sub    $0xc,%esp
c010f4b1:	50                   	push   %eax
c010f4b2:	e8 77 02 00 00       	call   c010f72e <inode_open_dec>
c010f4b7:	83 c4 10             	add    $0x10,%esp
            vop_ref_dec(node);
c010f4ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f4bd:	83 ec 0c             	sub    $0xc,%esp
c010f4c0:	50                   	push   %eax
c010f4c1:	e8 7a 01 00 00       	call   c010f640 <inode_ref_dec>
c010f4c6:	83 c4 10             	add    $0x10,%esp
            return ret;
c010f4c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f4cc:	eb 0d                	jmp    c010f4db <vfs_open+0x2b3>
        }
    }
    *node_store = node;
c010f4ce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f4d1:	8b 45 10             	mov    0x10(%ebp),%eax
c010f4d4:	89 10                	mov    %edx,(%eax)
    return 0;
c010f4d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f4db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f4de:	c9                   	leave  
c010f4df:	c3                   	ret    

c010f4e0 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010f4e0:	55                   	push   %ebp
c010f4e1:	89 e5                	mov    %esp,%ebp
c010f4e3:	83 ec 08             	sub    $0x8,%esp
    vop_open_dec(node);
c010f4e6:	83 ec 0c             	sub    $0xc,%esp
c010f4e9:	ff 75 08             	pushl  0x8(%ebp)
c010f4ec:	e8 3d 02 00 00       	call   c010f72e <inode_open_dec>
c010f4f1:	83 c4 10             	add    $0x10,%esp
    vop_ref_dec(node);
c010f4f4:	83 ec 0c             	sub    $0xc,%esp
c010f4f7:	ff 75 08             	pushl  0x8(%ebp)
c010f4fa:	e8 41 01 00 00       	call   c010f640 <inode_ref_dec>
c010f4ff:	83 c4 10             	add    $0x10,%esp
    return 0;
c010f502:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f507:	c9                   	leave  
c010f508:	c3                   	ret    

c010f509 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010f509:	55                   	push   %ebp
c010f50a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f50c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f511:	5d                   	pop    %ebp
c010f512:	c3                   	ret    

c010f513 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010f513:	55                   	push   %ebp
c010f514:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f516:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f51b:	5d                   	pop    %ebp
c010f51c:	c3                   	ret    

c010f51d <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010f51d:	55                   	push   %ebp
c010f51e:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f520:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f525:	5d                   	pop    %ebp
c010f526:	c3                   	ret    

c010f527 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010f527:	55                   	push   %ebp
c010f528:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f52a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f52f:	5d                   	pop    %ebp
c010f530:	c3                   	ret    

c010f531 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010f531:	55                   	push   %ebp
c010f532:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f534:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f539:	5d                   	pop    %ebp
c010f53a:	c3                   	ret    

c010f53b <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010f53b:	55                   	push   %ebp
c010f53c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f53e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f543:	5d                   	pop    %ebp
c010f544:	c3                   	ret    

c010f545 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f545:	55                   	push   %ebp
c010f546:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f548:	8b 45 08             	mov    0x8(%ebp),%eax
c010f54b:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f54e:	5d                   	pop    %ebp
c010f54f:	c3                   	ret    

c010f550 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f550:	55                   	push   %ebp
c010f551:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f553:	8b 45 08             	mov    0x8(%ebp),%eax
c010f556:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f559:	5d                   	pop    %ebp
c010f55a:	c3                   	ret    

c010f55b <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f55b:	55                   	push   %ebp
c010f55c:	89 e5                	mov    %esp,%ebp
c010f55e:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f561:	83 ec 0c             	sub    $0xc,%esp
c010f564:	6a 40                	push   $0x40
c010f566:	e8 e5 62 ff ff       	call   c0105850 <kmalloc>
c010f56b:	83 c4 10             	add    $0x10,%esp
c010f56e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f571:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f575:	74 09                	je     c010f580 <__alloc_inode+0x25>
        node->in_type = type;
c010f577:	8b 55 08             	mov    0x8(%ebp),%edx
c010f57a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f57d:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f580:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f583:	c9                   	leave  
c010f584:	c3                   	ret    

c010f585 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f585:	55                   	push   %ebp
c010f586:	89 e5                	mov    %esp,%ebp
c010f588:	83 ec 08             	sub    $0x8,%esp
    node->ref_count = 0;
c010f58b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f58e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f595:	8b 45 08             	mov    0x8(%ebp),%eax
c010f598:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f59f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f5a5:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f5a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5ab:	8b 55 10             	mov    0x10(%ebp),%edx
c010f5ae:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f5b1:	83 ec 0c             	sub    $0xc,%esp
c010f5b4:	ff 75 08             	pushl  0x8(%ebp)
c010f5b7:	e8 6a 00 00 00       	call   c010f626 <inode_ref_inc>
c010f5bc:	83 c4 10             	add    $0x10,%esp
}
c010f5bf:	90                   	nop
c010f5c0:	c9                   	leave  
c010f5c1:	c3                   	ret    

c010f5c2 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f5c2:	55                   	push   %ebp
c010f5c3:	89 e5                	mov    %esp,%ebp
c010f5c5:	83 ec 08             	sub    $0x8,%esp
    assert(inode_ref_count(node) == 0);
c010f5c8:	ff 75 08             	pushl  0x8(%ebp)
c010f5cb:	e8 75 ff ff ff       	call   c010f545 <inode_ref_count>
c010f5d0:	83 c4 04             	add    $0x4,%esp
c010f5d3:	85 c0                	test   %eax,%eax
c010f5d5:	74 16                	je     c010f5ed <inode_kill+0x2b>
c010f5d7:	68 30 78 11 c0       	push   $0xc0117830
c010f5dc:	68 4b 78 11 c0       	push   $0xc011784b
c010f5e1:	6a 29                	push   $0x29
c010f5e3:	68 60 78 11 c0       	push   $0xc0117860
c010f5e8:	e8 f8 0e ff ff       	call   c01004e5 <__panic>
    assert(inode_open_count(node) == 0);
c010f5ed:	83 ec 0c             	sub    $0xc,%esp
c010f5f0:	ff 75 08             	pushl  0x8(%ebp)
c010f5f3:	e8 58 ff ff ff       	call   c010f550 <inode_open_count>
c010f5f8:	83 c4 10             	add    $0x10,%esp
c010f5fb:	85 c0                	test   %eax,%eax
c010f5fd:	74 16                	je     c010f615 <inode_kill+0x53>
c010f5ff:	68 74 78 11 c0       	push   $0xc0117874
c010f604:	68 4b 78 11 c0       	push   $0xc011784b
c010f609:	6a 2a                	push   $0x2a
c010f60b:	68 60 78 11 c0       	push   $0xc0117860
c010f610:	e8 d0 0e ff ff       	call   c01004e5 <__panic>
    kfree(node);
c010f615:	83 ec 0c             	sub    $0xc,%esp
c010f618:	ff 75 08             	pushl  0x8(%ebp)
c010f61b:	e8 48 62 ff ff       	call   c0105868 <kfree>
c010f620:	83 c4 10             	add    $0x10,%esp
}
c010f623:	90                   	nop
c010f624:	c9                   	leave  
c010f625:	c3                   	ret    

c010f626 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f626:	55                   	push   %ebp
c010f627:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f629:	8b 45 08             	mov    0x8(%ebp),%eax
c010f62c:	8b 40 30             	mov    0x30(%eax),%eax
c010f62f:	8d 50 01             	lea    0x1(%eax),%edx
c010f632:	8b 45 08             	mov    0x8(%ebp),%eax
c010f635:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f638:	8b 45 08             	mov    0x8(%ebp),%eax
c010f63b:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f63e:	5d                   	pop    %ebp
c010f63f:	c3                   	ret    

c010f640 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f640:	55                   	push   %ebp
c010f641:	89 e5                	mov    %esp,%ebp
c010f643:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) > 0);
c010f646:	ff 75 08             	pushl  0x8(%ebp)
c010f649:	e8 f7 fe ff ff       	call   c010f545 <inode_ref_count>
c010f64e:	83 c4 04             	add    $0x4,%esp
c010f651:	85 c0                	test   %eax,%eax
c010f653:	7f 16                	jg     c010f66b <inode_ref_dec+0x2b>
c010f655:	68 90 78 11 c0       	push   $0xc0117890
c010f65a:	68 4b 78 11 c0       	push   $0xc011784b
c010f65f:	6a 3f                	push   $0x3f
c010f661:	68 60 78 11 c0       	push   $0xc0117860
c010f666:	e8 7a 0e ff ff       	call   c01004e5 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f66b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f66e:	8b 40 30             	mov    0x30(%eax),%eax
c010f671:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f674:	8b 45 08             	mov    0x8(%ebp),%eax
c010f677:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f67a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f67d:	8b 40 30             	mov    0x30(%eax),%eax
c010f680:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f683:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f687:	0f 85 82 00 00 00    	jne    c010f70f <inode_ref_dec+0xcf>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f68d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f690:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f693:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f697:	74 17                	je     c010f6b0 <inode_ref_dec+0x70>
c010f699:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f69c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f69f:	85 c0                	test   %eax,%eax
c010f6a1:	74 0d                	je     c010f6b0 <inode_ref_dec+0x70>
c010f6a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f6a9:	8b 40 24             	mov    0x24(%eax),%eax
c010f6ac:	85 c0                	test   %eax,%eax
c010f6ae:	75 16                	jne    c010f6c6 <inode_ref_dec+0x86>
c010f6b0:	68 ac 78 11 c0       	push   $0xc01178ac
c010f6b5:	68 4b 78 11 c0       	push   $0xc011784b
c010f6ba:	6a 44                	push   $0x44
c010f6bc:	68 60 78 11 c0       	push   $0xc0117860
c010f6c1:	e8 1f 0e ff ff       	call   c01004e5 <__panic>
c010f6c6:	83 ec 08             	sub    $0x8,%esp
c010f6c9:	68 fc 78 11 c0       	push   $0xc01178fc
c010f6ce:	ff 75 f0             	pushl  -0x10(%ebp)
c010f6d1:	e8 22 01 00 00       	call   c010f7f8 <inode_check>
c010f6d6:	83 c4 10             	add    $0x10,%esp
c010f6d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6dc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f6df:	8b 40 24             	mov    0x24(%eax),%eax
c010f6e2:	83 ec 0c             	sub    $0xc,%esp
c010f6e5:	ff 75 08             	pushl  0x8(%ebp)
c010f6e8:	ff d0                	call   *%eax
c010f6ea:	83 c4 10             	add    $0x10,%esp
c010f6ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f6f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f6f4:	74 19                	je     c010f70f <inode_ref_dec+0xcf>
c010f6f6:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f6fa:	74 13                	je     c010f70f <inode_ref_dec+0xcf>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f6fc:	83 ec 08             	sub    $0x8,%esp
c010f6ff:	ff 75 ec             	pushl  -0x14(%ebp)
c010f702:	68 04 79 11 c0       	push   $0xc0117904
c010f707:	e8 73 0c ff ff       	call   c010037f <cprintf>
c010f70c:	83 c4 10             	add    $0x10,%esp
        }
    }
    return ref_count;
c010f70f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f712:	c9                   	leave  
c010f713:	c3                   	ret    

c010f714 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f714:	55                   	push   %ebp
c010f715:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f717:	8b 45 08             	mov    0x8(%ebp),%eax
c010f71a:	8b 40 34             	mov    0x34(%eax),%eax
c010f71d:	8d 50 01             	lea    0x1(%eax),%edx
c010f720:	8b 45 08             	mov    0x8(%ebp),%eax
c010f723:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f726:	8b 45 08             	mov    0x8(%ebp),%eax
c010f729:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f72c:	5d                   	pop    %ebp
c010f72d:	c3                   	ret    

c010f72e <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f72e:	55                   	push   %ebp
c010f72f:	89 e5                	mov    %esp,%ebp
c010f731:	83 ec 18             	sub    $0x18,%esp
    assert(inode_open_count(node) > 0);
c010f734:	ff 75 08             	pushl  0x8(%ebp)
c010f737:	e8 14 fe ff ff       	call   c010f550 <inode_open_count>
c010f73c:	83 c4 04             	add    $0x4,%esp
c010f73f:	85 c0                	test   %eax,%eax
c010f741:	7f 16                	jg     c010f759 <inode_open_dec+0x2b>
c010f743:	68 24 79 11 c0       	push   $0xc0117924
c010f748:	68 4b 78 11 c0       	push   $0xc011784b
c010f74d:	6a 5c                	push   $0x5c
c010f74f:	68 60 78 11 c0       	push   $0xc0117860
c010f754:	e8 8c 0d ff ff       	call   c01004e5 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f759:	8b 45 08             	mov    0x8(%ebp),%eax
c010f75c:	8b 40 34             	mov    0x34(%eax),%eax
c010f75f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f762:	8b 45 08             	mov    0x8(%ebp),%eax
c010f765:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f768:	8b 45 08             	mov    0x8(%ebp),%eax
c010f76b:	8b 40 34             	mov    0x34(%eax),%eax
c010f76e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f775:	75 7c                	jne    c010f7f3 <inode_open_dec+0xc5>
        if ((ret = vop_close(node)) != 0) {
c010f777:	8b 45 08             	mov    0x8(%ebp),%eax
c010f77a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f77d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f781:	74 17                	je     c010f79a <inode_open_dec+0x6c>
c010f783:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f786:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f789:	85 c0                	test   %eax,%eax
c010f78b:	74 0d                	je     c010f79a <inode_open_dec+0x6c>
c010f78d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f790:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f793:	8b 40 08             	mov    0x8(%eax),%eax
c010f796:	85 c0                	test   %eax,%eax
c010f798:	75 16                	jne    c010f7b0 <inode_open_dec+0x82>
c010f79a:	68 40 79 11 c0       	push   $0xc0117940
c010f79f:	68 4b 78 11 c0       	push   $0xc011784b
c010f7a4:	6a 61                	push   $0x61
c010f7a6:	68 60 78 11 c0       	push   $0xc0117860
c010f7ab:	e8 35 0d ff ff       	call   c01004e5 <__panic>
c010f7b0:	83 ec 08             	sub    $0x8,%esp
c010f7b3:	68 8e 79 11 c0       	push   $0xc011798e
c010f7b8:	ff 75 f0             	pushl  -0x10(%ebp)
c010f7bb:	e8 38 00 00 00       	call   c010f7f8 <inode_check>
c010f7c0:	83 c4 10             	add    $0x10,%esp
c010f7c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7c6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f7c9:	8b 40 08             	mov    0x8(%eax),%eax
c010f7cc:	83 ec 0c             	sub    $0xc,%esp
c010f7cf:	ff 75 08             	pushl  0x8(%ebp)
c010f7d2:	ff d0                	call   *%eax
c010f7d4:	83 c4 10             	add    $0x10,%esp
c010f7d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f7da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f7de:	74 13                	je     c010f7f3 <inode_open_dec+0xc5>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f7e0:	83 ec 08             	sub    $0x8,%esp
c010f7e3:	ff 75 ec             	pushl  -0x14(%ebp)
c010f7e6:	68 94 79 11 c0       	push   $0xc0117994
c010f7eb:	e8 8f 0b ff ff       	call   c010037f <cprintf>
c010f7f0:	83 c4 10             	add    $0x10,%esp
        }
    }
    return open_count;
c010f7f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f7f6:	c9                   	leave  
c010f7f7:	c3                   	ret    

c010f7f8 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f7f8:	55                   	push   %ebp
c010f7f9:	89 e5                	mov    %esp,%ebp
c010f7fb:	83 ec 18             	sub    $0x18,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f7fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f802:	74 0a                	je     c010f80e <inode_check+0x16>
c010f804:	8b 45 08             	mov    0x8(%ebp),%eax
c010f807:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f80a:	85 c0                	test   %eax,%eax
c010f80c:	75 16                	jne    c010f824 <inode_check+0x2c>
c010f80e:	68 b4 79 11 c0       	push   $0xc01179b4
c010f813:	68 4b 78 11 c0       	push   $0xc011784b
c010f818:	6a 6e                	push   $0x6e
c010f81a:	68 60 78 11 c0       	push   $0xc0117860
c010f81f:	e8 c1 0c ff ff       	call   c01004e5 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f824:	8b 45 08             	mov    0x8(%ebp),%eax
c010f827:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f82a:	8b 00                	mov    (%eax),%eax
c010f82c:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f831:	74 16                	je     c010f849 <inode_check+0x51>
c010f833:	68 dc 79 11 c0       	push   $0xc01179dc
c010f838:	68 4b 78 11 c0       	push   $0xc011784b
c010f83d:	6a 6f                	push   $0x6f
c010f83f:	68 60 78 11 c0       	push   $0xc0117860
c010f844:	e8 9c 0c ff ff       	call   c01004e5 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f849:	83 ec 0c             	sub    $0xc,%esp
c010f84c:	ff 75 08             	pushl  0x8(%ebp)
c010f84f:	e8 f1 fc ff ff       	call   c010f545 <inode_ref_count>
c010f854:	83 c4 10             	add    $0x10,%esp
c010f857:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f85a:	83 ec 0c             	sub    $0xc,%esp
c010f85d:	ff 75 08             	pushl  0x8(%ebp)
c010f860:	e8 eb fc ff ff       	call   c010f550 <inode_open_count>
c010f865:	83 c4 10             	add    $0x10,%esp
c010f868:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f86b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f86e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f871:	7c 06                	jl     c010f879 <inode_check+0x81>
c010f873:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f877:	79 16                	jns    c010f88f <inode_check+0x97>
c010f879:	68 04 7a 11 c0       	push   $0xc0117a04
c010f87e:	68 4b 78 11 c0       	push   $0xc011784b
c010f883:	6a 71                	push   $0x71
c010f885:	68 60 78 11 c0       	push   $0xc0117860
c010f88a:	e8 56 0c ff ff       	call   c01004e5 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f88f:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f896:	7f 09                	jg     c010f8a1 <inode_check+0xa9>
c010f898:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f89f:	7e 16                	jle    c010f8b7 <inode_check+0xbf>
c010f8a1:	68 30 7a 11 c0       	push   $0xc0117a30
c010f8a6:	68 4b 78 11 c0       	push   $0xc011784b
c010f8ab:	6a 72                	push   $0x72
c010f8ad:	68 60 78 11 c0       	push   $0xc0117860
c010f8b2:	e8 2e 0c ff ff       	call   c01004e5 <__panic>
}
c010f8b7:	90                   	nop
c010f8b8:	c9                   	leave  
c010f8b9:	c3                   	ret    

c010f8ba <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f8ba:	55                   	push   %ebp
c010f8bb:	89 e5                	mov    %esp,%ebp
c010f8bd:	83 ec 18             	sub    $0x18,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f8c0:	83 ec 0c             	sub    $0xc,%esp
c010f8c3:	68 80 00 00 00       	push   $0x80
c010f8c8:	e8 83 5f ff ff       	call   c0105850 <kmalloc>
c010f8cd:	83 c4 10             	add    $0x10,%esp
c010f8d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f8d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f8d7:	74 09                	je     c010f8e2 <__alloc_fs+0x28>
        fs->fs_type = type;
c010f8d9:	8b 55 08             	mov    0x8(%ebp),%edx
c010f8dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8df:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f8e5:	c9                   	leave  
c010f8e6:	c3                   	ret    

c010f8e7 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f8e7:	55                   	push   %ebp
c010f8e8:	89 e5                	mov    %esp,%ebp
c010f8ea:	83 ec 08             	sub    $0x8,%esp
    sem_init(&bootfs_sem, 1);
c010f8ed:	83 ec 08             	sub    $0x8,%esp
c010f8f0:	6a 01                	push   $0x1
c010f8f2:	68 cc 40 15 c0       	push   $0xc01540cc
c010f8f7:	e8 46 9c ff ff       	call   c0109542 <sem_init>
c010f8fc:	83 c4 10             	add    $0x10,%esp
    vfs_devlist_init();
c010f8ff:	e8 8d eb ff ff       	call   c010e491 <vfs_devlist_init>
}
c010f904:	90                   	nop
c010f905:	c9                   	leave  
c010f906:	c3                   	ret    

c010f907 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f907:	55                   	push   %ebp
c010f908:	89 e5                	mov    %esp,%ebp
c010f90a:	83 ec 08             	sub    $0x8,%esp
    down(&bootfs_sem);
c010f90d:	83 ec 0c             	sub    $0xc,%esp
c010f910:	68 cc 40 15 c0       	push   $0xc01540cc
c010f915:	e8 b1 9d ff ff       	call   c01096cb <down>
c010f91a:	83 c4 10             	add    $0x10,%esp
}
c010f91d:	90                   	nop
c010f91e:	c9                   	leave  
c010f91f:	c3                   	ret    

c010f920 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f920:	55                   	push   %ebp
c010f921:	89 e5                	mov    %esp,%ebp
c010f923:	83 ec 08             	sub    $0x8,%esp
    up(&bootfs_sem);
c010f926:	83 ec 0c             	sub    $0xc,%esp
c010f929:	68 cc 40 15 c0       	push   $0xc01540cc
c010f92e:	e8 7c 9d ff ff       	call   c01096af <up>
c010f933:	83 c4 10             	add    $0x10,%esp
}
c010f936:	90                   	nop
c010f937:	c9                   	leave  
c010f938:	c3                   	ret    

c010f939 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f939:	55                   	push   %ebp
c010f93a:	89 e5                	mov    %esp,%ebp
c010f93c:	83 ec 18             	sub    $0x18,%esp
    struct inode *old;
    lock_bootfs();
c010f93f:	e8 c3 ff ff ff       	call   c010f907 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f944:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010f949:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f94c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f94f:	a3 d8 40 15 c0       	mov    %eax,0xc01540d8
    }
    unlock_bootfs();
c010f954:	e8 c7 ff ff ff       	call   c010f920 <unlock_bootfs>
    if (old != NULL) {
c010f959:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f95d:	74 0e                	je     c010f96d <change_bootfs+0x34>
        vop_ref_dec(old);
c010f95f:	83 ec 0c             	sub    $0xc,%esp
c010f962:	ff 75 f4             	pushl  -0xc(%ebp)
c010f965:	e8 d6 fc ff ff       	call   c010f640 <inode_ref_dec>
c010f96a:	83 c4 10             	add    $0x10,%esp
    }
}
c010f96d:	90                   	nop
c010f96e:	c9                   	leave  
c010f96f:	c3                   	ret    

c010f970 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f970:	55                   	push   %ebp
c010f971:	89 e5                	mov    %esp,%ebp
c010f973:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010f976:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f97d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f981:	74 66                	je     c010f9e9 <vfs_set_bootfs+0x79>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f983:	83 ec 08             	sub    $0x8,%esp
c010f986:	6a 3a                	push   $0x3a
c010f988:	ff 75 08             	pushl  0x8(%ebp)
c010f98b:	e8 c1 3e 00 00       	call   c0113851 <strchr>
c010f990:	83 c4 10             	add    $0x10,%esp
c010f993:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f996:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f99a:	74 0d                	je     c010f9a9 <vfs_set_bootfs+0x39>
c010f99c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f99f:	83 c0 01             	add    $0x1,%eax
c010f9a2:	0f b6 00             	movzbl (%eax),%eax
c010f9a5:	84 c0                	test   %al,%al
c010f9a7:	74 07                	je     c010f9b0 <vfs_set_bootfs+0x40>
            return -E_INVAL;
c010f9a9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f9ae:	eb 4d                	jmp    c010f9fd <vfs_set_bootfs+0x8d>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f9b0:	83 ec 0c             	sub    $0xc,%esp
c010f9b3:	ff 75 08             	pushl  0x8(%ebp)
c010f9b6:	e8 4b f4 ff ff       	call   c010ee06 <vfs_chdir>
c010f9bb:	83 c4 10             	add    $0x10,%esp
c010f9be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f9c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f9c5:	74 05                	je     c010f9cc <vfs_set_bootfs+0x5c>
            return ret;
c010f9c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f9ca:	eb 31                	jmp    c010f9fd <vfs_set_bootfs+0x8d>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f9cc:	83 ec 0c             	sub    $0xc,%esp
c010f9cf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f9d2:	50                   	push   %eax
c010f9d3:	e8 03 f3 ff ff       	call   c010ecdb <vfs_get_curdir>
c010f9d8:	83 c4 10             	add    $0x10,%esp
c010f9db:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f9de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f9e2:	74 05                	je     c010f9e9 <vfs_set_bootfs+0x79>
            return ret;
c010f9e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f9e7:	eb 14                	jmp    c010f9fd <vfs_set_bootfs+0x8d>
        }
    }
    change_bootfs(node);
c010f9e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f9ec:	83 ec 0c             	sub    $0xc,%esp
c010f9ef:	50                   	push   %eax
c010f9f0:	e8 44 ff ff ff       	call   c010f939 <change_bootfs>
c010f9f5:	83 c4 10             	add    $0x10,%esp
    return 0;
c010f9f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f9fd:	c9                   	leave  
c010f9fe:	c3                   	ret    

c010f9ff <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f9ff:	55                   	push   %ebp
c010fa00:	89 e5                	mov    %esp,%ebp
c010fa02:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010fa05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010fa0c:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa11:	85 c0                	test   %eax,%eax
c010fa13:	74 29                	je     c010fa3e <vfs_get_bootfs+0x3f>
        lock_bootfs();
c010fa15:	e8 ed fe ff ff       	call   c010f907 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010fa1a:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa26:	74 11                	je     c010fa39 <vfs_get_bootfs+0x3a>
                vop_ref_inc(bootfs_node);
c010fa28:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa2d:	83 ec 0c             	sub    $0xc,%esp
c010fa30:	50                   	push   %eax
c010fa31:	e8 f0 fb ff ff       	call   c010f626 <inode_ref_inc>
c010fa36:	83 c4 10             	add    $0x10,%esp
            }
        }
        unlock_bootfs();
c010fa39:	e8 e2 fe ff ff       	call   c010f920 <unlock_bootfs>
    }
    if (node == NULL) {
c010fa3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa42:	75 07                	jne    c010fa4b <vfs_get_bootfs+0x4c>
        return -E_NOENT;
c010fa44:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010fa49:	eb 0d                	jmp    c010fa58 <vfs_get_bootfs+0x59>
    }
    *node_store = node;
c010fa4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010fa51:	89 10                	mov    %edx,(%eax)
    return 0;
c010fa53:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fa58:	c9                   	leave  
c010fa59:	c3                   	ret    

c010fa5a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010fa5a:	55                   	push   %ebp
c010fa5b:	89 e5                	mov    %esp,%ebp
c010fa5d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010fa60:	9c                   	pushf  
c010fa61:	58                   	pop    %eax
c010fa62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010fa65:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010fa68:	25 00 02 00 00       	and    $0x200,%eax
c010fa6d:	85 c0                	test   %eax,%eax
c010fa6f:	74 0c                	je     c010fa7d <__intr_save+0x23>
        intr_disable();
c010fa71:	e8 31 28 ff ff       	call   c01022a7 <intr_disable>
        return 1;
c010fa76:	b8 01 00 00 00       	mov    $0x1,%eax
c010fa7b:	eb 05                	jmp    c010fa82 <__intr_save+0x28>
    }
    return 0;
c010fa7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fa82:	c9                   	leave  
c010fa83:	c3                   	ret    

c010fa84 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010fa84:	55                   	push   %ebp
c010fa85:	89 e5                	mov    %esp,%ebp
c010fa87:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010fa8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fa8e:	74 05                	je     c010fa95 <__intr_restore+0x11>
        intr_enable();
c010fa90:	e8 0b 28 ff ff       	call   c01022a0 <intr_enable>
    }
}
c010fa95:	90                   	nop
c010fa96:	c9                   	leave  
c010fa97:	c3                   	ret    

c010fa98 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c010fa98:	55                   	push   %ebp
c010fa99:	89 e5                	mov    %esp,%ebp
c010fa9b:	83 ec 28             	sub    $0x28,%esp
c010fa9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010faa1:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c010faa4:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c010faa8:	0f 84 84 00 00 00    	je     c010fb32 <dev_stdin_write+0x9a>
        local_intr_save(intr_flag);
c010faae:	e8 a7 ff ff ff       	call   c010fa5a <__intr_save>
c010fab3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c010fab6:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fabb:	99                   	cltd   
c010fabc:	c1 ea 14             	shr    $0x14,%edx
c010fabf:	01 d0                	add    %edx,%eax
c010fac1:	25 ff 0f 00 00       	and    $0xfff,%eax
c010fac6:	29 d0                	sub    %edx,%eax
c010fac8:	89 c2                	mov    %eax,%edx
c010faca:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010face:	88 82 e0 40 15 c0    	mov    %al,-0x3feabf20(%edx)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c010fad4:	8b 15 e4 50 15 c0    	mov    0xc01550e4,%edx
c010fada:	a1 e0 50 15 c0       	mov    0xc01550e0,%eax
c010fadf:	29 c2                	sub    %eax,%edx
c010fae1:	89 d0                	mov    %edx,%eax
c010fae3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010fae8:	7f 0d                	jg     c010faf7 <dev_stdin_write+0x5f>
                p_wpos ++;
c010faea:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010faef:	83 c0 01             	add    $0x1,%eax
c010faf2:	a3 e4 50 15 c0       	mov    %eax,0xc01550e4
            }
            if (!wait_queue_empty(wait_queue)) {
c010faf7:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fafc:	83 ec 0c             	sub    $0xc,%esp
c010faff:	50                   	push   %eax
c010fb00:	e8 6c 98 ff ff       	call   c0109371 <wait_queue_empty>
c010fb05:	83 c4 10             	add    $0x10,%esp
c010fb08:	85 c0                	test   %eax,%eax
c010fb0a:	75 18                	jne    c010fb24 <dev_stdin_write+0x8c>
                wakeup_queue(wait_queue, WT_KBD, 1);
c010fb0c:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fb11:	83 ec 04             	sub    $0x4,%esp
c010fb14:	6a 01                	push   $0x1
c010fb16:	68 04 00 00 80       	push   $0x80000004
c010fb1b:	50                   	push   %eax
c010fb1c:	e8 01 99 ff ff       	call   c0109422 <wakeup_queue>
c010fb21:	83 c4 10             	add    $0x10,%esp
            }
        }
        local_intr_restore(intr_flag);
c010fb24:	83 ec 0c             	sub    $0xc,%esp
c010fb27:	ff 75 f4             	pushl  -0xc(%ebp)
c010fb2a:	e8 55 ff ff ff       	call   c010fa84 <__intr_restore>
c010fb2f:	83 c4 10             	add    $0x10,%esp
    }
}
c010fb32:	90                   	nop
c010fb33:	c9                   	leave  
c010fb34:	c3                   	ret    

c010fb35 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c010fb35:	55                   	push   %ebp
c010fb36:	89 e5                	mov    %esp,%ebp
c010fb38:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c010fb3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010fb42:	e8 13 ff ff ff       	call   c010fa5a <__intr_save>
c010fb47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010fb4a:	e9 be 00 00 00       	jmp    c010fc0d <dev_stdin_read+0xd8>
        try_again:
            if (p_rpos < p_wpos) {
c010fb4f:	8b 15 e0 50 15 c0    	mov    0xc01550e0,%edx
c010fb55:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fb5a:	39 c2                	cmp    %eax,%edx
c010fb5c:	7d 2c                	jge    c010fb8a <dev_stdin_read+0x55>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c010fb5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb61:	8d 50 01             	lea    0x1(%eax),%edx
c010fb64:	89 55 08             	mov    %edx,0x8(%ebp)
c010fb67:	8b 15 e0 50 15 c0    	mov    0xc01550e0,%edx
c010fb6d:	89 d1                	mov    %edx,%ecx
c010fb6f:	c1 f9 1f             	sar    $0x1f,%ecx
c010fb72:	c1 e9 14             	shr    $0x14,%ecx
c010fb75:	01 ca                	add    %ecx,%edx
c010fb77:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010fb7d:	29 ca                	sub    %ecx,%edx
c010fb7f:	0f b6 92 e0 40 15 c0 	movzbl -0x3feabf20(%edx),%edx
c010fb86:	88 10                	mov    %dl,(%eax)
c010fb88:	eb 72                	jmp    c010fbfc <dev_stdin_read+0xc7>
            }
            else {
                wait_t __wait, *wait = &__wait;
c010fb8a:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fb8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c010fb90:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fb95:	83 ec 04             	sub    $0x4,%esp
c010fb98:	68 04 00 00 80       	push   $0x80000004
c010fb9d:	ff 75 ec             	pushl  -0x14(%ebp)
c010fba0:	50                   	push   %eax
c010fba1:	e8 f8 98 ff ff       	call   c010949e <wait_current_set>
c010fba6:	83 c4 10             	add    $0x10,%esp
                local_intr_restore(intr_flag);
c010fba9:	83 ec 0c             	sub    $0xc,%esp
c010fbac:	ff 75 f0             	pushl  -0x10(%ebp)
c010fbaf:	e8 d0 fe ff ff       	call   c010fa84 <__intr_restore>
c010fbb4:	83 c4 10             	add    $0x10,%esp

                schedule();
c010fbb7:	e8 31 dc ff ff       	call   c010d7ed <schedule>

                local_intr_save(intr_flag);
c010fbbc:	e8 99 fe ff ff       	call   c010fa5a <__intr_save>
c010fbc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c010fbc4:	83 ec 0c             	sub    $0xc,%esp
c010fbc7:	ff 75 ec             	pushl  -0x14(%ebp)
c010fbca:	e8 c0 97 ff ff       	call   c010938f <wait_in_queue>
c010fbcf:	83 c4 10             	add    $0x10,%esp
c010fbd2:	85 c0                	test   %eax,%eax
c010fbd4:	74 14                	je     c010fbea <dev_stdin_read+0xb5>
c010fbd6:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fbdb:	83 ec 08             	sub    $0x8,%esp
c010fbde:	ff 75 ec             	pushl  -0x14(%ebp)
c010fbe1:	50                   	push   %eax
c010fbe2:	e8 cb 95 ff ff       	call   c01091b2 <wait_queue_del>
c010fbe7:	83 c4 10             	add    $0x10,%esp
                if (wait->wakeup_flags == WT_KBD) {
c010fbea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbed:	8b 40 04             	mov    0x4(%eax),%eax
c010fbf0:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c010fbf5:	75 24                	jne    c010fc1b <dev_stdin_read+0xe6>
c010fbf7:	e9 53 ff ff ff       	jmp    c010fb4f <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010fbfc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010fc00:	a1 e0 50 15 c0       	mov    0xc01550e0,%eax
c010fc05:	83 c0 01             	add    $0x1,%eax
c010fc08:	a3 e0 50 15 c0       	mov    %eax,0xc01550e0
c010fc0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc10:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010fc13:	0f 82 36 ff ff ff    	jb     c010fb4f <dev_stdin_read+0x1a>
c010fc19:	eb 01                	jmp    c010fc1c <dev_stdin_read+0xe7>
                local_intr_save(intr_flag);
                wait_current_del(wait_queue, wait);
                if (wait->wakeup_flags == WT_KBD) {
                    goto try_again;
                }
                break;
c010fc1b:	90                   	nop
            }
        }
    }
    local_intr_restore(intr_flag);
c010fc1c:	83 ec 0c             	sub    $0xc,%esp
c010fc1f:	ff 75 f0             	pushl  -0x10(%ebp)
c010fc22:	e8 5d fe ff ff       	call   c010fa84 <__intr_restore>
c010fc27:	83 c4 10             	add    $0x10,%esp
    return ret;
c010fc2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fc2d:	c9                   	leave  
c010fc2e:	c3                   	ret    

c010fc2f <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c010fc2f:	55                   	push   %ebp
c010fc30:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c010fc32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010fc36:	74 07                	je     c010fc3f <stdin_open+0x10>
        return -E_INVAL;
c010fc38:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fc3d:	eb 05                	jmp    c010fc44 <stdin_open+0x15>
    }
    return 0;
c010fc3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fc44:	5d                   	pop    %ebp
c010fc45:	c3                   	ret    

c010fc46 <stdin_close>:

static int
stdin_close(struct device *dev) {
c010fc46:	55                   	push   %ebp
c010fc47:	89 e5                	mov    %esp,%ebp
    return 0;
c010fc49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fc4e:	5d                   	pop    %ebp
c010fc4f:	c3                   	ret    

c010fc50 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c010fc50:	55                   	push   %ebp
c010fc51:	89 e5                	mov    %esp,%ebp
c010fc53:	83 ec 18             	sub    $0x18,%esp
    if (!write) {
c010fc56:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010fc5a:	75 37                	jne    c010fc93 <stdin_io+0x43>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c010fc5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc5f:	8b 50 0c             	mov    0xc(%eax),%edx
c010fc62:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc65:	8b 00                	mov    (%eax),%eax
c010fc67:	83 ec 08             	sub    $0x8,%esp
c010fc6a:	52                   	push   %edx
c010fc6b:	50                   	push   %eax
c010fc6c:	e8 c4 fe ff ff       	call   c010fb35 <dev_stdin_read>
c010fc71:	83 c4 10             	add    $0x10,%esp
c010fc74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc7b:	7e 11                	jle    c010fc8e <stdin_io+0x3e>
            iob->io_resid -= ret;
c010fc7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc80:	8b 50 0c             	mov    0xc(%eax),%edx
c010fc83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc86:	29 c2                	sub    %eax,%edx
c010fc88:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc8b:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c010fc8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc91:	eb 05                	jmp    c010fc98 <stdin_io+0x48>
    }
    return -E_INVAL;
c010fc93:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010fc98:	c9                   	leave  
c010fc99:	c3                   	ret    

c010fc9a <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c010fc9a:	55                   	push   %ebp
c010fc9b:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c010fc9d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010fca2:	5d                   	pop    %ebp
c010fca3:	c3                   	ret    

c010fca4 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c010fca4:	55                   	push   %ebp
c010fca5:	89 e5                	mov    %esp,%ebp
c010fca7:	83 ec 08             	sub    $0x8,%esp
    dev->d_blocks = 0;
c010fcaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c010fcb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcb6:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c010fcbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcc0:	c7 40 08 2f fc 10 c0 	movl   $0xc010fc2f,0x8(%eax)
    dev->d_close = stdin_close;
c010fcc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcca:	c7 40 0c 46 fc 10 c0 	movl   $0xc010fc46,0xc(%eax)
    dev->d_io = stdin_io;
c010fcd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcd4:	c7 40 10 50 fc 10 c0 	movl   $0xc010fc50,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c010fcdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcde:	c7 40 14 9a fc 10 c0 	movl   $0xc010fc9a,0x14(%eax)

    p_rpos = p_wpos = 0;
c010fce5:	c7 05 e4 50 15 c0 00 	movl   $0x0,0xc01550e4
c010fcec:	00 00 00 
c010fcef:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fcf4:	a3 e0 50 15 c0       	mov    %eax,0xc01550e0
    wait_queue_init(wait_queue);
c010fcf9:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fcfe:	83 ec 0c             	sub    $0xc,%esp
c010fd01:	50                   	push   %eax
c010fd02:	e8 f4 93 ff ff       	call   c01090fb <wait_queue_init>
c010fd07:	83 c4 10             	add    $0x10,%esp
}
c010fd0a:	90                   	nop
c010fd0b:	c9                   	leave  
c010fd0c:	c3                   	ret    

c010fd0d <dev_init_stdin>:

void
dev_init_stdin(void) {
c010fd0d:	55                   	push   %ebp
c010fd0e:	89 e5                	mov    %esp,%ebp
c010fd10:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c010fd13:	e8 ab 09 00 00       	call   c01106c3 <dev_create_inode>
c010fd18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd1f:	75 14                	jne    c010fd35 <dev_init_stdin+0x28>
        panic("stdin: dev_create_node.\n");
c010fd21:	83 ec 04             	sub    $0x4,%esp
c010fd24:	68 6c 7a 11 c0       	push   $0xc0117a6c
c010fd29:	6a 75                	push   $0x75
c010fd2b:	68 85 7a 11 c0       	push   $0xc0117a85
c010fd30:	e8 b0 07 ff ff       	call   c01004e5 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c010fd35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fd3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fd3f:	74 0d                	je     c010fd4e <dev_init_stdin+0x41>
c010fd41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd44:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fd47:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fd4c:	74 16                	je     c010fd64 <dev_init_stdin+0x57>
c010fd4e:	68 a0 7a 11 c0       	push   $0xc0117aa0
c010fd53:	68 d3 7a 11 c0       	push   $0xc0117ad3
c010fd58:	6a 77                	push   $0x77
c010fd5a:	68 85 7a 11 c0       	push   $0xc0117a85
c010fd5f:	e8 81 07 ff ff       	call   c01004e5 <__panic>
c010fd64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd67:	83 ec 0c             	sub    $0xc,%esp
c010fd6a:	50                   	push   %eax
c010fd6b:	e8 34 ff ff ff       	call   c010fca4 <stdin_device_init>
c010fd70:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c010fd73:	83 ec 04             	sub    $0x4,%esp
c010fd76:	6a 00                	push   $0x0
c010fd78:	ff 75 f4             	pushl  -0xc(%ebp)
c010fd7b:	68 e8 7a 11 c0       	push   $0xc0117ae8
c010fd80:	e8 3f eb ff ff       	call   c010e8c4 <vfs_add_dev>
c010fd85:	83 c4 10             	add    $0x10,%esp
c010fd88:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fd8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd8f:	74 14                	je     c010fda5 <dev_init_stdin+0x98>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c010fd91:	ff 75 ec             	pushl  -0x14(%ebp)
c010fd94:	68 ee 7a 11 c0       	push   $0xc0117aee
c010fd99:	6a 7b                	push   $0x7b
c010fd9b:	68 85 7a 11 c0       	push   $0xc0117a85
c010fda0:	e8 40 07 ff ff       	call   c01004e5 <__panic>
    }
}
c010fda5:	90                   	nop
c010fda6:	c9                   	leave  
c010fda7:	c3                   	ret    

c010fda8 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c010fda8:	55                   	push   %ebp
c010fda9:	89 e5                	mov    %esp,%ebp
c010fdab:	83 ec 08             	sub    $0x8,%esp
    down(&(disk0_sem));
c010fdae:	83 ec 0c             	sub    $0xc,%esp
c010fdb1:	68 f4 50 15 c0       	push   $0xc01550f4
c010fdb6:	e8 10 99 ff ff       	call   c01096cb <down>
c010fdbb:	83 c4 10             	add    $0x10,%esp
}
c010fdbe:	90                   	nop
c010fdbf:	c9                   	leave  
c010fdc0:	c3                   	ret    

c010fdc1 <unlock_disk0>:

static void
unlock_disk0(void) {
c010fdc1:	55                   	push   %ebp
c010fdc2:	89 e5                	mov    %esp,%ebp
c010fdc4:	83 ec 08             	sub    $0x8,%esp
    up(&(disk0_sem));
c010fdc7:	83 ec 0c             	sub    $0xc,%esp
c010fdca:	68 f4 50 15 c0       	push   $0xc01550f4
c010fdcf:	e8 db 98 ff ff       	call   c01096af <up>
c010fdd4:	83 c4 10             	add    $0x10,%esp
}
c010fdd7:	90                   	nop
c010fdd8:	c9                   	leave  
c010fdd9:	c3                   	ret    

c010fdda <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c010fdda:	55                   	push   %ebp
c010fddb:	89 e5                	mov    %esp,%ebp
    return 0;
c010fddd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fde2:	5d                   	pop    %ebp
c010fde3:	c3                   	ret    

c010fde4 <disk0_close>:

static int
disk0_close(struct device *dev) {
c010fde4:	55                   	push   %ebp
c010fde5:	89 e5                	mov    %esp,%ebp
    return 0;
c010fde7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fdec:	5d                   	pop    %ebp
c010fded:	c3                   	ret    

c010fdee <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010fdee:	55                   	push   %ebp
c010fdef:	89 e5                	mov    %esp,%ebp
c010fdf1:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010fdf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdf7:	c1 e0 03             	shl    $0x3,%eax
c010fdfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdfd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe00:	c1 e0 03             	shl    $0x3,%eax
c010fe03:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010fe06:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010fe0b:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe0e:	50                   	push   %eax
c010fe0f:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe12:	6a 02                	push   $0x2
c010fe14:	e8 21 15 ff ff       	call   c010133a <ide_read_secs>
c010fe19:	83 c4 10             	add    $0x10,%esp
c010fe1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fe1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe23:	74 20                	je     c010fe45 <disk0_read_blks_nolock+0x57>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010fe25:	ff 75 ec             	pushl  -0x14(%ebp)
c010fe28:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe2b:	ff 75 0c             	pushl  0xc(%ebp)
c010fe2e:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe31:	ff 75 08             	pushl  0x8(%ebp)
c010fe34:	68 08 7b 11 c0       	push   $0xc0117b08
c010fe39:	6a 2e                	push   $0x2e
c010fe3b:	68 50 7b 11 c0       	push   $0xc0117b50
c010fe40:	e8 a0 06 ff ff       	call   c01004e5 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010fe45:	90                   	nop
c010fe46:	c9                   	leave  
c010fe47:	c3                   	ret    

c010fe48 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010fe48:	55                   	push   %ebp
c010fe49:	89 e5                	mov    %esp,%ebp
c010fe4b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010fe4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe51:	c1 e0 03             	shl    $0x3,%eax
c010fe54:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fe57:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe5a:	c1 e0 03             	shl    $0x3,%eax
c010fe5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010fe60:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010fe65:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe68:	50                   	push   %eax
c010fe69:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe6c:	6a 02                	push   $0x2
c010fe6e:	e8 f1 16 ff ff       	call   c0101564 <ide_write_secs>
c010fe73:	83 c4 10             	add    $0x10,%esp
c010fe76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fe79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe7d:	74 20                	je     c010fe9f <disk0_write_blks_nolock+0x57>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010fe7f:	ff 75 ec             	pushl  -0x14(%ebp)
c010fe82:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe85:	ff 75 0c             	pushl  0xc(%ebp)
c010fe88:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe8b:	ff 75 08             	pushl  0x8(%ebp)
c010fe8e:	68 6c 7b 11 c0       	push   $0xc0117b6c
c010fe93:	6a 38                	push   $0x38
c010fe95:	68 50 7b 11 c0       	push   $0xc0117b50
c010fe9a:	e8 46 06 ff ff       	call   c01004e5 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010fe9f:	90                   	nop
c010fea0:	c9                   	leave  
c010fea1:	c3                   	ret    

c010fea2 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c010fea2:	55                   	push   %ebp
c010fea3:	89 e5                	mov    %esp,%ebp
c010fea5:	83 ec 28             	sub    $0x28,%esp
    off_t offset = iob->io_offset;
c010fea8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010feab:	8b 40 04             	mov    0x4(%eax),%eax
c010feae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c010feb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010feb4:	8b 40 0c             	mov    0xc(%eax),%eax
c010feb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c010feba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010febd:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010fec3:	85 c0                	test   %eax,%eax
c010fec5:	0f 48 c2             	cmovs  %edx,%eax
c010fec8:	c1 f8 0c             	sar    $0xc,%eax
c010fecb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c010fece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fed1:	c1 e8 0c             	shr    $0xc,%eax
c010fed4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c010fed7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010feda:	25 ff 0f 00 00       	and    $0xfff,%eax
c010fedf:	85 c0                	test   %eax,%eax
c010fee1:	75 0c                	jne    c010feef <disk0_io+0x4d>
c010fee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fee6:	25 ff 0f 00 00       	and    $0xfff,%eax
c010feeb:	85 c0                	test   %eax,%eax
c010feed:	74 0a                	je     c010fef9 <disk0_io+0x57>
        return -E_INVAL;
c010feef:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fef4:	e9 3b 01 00 00       	jmp    c0110034 <disk0_io+0x192>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c010fef9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fefc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feff:	01 c2                	add    %eax,%edx
c010ff01:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff04:	8b 00                	mov    (%eax),%eax
c010ff06:	39 c2                	cmp    %eax,%edx
c010ff08:	76 0a                	jbe    c010ff14 <disk0_io+0x72>
        return -E_INVAL;
c010ff0a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff0f:	e9 20 01 00 00       	jmp    c0110034 <disk0_io+0x192>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c010ff14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff18:	75 0a                	jne    c010ff24 <disk0_io+0x82>
        return 0;
c010ff1a:	b8 00 00 00 00       	mov    $0x0,%eax
c010ff1f:	e9 10 01 00 00       	jmp    c0110034 <disk0_io+0x192>
    }

    lock_disk0();
c010ff24:	e8 7f fe ff ff       	call   c010fda8 <lock_disk0>
    while (resid != 0) {
c010ff29:	e9 f2 00 00 00       	jmp    c0110020 <disk0_io+0x17e>
        size_t copied, alen = DISK0_BUFSIZE;
c010ff2e:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c010ff35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ff39:	74 6a                	je     c010ffa5 <disk0_io+0x103>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c010ff3b:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010ff40:	83 ec 0c             	sub    $0xc,%esp
c010ff43:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010ff46:	52                   	push   %edx
c010ff47:	6a 00                	push   $0x0
c010ff49:	ff 75 e8             	pushl  -0x18(%ebp)
c010ff4c:	50                   	push   %eax
c010ff4d:	ff 75 0c             	pushl  0xc(%ebp)
c010ff50:	e8 0d b0 ff ff       	call   c010af62 <iobuf_move>
c010ff55:	83 c4 20             	add    $0x20,%esp
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c010ff58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff5b:	85 c0                	test   %eax,%eax
c010ff5d:	74 14                	je     c010ff73 <disk0_io+0xd1>
c010ff5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010ff65:	77 0c                	ja     c010ff73 <disk0_io+0xd1>
c010ff67:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff6a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ff6f:	85 c0                	test   %eax,%eax
c010ff71:	74 16                	je     c010ff89 <disk0_io+0xe7>
c010ff73:	68 b8 7b 11 c0       	push   $0xc0117bb8
c010ff78:	68 f6 7b 11 c0       	push   $0xc0117bf6
c010ff7d:	6a 57                	push   $0x57
c010ff7f:	68 50 7b 11 c0       	push   $0xc0117b50
c010ff84:	e8 5c 05 ff ff       	call   c01004e5 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c010ff89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff8c:	c1 e8 0c             	shr    $0xc,%eax
c010ff8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c010ff92:	83 ec 08             	sub    $0x8,%esp
c010ff95:	ff 75 ec             	pushl  -0x14(%ebp)
c010ff98:	ff 75 f0             	pushl  -0x10(%ebp)
c010ff9b:	e8 a8 fe ff ff       	call   c010fe48 <disk0_write_blks_nolock>
c010ffa0:	83 c4 10             	add    $0x10,%esp
c010ffa3:	eb 6f                	jmp    c0110014 <disk0_io+0x172>
        }
        else {
            if (alen > resid) {
c010ffa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffa8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010ffab:	76 06                	jbe    c010ffb3 <disk0_io+0x111>
                alen = resid;
c010ffad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ffb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c010ffb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffb6:	c1 e8 0c             	shr    $0xc,%eax
c010ffb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c010ffbc:	83 ec 08             	sub    $0x8,%esp
c010ffbf:	ff 75 ec             	pushl  -0x14(%ebp)
c010ffc2:	ff 75 f0             	pushl  -0x10(%ebp)
c010ffc5:	e8 24 fe ff ff       	call   c010fdee <disk0_read_blks_nolock>
c010ffca:	83 c4 10             	add    $0x10,%esp
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c010ffcd:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010ffd2:	83 ec 0c             	sub    $0xc,%esp
c010ffd5:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010ffd8:	52                   	push   %edx
c010ffd9:	6a 01                	push   $0x1
c010ffdb:	ff 75 e8             	pushl  -0x18(%ebp)
c010ffde:	50                   	push   %eax
c010ffdf:	ff 75 0c             	pushl  0xc(%ebp)
c010ffe2:	e8 7b af ff ff       	call   c010af62 <iobuf_move>
c010ffe7:	83 c4 20             	add    $0x20,%esp
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c010ffea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010fff0:	75 0c                	jne    c010fffe <disk0_io+0x15c>
c010fff2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fff5:	25 ff 0f 00 00       	and    $0xfff,%eax
c010fffa:	85 c0                	test   %eax,%eax
c010fffc:	74 16                	je     c0110014 <disk0_io+0x172>
c010fffe:	68 0c 7c 11 c0       	push   $0xc0117c0c
c0110003:	68 f6 7b 11 c0       	push   $0xc0117bf6
c0110008:	6a 62                	push   $0x62
c011000a:	68 50 7b 11 c0       	push   $0xc0117b50
c011000f:	e8 d1 04 ff ff       	call   c01004e5 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110014:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110017:	29 45 f4             	sub    %eax,-0xc(%ebp)
c011001a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011001d:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110020:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110024:	0f 85 04 ff ff ff    	jne    c010ff2e <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c011002a:	e8 92 fd ff ff       	call   c010fdc1 <unlock_disk0>
    return 0;
c011002f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110034:	c9                   	leave  
c0110035:	c3                   	ret    

c0110036 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110036:	55                   	push   %ebp
c0110037:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110039:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011003e:	5d                   	pop    %ebp
c011003f:	c3                   	ret    

c0110040 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110040:	55                   	push   %ebp
c0110041:	89 e5                	mov    %esp,%ebp
c0110043:	83 ec 08             	sub    $0x8,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110046:	83 ec 0c             	sub    $0xc,%esp
c0110049:	6a 02                	push   $0x2
c011004b:	e8 6a 12 ff ff       	call   c01012ba <ide_device_valid>
c0110050:	83 c4 10             	add    $0x10,%esp
c0110053:	85 c0                	test   %eax,%eax
c0110055:	75 14                	jne    c011006b <disk0_device_init+0x2b>
        panic("disk0 device isn't available.\n");
c0110057:	83 ec 04             	sub    $0x4,%esp
c011005a:	68 3c 7c 11 c0       	push   $0xc0117c3c
c011005f:	6a 73                	push   $0x73
c0110061:	68 50 7b 11 c0       	push   $0xc0117b50
c0110066:	e8 7a 04 ff ff       	call   c01004e5 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c011006b:	83 ec 0c             	sub    $0xc,%esp
c011006e:	6a 02                	push   $0x2
c0110070:	e8 85 12 ff ff       	call   c01012fa <ide_device_size>
c0110075:	83 c4 10             	add    $0x10,%esp
c0110078:	c1 e8 03             	shr    $0x3,%eax
c011007b:	89 c2                	mov    %eax,%edx
c011007d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110080:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110082:	8b 45 08             	mov    0x8(%ebp),%eax
c0110085:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c011008c:	8b 45 08             	mov    0x8(%ebp),%eax
c011008f:	c7 40 08 da fd 10 c0 	movl   $0xc010fdda,0x8(%eax)
    dev->d_close = disk0_close;
c0110096:	8b 45 08             	mov    0x8(%ebp),%eax
c0110099:	c7 40 0c e4 fd 10 c0 	movl   $0xc010fde4,0xc(%eax)
    dev->d_io = disk0_io;
c01100a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01100a3:	c7 40 10 a2 fe 10 c0 	movl   $0xc010fea2,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c01100aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01100ad:	c7 40 14 36 00 11 c0 	movl   $0xc0110036,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c01100b4:	83 ec 08             	sub    $0x8,%esp
c01100b7:	6a 01                	push   $0x1
c01100b9:	68 f4 50 15 c0       	push   $0xc01550f4
c01100be:	e8 7f 94 ff ff       	call   c0109542 <sem_init>
c01100c3:	83 c4 10             	add    $0x10,%esp

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c01100c6:	83 ec 0c             	sub    $0xc,%esp
c01100c9:	68 00 40 00 00       	push   $0x4000
c01100ce:	e8 7d 57 ff ff       	call   c0105850 <kmalloc>
c01100d3:	83 c4 10             	add    $0x10,%esp
c01100d6:	a3 f0 50 15 c0       	mov    %eax,0xc01550f0
c01100db:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c01100e0:	85 c0                	test   %eax,%eax
c01100e2:	75 14                	jne    c01100f8 <disk0_device_init+0xb8>
        panic("disk0 alloc buffer failed.\n");
c01100e4:	83 ec 04             	sub    $0x4,%esp
c01100e7:	68 5b 7c 11 c0       	push   $0xc0117c5b
c01100ec:	6a 7f                	push   $0x7f
c01100ee:	68 50 7b 11 c0       	push   $0xc0117b50
c01100f3:	e8 ed 03 ff ff       	call   c01004e5 <__panic>
    }
}
c01100f8:	90                   	nop
c01100f9:	c9                   	leave  
c01100fa:	c3                   	ret    

c01100fb <dev_init_disk0>:

void
dev_init_disk0(void) {
c01100fb:	55                   	push   %ebp
c01100fc:	89 e5                	mov    %esp,%ebp
c01100fe:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110101:	e8 bd 05 00 00       	call   c01106c3 <dev_create_inode>
c0110106:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011010d:	75 17                	jne    c0110126 <dev_init_disk0+0x2b>
        panic("disk0: dev_create_node.\n");
c011010f:	83 ec 04             	sub    $0x4,%esp
c0110112:	68 77 7c 11 c0       	push   $0xc0117c77
c0110117:	68 87 00 00 00       	push   $0x87
c011011c:	68 50 7b 11 c0       	push   $0xc0117b50
c0110121:	e8 bf 03 ff ff       	call   c01004e5 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110129:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011012c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110130:	74 0d                	je     c011013f <dev_init_disk0+0x44>
c0110132:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110135:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110138:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011013d:	74 19                	je     c0110158 <dev_init_disk0+0x5d>
c011013f:	68 90 7c 11 c0       	push   $0xc0117c90
c0110144:	68 f6 7b 11 c0       	push   $0xc0117bf6
c0110149:	68 89 00 00 00       	push   $0x89
c011014e:	68 50 7b 11 c0       	push   $0xc0117b50
c0110153:	e8 8d 03 ff ff       	call   c01004e5 <__panic>
c0110158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011015b:	83 ec 0c             	sub    $0xc,%esp
c011015e:	50                   	push   %eax
c011015f:	e8 dc fe ff ff       	call   c0110040 <disk0_device_init>
c0110164:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110167:	83 ec 04             	sub    $0x4,%esp
c011016a:	6a 01                	push   $0x1
c011016c:	ff 75 f4             	pushl  -0xc(%ebp)
c011016f:	68 c3 7c 11 c0       	push   $0xc0117cc3
c0110174:	e8 4b e7 ff ff       	call   c010e8c4 <vfs_add_dev>
c0110179:	83 c4 10             	add    $0x10,%esp
c011017c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011017f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110183:	74 17                	je     c011019c <dev_init_disk0+0xa1>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0110185:	ff 75 ec             	pushl  -0x14(%ebp)
c0110188:	68 c9 7c 11 c0       	push   $0xc0117cc9
c011018d:	68 8d 00 00 00       	push   $0x8d
c0110192:	68 50 7b 11 c0       	push   $0xc0117b50
c0110197:	e8 49 03 ff ff       	call   c01004e5 <__panic>
    }
}
c011019c:	90                   	nop
c011019d:	c9                   	leave  
c011019e:	c3                   	ret    

c011019f <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c011019f:	55                   	push   %ebp
c01101a0:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01101a2:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01101a6:	74 07                	je     c01101af <stdout_open+0x10>
        return -E_INVAL;
c01101a8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01101ad:	eb 05                	jmp    c01101b4 <stdout_open+0x15>
    }
    return 0;
c01101af:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101b4:	5d                   	pop    %ebp
c01101b5:	c3                   	ret    

c01101b6 <stdout_close>:

static int
stdout_close(struct device *dev) {
c01101b6:	55                   	push   %ebp
c01101b7:	89 e5                	mov    %esp,%ebp
    return 0;
c01101b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101be:	5d                   	pop    %ebp
c01101bf:	c3                   	ret    

c01101c0 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01101c0:	55                   	push   %ebp
c01101c1:	89 e5                	mov    %esp,%ebp
c01101c3:	83 ec 18             	sub    $0x18,%esp
    if (write) {
c01101c6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01101ca:	74 45                	je     c0110211 <stdout_io+0x51>
        char *data = iob->io_base;
c01101cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101cf:	8b 00                	mov    (%eax),%eax
c01101d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01101d4:	eb 2a                	jmp    c0110200 <stdout_io+0x40>
            cputchar(*data ++);
c01101d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01101d9:	8d 50 01             	lea    0x1(%eax),%edx
c01101dc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01101df:	0f b6 00             	movzbl (%eax),%eax
c01101e2:	0f be c0             	movsbl %al,%eax
c01101e5:	83 ec 0c             	sub    $0xc,%esp
c01101e8:	50                   	push   %eax
c01101e9:	e8 b7 01 ff ff       	call   c01003a5 <cputchar>
c01101ee:	83 c4 10             	add    $0x10,%esp

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01101f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101f4:	8b 40 0c             	mov    0xc(%eax),%eax
c01101f7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01101fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101fd:	89 50 0c             	mov    %edx,0xc(%eax)
c0110200:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110203:	8b 40 0c             	mov    0xc(%eax),%eax
c0110206:	85 c0                	test   %eax,%eax
c0110208:	75 cc                	jne    c01101d6 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011020a:	b8 00 00 00 00       	mov    $0x0,%eax
c011020f:	eb 05                	jmp    c0110216 <stdout_io+0x56>
    }
    return -E_INVAL;
c0110211:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110216:	c9                   	leave  
c0110217:	c3                   	ret    

c0110218 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c0110218:	55                   	push   %ebp
c0110219:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011021b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110220:	5d                   	pop    %ebp
c0110221:	c3                   	ret    

c0110222 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0110222:	55                   	push   %ebp
c0110223:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0110225:	8b 45 08             	mov    0x8(%ebp),%eax
c0110228:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011022e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110231:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c0110238:	8b 45 08             	mov    0x8(%ebp),%eax
c011023b:	c7 40 08 9f 01 11 c0 	movl   $0xc011019f,0x8(%eax)
    dev->d_close = stdout_close;
c0110242:	8b 45 08             	mov    0x8(%ebp),%eax
c0110245:	c7 40 0c b6 01 11 c0 	movl   $0xc01101b6,0xc(%eax)
    dev->d_io = stdout_io;
c011024c:	8b 45 08             	mov    0x8(%ebp),%eax
c011024f:	c7 40 10 c0 01 11 c0 	movl   $0xc01101c0,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0110256:	8b 45 08             	mov    0x8(%ebp),%eax
c0110259:	c7 40 14 18 02 11 c0 	movl   $0xc0110218,0x14(%eax)
}
c0110260:	90                   	nop
c0110261:	5d                   	pop    %ebp
c0110262:	c3                   	ret    

c0110263 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0110263:	55                   	push   %ebp
c0110264:	89 e5                	mov    %esp,%ebp
c0110266:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110269:	e8 55 04 00 00       	call   c01106c3 <dev_create_inode>
c011026e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110271:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110275:	75 14                	jne    c011028b <dev_init_stdout+0x28>
        panic("stdout: dev_create_node.\n");
c0110277:	83 ec 04             	sub    $0x4,%esp
c011027a:	68 e4 7c 11 c0       	push   $0xc0117ce4
c011027f:	6a 37                	push   $0x37
c0110281:	68 fe 7c 11 c0       	push   $0xc0117cfe
c0110286:	e8 5a 02 ff ff       	call   c01004e5 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c011028b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011028e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110291:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110295:	74 0d                	je     c01102a4 <dev_init_stdout+0x41>
c0110297:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011029a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011029d:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01102a2:	74 16                	je     c01102ba <dev_init_stdout+0x57>
c01102a4:	68 18 7d 11 c0       	push   $0xc0117d18
c01102a9:	68 4b 7d 11 c0       	push   $0xc0117d4b
c01102ae:	6a 39                	push   $0x39
c01102b0:	68 fe 7c 11 c0       	push   $0xc0117cfe
c01102b5:	e8 2b 02 ff ff       	call   c01004e5 <__panic>
c01102ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01102bd:	83 ec 0c             	sub    $0xc,%esp
c01102c0:	50                   	push   %eax
c01102c1:	e8 5c ff ff ff       	call   c0110222 <stdout_device_init>
c01102c6:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01102c9:	83 ec 04             	sub    $0x4,%esp
c01102cc:	6a 00                	push   $0x0
c01102ce:	ff 75 f4             	pushl  -0xc(%ebp)
c01102d1:	68 60 7d 11 c0       	push   $0xc0117d60
c01102d6:	e8 e9 e5 ff ff       	call   c010e8c4 <vfs_add_dev>
c01102db:	83 c4 10             	add    $0x10,%esp
c01102de:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01102e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01102e5:	74 14                	je     c01102fb <dev_init_stdout+0x98>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01102e7:	ff 75 ec             	pushl  -0x14(%ebp)
c01102ea:	68 67 7d 11 c0       	push   $0xc0117d67
c01102ef:	6a 3d                	push   $0x3d
c01102f1:	68 fe 7c 11 c0       	push   $0xc0117cfe
c01102f6:	e8 ea 01 ff ff       	call   c01004e5 <__panic>
    }
}
c01102fb:	90                   	nop
c01102fc:	c9                   	leave  
c01102fd:	c3                   	ret    

c01102fe <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01102fe:	55                   	push   %ebp
c01102ff:	89 e5                	mov    %esp,%ebp
c0110301:	83 ec 18             	sub    $0x18,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c0110304:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110307:	83 e0 3c             	and    $0x3c,%eax
c011030a:	85 c0                	test   %eax,%eax
c011030c:	74 07                	je     c0110315 <dev_open+0x17>
        return -E_INVAL;
c011030e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110313:	eb 49                	jmp    c011035e <dev_open+0x60>
    }
    struct device *dev = vop_info(node, device);
c0110315:	8b 45 08             	mov    0x8(%ebp),%eax
c0110318:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011031b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011031f:	74 0d                	je     c011032e <dev_open+0x30>
c0110321:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110324:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110327:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011032c:	74 16                	je     c0110344 <dev_open+0x46>
c011032e:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110333:	68 d3 7d 11 c0       	push   $0xc0117dd3
c0110338:	6a 11                	push   $0x11
c011033a:	68 e8 7d 11 c0       	push   $0xc0117de8
c011033f:	e8 a1 01 ff ff       	call   c01004e5 <__panic>
c0110344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110347:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c011034a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011034d:	8b 40 08             	mov    0x8(%eax),%eax
c0110350:	83 ec 08             	sub    $0x8,%esp
c0110353:	ff 75 0c             	pushl  0xc(%ebp)
c0110356:	ff 75 f0             	pushl  -0x10(%ebp)
c0110359:	ff d0                	call   *%eax
c011035b:	83 c4 10             	add    $0x10,%esp
}
c011035e:	c9                   	leave  
c011035f:	c3                   	ret    

c0110360 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c0110360:	55                   	push   %ebp
c0110361:	89 e5                	mov    %esp,%ebp
c0110363:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c0110366:	8b 45 08             	mov    0x8(%ebp),%eax
c0110369:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011036c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110370:	74 0d                	je     c011037f <dev_close+0x1f>
c0110372:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110375:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110378:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011037d:	74 16                	je     c0110395 <dev_close+0x35>
c011037f:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110384:	68 d3 7d 11 c0       	push   $0xc0117dd3
c0110389:	6a 1a                	push   $0x1a
c011038b:	68 e8 7d 11 c0       	push   $0xc0117de8
c0110390:	e8 50 01 ff ff       	call   c01004e5 <__panic>
c0110395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110398:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c011039b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011039e:	8b 40 0c             	mov    0xc(%eax),%eax
c01103a1:	83 ec 0c             	sub    $0xc,%esp
c01103a4:	ff 75 f0             	pushl  -0x10(%ebp)
c01103a7:	ff d0                	call   *%eax
c01103a9:	83 c4 10             	add    $0x10,%esp
}
c01103ac:	c9                   	leave  
c01103ad:	c3                   	ret    

c01103ae <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01103ae:	55                   	push   %ebp
c01103af:	89 e5                	mov    %esp,%ebp
c01103b1:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c01103b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01103b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103be:	74 0d                	je     c01103cd <dev_read+0x1f>
c01103c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103c3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01103c6:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01103cb:	74 16                	je     c01103e3 <dev_read+0x35>
c01103cd:	68 a0 7d 11 c0       	push   $0xc0117da0
c01103d2:	68 d3 7d 11 c0       	push   $0xc0117dd3
c01103d7:	6a 23                	push   $0x23
c01103d9:	68 e8 7d 11 c0       	push   $0xc0117de8
c01103de:	e8 02 01 ff ff       	call   c01004e5 <__panic>
c01103e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01103e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01103ec:	8b 40 10             	mov    0x10(%eax),%eax
c01103ef:	83 ec 04             	sub    $0x4,%esp
c01103f2:	6a 00                	push   $0x0
c01103f4:	ff 75 0c             	pushl  0xc(%ebp)
c01103f7:	ff 75 f0             	pushl  -0x10(%ebp)
c01103fa:	ff d0                	call   *%eax
c01103fc:	83 c4 10             	add    $0x10,%esp
}
c01103ff:	c9                   	leave  
c0110400:	c3                   	ret    

c0110401 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c0110401:	55                   	push   %ebp
c0110402:	89 e5                	mov    %esp,%ebp
c0110404:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c0110407:	8b 45 08             	mov    0x8(%ebp),%eax
c011040a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011040d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110411:	74 0d                	je     c0110420 <dev_write+0x1f>
c0110413:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110416:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110419:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011041e:	74 16                	je     c0110436 <dev_write+0x35>
c0110420:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110425:	68 d3 7d 11 c0       	push   $0xc0117dd3
c011042a:	6a 2c                	push   $0x2c
c011042c:	68 e8 7d 11 c0       	push   $0xc0117de8
c0110431:	e8 af 00 ff ff       	call   c01004e5 <__panic>
c0110436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110439:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c011043c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011043f:	8b 40 10             	mov    0x10(%eax),%eax
c0110442:	83 ec 04             	sub    $0x4,%esp
c0110445:	6a 01                	push   $0x1
c0110447:	ff 75 0c             	pushl  0xc(%ebp)
c011044a:	ff 75 f0             	pushl  -0x10(%ebp)
c011044d:	ff d0                	call   *%eax
c011044f:	83 c4 10             	add    $0x10,%esp
}
c0110452:	c9                   	leave  
c0110453:	c3                   	ret    

c0110454 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110454:	55                   	push   %ebp
c0110455:	89 e5                	mov    %esp,%ebp
c0110457:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c011045a:	8b 45 08             	mov    0x8(%ebp),%eax
c011045d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110460:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110464:	74 0d                	je     c0110473 <dev_ioctl+0x1f>
c0110466:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110469:	8b 40 2c             	mov    0x2c(%eax),%eax
c011046c:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110471:	74 16                	je     c0110489 <dev_ioctl+0x35>
c0110473:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110478:	68 d3 7d 11 c0       	push   $0xc0117dd3
c011047d:	6a 35                	push   $0x35
c011047f:	68 e8 7d 11 c0       	push   $0xc0117de8
c0110484:	e8 5c 00 ff ff       	call   c01004e5 <__panic>
c0110489:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011048c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c011048f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110492:	8b 40 14             	mov    0x14(%eax),%eax
c0110495:	83 ec 04             	sub    $0x4,%esp
c0110498:	ff 75 10             	pushl  0x10(%ebp)
c011049b:	ff 75 0c             	pushl  0xc(%ebp)
c011049e:	ff 75 f0             	pushl  -0x10(%ebp)
c01104a1:	ff d0                	call   *%eax
c01104a3:	83 c4 10             	add    $0x10,%esp
}
c01104a6:	c9                   	leave  
c01104a7:	c3                   	ret    

c01104a8 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01104a8:	55                   	push   %ebp
c01104a9:	89 e5                	mov    %esp,%ebp
c01104ab:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01104ae:	83 ec 04             	sub    $0x4,%esp
c01104b1:	6a 10                	push   $0x10
c01104b3:	6a 00                	push   $0x0
c01104b5:	ff 75 0c             	pushl  0xc(%ebp)
c01104b8:	e8 53 35 00 00       	call   c0113a10 <memset>
c01104bd:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01104c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01104c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104ca:	74 17                	je     c01104e3 <dev_fstat+0x3b>
c01104cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104cf:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104d2:	85 c0                	test   %eax,%eax
c01104d4:	74 0d                	je     c01104e3 <dev_fstat+0x3b>
c01104d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104dc:	8b 40 28             	mov    0x28(%eax),%eax
c01104df:	85 c0                	test   %eax,%eax
c01104e1:	75 16                	jne    c01104f9 <dev_fstat+0x51>
c01104e3:	68 fc 7d 11 c0       	push   $0xc0117dfc
c01104e8:	68 d3 7d 11 c0       	push   $0xc0117dd3
c01104ed:	6a 42                	push   $0x42
c01104ef:	68 e8 7d 11 c0       	push   $0xc0117de8
c01104f4:	e8 ec ff fe ff       	call   c01004e5 <__panic>
c01104f9:	83 ec 08             	sub    $0x8,%esp
c01104fc:	68 4c 7e 11 c0       	push   $0xc0117e4c
c0110501:	ff 75 f4             	pushl  -0xc(%ebp)
c0110504:	e8 ef f2 ff ff       	call   c010f7f8 <inode_check>
c0110509:	83 c4 10             	add    $0x10,%esp
c011050c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011050f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110512:	8b 40 28             	mov    0x28(%eax),%eax
c0110515:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110518:	83 ec 08             	sub    $0x8,%esp
c011051b:	52                   	push   %edx
c011051c:	ff 75 08             	pushl  0x8(%ebp)
c011051f:	ff d0                	call   *%eax
c0110521:	83 c4 10             	add    $0x10,%esp
c0110524:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110527:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011052b:	74 05                	je     c0110532 <dev_fstat+0x8a>
        return ret;
c011052d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110530:	eb 64                	jmp    c0110596 <dev_fstat+0xee>
    }
    struct device *dev = vop_info(node, device);
c0110532:	8b 45 08             	mov    0x8(%ebp),%eax
c0110535:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110538:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011053c:	74 0d                	je     c011054b <dev_fstat+0xa3>
c011053e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110541:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110544:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110549:	74 16                	je     c0110561 <dev_fstat+0xb9>
c011054b:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110550:	68 d3 7d 11 c0       	push   $0xc0117dd3
c0110555:	6a 45                	push   $0x45
c0110557:	68 e8 7d 11 c0       	push   $0xc0117de8
c011055c:	e8 84 ff fe ff       	call   c01004e5 <__panic>
c0110561:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110564:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110567:	8b 45 0c             	mov    0xc(%ebp),%eax
c011056a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110571:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110574:	8b 10                	mov    (%eax),%edx
c0110576:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110579:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c011057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011057f:	8b 50 08             	mov    0x8(%eax),%edx
c0110582:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110585:	8b 40 04             	mov    0x4(%eax),%eax
c0110588:	0f af d0             	imul   %eax,%edx
c011058b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011058e:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110591:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110596:	c9                   	leave  
c0110597:	c3                   	ret    

c0110598 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110598:	55                   	push   %ebp
c0110599:	89 e5                	mov    %esp,%ebp
c011059b:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c011059e:	8b 45 08             	mov    0x8(%ebp),%eax
c01105a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105a8:	74 0d                	je     c01105b7 <dev_gettype+0x1f>
c01105aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105ad:	8b 40 2c             	mov    0x2c(%eax),%eax
c01105b0:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01105b5:	74 16                	je     c01105cd <dev_gettype+0x35>
c01105b7:	68 a0 7d 11 c0       	push   $0xc0117da0
c01105bc:	68 d3 7d 11 c0       	push   $0xc0117dd3
c01105c1:	6a 53                	push   $0x53
c01105c3:	68 e8 7d 11 c0       	push   $0xc0117de8
c01105c8:	e8 18 ff fe ff       	call   c01004e5 <__panic>
c01105cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c01105d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01105d6:	8b 00                	mov    (%eax),%eax
c01105d8:	85 c0                	test   %eax,%eax
c01105da:	74 07                	je     c01105e3 <dev_gettype+0x4b>
c01105dc:	ba 00 50 00 00       	mov    $0x5000,%edx
c01105e1:	eb 05                	jmp    c01105e8 <dev_gettype+0x50>
c01105e3:	ba 00 40 00 00       	mov    $0x4000,%edx
c01105e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105eb:	89 10                	mov    %edx,(%eax)
    return 0;
c01105ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01105f2:	c9                   	leave  
c01105f3:	c3                   	ret    

c01105f4 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c01105f4:	55                   	push   %ebp
c01105f5:	89 e5                	mov    %esp,%ebp
c01105f7:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c01105fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01105fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110600:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110604:	74 0d                	je     c0110613 <dev_tryseek+0x1f>
c0110606:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110609:	8b 40 2c             	mov    0x2c(%eax),%eax
c011060c:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110611:	74 16                	je     c0110629 <dev_tryseek+0x35>
c0110613:	68 a0 7d 11 c0       	push   $0xc0117da0
c0110618:	68 d3 7d 11 c0       	push   $0xc0117dd3
c011061d:	6a 5f                	push   $0x5f
c011061f:	68 e8 7d 11 c0       	push   $0xc0117de8
c0110624:	e8 bc fe fe ff       	call   c01004e5 <__panic>
c0110629:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011062c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c011062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110632:	8b 00                	mov    (%eax),%eax
c0110634:	85 c0                	test   %eax,%eax
c0110636:	74 38                	je     c0110670 <dev_tryseek+0x7c>
        if ((pos % dev->d_blocksize) == 0) {
c0110638:	8b 45 0c             	mov    0xc(%ebp),%eax
c011063b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011063e:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110641:	ba 00 00 00 00       	mov    $0x0,%edx
c0110646:	f7 f1                	div    %ecx
c0110648:	89 d0                	mov    %edx,%eax
c011064a:	85 c0                	test   %eax,%eax
c011064c:	75 22                	jne    c0110670 <dev_tryseek+0x7c>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c011064e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110652:	78 1c                	js     c0110670 <dev_tryseek+0x7c>
c0110654:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110657:	8b 10                	mov    (%eax),%edx
c0110659:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011065c:	8b 40 04             	mov    0x4(%eax),%eax
c011065f:	0f af d0             	imul   %eax,%edx
c0110662:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110665:	39 c2                	cmp    %eax,%edx
c0110667:	76 07                	jbe    c0110670 <dev_tryseek+0x7c>
                return 0;
c0110669:	b8 00 00 00 00       	mov    $0x0,%eax
c011066e:	eb 05                	jmp    c0110675 <dev_tryseek+0x81>
            }
        }
    }
    return -E_INVAL;
c0110670:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110675:	c9                   	leave  
c0110676:	c3                   	ret    

c0110677 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110677:	55                   	push   %ebp
c0110678:	89 e5                	mov    %esp,%ebp
c011067a:	83 ec 08             	sub    $0x8,%esp
    if (*path != '\0') {
c011067d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110680:	0f b6 00             	movzbl (%eax),%eax
c0110683:	84 c0                	test   %al,%al
c0110685:	74 07                	je     c011068e <dev_lookup+0x17>
        return -E_NOENT;
c0110687:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c011068c:	eb 1b                	jmp    c01106a9 <dev_lookup+0x32>
    }
    vop_ref_inc(node);
c011068e:	83 ec 0c             	sub    $0xc,%esp
c0110691:	ff 75 08             	pushl  0x8(%ebp)
c0110694:	e8 8d ef ff ff       	call   c010f626 <inode_ref_inc>
c0110699:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c011069c:	8b 45 10             	mov    0x10(%ebp),%eax
c011069f:	8b 55 08             	mov    0x8(%ebp),%edx
c01106a2:	89 10                	mov    %edx,(%eax)
    return 0;
c01106a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01106a9:	c9                   	leave  
c01106aa:	c3                   	ret    

c01106ab <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c01106ab:	55                   	push   %ebp
c01106ac:	89 e5                	mov    %esp,%ebp
c01106ae:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c01106b1:	e8 57 f6 ff ff       	call   c010fd0d <dev_init_stdin>
    init_device(stdout);
c01106b6:	e8 a8 fb ff ff       	call   c0110263 <dev_init_stdout>
    init_device(disk0);
c01106bb:	e8 3b fa ff ff       	call   c01100fb <dev_init_disk0>
}
c01106c0:	90                   	nop
c01106c1:	c9                   	leave  
c01106c2:	c3                   	ret    

c01106c3 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c01106c3:	55                   	push   %ebp
c01106c4:	89 e5                	mov    %esp,%ebp
c01106c6:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c01106c9:	83 ec 0c             	sub    $0xc,%esp
c01106cc:	68 34 12 00 00       	push   $0x1234
c01106d1:	e8 85 ee ff ff       	call   c010f55b <__alloc_inode>
c01106d6:	83 c4 10             	add    $0x10,%esp
c01106d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106e0:	74 15                	je     c01106f7 <dev_create_inode+0x34>
        vop_init(node, &dev_node_ops, NULL);
c01106e2:	83 ec 04             	sub    $0x4,%esp
c01106e5:	6a 00                	push   $0x0
c01106e7:	68 60 7e 11 c0       	push   $0xc0117e60
c01106ec:	ff 75 f4             	pushl  -0xc(%ebp)
c01106ef:	e8 91 ee ff ff       	call   c010f585 <inode_init>
c01106f4:	83 c4 10             	add    $0x10,%esp
    }
    return node;
c01106f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01106fa:	c9                   	leave  
c01106fb:	c3                   	ret    

c01106fc <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c01106fc:	55                   	push   %ebp
c01106fd:	89 e5                	mov    %esp,%ebp
c01106ff:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0110702:	83 ec 0c             	sub    $0xc,%esp
c0110705:	68 a0 7e 11 c0       	push   $0xc0117ea0
c011070a:	e8 50 28 00 00       	call   c0112f5f <sfs_mount>
c011070f:	83 c4 10             	add    $0x10,%esp
c0110712:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110715:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110719:	74 14                	je     c011072f <sfs_init+0x33>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c011071b:	ff 75 f4             	pushl  -0xc(%ebp)
c011071e:	68 a6 7e 11 c0       	push   $0xc0117ea6
c0110723:	6a 10                	push   $0x10
c0110725:	68 c3 7e 11 c0       	push   $0xc0117ec3
c011072a:	e8 b6 fd fe ff       	call   c01004e5 <__panic>
    }
}
c011072f:	90                   	nop
c0110730:	c9                   	leave  
c0110731:	c3                   	ret    

c0110732 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0110732:	55                   	push   %ebp
c0110733:	89 e5                	mov    %esp,%ebp
c0110735:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->fs_sem));
c0110738:	8b 45 08             	mov    0x8(%ebp),%eax
c011073b:	83 c0 3c             	add    $0x3c,%eax
c011073e:	83 ec 0c             	sub    $0xc,%esp
c0110741:	50                   	push   %eax
c0110742:	e8 84 8f ff ff       	call   c01096cb <down>
c0110747:	83 c4 10             	add    $0x10,%esp
}
c011074a:	90                   	nop
c011074b:	c9                   	leave  
c011074c:	c3                   	ret    

c011074d <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c011074d:	55                   	push   %ebp
c011074e:	89 e5                	mov    %esp,%ebp
c0110750:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->io_sem));
c0110753:	8b 45 08             	mov    0x8(%ebp),%eax
c0110756:	83 c0 48             	add    $0x48,%eax
c0110759:	83 ec 0c             	sub    $0xc,%esp
c011075c:	50                   	push   %eax
c011075d:	e8 69 8f ff ff       	call   c01096cb <down>
c0110762:	83 c4 10             	add    $0x10,%esp
}
c0110765:	90                   	nop
c0110766:	c9                   	leave  
c0110767:	c3                   	ret    

c0110768 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0110768:	55                   	push   %ebp
c0110769:	89 e5                	mov    %esp,%ebp
c011076b:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->fs_sem));
c011076e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110771:	83 c0 3c             	add    $0x3c,%eax
c0110774:	83 ec 0c             	sub    $0xc,%esp
c0110777:	50                   	push   %eax
c0110778:	e8 32 8f ff ff       	call   c01096af <up>
c011077d:	83 c4 10             	add    $0x10,%esp
}
c0110780:	90                   	nop
c0110781:	c9                   	leave  
c0110782:	c3                   	ret    

c0110783 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0110783:	55                   	push   %ebp
c0110784:	89 e5                	mov    %esp,%ebp
c0110786:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->io_sem));
c0110789:	8b 45 08             	mov    0x8(%ebp),%eax
c011078c:	83 c0 48             	add    $0x48,%eax
c011078f:	83 ec 0c             	sub    $0xc,%esp
c0110792:	50                   	push   %eax
c0110793:	e8 17 8f ff ff       	call   c01096af <up>
c0110798:	83 c4 10             	add    $0x10,%esp
}
c011079b:	90                   	nop
c011079c:	c9                   	leave  
c011079d:	c3                   	ret    

c011079e <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c011079e:	55                   	push   %ebp
c011079f:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01107a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01107a4:	8b 40 30             	mov    0x30(%eax),%eax
}
c01107a7:	5d                   	pop    %ebp
c01107a8:	c3                   	ret    

c01107a9 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c01107a9:	55                   	push   %ebp
c01107aa:	89 e5                	mov    %esp,%ebp
c01107ac:	83 ec 08             	sub    $0x8,%esp
    down(&(sin->sem));
c01107af:	8b 45 08             	mov    0x8(%ebp),%eax
c01107b2:	83 c0 10             	add    $0x10,%eax
c01107b5:	83 ec 0c             	sub    $0xc,%esp
c01107b8:	50                   	push   %eax
c01107b9:	e8 0d 8f ff ff       	call   c01096cb <down>
c01107be:	83 c4 10             	add    $0x10,%esp
}
c01107c1:	90                   	nop
c01107c2:	c9                   	leave  
c01107c3:	c3                   	ret    

c01107c4 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c01107c4:	55                   	push   %ebp
c01107c5:	89 e5                	mov    %esp,%ebp
c01107c7:	83 ec 08             	sub    $0x8,%esp
    up(&(sin->sem));
c01107ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01107cd:	83 c0 10             	add    $0x10,%eax
c01107d0:	83 ec 0c             	sub    $0xc,%esp
c01107d3:	50                   	push   %eax
c01107d4:	e8 d6 8e ff ff       	call   c01096af <up>
c01107d9:	83 c4 10             	add    $0x10,%esp
}
c01107dc:	90                   	nop
c01107dd:	c9                   	leave  
c01107de:	c3                   	ret    

c01107df <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c01107df:	55                   	push   %ebp
c01107e0:	89 e5                	mov    %esp,%ebp
c01107e2:	83 ec 18             	sub    $0x18,%esp
c01107e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01107e8:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c01107ec:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01107f0:	83 f8 01             	cmp    $0x1,%eax
c01107f3:	74 0c                	je     c0110801 <sfs_get_ops+0x22>
c01107f5:	83 f8 02             	cmp    $0x2,%eax
c01107f8:	75 0e                	jne    c0110808 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c01107fa:	b8 e0 7e 11 c0       	mov    $0xc0117ee0,%eax
c01107ff:	eb 1d                	jmp    c011081e <sfs_get_ops+0x3f>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0110801:	b8 20 7f 11 c0       	mov    $0xc0117f20,%eax
c0110806:	eb 16                	jmp    c011081e <sfs_get_ops+0x3f>
    }
    panic("invalid file type %d.\n", type);
c0110808:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011080c:	50                   	push   %eax
c011080d:	68 60 7f 11 c0       	push   $0xc0117f60
c0110812:	6a 2e                	push   $0x2e
c0110814:	68 77 7f 11 c0       	push   $0xc0117f77
c0110819:	e8 c7 fc fe ff       	call   c01004e5 <__panic>
}
c011081e:	c9                   	leave  
c011081f:	c3                   	ret    

c0110820 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0110820:	55                   	push   %ebp
c0110821:	89 e5                	mov    %esp,%ebp
c0110823:	53                   	push   %ebx
c0110824:	83 ec 04             	sub    $0x4,%esp
    return sfs->hash_list + sin_hashfn(ino);
c0110827:	8b 45 08             	mov    0x8(%ebp),%eax
c011082a:	8b 58 68             	mov    0x68(%eax),%ebx
c011082d:	83 ec 08             	sub    $0x8,%esp
c0110830:	6a 0a                	push   $0xa
c0110832:	ff 75 0c             	pushl  0xc(%ebp)
c0110835:	e8 b1 39 00 00       	call   c01141eb <hash32>
c011083a:	83 c4 10             	add    $0x10,%esp
c011083d:	c1 e0 03             	shl    $0x3,%eax
c0110840:	01 d8                	add    %ebx,%eax
}
c0110842:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0110845:	c9                   	leave  
c0110846:	c3                   	ret    

c0110847 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0110847:	55                   	push   %ebp
c0110848:	89 e5                	mov    %esp,%ebp
c011084a:	53                   	push   %ebx
c011084b:	83 ec 44             	sub    $0x44,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c011084e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110851:	83 c0 1c             	add    $0x1c,%eax
c0110854:	8b 55 08             	mov    0x8(%ebp),%edx
c0110857:	83 c2 60             	add    $0x60,%edx
c011085a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011085d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0110860:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110863:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0110866:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0110869:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011086c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011086f:	8b 40 04             	mov    0x4(%eax),%eax
c0110872:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0110875:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0110878:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011087b:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011087e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0110881:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0110884:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0110887:	89 10                	mov    %edx,(%eax)
c0110889:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011088c:	8b 10                	mov    (%eax),%edx
c011088e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0110891:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0110894:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110897:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011089a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011089d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01108a0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01108a3:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c01108a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108a8:	8d 58 24             	lea    0x24(%eax),%ebx
c01108ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108ae:	8b 40 04             	mov    0x4(%eax),%eax
c01108b1:	83 ec 08             	sub    $0x8,%esp
c01108b4:	50                   	push   %eax
c01108b5:	ff 75 08             	pushl  0x8(%ebp)
c01108b8:	e8 63 ff ff ff       	call   c0110820 <sfs_hash_list>
c01108bd:	83 c4 10             	add    $0x10,%esp
c01108c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01108c3:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c01108c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01108cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01108d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108d5:	8b 40 04             	mov    0x4(%eax),%eax
c01108d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01108db:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01108de:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01108e1:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01108e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01108e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01108ea:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01108ed:	89 10                	mov    %edx,(%eax)
c01108ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01108f2:	8b 10                	mov    (%eax),%edx
c01108f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01108f7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01108fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01108fd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0110900:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0110903:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110906:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0110909:	89 10                	mov    %edx,(%eax)
}
c011090b:	90                   	nop
c011090c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c011090f:	c9                   	leave  
c0110910:	c3                   	ret    

c0110911 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0110911:	55                   	push   %ebp
c0110912:	89 e5                	mov    %esp,%ebp
c0110914:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0110917:	8b 45 08             	mov    0x8(%ebp),%eax
c011091a:	83 c0 1c             	add    $0x1c,%eax
c011091d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0110920:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110923:	8b 40 04             	mov    0x4(%eax),%eax
c0110926:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0110929:	8b 12                	mov    (%edx),%edx
c011092b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011092e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0110931:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110934:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110937:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c011093a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011093d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110940:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c0110942:	8b 45 08             	mov    0x8(%ebp),%eax
c0110945:	83 c0 24             	add    $0x24,%eax
c0110948:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011094b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011094e:	8b 40 04             	mov    0x4(%eax),%eax
c0110951:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0110954:	8b 12                	mov    (%edx),%edx
c0110956:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0110959:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011095c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011095f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110962:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0110965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110968:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011096b:	89 10                	mov    %edx,(%eax)
}
c011096d:	90                   	nop
c011096e:	c9                   	leave  
c011096f:	c3                   	ret    

c0110970 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c0110970:	55                   	push   %ebp
c0110971:	89 e5                	mov    %esp,%ebp
c0110973:	83 ec 08             	sub    $0x8,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c0110976:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011097a:	74 2a                	je     c01109a6 <sfs_block_inuse+0x36>
c011097c:	8b 45 08             	mov    0x8(%ebp),%eax
c011097f:	8b 40 04             	mov    0x4(%eax),%eax
c0110982:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110985:	76 1f                	jbe    c01109a6 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0110987:	8b 45 08             	mov    0x8(%ebp),%eax
c011098a:	8b 40 30             	mov    0x30(%eax),%eax
c011098d:	83 ec 08             	sub    $0x8,%esp
c0110990:	ff 75 0c             	pushl  0xc(%ebp)
c0110993:	50                   	push   %eax
c0110994:	e8 a6 28 00 00       	call   c011323f <bitmap_test>
c0110999:	83 c4 10             	add    $0x10,%esp
c011099c:	85 c0                	test   %eax,%eax
c011099e:	0f 94 c0             	sete   %al
c01109a1:	0f b6 c0             	movzbl %al,%eax
c01109a4:	eb 1e                	jmp    c01109c4 <sfs_block_inuse+0x54>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c01109a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01109a9:	8b 40 04             	mov    0x4(%eax),%eax
c01109ac:	83 ec 0c             	sub    $0xc,%esp
c01109af:	ff 75 0c             	pushl  0xc(%ebp)
c01109b2:	50                   	push   %eax
c01109b3:	68 90 7f 11 c0       	push   $0xc0117f90
c01109b8:	6a 53                	push   $0x53
c01109ba:	68 77 7f 11 c0       	push   $0xc0117f77
c01109bf:	e8 21 fb fe ff       	call   c01004e5 <__panic>
}
c01109c4:	c9                   	leave  
c01109c5:	c3                   	ret    

c01109c6 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c01109c6:	55                   	push   %ebp
c01109c7:	89 e5                	mov    %esp,%ebp
c01109c9:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c01109cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01109cf:	8b 40 30             	mov    0x30(%eax),%eax
c01109d2:	83 ec 08             	sub    $0x8,%esp
c01109d5:	ff 75 0c             	pushl  0xc(%ebp)
c01109d8:	50                   	push   %eax
c01109d9:	e8 1a 27 00 00       	call   c01130f8 <bitmap_alloc>
c01109de:	83 c4 10             	add    $0x10,%esp
c01109e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109e8:	74 05                	je     c01109ef <sfs_block_alloc+0x29>
        return ret;
c01109ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109ed:	eb 7d                	jmp    c0110a6c <sfs_block_alloc+0xa6>
    }
    assert(sfs->super.unused_blocks > 0);
c01109ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01109f2:	8b 40 08             	mov    0x8(%eax),%eax
c01109f5:	85 c0                	test   %eax,%eax
c01109f7:	75 16                	jne    c0110a0f <sfs_block_alloc+0x49>
c01109f9:	68 c2 7f 11 c0       	push   $0xc0117fc2
c01109fe:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110a03:	6a 5f                	push   $0x5f
c0110a05:	68 77 7f 11 c0       	push   $0xc0117f77
c0110a0a:	e8 d6 fa fe ff       	call   c01004e5 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0110a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a12:	8b 40 08             	mov    0x8(%eax),%eax
c0110a15:	8d 50 ff             	lea    -0x1(%eax),%edx
c0110a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a1b:	89 50 08             	mov    %edx,0x8(%eax)
c0110a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a21:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c0110a28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a2b:	8b 00                	mov    (%eax),%eax
c0110a2d:	83 ec 08             	sub    $0x8,%esp
c0110a30:	50                   	push   %eax
c0110a31:	ff 75 08             	pushl  0x8(%ebp)
c0110a34:	e8 37 ff ff ff       	call   c0110970 <sfs_block_inuse>
c0110a39:	83 c4 10             	add    $0x10,%esp
c0110a3c:	85 c0                	test   %eax,%eax
c0110a3e:	75 16                	jne    c0110a56 <sfs_block_alloc+0x90>
c0110a40:	68 f4 7f 11 c0       	push   $0xc0117ff4
c0110a45:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110a4a:	6a 61                	push   $0x61
c0110a4c:	68 77 7f 11 c0       	push   $0xc0117f77
c0110a51:	e8 8f fa fe ff       	call   c01004e5 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c0110a56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a59:	8b 00                	mov    (%eax),%eax
c0110a5b:	83 ec 04             	sub    $0x4,%esp
c0110a5e:	6a 01                	push   $0x1
c0110a60:	50                   	push   %eax
c0110a61:	ff 75 08             	pushl  0x8(%ebp)
c0110a64:	e8 d5 2b 00 00       	call   c011363e <sfs_clear_block>
c0110a69:	83 c4 10             	add    $0x10,%esp
}
c0110a6c:	c9                   	leave  
c0110a6d:	c3                   	ret    

c0110a6e <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c0110a6e:	55                   	push   %ebp
c0110a6f:	89 e5                	mov    %esp,%ebp
c0110a71:	83 ec 08             	sub    $0x8,%esp
    assert(sfs_block_inuse(sfs, ino));
c0110a74:	83 ec 08             	sub    $0x8,%esp
c0110a77:	ff 75 0c             	pushl  0xc(%ebp)
c0110a7a:	ff 75 08             	pushl  0x8(%ebp)
c0110a7d:	e8 ee fe ff ff       	call   c0110970 <sfs_block_inuse>
c0110a82:	83 c4 10             	add    $0x10,%esp
c0110a85:	85 c0                	test   %eax,%eax
c0110a87:	75 16                	jne    c0110a9f <sfs_block_free+0x31>
c0110a89:	68 15 80 11 c0       	push   $0xc0118015
c0110a8e:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110a93:	6a 6a                	push   $0x6a
c0110a95:	68 77 7f 11 c0       	push   $0xc0117f77
c0110a9a:	e8 46 fa fe ff       	call   c01004e5 <__panic>
    bitmap_free(sfs->freemap, ino);
c0110a9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110aa2:	8b 40 30             	mov    0x30(%eax),%eax
c0110aa5:	83 ec 08             	sub    $0x8,%esp
c0110aa8:	ff 75 0c             	pushl  0xc(%ebp)
c0110aab:	50                   	push   %eax
c0110aac:	e8 b6 27 00 00       	call   c0113267 <bitmap_free>
c0110ab1:	83 c4 10             	add    $0x10,%esp
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0110ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ab7:	8b 40 08             	mov    0x8(%eax),%eax
c0110aba:	8d 50 01             	lea    0x1(%eax),%edx
c0110abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ac0:	89 50 08             	mov    %edx,0x8(%eax)
c0110ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ac6:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0110acd:	90                   	nop
c0110ace:	c9                   	leave  
c0110acf:	c3                   	ret    

c0110ad0 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0110ad0:	55                   	push   %ebp
c0110ad1:	89 e5                	mov    %esp,%ebp
c0110ad3:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0110ad6:	83 ec 0c             	sub    $0xc,%esp
c0110ad9:	68 35 12 00 00       	push   $0x1235
c0110ade:	e8 78 ea ff ff       	call   c010f55b <__alloc_inode>
c0110ae3:	83 c4 10             	add    $0x10,%esp
c0110ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110ae9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110aed:	0f 84 a5 00 00 00    	je     c0110b98 <sfs_create_inode+0xc8>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0110af3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110af6:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0110afa:	0f b7 c0             	movzwl %ax,%eax
c0110afd:	83 ec 0c             	sub    $0xc,%esp
c0110b00:	50                   	push   %eax
c0110b01:	e8 d9 fc ff ff       	call   c01107df <sfs_get_ops>
c0110b06:	83 c4 10             	add    $0x10,%esp
c0110b09:	83 ec 04             	sub    $0x4,%esp
c0110b0c:	ff 75 08             	pushl  0x8(%ebp)
c0110b0f:	50                   	push   %eax
c0110b10:	ff 75 f4             	pushl  -0xc(%ebp)
c0110b13:	e8 6d ea ff ff       	call   c010f585 <inode_init>
c0110b18:	83 c4 10             	add    $0x10,%esp
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110b21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b25:	74 0d                	je     c0110b34 <sfs_create_inode+0x64>
c0110b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b2a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110b2d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110b32:	74 16                	je     c0110b4a <sfs_create_inode+0x7a>
c0110b34:	68 30 80 11 c0       	push   $0xc0118030
c0110b39:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110b3e:	6a 77                	push   $0x77
c0110b40:	68 77 7f 11 c0       	push   $0xc0117f77
c0110b45:	e8 9b f9 fe ff       	call   c01004e5 <__panic>
c0110b4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0110b50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b53:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110b56:	89 10                	mov    %edx,(%eax)
c0110b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b5b:	8b 55 10             	mov    0x10(%ebp),%edx
c0110b5e:	89 50 04             	mov    %edx,0x4(%eax)
c0110b61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0110b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b6e:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c0110b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b78:	83 c0 10             	add    $0x10,%eax
c0110b7b:	83 ec 08             	sub    $0x8,%esp
c0110b7e:	6a 01                	push   $0x1
c0110b80:	50                   	push   %eax
c0110b81:	e8 bc 89 ff ff       	call   c0109542 <sem_init>
c0110b86:	83 c4 10             	add    $0x10,%esp
        *node_store = node;
c0110b89:	8b 45 14             	mov    0x14(%ebp),%eax
c0110b8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110b8f:	89 10                	mov    %edx,(%eax)
        return 0;
c0110b91:	b8 00 00 00 00       	mov    $0x0,%eax
c0110b96:	eb 05                	jmp    c0110b9d <sfs_create_inode+0xcd>
    }
    return -E_NO_MEM;
c0110b98:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0110b9d:	c9                   	leave  
c0110b9e:	c3                   	ret    

c0110b9f <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0110b9f:	55                   	push   %ebp
c0110ba0:	89 e5                	mov    %esp,%ebp
c0110ba2:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0110ba5:	83 ec 08             	sub    $0x8,%esp
c0110ba8:	ff 75 0c             	pushl  0xc(%ebp)
c0110bab:	ff 75 08             	pushl  0x8(%ebp)
c0110bae:	e8 6d fc ff ff       	call   c0110820 <sfs_hash_list>
c0110bb3:	83 c4 10             	add    $0x10,%esp
c0110bb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110bb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0110bbf:	eb 41                	jmp    c0110c02 <lookup_sfs_nolock+0x63>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0110bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bc4:	83 e8 24             	sub    $0x24,%eax
c0110bc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0110bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bcd:	8b 40 04             	mov    0x4(%eax),%eax
c0110bd0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110bd3:	75 2d                	jne    c0110c02 <lookup_sfs_nolock+0x63>
            node = info2node(sin, sfs_inode);
c0110bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0110bdb:	83 ec 0c             	sub    $0xc,%esp
c0110bde:	ff 75 e8             	pushl  -0x18(%ebp)
c0110be1:	e8 40 ea ff ff       	call   c010f626 <inode_ref_inc>
c0110be6:	83 c4 10             	add    $0x10,%esp
c0110be9:	83 f8 01             	cmp    $0x1,%eax
c0110bec:	75 0f                	jne    c0110bfd <lookup_sfs_nolock+0x5e>
                sin->reclaim_count ++;
c0110bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bf1:	8b 40 0c             	mov    0xc(%eax),%eax
c0110bf4:	8d 50 01             	lea    0x1(%eax),%edx
c0110bf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bfa:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c0110bfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110c00:	eb 1c                	jmp    c0110c1e <lookup_sfs_nolock+0x7f>
c0110c02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0110c08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c0b:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c0110c0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110c17:	75 a8                	jne    c0110bc1 <lookup_sfs_nolock+0x22>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c0110c19:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c1e:	c9                   	leave  
c0110c1f:	c3                   	ret    

c0110c20 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0110c20:	55                   	push   %ebp
c0110c21:	89 e5                	mov    %esp,%ebp
c0110c23:	83 ec 18             	sub    $0x18,%esp
    lock_sfs_fs(sfs);
c0110c26:	83 ec 0c             	sub    $0xc,%esp
c0110c29:	ff 75 08             	pushl  0x8(%ebp)
c0110c2c:	e8 01 fb ff ff       	call   c0110732 <lock_sfs_fs>
c0110c31:	83 c4 10             	add    $0x10,%esp
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0110c34:	83 ec 08             	sub    $0x8,%esp
c0110c37:	ff 75 10             	pushl  0x10(%ebp)
c0110c3a:	ff 75 08             	pushl  0x8(%ebp)
c0110c3d:	e8 5d ff ff ff       	call   c0110b9f <lookup_sfs_nolock>
c0110c42:	83 c4 10             	add    $0x10,%esp
c0110c45:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110c48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110c4b:	85 c0                	test   %eax,%eax
c0110c4d:	0f 85 fd 00 00 00    	jne    c0110d50 <sfs_load_inode+0x130>
        goto out_unlock;
    }

    int ret = -E_NO_MEM;
c0110c53:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c0110c5a:	83 ec 0c             	sub    $0xc,%esp
c0110c5d:	6a 40                	push   $0x40
c0110c5f:	e8 ec 4b ff ff       	call   c0105850 <kmalloc>
c0110c64:	83 c4 10             	add    $0x10,%esp
c0110c67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110c6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110c6e:	0f 84 0e 01 00 00    	je     c0110d82 <sfs_load_inode+0x162>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
c0110c74:	83 ec 08             	sub    $0x8,%esp
c0110c77:	ff 75 10             	pushl  0x10(%ebp)
c0110c7a:	ff 75 08             	pushl  0x8(%ebp)
c0110c7d:	e8 ee fc ff ff       	call   c0110970 <sfs_block_inuse>
c0110c82:	83 c4 10             	add    $0x10,%esp
c0110c85:	85 c0                	test   %eax,%eax
c0110c87:	75 19                	jne    c0110ca2 <sfs_load_inode+0x82>
c0110c89:	68 15 80 11 c0       	push   $0xc0118015
c0110c8e:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110c93:	68 a8 00 00 00       	push   $0xa8
c0110c98:	68 77 7f 11 c0       	push   $0xc0117f77
c0110c9d:	e8 43 f8 fe ff       	call   c01004e5 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0110ca2:	83 ec 0c             	sub    $0xc,%esp
c0110ca5:	6a 00                	push   $0x0
c0110ca7:	ff 75 10             	pushl  0x10(%ebp)
c0110caa:	6a 40                	push   $0x40
c0110cac:	ff 75 f0             	pushl  -0x10(%ebp)
c0110caf:	ff 75 08             	pushl  0x8(%ebp)
c0110cb2:	e8 6b 27 00 00       	call   c0113422 <sfs_rbuf>
c0110cb7:	83 c4 20             	add    $0x20,%esp
c0110cba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110cbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110cc1:	0f 85 a7 00 00 00    	jne    c0110d6e <sfs_load_inode+0x14e>
        goto failed_cleanup_din;
    }

    assert(din->nlinks != 0);
c0110cc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cca:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0110cce:	66 85 c0             	test   %ax,%ax
c0110cd1:	75 19                	jne    c0110cec <sfs_load_inode+0xcc>
c0110cd3:	68 66 80 11 c0       	push   $0xc0118066
c0110cd8:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110cdd:	68 ad 00 00 00       	push   $0xad
c0110ce2:	68 77 7f 11 c0       	push   $0xc0117f77
c0110ce7:	e8 f9 f7 fe ff       	call   c01004e5 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c0110cec:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110cef:	50                   	push   %eax
c0110cf0:	ff 75 10             	pushl  0x10(%ebp)
c0110cf3:	ff 75 f0             	pushl  -0x10(%ebp)
c0110cf6:	ff 75 08             	pushl  0x8(%ebp)
c0110cf9:	e8 d2 fd ff ff       	call   c0110ad0 <sfs_create_inode>
c0110cfe:	83 c4 10             	add    $0x10,%esp
c0110d01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d08:	75 67                	jne    c0110d71 <sfs_load_inode+0x151>
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0110d0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110d0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110d10:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110d14:	74 0d                	je     c0110d23 <sfs_load_inode+0x103>
c0110d16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d19:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110d1c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110d21:	74 19                	je     c0110d3c <sfs_load_inode+0x11c>
c0110d23:	68 30 80 11 c0       	push   $0xc0118030
c0110d28:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110d2d:	68 b1 00 00 00       	push   $0xb1
c0110d32:	68 77 7f 11 c0       	push   $0xc0117f77
c0110d37:	e8 a9 f7 fe ff       	call   c01004e5 <__panic>
c0110d3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d3f:	83 ec 08             	sub    $0x8,%esp
c0110d42:	50                   	push   %eax
c0110d43:	ff 75 08             	pushl  0x8(%ebp)
c0110d46:	e8 fc fa ff ff       	call   c0110847 <sfs_set_links>
c0110d4b:	83 c4 10             	add    $0x10,%esp
c0110d4e:	eb 01                	jmp    c0110d51 <sfs_load_inode+0x131>
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
    lock_sfs_fs(sfs);
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
        goto out_unlock;
c0110d50:	90                   	nop
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));

out_unlock:
    unlock_sfs_fs(sfs);
c0110d51:	83 ec 0c             	sub    $0xc,%esp
c0110d54:	ff 75 08             	pushl  0x8(%ebp)
c0110d57:	e8 0c fa ff ff       	call   c0110768 <unlock_sfs_fs>
c0110d5c:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c0110d5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110d62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d65:	89 10                	mov    %edx,(%eax)
    return 0;
c0110d67:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d6c:	eb 26                	jmp    c0110d94 <sfs_load_inode+0x174>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
        goto failed_cleanup_din;
c0110d6e:	90                   	nop
c0110d6f:	eb 01                	jmp    c0110d72 <sfs_load_inode+0x152>
    }

    assert(din->nlinks != 0);
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
        goto failed_cleanup_din;
c0110d71:	90                   	nop
    unlock_sfs_fs(sfs);
    *node_store = node;
    return 0;

failed_cleanup_din:
    kfree(din);
c0110d72:	83 ec 0c             	sub    $0xc,%esp
c0110d75:	ff 75 f0             	pushl  -0x10(%ebp)
c0110d78:	e8 eb 4a ff ff       	call   c0105868 <kfree>
c0110d7d:	83 c4 10             	add    $0x10,%esp
c0110d80:	eb 01                	jmp    c0110d83 <sfs_load_inode+0x163>
    }

    int ret = -E_NO_MEM;
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
        goto failed_unlock;
c0110d82:	90                   	nop
    return 0;

failed_cleanup_din:
    kfree(din);
failed_unlock:
    unlock_sfs_fs(sfs);
c0110d83:	83 ec 0c             	sub    $0xc,%esp
c0110d86:	ff 75 08             	pushl  0x8(%ebp)
c0110d89:	e8 da f9 ff ff       	call   c0110768 <unlock_sfs_fs>
c0110d8e:	83 c4 10             	add    $0x10,%esp
    return ret;
c0110d91:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110d94:	c9                   	leave  
c0110d95:	c3                   	ret    

c0110d96 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0110d96:	55                   	push   %ebp
c0110d97:	89 e5                	mov    %esp,%ebp
c0110d99:	83 ec 18             	sub    $0x18,%esp
    assert(index < SFS_BLK_NENTRY);
c0110d9c:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0110da3:	76 19                	jbe    c0110dbe <sfs_bmap_get_sub_nolock+0x28>
c0110da5:	68 77 80 11 c0       	push   $0xc0118077
c0110daa:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110daf:	68 ca 00 00 00       	push   $0xca
c0110db4:	68 77 7f 11 c0       	push   $0xc0117f77
c0110db9:	e8 27 f7 fe ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0110dbe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0110dc5:	8b 45 10             	mov    0x10(%ebp),%eax
c0110dc8:	c1 e0 02             	shl    $0x2,%eax
c0110dcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0110dce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110dd1:	8b 00                	mov    (%eax),%eax
c0110dd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110dd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110dd9:	85 c0                	test   %eax,%eax
c0110ddb:	74 3f                	je     c0110e1c <sfs_bmap_get_sub_nolock+0x86>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0110ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110de0:	83 ec 0c             	sub    $0xc,%esp
c0110de3:	ff 75 f0             	pushl  -0x10(%ebp)
c0110de6:	50                   	push   %eax
c0110de7:	6a 04                	push   $0x4
c0110de9:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110dec:	50                   	push   %eax
c0110ded:	ff 75 08             	pushl  0x8(%ebp)
c0110df0:	e8 2d 26 00 00       	call   c0113422 <sfs_rbuf>
c0110df5:	83 c4 20             	add    $0x20,%esp
c0110df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110dfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110dff:	74 08                	je     c0110e09 <sfs_bmap_get_sub_nolock+0x73>
            return ret;
c0110e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e04:	e9 d5 00 00 00       	jmp    c0110ede <sfs_bmap_get_sub_nolock+0x148>
        }
        if (ino != 0 || !create) {
c0110e09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e0c:	85 c0                	test   %eax,%eax
c0110e0e:	0f 85 85 00 00 00    	jne    c0110e99 <sfs_bmap_get_sub_nolock+0x103>
c0110e14:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0110e18:	74 7f                	je     c0110e99 <sfs_bmap_get_sub_nolock+0x103>
c0110e1a:	eb 29                	jmp    c0110e45 <sfs_bmap_get_sub_nolock+0xaf>
            goto out;
        }
    }
    else {
        if (!create) {
c0110e1c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0110e20:	74 76                	je     c0110e98 <sfs_bmap_get_sub_nolock+0x102>
            goto out;
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0110e22:	83 ec 08             	sub    $0x8,%esp
c0110e25:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0110e28:	50                   	push   %eax
c0110e29:	ff 75 08             	pushl  0x8(%ebp)
c0110e2c:	e8 95 fb ff ff       	call   c01109c6 <sfs_block_alloc>
c0110e31:	83 c4 10             	add    $0x10,%esp
c0110e34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e3b:	74 08                	je     c0110e45 <sfs_bmap_get_sub_nolock+0xaf>
            return ret;
c0110e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e40:	e9 99 00 00 00       	jmp    c0110ede <sfs_bmap_get_sub_nolock+0x148>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0110e45:	83 ec 08             	sub    $0x8,%esp
c0110e48:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110e4b:	50                   	push   %eax
c0110e4c:	ff 75 08             	pushl  0x8(%ebp)
c0110e4f:	e8 72 fb ff ff       	call   c01109c6 <sfs_block_alloc>
c0110e54:	83 c4 10             	add    $0x10,%esp
c0110e57:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e5e:	75 5c                	jne    c0110ebc <sfs_bmap_get_sub_nolock+0x126>
        goto failed_cleanup;
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0110e60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e63:	83 ec 0c             	sub    $0xc,%esp
c0110e66:	ff 75 f0             	pushl  -0x10(%ebp)
c0110e69:	50                   	push   %eax
c0110e6a:	6a 04                	push   $0x4
c0110e6c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110e6f:	50                   	push   %eax
c0110e70:	ff 75 08             	pushl  0x8(%ebp)
c0110e73:	e8 47 26 00 00       	call   c01134bf <sfs_wbuf>
c0110e78:	83 c4 20             	add    $0x20,%esp
c0110e7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e82:	74 15                	je     c0110e99 <sfs_bmap_get_sub_nolock+0x103>
        sfs_block_free(sfs, ino);
c0110e84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110e87:	83 ec 08             	sub    $0x8,%esp
c0110e8a:	50                   	push   %eax
c0110e8b:	ff 75 08             	pushl  0x8(%ebp)
c0110e8e:	e8 db fb ff ff       	call   c0110a6e <sfs_block_free>
c0110e93:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c0110e96:	eb 25                	jmp    c0110ebd <sfs_bmap_get_sub_nolock+0x127>
            goto out;
        }
    }
    else {
        if (!create) {
            goto out;
c0110e98:	90                   	nop
        sfs_block_free(sfs, ino);
        goto failed_cleanup;
    }

out:
    if (ent != *entp) {
c0110e99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e9c:	8b 10                	mov    (%eax),%edx
c0110e9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ea1:	39 c2                	cmp    %eax,%edx
c0110ea3:	74 08                	je     c0110ead <sfs_bmap_get_sub_nolock+0x117>
        *entp = ent;
c0110ea5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110eab:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0110ead:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110eb0:	8b 45 18             	mov    0x18(%ebp),%eax
c0110eb3:	89 10                	mov    %edx,(%eax)
    return 0;
c0110eb5:	b8 00 00 00 00       	mov    $0x0,%eax
c0110eba:	eb 22                	jmp    c0110ede <sfs_bmap_get_sub_nolock+0x148>
            return ret;
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
        goto failed_cleanup;
c0110ebc:	90                   	nop
    }
    *ino_store = ino;
    return 0;

failed_cleanup:
    if (ent != *entp) {
c0110ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ec0:	8b 10                	mov    (%eax),%edx
c0110ec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ec5:	39 c2                	cmp    %eax,%edx
c0110ec7:	74 12                	je     c0110edb <sfs_bmap_get_sub_nolock+0x145>
        sfs_block_free(sfs, ent);
c0110ec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ecc:	83 ec 08             	sub    $0x8,%esp
c0110ecf:	50                   	push   %eax
c0110ed0:	ff 75 08             	pushl  0x8(%ebp)
c0110ed3:	e8 96 fb ff ff       	call   c0110a6e <sfs_block_free>
c0110ed8:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c0110edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110ede:	c9                   	leave  
c0110edf:	c3                   	ret    

c0110ee0 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0110ee0:	55                   	push   %ebp
c0110ee1:	89 e5                	mov    %esp,%ebp
c0110ee3:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0110ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ee9:	8b 00                	mov    (%eax),%eax
c0110eeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0110eee:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0110ef2:	77 61                	ja     c0110f55 <sfs_bmap_get_nolock+0x75>
        if ((ino = din->direct[index]) == 0 && create) {
c0110ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ef7:	8b 55 10             	mov    0x10(%ebp),%edx
c0110efa:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0110efe:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f04:	85 c0                	test   %eax,%eax
c0110f06:	0f 85 e8 00 00 00    	jne    c0110ff4 <sfs_bmap_get_nolock+0x114>
c0110f0c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0110f10:	0f 84 de 00 00 00    	je     c0110ff4 <sfs_bmap_get_nolock+0x114>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0110f16:	83 ec 08             	sub    $0x8,%esp
c0110f19:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110f1c:	50                   	push   %eax
c0110f1d:	ff 75 08             	pushl  0x8(%ebp)
c0110f20:	e8 a1 fa ff ff       	call   c01109c6 <sfs_block_alloc>
c0110f25:	83 c4 10             	add    $0x10,%esp
c0110f28:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110f2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110f2f:	74 08                	je     c0110f39 <sfs_bmap_get_nolock+0x59>
                return ret;
c0110f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f34:	e9 02 01 00 00       	jmp    c011103b <sfs_bmap_get_nolock+0x15b>
            }
            din->direct[index] = ino;
c0110f39:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0110f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f3f:	8b 55 10             	mov    0x10(%ebp),%edx
c0110f42:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0110f46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f49:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0110f50:	e9 9f 00 00 00       	jmp    c0110ff4 <sfs_bmap_get_nolock+0x114>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0110f55:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0110f59:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0110f60:	77 7b                	ja     c0110fdd <sfs_bmap_get_nolock+0xfd>
        ent = din->indirect;
c0110f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f65:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110f68:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0110f6b:	83 ec 0c             	sub    $0xc,%esp
c0110f6e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110f71:	50                   	push   %eax
c0110f72:	ff 75 14             	pushl  0x14(%ebp)
c0110f75:	ff 75 10             	pushl  0x10(%ebp)
c0110f78:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0110f7b:	50                   	push   %eax
c0110f7c:	ff 75 08             	pushl  0x8(%ebp)
c0110f7f:	e8 12 fe ff ff       	call   c0110d96 <sfs_bmap_get_sub_nolock>
c0110f84:	83 c4 20             	add    $0x20,%esp
c0110f87:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110f8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110f8e:	74 08                	je     c0110f98 <sfs_bmap_get_nolock+0xb8>
            return ret;
c0110f90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f93:	e9 a3 00 00 00       	jmp    c011103b <sfs_bmap_get_nolock+0x15b>
        }
        if (ent != din->indirect) {
c0110f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f9b:	8b 50 3c             	mov    0x3c(%eax),%edx
c0110f9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110fa1:	39 c2                	cmp    %eax,%edx
c0110fa3:	74 52                	je     c0110ff7 <sfs_bmap_get_nolock+0x117>
            assert(din->indirect == 0);
c0110fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fa8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110fab:	85 c0                	test   %eax,%eax
c0110fad:	74 19                	je     c0110fc8 <sfs_bmap_get_nolock+0xe8>
c0110faf:	68 8e 80 11 c0       	push   $0xc011808e
c0110fb4:	68 df 7f 11 c0       	push   $0xc0117fdf
c0110fb9:	68 18 01 00 00       	push   $0x118
c0110fbe:	68 77 7f 11 c0       	push   $0xc0117f77
c0110fc3:	e8 1d f5 fe ff       	call   c01004e5 <__panic>
            din->indirect = ent;
c0110fc8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fce:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0110fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110fd4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0110fdb:	eb 1a                	jmp    c0110ff7 <sfs_bmap_get_nolock+0x117>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0110fdd:	83 ec 04             	sub    $0x4,%esp
c0110fe0:	68 a4 80 11 c0       	push   $0xc01180a4
c0110fe5:	68 1e 01 00 00       	push   $0x11e
c0110fea:	68 77 7f 11 c0       	push   $0xc0117f77
c0110fef:	e8 f1 f4 fe ff       	call   c01004e5 <__panic>
                return ret;
            }
            din->direct[index] = ino;
            sin->dirty = 1;
        }
        goto out;
c0110ff4:	90                   	nop
c0110ff5:	eb 01                	jmp    c0110ff8 <sfs_bmap_get_nolock+0x118>
        if (ent != din->indirect) {
            assert(din->indirect == 0);
            din->indirect = ent;
            sin->dirty = 1;
        }
        goto out;
c0110ff7:	90                   	nop
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0110ff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110ffb:	85 c0                	test   %eax,%eax
c0110ffd:	74 2f                	je     c011102e <sfs_bmap_get_nolock+0x14e>
c0110fff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111002:	83 ec 08             	sub    $0x8,%esp
c0111005:	50                   	push   %eax
c0111006:	ff 75 08             	pushl  0x8(%ebp)
c0111009:	e8 62 f9 ff ff       	call   c0110970 <sfs_block_inuse>
c011100e:	83 c4 10             	add    $0x10,%esp
c0111011:	85 c0                	test   %eax,%eax
c0111013:	75 19                	jne    c011102e <sfs_bmap_get_nolock+0x14e>
c0111015:	68 d0 80 11 c0       	push   $0xc01180d0
c011101a:	68 df 7f 11 c0       	push   $0xc0117fdf
c011101f:	68 21 01 00 00       	push   $0x121
c0111024:	68 77 7f 11 c0       	push   $0xc0117f77
c0111029:	e8 b7 f4 fe ff       	call   c01004e5 <__panic>
    *ino_store = ino;
c011102e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111031:	8b 45 18             	mov    0x18(%ebp),%eax
c0111034:	89 10                	mov    %edx,(%eax)
    return 0;
c0111036:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011103b:	c9                   	leave  
c011103c:	c3                   	ret    

c011103d <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c011103d:	55                   	push   %ebp
c011103e:	89 e5                	mov    %esp,%ebp
c0111040:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0111043:	83 ec 08             	sub    $0x8,%esp
c0111046:	ff 75 0c             	pushl  0xc(%ebp)
c0111049:	ff 75 08             	pushl  0x8(%ebp)
c011104c:	e8 1f f9 ff ff       	call   c0110970 <sfs_block_inuse>
c0111051:	83 c4 10             	add    $0x10,%esp
c0111054:	85 c0                	test   %eax,%eax
c0111056:	74 09                	je     c0111061 <sfs_bmap_free_sub_nolock+0x24>
c0111058:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011105f:	76 19                	jbe    c011107a <sfs_bmap_free_sub_nolock+0x3d>
c0111061:	68 f8 80 11 c0       	push   $0xc01180f8
c0111066:	68 df 7f 11 c0       	push   $0xc0117fdf
c011106b:	68 2b 01 00 00       	push   $0x12b
c0111070:	68 77 7f 11 c0       	push   $0xc0117f77
c0111075:	e8 6b f4 fe ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c011107a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0111081:	8b 45 10             	mov    0x10(%ebp),%eax
c0111084:	c1 e0 02             	shl    $0x2,%eax
c0111087:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011108a:	83 ec 0c             	sub    $0xc,%esp
c011108d:	ff 75 f4             	pushl  -0xc(%ebp)
c0111090:	ff 75 0c             	pushl  0xc(%ebp)
c0111093:	6a 04                	push   $0x4
c0111095:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111098:	50                   	push   %eax
c0111099:	ff 75 08             	pushl  0x8(%ebp)
c011109c:	e8 81 23 00 00       	call   c0113422 <sfs_rbuf>
c01110a1:	83 c4 20             	add    $0x20,%esp
c01110a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01110a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01110ab:	74 05                	je     c01110b2 <sfs_bmap_free_sub_nolock+0x75>
        return ret;
c01110ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110b0:	eb 46                	jmp    c01110f8 <sfs_bmap_free_sub_nolock+0xbb>
    }
    if (ino != 0) {
c01110b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110b5:	85 c0                	test   %eax,%eax
c01110b7:	74 3a                	je     c01110f3 <sfs_bmap_free_sub_nolock+0xb6>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c01110b9:	83 ec 0c             	sub    $0xc,%esp
c01110bc:	ff 75 f4             	pushl  -0xc(%ebp)
c01110bf:	ff 75 0c             	pushl  0xc(%ebp)
c01110c2:	6a 04                	push   $0x4
c01110c4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01110c7:	50                   	push   %eax
c01110c8:	ff 75 08             	pushl  0x8(%ebp)
c01110cb:	e8 ef 23 00 00       	call   c01134bf <sfs_wbuf>
c01110d0:	83 c4 20             	add    $0x20,%esp
c01110d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01110d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01110da:	74 05                	je     c01110e1 <sfs_bmap_free_sub_nolock+0xa4>
            return ret;
c01110dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110df:	eb 17                	jmp    c01110f8 <sfs_bmap_free_sub_nolock+0xbb>
        }
        sfs_block_free(sfs, ino);
c01110e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110e4:	83 ec 08             	sub    $0x8,%esp
c01110e7:	50                   	push   %eax
c01110e8:	ff 75 08             	pushl  0x8(%ebp)
c01110eb:	e8 7e f9 ff ff       	call   c0110a6e <sfs_block_free>
c01110f0:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
c01110f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01110f8:	c9                   	leave  
c01110f9:	c3                   	ret    

c01110fa <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c01110fa:	55                   	push   %ebp
c01110fb:	89 e5                	mov    %esp,%ebp
c01110fd:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0111100:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111103:	8b 00                	mov    (%eax),%eax
c0111105:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0111108:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c011110c:	77 43                	ja     c0111151 <sfs_bmap_free_nolock+0x57>
        if ((ino = din->direct[index]) != 0) {
c011110e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111111:	8b 55 10             	mov    0x10(%ebp),%edx
c0111114:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0111118:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011111b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011111f:	74 29                	je     c011114a <sfs_bmap_free_nolock+0x50>
			// free the block
            sfs_block_free(sfs, ino);
c0111121:	83 ec 08             	sub    $0x8,%esp
c0111124:	ff 75 f0             	pushl  -0x10(%ebp)
c0111127:	ff 75 08             	pushl  0x8(%ebp)
c011112a:	e8 3f f9 ff ff       	call   c0110a6e <sfs_block_free>
c011112f:	83 c4 10             	add    $0x10,%esp
            din->direct[index] = 0;
c0111132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111135:	8b 55 10             	mov    0x10(%ebp),%edx
c0111138:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011113f:	00 
            sin->dirty = 1;
c0111140:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111143:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c011114a:	b8 00 00 00 00       	mov    $0x0,%eax
c011114f:	eb 4a                	jmp    c011119b <sfs_bmap_free_nolock+0xa1>
    }

    index -= SFS_NDIRECT;
c0111151:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0111155:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011115c:	77 38                	ja     c0111196 <sfs_bmap_free_nolock+0x9c>
        if ((ent = din->indirect) != 0) {
c011115e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111161:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111164:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111167:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011116b:	74 22                	je     c011118f <sfs_bmap_free_nolock+0x95>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c011116d:	83 ec 04             	sub    $0x4,%esp
c0111170:	ff 75 10             	pushl  0x10(%ebp)
c0111173:	ff 75 ec             	pushl  -0x14(%ebp)
c0111176:	ff 75 08             	pushl  0x8(%ebp)
c0111179:	e8 bf fe ff ff       	call   c011103d <sfs_bmap_free_sub_nolock>
c011117e:	83 c4 10             	add    $0x10,%esp
c0111181:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111184:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111188:	74 05                	je     c011118f <sfs_bmap_free_nolock+0x95>
                return ret;
c011118a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011118d:	eb 0c                	jmp    c011119b <sfs_bmap_free_nolock+0xa1>
            }
        }
        return 0;
c011118f:	b8 00 00 00 00       	mov    $0x0,%eax
c0111194:	eb 05                	jmp    c011119b <sfs_bmap_free_nolock+0xa1>
    }
    return 0;
c0111196:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011119b:	c9                   	leave  
c011119c:	c3                   	ret    

c011119d <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c011119d:	55                   	push   %ebp
c011119e:	89 e5                	mov    %esp,%ebp
c01111a0:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c01111a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01111a6:	8b 00                	mov    (%eax),%eax
c01111a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c01111ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111ae:	8b 40 08             	mov    0x8(%eax),%eax
c01111b1:	3b 45 10             	cmp    0x10(%ebp),%eax
c01111b4:	73 19                	jae    c01111cf <sfs_bmap_load_nolock+0x32>
c01111b6:	68 2c 81 11 c0       	push   $0xc011812c
c01111bb:	68 df 7f 11 c0       	push   $0xc0117fdf
c01111c0:	68 64 01 00 00       	push   $0x164
c01111c5:	68 77 7f 11 c0       	push   $0xc0117f77
c01111ca:	e8 16 f3 fe ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c01111cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111d2:	8b 40 08             	mov    0x8(%eax),%eax
c01111d5:	3b 45 10             	cmp    0x10(%ebp),%eax
c01111d8:	0f 94 c0             	sete   %al
c01111db:	0f b6 c0             	movzbl %al,%eax
c01111de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c01111e1:	83 ec 0c             	sub    $0xc,%esp
c01111e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01111e7:	50                   	push   %eax
c01111e8:	ff 75 f0             	pushl  -0x10(%ebp)
c01111eb:	ff 75 10             	pushl  0x10(%ebp)
c01111ee:	ff 75 0c             	pushl  0xc(%ebp)
c01111f1:	ff 75 08             	pushl  0x8(%ebp)
c01111f4:	e8 e7 fc ff ff       	call   c0110ee0 <sfs_bmap_get_nolock>
c01111f9:	83 c4 20             	add    $0x20,%esp
c01111fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01111ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111203:	74 05                	je     c011120a <sfs_bmap_load_nolock+0x6d>
        return ret;
c0111205:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111208:	eb 57                	jmp    c0111261 <sfs_bmap_load_nolock+0xc4>
    }
    assert(sfs_block_inuse(sfs, ino));
c011120a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011120d:	83 ec 08             	sub    $0x8,%esp
c0111210:	50                   	push   %eax
c0111211:	ff 75 08             	pushl  0x8(%ebp)
c0111214:	e8 57 f7 ff ff       	call   c0110970 <sfs_block_inuse>
c0111219:	83 c4 10             	add    $0x10,%esp
c011121c:	85 c0                	test   %eax,%eax
c011121e:	75 19                	jne    c0111239 <sfs_bmap_load_nolock+0x9c>
c0111220:	68 15 80 11 c0       	push   $0xc0118015
c0111225:	68 df 7f 11 c0       	push   $0xc0117fdf
c011122a:	68 6b 01 00 00       	push   $0x16b
c011122f:	68 77 7f 11 c0       	push   $0xc0117f77
c0111234:	e8 ac f2 fe ff       	call   c01004e5 <__panic>
    if (create) {
c0111239:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011123d:	74 0f                	je     c011124e <sfs_bmap_load_nolock+0xb1>
        din->blocks ++;
c011123f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111242:	8b 40 08             	mov    0x8(%eax),%eax
c0111245:	8d 50 01             	lea    0x1(%eax),%edx
c0111248:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011124b:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c011124e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111252:	74 08                	je     c011125c <sfs_bmap_load_nolock+0xbf>
        *ino_store = ino;
c0111254:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111257:	8b 45 14             	mov    0x14(%ebp),%eax
c011125a:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c011125c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111261:	c9                   	leave  
c0111262:	c3                   	ret    

c0111263 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0111263:	55                   	push   %ebp
c0111264:	89 e5                	mov    %esp,%ebp
c0111266:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0111269:	8b 45 0c             	mov    0xc(%ebp),%eax
c011126c:	8b 00                	mov    (%eax),%eax
c011126e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0111271:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111274:	8b 40 08             	mov    0x8(%eax),%eax
c0111277:	85 c0                	test   %eax,%eax
c0111279:	75 19                	jne    c0111294 <sfs_bmap_truncate_nolock+0x31>
c011127b:	68 41 81 11 c0       	push   $0xc0118141
c0111280:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111285:	68 7b 01 00 00       	push   $0x17b
c011128a:	68 77 7f 11 c0       	push   $0xc0117f77
c011128f:	e8 51 f2 fe ff       	call   c01004e5 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0111294:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111297:	8b 40 08             	mov    0x8(%eax),%eax
c011129a:	83 e8 01             	sub    $0x1,%eax
c011129d:	83 ec 04             	sub    $0x4,%esp
c01112a0:	50                   	push   %eax
c01112a1:	ff 75 0c             	pushl  0xc(%ebp)
c01112a4:	ff 75 08             	pushl  0x8(%ebp)
c01112a7:	e8 4e fe ff ff       	call   c01110fa <sfs_bmap_free_nolock>
c01112ac:	83 c4 10             	add    $0x10,%esp
c01112af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01112b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01112b6:	74 05                	je     c01112bd <sfs_bmap_truncate_nolock+0x5a>
        return ret;
c01112b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01112bb:	eb 1e                	jmp    c01112db <sfs_bmap_truncate_nolock+0x78>
    }
    din->blocks --;
c01112bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112c0:	8b 40 08             	mov    0x8(%eax),%eax
c01112c3:	8d 50 ff             	lea    -0x1(%eax),%edx
c01112c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112c9:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c01112cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112cf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c01112d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01112db:	c9                   	leave  
c01112dc:	c3                   	ret    

c01112dd <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c01112dd:	55                   	push   %ebp
c01112de:	89 e5                	mov    %esp,%ebp
c01112e0:	83 ec 18             	sub    $0x18,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c01112e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112e6:	8b 00                	mov    (%eax),%eax
c01112e8:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01112ec:	66 83 f8 02          	cmp    $0x2,%ax
c01112f0:	75 15                	jne    c0111307 <sfs_dirent_read_nolock+0x2a>
c01112f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01112f6:	78 0f                	js     c0111307 <sfs_dirent_read_nolock+0x2a>
c01112f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112fb:	8b 00                	mov    (%eax),%eax
c01112fd:	8b 50 08             	mov    0x8(%eax),%edx
c0111300:	8b 45 10             	mov    0x10(%ebp),%eax
c0111303:	39 c2                	cmp    %eax,%edx
c0111305:	77 19                	ja     c0111320 <sfs_dirent_read_nolock+0x43>
c0111307:	68 54 81 11 c0       	push   $0xc0118154
c011130c:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111311:	68 8e 01 00 00       	push   $0x18e
c0111316:	68 77 7f 11 c0       	push   $0xc0117f77
c011131b:	e8 c5 f1 fe ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0111320:	8b 45 10             	mov    0x10(%ebp),%eax
c0111323:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0111326:	52                   	push   %edx
c0111327:	50                   	push   %eax
c0111328:	ff 75 0c             	pushl  0xc(%ebp)
c011132b:	ff 75 08             	pushl  0x8(%ebp)
c011132e:	e8 6a fe ff ff       	call   c011119d <sfs_bmap_load_nolock>
c0111333:	83 c4 10             	add    $0x10,%esp
c0111336:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111339:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011133d:	74 05                	je     c0111344 <sfs_dirent_read_nolock+0x67>
        return ret;
c011133f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111342:	eb 68                	jmp    c01113ac <sfs_dirent_read_nolock+0xcf>
    }
    assert(sfs_block_inuse(sfs, ino));
c0111344:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111347:	83 ec 08             	sub    $0x8,%esp
c011134a:	50                   	push   %eax
c011134b:	ff 75 08             	pushl  0x8(%ebp)
c011134e:	e8 1d f6 ff ff       	call   c0110970 <sfs_block_inuse>
c0111353:	83 c4 10             	add    $0x10,%esp
c0111356:	85 c0                	test   %eax,%eax
c0111358:	75 19                	jne    c0111373 <sfs_dirent_read_nolock+0x96>
c011135a:	68 15 80 11 c0       	push   $0xc0118015
c011135f:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111364:	68 95 01 00 00       	push   $0x195
c0111369:	68 77 7f 11 c0       	push   $0xc0117f77
c011136e:	e8 72 f1 fe ff       	call   c01004e5 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0111373:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111376:	83 ec 0c             	sub    $0xc,%esp
c0111379:	6a 00                	push   $0x0
c011137b:	50                   	push   %eax
c011137c:	68 04 01 00 00       	push   $0x104
c0111381:	ff 75 14             	pushl  0x14(%ebp)
c0111384:	ff 75 08             	pushl  0x8(%ebp)
c0111387:	e8 96 20 00 00       	call   c0113422 <sfs_rbuf>
c011138c:	83 c4 20             	add    $0x20,%esp
c011138f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111392:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111396:	74 05                	je     c011139d <sfs_dirent_read_nolock+0xc0>
        return ret;
c0111398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011139b:	eb 0f                	jmp    c01113ac <sfs_dirent_read_nolock+0xcf>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c011139d:	8b 45 14             	mov    0x14(%ebp),%eax
c01113a0:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c01113a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113ac:	c9                   	leave  
c01113ad:	c3                   	ret    

c01113ae <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c01113ae:	55                   	push   %ebp
c01113af:	89 e5                	mov    %esp,%ebp
c01113b1:	83 ec 18             	sub    $0x18,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c01113b4:	83 ec 0c             	sub    $0xc,%esp
c01113b7:	ff 75 10             	pushl  0x10(%ebp)
c01113ba:	e8 f7 22 00 00       	call   c01136b6 <strlen>
c01113bf:	83 c4 10             	add    $0x10,%esp
c01113c2:	3d ff 00 00 00       	cmp    $0xff,%eax
c01113c7:	76 19                	jbe    c01113e2 <sfs_dirent_search_nolock+0x34>
c01113c9:	68 a0 81 11 c0       	push   $0xc01181a0
c01113ce:	68 df 7f 11 c0       	push   $0xc0117fdf
c01113d3:	68 ba 01 00 00       	push   $0x1ba
c01113d8:	68 77 7f 11 c0       	push   $0xc0117f77
c01113dd:	e8 03 f1 fe ff       	call   c01004e5 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01113e2:	83 ec 0c             	sub    $0xc,%esp
c01113e5:	68 04 01 00 00       	push   $0x104
c01113ea:	e8 61 44 ff ff       	call   c0105850 <kmalloc>
c01113ef:	83 c4 10             	add    $0x10,%esp
c01113f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01113f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01113f9:	75 0a                	jne    c0111405 <sfs_dirent_search_nolock+0x57>
        return -E_NO_MEM;
c01113fb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111400:	e9 bc 00 00 00       	jmp    c01114c1 <sfs_dirent_search_nolock+0x113>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0111405:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111408:	8b 00                	mov    (%eax),%eax
c011140a:	8b 40 08             	mov    0x8(%eax),%eax
c011140d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0111410:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111414:	74 08                	je     c011141e <sfs_dirent_search_nolock+0x70>
c0111416:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0111419:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011141c:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c011141e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111425:	eb 74                	jmp    c011149b <sfs_dirent_search_nolock+0xed>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0111427:	ff 75 ec             	pushl  -0x14(%ebp)
c011142a:	ff 75 f0             	pushl  -0x10(%ebp)
c011142d:	ff 75 0c             	pushl  0xc(%ebp)
c0111430:	ff 75 08             	pushl  0x8(%ebp)
c0111433:	e8 a5 fe ff ff       	call   c01112dd <sfs_dirent_read_nolock>
c0111438:	83 c4 10             	add    $0x10,%esp
c011143b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011143e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111442:	75 68                	jne    c01114ac <sfs_dirent_search_nolock+0xfe>
            goto out;
        }
        if (entry->ino == 0) {
c0111444:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111447:	8b 00                	mov    (%eax),%eax
c0111449:	85 c0                	test   %eax,%eax
c011144b:	75 10                	jne    c011145d <sfs_dirent_search_nolock+0xaf>
            set_pvalue(empty_slot, i);
c011144d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111451:	74 43                	je     c0111496 <sfs_dirent_search_nolock+0xe8>
c0111453:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0111456:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111459:	89 10                	mov    %edx,(%eax)
            continue ;
c011145b:	eb 39                	jmp    c0111496 <sfs_dirent_search_nolock+0xe8>
        }
        if (strcmp(name, entry->name) == 0) {
c011145d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111460:	83 c0 04             	add    $0x4,%eax
c0111463:	83 ec 08             	sub    $0x8,%esp
c0111466:	50                   	push   %eax
c0111467:	ff 75 10             	pushl  0x10(%ebp)
c011146a:	e8 42 23 00 00       	call   c01137b1 <strcmp>
c011146f:	83 c4 10             	add    $0x10,%esp
c0111472:	85 c0                	test   %eax,%eax
c0111474:	75 21                	jne    c0111497 <sfs_dirent_search_nolock+0xe9>
            set_pvalue(slot, i);
c0111476:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011147a:	74 08                	je     c0111484 <sfs_dirent_search_nolock+0xd6>
c011147c:	8b 45 18             	mov    0x18(%ebp),%eax
c011147f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111482:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0111484:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111488:	74 25                	je     c01114af <sfs_dirent_search_nolock+0x101>
c011148a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011148d:	8b 10                	mov    (%eax),%edx
c011148f:	8b 45 14             	mov    0x14(%ebp),%eax
c0111492:	89 10                	mov    %edx,(%eax)
            goto out;
c0111494:	eb 19                	jmp    c01114af <sfs_dirent_search_nolock+0x101>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
        }
        if (entry->ino == 0) {
            set_pvalue(empty_slot, i);
            continue ;
c0111496:	90                   	nop
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0111497:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011149b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011149e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01114a1:	7c 84                	jl     c0111427 <sfs_dirent_search_nolock+0x79>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c01114a3:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
c01114aa:	eb 04                	jmp    c01114b0 <sfs_dirent_search_nolock+0x102>
#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
c01114ac:	90                   	nop
c01114ad:	eb 01                	jmp    c01114b0 <sfs_dirent_search_nolock+0x102>
            continue ;
        }
        if (strcmp(name, entry->name) == 0) {
            set_pvalue(slot, i);
            set_pvalue(ino_store, entry->ino);
            goto out;
c01114af:	90                   	nop
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
out:
    kfree(entry);
c01114b0:	83 ec 0c             	sub    $0xc,%esp
c01114b3:	ff 75 ec             	pushl  -0x14(%ebp)
c01114b6:	e8 ad 43 ff ff       	call   c0105868 <kfree>
c01114bb:	83 c4 10             	add    $0x10,%esp
    return ret;
c01114be:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01114c1:	c9                   	leave  
c01114c2:	c3                   	ret    

c01114c3 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c01114c3:	55                   	push   %ebp
c01114c4:	89 e5                	mov    %esp,%ebp
c01114c6:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c01114c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114cc:	8b 00                	mov    (%eax),%eax
c01114ce:	8b 40 08             	mov    0x8(%eax),%eax
c01114d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c01114d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01114db:	eb 37                	jmp    c0111514 <sfs_dirent_findino_nolock+0x51>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01114dd:	ff 75 14             	pushl  0x14(%ebp)
c01114e0:	ff 75 f4             	pushl  -0xc(%ebp)
c01114e3:	ff 75 0c             	pushl  0xc(%ebp)
c01114e6:	ff 75 08             	pushl  0x8(%ebp)
c01114e9:	e8 ef fd ff ff       	call   c01112dd <sfs_dirent_read_nolock>
c01114ee:	83 c4 10             	add    $0x10,%esp
c01114f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01114f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01114f8:	74 05                	je     c01114ff <sfs_dirent_findino_nolock+0x3c>
            return ret;
c01114fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114fd:	eb 22                	jmp    c0111521 <sfs_dirent_findino_nolock+0x5e>
        }
        if (entry->ino == ino) {
c01114ff:	8b 45 14             	mov    0x14(%ebp),%eax
c0111502:	8b 00                	mov    (%eax),%eax
c0111504:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111507:	75 07                	jne    c0111510 <sfs_dirent_findino_nolock+0x4d>
            return 0;
c0111509:	b8 00 00 00 00       	mov    $0x0,%eax
c011150e:	eb 11                	jmp    c0111521 <sfs_dirent_findino_nolock+0x5e>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0111510:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111514:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111517:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011151a:	7c c1                	jl     c01114dd <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011151c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0111521:	c9                   	leave  
c0111522:	c3                   	ret    

c0111523 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0111523:	55                   	push   %ebp
c0111524:	89 e5                	mov    %esp,%ebp
c0111526:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0111529:	83 ec 0c             	sub    $0xc,%esp
c011152c:	ff 75 0c             	pushl  0xc(%ebp)
c011152f:	e8 75 f2 ff ff       	call   c01107a9 <lock_sin>
c0111534:	83 c4 10             	add    $0x10,%esp
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0111537:	83 ec 08             	sub    $0x8,%esp
c011153a:	6a 00                	push   $0x0
c011153c:	ff 75 18             	pushl  0x18(%ebp)
c011153f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111542:	50                   	push   %eax
c0111543:	ff 75 10             	pushl  0x10(%ebp)
c0111546:	ff 75 0c             	pushl  0xc(%ebp)
c0111549:	ff 75 08             	pushl  0x8(%ebp)
c011154c:	e8 5d fe ff ff       	call   c01113ae <sfs_dirent_search_nolock>
c0111551:	83 c4 20             	add    $0x20,%esp
c0111554:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0111557:	83 ec 0c             	sub    $0xc,%esp
c011155a:	ff 75 0c             	pushl  0xc(%ebp)
c011155d:	e8 62 f2 ff ff       	call   c01107c4 <unlock_sin>
c0111562:	83 c4 10             	add    $0x10,%esp
    if (ret == 0) {
c0111565:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111569:	75 18                	jne    c0111583 <sfs_lookup_once+0x60>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011156b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011156e:	83 ec 04             	sub    $0x4,%esp
c0111571:	50                   	push   %eax
c0111572:	ff 75 14             	pushl  0x14(%ebp)
c0111575:	ff 75 08             	pushl  0x8(%ebp)
c0111578:	e8 a3 f6 ff ff       	call   c0110c20 <sfs_load_inode>
c011157d:	83 c4 10             	add    $0x10,%esp
c0111580:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0111583:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111586:	c9                   	leave  
c0111587:	c3                   	ret    

c0111588 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0111588:	55                   	push   %ebp
c0111589:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c011158b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011158e:	83 e0 03             	and    $0x3,%eax
c0111591:	85 c0                	test   %eax,%eax
c0111593:	74 07                	je     c011159c <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0111595:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011159a:	eb 17                	jmp    c01115b3 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011159c:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c011159d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115a0:	83 e0 20             	and    $0x20,%eax
c01115a3:	85 c0                	test   %eax,%eax
c01115a5:	74 07                	je     c01115ae <sfs_opendir+0x26>
        return -E_ISDIR;
c01115a7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01115ac:	eb 05                	jmp    c01115b3 <sfs_opendir+0x2b>
    }
    return 0;
c01115ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01115b3:	5d                   	pop    %ebp
c01115b4:	c3                   	ret    

c01115b5 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c01115b5:	55                   	push   %ebp
c01115b6:	89 e5                	mov    %esp,%ebp
    return 0;
c01115b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01115bd:	5d                   	pop    %ebp
c01115be:	c3                   	ret    

c01115bf <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01115bf:	55                   	push   %ebp
c01115c0:	89 e5                	mov    %esp,%ebp
c01115c2:	83 ec 18             	sub    $0x18,%esp
    return vop_fsync(node);
c01115c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01115c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01115cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01115cf:	74 17                	je     c01115e8 <sfs_close+0x29>
c01115d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115d4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01115d7:	85 c0                	test   %eax,%eax
c01115d9:	74 0d                	je     c01115e8 <sfs_close+0x29>
c01115db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115de:	8b 40 3c             	mov    0x3c(%eax),%eax
c01115e1:	8b 40 18             	mov    0x18(%eax),%eax
c01115e4:	85 c0                	test   %eax,%eax
c01115e6:	75 19                	jne    c0111601 <sfs_close+0x42>
c01115e8:	68 c4 81 11 c0       	push   $0xc01181c4
c01115ed:	68 df 7f 11 c0       	push   $0xc0117fdf
c01115f2:	68 1c 02 00 00       	push   $0x21c
c01115f7:	68 77 7f 11 c0       	push   $0xc0117f77
c01115fc:	e8 e4 ee fe ff       	call   c01004e5 <__panic>
c0111601:	83 ec 08             	sub    $0x8,%esp
c0111604:	68 12 82 11 c0       	push   $0xc0118212
c0111609:	ff 75 f4             	pushl  -0xc(%ebp)
c011160c:	e8 e7 e1 ff ff       	call   c010f7f8 <inode_check>
c0111611:	83 c4 10             	add    $0x10,%esp
c0111614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111617:	8b 40 3c             	mov    0x3c(%eax),%eax
c011161a:	8b 40 18             	mov    0x18(%eax),%eax
c011161d:	83 ec 0c             	sub    $0xc,%esp
c0111620:	ff 75 08             	pushl  0x8(%ebp)
c0111623:	ff d0                	call   *%eax
c0111625:	83 c4 10             	add    $0x10,%esp
}
c0111628:	c9                   	leave  
c0111629:	c3                   	ret    

c011162a <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c011162a:	55                   	push   %ebp
c011162b:	89 e5                	mov    %esp,%ebp
c011162d:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0111630:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111633:	8b 00                	mov    (%eax),%eax
c0111635:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0111638:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011163b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011163f:	66 83 f8 02          	cmp    $0x2,%ax
c0111643:	75 19                	jne    c011165e <sfs_io_nolock+0x34>
c0111645:	68 18 82 11 c0       	push   $0xc0118218
c011164a:	68 df 7f 11 c0       	push   $0xc0117fdf
c011164f:	68 2b 02 00 00       	push   $0x22b
c0111654:	68 77 7f 11 c0       	push   $0xc0117f77
c0111659:	e8 87 ee fe ff       	call   c01004e5 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c011165e:	8b 45 18             	mov    0x18(%ebp),%eax
c0111661:	8b 10                	mov    (%eax),%edx
c0111663:	8b 45 14             	mov    0x14(%ebp),%eax
c0111666:	01 d0                	add    %edx,%eax
c0111668:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c011166b:	8b 45 18             	mov    0x18(%ebp),%eax
c011166e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0111674:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111678:	78 12                	js     c011168c <sfs_io_nolock+0x62>
c011167a:	8b 45 14             	mov    0x14(%ebp),%eax
c011167d:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0111682:	77 08                	ja     c011168c <sfs_io_nolock+0x62>
c0111684:	8b 45 14             	mov    0x14(%ebp),%eax
c0111687:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011168a:	7e 0a                	jle    c0111696 <sfs_io_nolock+0x6c>
        return -E_INVAL;
c011168c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111691:	e9 60 02 00 00       	jmp    c01118f6 <sfs_io_nolock+0x2cc>
    }
    if (offset == endpos) {
c0111696:	8b 45 14             	mov    0x14(%ebp),%eax
c0111699:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011169c:	75 0a                	jne    c01116a8 <sfs_io_nolock+0x7e>
        return 0;
c011169e:	b8 00 00 00 00       	mov    $0x0,%eax
c01116a3:	e9 4e 02 00 00       	jmp    c01118f6 <sfs_io_nolock+0x2cc>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c01116a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116ab:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01116b0:	76 07                	jbe    c01116b9 <sfs_io_nolock+0x8f>
        endpos = SFS_MAX_FILE_SIZE;
c01116b2:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01116b9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01116bd:	75 2a                	jne    c01116e9 <sfs_io_nolock+0xbf>
        if (offset >= din->size) {
c01116bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01116c2:	8b 10                	mov    (%eax),%edx
c01116c4:	8b 45 14             	mov    0x14(%ebp),%eax
c01116c7:	39 c2                	cmp    %eax,%edx
c01116c9:	77 0a                	ja     c01116d5 <sfs_io_nolock+0xab>
            return 0;
c01116cb:	b8 00 00 00 00       	mov    $0x0,%eax
c01116d0:	e9 21 02 00 00       	jmp    c01118f6 <sfs_io_nolock+0x2cc>
        }
        if (endpos > din->size) {
c01116d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01116d8:	8b 10                	mov    (%eax),%edx
c01116da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116dd:	39 c2                	cmp    %eax,%edx
c01116df:	73 08                	jae    c01116e9 <sfs_io_nolock+0xbf>
            endpos = din->size;
c01116e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01116e4:	8b 00                	mov    (%eax),%eax
c01116e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01116e9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01116ed:	74 10                	je     c01116ff <sfs_io_nolock+0xd5>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c01116ef:	c7 45 f0 bf 34 11 c0 	movl   $0xc01134bf,-0x10(%ebp)
c01116f6:	c7 45 ec 01 34 11 c0 	movl   $0xc0113401,-0x14(%ebp)
c01116fd:	eb 0e                	jmp    c011170d <sfs_io_nolock+0xe3>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c01116ff:	c7 45 f0 22 34 11 c0 	movl   $0xc0113422,-0x10(%ebp)
c0111706:	c7 45 ec e0 33 11 c0 	movl   $0xc01133e0,-0x14(%ebp)
    }

    int ret = 0;
c011170d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0111714:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c011171b:	8b 45 14             	mov    0x14(%ebp),%eax
c011171e:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0111724:	85 c0                	test   %eax,%eax
c0111726:	0f 48 c2             	cmovs  %edx,%eax
c0111729:	c1 f8 0c             	sar    $0xc,%eax
c011172c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c011172f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111732:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0111738:	85 c0                	test   %eax,%eax
c011173a:	0f 48 c2             	cmovs  %edx,%eax
c011173d:	c1 f8 0c             	sar    $0xc,%eax
c0111740:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0111743:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c0111746:	8b 45 14             	mov    0x14(%ebp),%eax
c0111749:	99                   	cltd   
c011174a:	c1 ea 14             	shr    $0x14,%edx
c011174d:	01 d0                	add    %edx,%eax
c011174f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111754:	29 d0                	sub    %edx,%eax
c0111756:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111759:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c011175d:	0f 84 81 00 00 00    	je     c01117e4 <sfs_io_nolock+0x1ba>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0111763:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111767:	74 0a                	je     c0111773 <sfs_io_nolock+0x149>
c0111769:	b8 00 10 00 00       	mov    $0x1000,%eax
c011176e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0111771:	eb 06                	jmp    c0111779 <sfs_io_nolock+0x14f>
c0111773:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111776:	2b 45 14             	sub    0x14(%ebp),%eax
c0111779:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c011177c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011177f:	50                   	push   %eax
c0111780:	ff 75 e0             	pushl  -0x20(%ebp)
c0111783:	ff 75 0c             	pushl  0xc(%ebp)
c0111786:	ff 75 08             	pushl  0x8(%ebp)
c0111789:	e8 0f fa ff ff       	call   c011119d <sfs_bmap_load_nolock>
c011178e:	83 c4 10             	add    $0x10,%esp
c0111791:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111794:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111798:	0f 85 0e 01 00 00    	jne    c01118ac <sfs_io_nolock+0x282>
            goto out;
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c011179e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01117a1:	83 ec 0c             	sub    $0xc,%esp
c01117a4:	ff 75 d4             	pushl  -0x2c(%ebp)
c01117a7:	50                   	push   %eax
c01117a8:	ff 75 d0             	pushl  -0x30(%ebp)
c01117ab:	ff 75 10             	pushl  0x10(%ebp)
c01117ae:	ff 75 08             	pushl  0x8(%ebp)
c01117b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117b4:	ff d0                	call   *%eax
c01117b6:	83 c4 20             	add    $0x20,%esp
c01117b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01117bc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01117c0:	0f 85 e9 00 00 00    	jne    c01118af <sfs_io_nolock+0x285>
            goto out;
        }
        alen += size;
c01117c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01117c9:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c01117cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01117d0:	0f 84 dc 00 00 00    	je     c01118b2 <sfs_io_nolock+0x288>
            goto out;
        }
        buf += size, blkno ++, nblks --;
c01117d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01117d9:	01 45 10             	add    %eax,0x10(%ebp)
c01117dc:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01117e0:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c01117e4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c01117eb:	eb 57                	jmp    c0111844 <sfs_io_nolock+0x21a>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01117ed:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01117f0:	50                   	push   %eax
c01117f1:	ff 75 e0             	pushl  -0x20(%ebp)
c01117f4:	ff 75 0c             	pushl  0xc(%ebp)
c01117f7:	ff 75 08             	pushl  0x8(%ebp)
c01117fa:	e8 9e f9 ff ff       	call   c011119d <sfs_bmap_load_nolock>
c01117ff:	83 c4 10             	add    $0x10,%esp
c0111802:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111805:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111809:	0f 85 a6 00 00 00    	jne    c01118b5 <sfs_io_nolock+0x28b>
            goto out;
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c011180f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111812:	6a 01                	push   $0x1
c0111814:	50                   	push   %eax
c0111815:	ff 75 10             	pushl  0x10(%ebp)
c0111818:	ff 75 08             	pushl  0x8(%ebp)
c011181b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011181e:	ff d0                	call   *%eax
c0111820:	83 c4 10             	add    $0x10,%esp
c0111823:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111826:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011182a:	0f 85 88 00 00 00    	jne    c01118b8 <sfs_io_nolock+0x28e>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
c0111830:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111833:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0111836:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111839:	01 45 10             	add    %eax,0x10(%ebp)
c011183c:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0111840:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c0111844:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111848:	75 a3                	jne    c01117ed <sfs_io_nolock+0x1c3>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c011184a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011184d:	99                   	cltd   
c011184e:	c1 ea 14             	shr    $0x14,%edx
c0111851:	01 d0                	add    %edx,%eax
c0111853:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111858:	29 d0                	sub    %edx,%eax
c011185a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011185d:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0111861:	74 5c                	je     c01118bf <sfs_io_nolock+0x295>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0111863:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0111866:	50                   	push   %eax
c0111867:	ff 75 e0             	pushl  -0x20(%ebp)
c011186a:	ff 75 0c             	pushl  0xc(%ebp)
c011186d:	ff 75 08             	pushl  0x8(%ebp)
c0111870:	e8 28 f9 ff ff       	call   c011119d <sfs_bmap_load_nolock>
c0111875:	83 c4 10             	add    $0x10,%esp
c0111878:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011187b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011187f:	75 3a                	jne    c01118bb <sfs_io_nolock+0x291>
            goto out;
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c0111881:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111884:	83 ec 0c             	sub    $0xc,%esp
c0111887:	6a 00                	push   $0x0
c0111889:	50                   	push   %eax
c011188a:	ff 75 d0             	pushl  -0x30(%ebp)
c011188d:	ff 75 10             	pushl  0x10(%ebp)
c0111890:	ff 75 08             	pushl  0x8(%ebp)
c0111893:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111896:	ff d0                	call   *%eax
c0111898:	83 c4 20             	add    $0x20,%esp
c011189b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011189e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01118a2:	75 1a                	jne    c01118be <sfs_io_nolock+0x294>
            goto out;
        }
        alen += size;
c01118a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01118a7:	01 45 e4             	add    %eax,-0x1c(%ebp)
c01118aa:	eb 13                	jmp    c01118bf <sfs_io_nolock+0x295>
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c01118ac:	90                   	nop
c01118ad:	eb 10                	jmp    c01118bf <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
            goto out;
c01118af:	90                   	nop
c01118b0:	eb 0d                	jmp    c01118bf <sfs_io_nolock+0x295>
        }
        alen += size;
        if (nblks == 0) {
            goto out;
c01118b2:	90                   	nop
c01118b3:	eb 0a                	jmp    c01118bf <sfs_io_nolock+0x295>
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c01118b5:	90                   	nop
c01118b6:	eb 07                	jmp    c01118bf <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
            goto out;
c01118b8:	90                   	nop
c01118b9:	eb 04                	jmp    c01118bf <sfs_io_nolock+0x295>
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c01118bb:	90                   	nop
c01118bc:	eb 01                	jmp    c01118bf <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
            goto out;
c01118be:	90                   	nop
        }
        alen += size;
    }
out:
    *alenp = alen;
c01118bf:	8b 45 18             	mov    0x18(%ebp),%eax
c01118c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01118c5:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c01118c7:	8b 55 14             	mov    0x14(%ebp),%edx
c01118ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01118cd:	01 c2                	add    %eax,%edx
c01118cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118d2:	8b 00                	mov    (%eax),%eax
c01118d4:	8b 00                	mov    (%eax),%eax
c01118d6:	39 c2                	cmp    %eax,%edx
c01118d8:	76 19                	jbe    c01118f3 <sfs_io_nolock+0x2c9>
        sin->din->size = offset + alen;
c01118da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118dd:	8b 00                	mov    (%eax),%eax
c01118df:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01118e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01118e5:	01 ca                	add    %ecx,%edx
c01118e7:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c01118e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118ec:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c01118f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01118f6:	c9                   	leave  
c01118f7:	c3                   	ret    

c01118f8 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c01118f8:	55                   	push   %ebp
c01118f9:	89 e5                	mov    %esp,%ebp
c01118fb:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01118fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0111901:	8b 40 38             	mov    0x38(%eax),%eax
c0111904:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111907:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011190b:	74 0a                	je     c0111917 <sfs_io+0x1f>
c011190d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111910:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111913:	85 c0                	test   %eax,%eax
c0111915:	74 19                	je     c0111930 <sfs_io+0x38>
c0111917:	68 34 82 11 c0       	push   $0xc0118234
c011191c:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111921:	68 8c 02 00 00       	push   $0x28c
c0111926:	68 77 7f 11 c0       	push   $0xc0117f77
c011192b:	e8 b5 eb fe ff       	call   c01004e5 <__panic>
c0111930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111933:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111936:	8b 45 08             	mov    0x8(%ebp),%eax
c0111939:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011193c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111940:	74 0d                	je     c011194f <sfs_io+0x57>
c0111942:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111945:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111948:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011194d:	74 19                	je     c0111968 <sfs_io+0x70>
c011194f:	68 30 80 11 c0       	push   $0xc0118030
c0111954:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111959:	68 8d 02 00 00       	push   $0x28d
c011195e:	68 77 7f 11 c0       	push   $0xc0117f77
c0111963:	e8 7d eb fe ff       	call   c01004e5 <__panic>
c0111968:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011196b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c011196e:	83 ec 0c             	sub    $0xc,%esp
c0111971:	ff 75 e8             	pushl  -0x18(%ebp)
c0111974:	e8 30 ee ff ff       	call   c01107a9 <lock_sin>
c0111979:	83 c4 10             	add    $0x10,%esp
    {
        size_t alen = iob->io_resid;
c011197c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011197f:	8b 40 0c             	mov    0xc(%eax),%eax
c0111982:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c0111985:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111988:	8b 50 04             	mov    0x4(%eax),%edx
c011198b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011198e:	8b 00                	mov    (%eax),%eax
c0111990:	83 ec 08             	sub    $0x8,%esp
c0111993:	ff 75 10             	pushl  0x10(%ebp)
c0111996:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0111999:	51                   	push   %ecx
c011199a:	52                   	push   %edx
c011199b:	50                   	push   %eax
c011199c:	ff 75 e8             	pushl  -0x18(%ebp)
c011199f:	ff 75 f0             	pushl  -0x10(%ebp)
c01119a2:	e8 83 fc ff ff       	call   c011162a <sfs_io_nolock>
c01119a7:	83 c4 20             	add    $0x20,%esp
c01119aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c01119ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01119b0:	85 c0                	test   %eax,%eax
c01119b2:	74 12                	je     c01119c6 <sfs_io+0xce>
            iobuf_skip(iob, alen);
c01119b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01119b7:	83 ec 08             	sub    $0x8,%esp
c01119ba:	50                   	push   %eax
c01119bb:	ff 75 0c             	pushl  0xc(%ebp)
c01119be:	e8 a7 96 ff ff       	call   c010b06a <iobuf_skip>
c01119c3:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sin(sin);
c01119c6:	83 ec 0c             	sub    $0xc,%esp
c01119c9:	ff 75 e8             	pushl  -0x18(%ebp)
c01119cc:	e8 f3 ed ff ff       	call   c01107c4 <unlock_sin>
c01119d1:	83 c4 10             	add    $0x10,%esp
    return ret;
c01119d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c01119d7:	c9                   	leave  
c01119d8:	c3                   	ret    

c01119d9 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c01119d9:	55                   	push   %ebp
c01119da:	89 e5                	mov    %esp,%ebp
c01119dc:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 0);
c01119df:	83 ec 04             	sub    $0x4,%esp
c01119e2:	6a 00                	push   $0x0
c01119e4:	ff 75 0c             	pushl  0xc(%ebp)
c01119e7:	ff 75 08             	pushl  0x8(%ebp)
c01119ea:	e8 09 ff ff ff       	call   c01118f8 <sfs_io>
c01119ef:	83 c4 10             	add    $0x10,%esp
}
c01119f2:	c9                   	leave  
c01119f3:	c3                   	ret    

c01119f4 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c01119f4:	55                   	push   %ebp
c01119f5:	89 e5                	mov    %esp,%ebp
c01119f7:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 1);
c01119fa:	83 ec 04             	sub    $0x4,%esp
c01119fd:	6a 01                	push   $0x1
c01119ff:	ff 75 0c             	pushl  0xc(%ebp)
c0111a02:	ff 75 08             	pushl  0x8(%ebp)
c0111a05:	e8 ee fe ff ff       	call   c01118f8 <sfs_io>
c0111a0a:	83 c4 10             	add    $0x10,%esp
}
c0111a0d:	c9                   	leave  
c0111a0e:	c3                   	ret    

c0111a0f <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0111a0f:	55                   	push   %ebp
c0111a10:	89 e5                	mov    %esp,%ebp
c0111a12:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0111a15:	83 ec 04             	sub    $0x4,%esp
c0111a18:	6a 10                	push   $0x10
c0111a1a:	6a 00                	push   $0x0
c0111a1c:	ff 75 0c             	pushl  0xc(%ebp)
c0111a1f:	e8 ec 1f 00 00       	call   c0113a10 <memset>
c0111a24:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0111a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a31:	74 17                	je     c0111a4a <sfs_fstat+0x3b>
c0111a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a36:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111a39:	85 c0                	test   %eax,%eax
c0111a3b:	74 0d                	je     c0111a4a <sfs_fstat+0x3b>
c0111a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a40:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111a43:	8b 40 28             	mov    0x28(%eax),%eax
c0111a46:	85 c0                	test   %eax,%eax
c0111a48:	75 19                	jne    c0111a63 <sfs_fstat+0x54>
c0111a4a:	68 60 82 11 c0       	push   $0xc0118260
c0111a4f:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111a54:	68 ae 02 00 00       	push   $0x2ae
c0111a59:	68 77 7f 11 c0       	push   $0xc0117f77
c0111a5e:	e8 82 ea fe ff       	call   c01004e5 <__panic>
c0111a63:	83 ec 08             	sub    $0x8,%esp
c0111a66:	68 b0 82 11 c0       	push   $0xc01182b0
c0111a6b:	ff 75 f4             	pushl  -0xc(%ebp)
c0111a6e:	e8 85 dd ff ff       	call   c010f7f8 <inode_check>
c0111a73:	83 c4 10             	add    $0x10,%esp
c0111a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a79:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111a7c:	8b 40 28             	mov    0x28(%eax),%eax
c0111a7f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111a82:	83 ec 08             	sub    $0x8,%esp
c0111a85:	52                   	push   %edx
c0111a86:	ff 75 08             	pushl  0x8(%ebp)
c0111a89:	ff d0                	call   *%eax
c0111a8b:	83 c4 10             	add    $0x10,%esp
c0111a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111a91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111a95:	74 05                	je     c0111a9c <sfs_fstat+0x8d>
        return ret;
c0111a97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a9a:	eb 66                	jmp    c0111b02 <sfs_fstat+0xf3>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0111a9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111aa2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111aa6:	74 0d                	je     c0111ab5 <sfs_fstat+0xa6>
c0111aa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111aab:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111aae:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111ab3:	74 19                	je     c0111ace <sfs_fstat+0xbf>
c0111ab5:	68 30 80 11 c0       	push   $0xc0118030
c0111aba:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111abf:	68 b1 02 00 00       	push   $0x2b1
c0111ac4:	68 77 7f 11 c0       	push   $0xc0117f77
c0111ac9:	e8 17 ea fe ff       	call   c01004e5 <__panic>
c0111ace:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ad1:	8b 00                	mov    (%eax),%eax
c0111ad3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0111ad6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ad9:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0111add:	0f b7 d0             	movzwl %ax,%edx
c0111ae0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111ae3:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0111ae6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ae9:	8b 50 08             	mov    0x8(%eax),%edx
c0111aec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111aef:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0111af2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111af5:	8b 10                	mov    (%eax),%edx
c0111af7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111afa:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0111afd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111b02:	c9                   	leave  
c0111b03:	c3                   	ret    

c0111b04 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0111b04:	55                   	push   %ebp
c0111b05:	89 e5                	mov    %esp,%ebp
c0111b07:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0111b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b0d:	8b 40 38             	mov    0x38(%eax),%eax
c0111b10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b17:	74 0a                	je     c0111b23 <sfs_fsync+0x1f>
c0111b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b1c:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b1f:	85 c0                	test   %eax,%eax
c0111b21:	74 19                	je     c0111b3c <sfs_fsync+0x38>
c0111b23:	68 34 82 11 c0       	push   $0xc0118234
c0111b28:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111b2d:	68 bd 02 00 00       	push   $0x2bd
c0111b32:	68 77 7f 11 c0       	push   $0xc0117f77
c0111b37:	e8 a9 e9 fe ff       	call   c01004e5 <__panic>
c0111b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b45:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111b48:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111b4c:	74 0d                	je     c0111b5b <sfs_fsync+0x57>
c0111b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b51:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111b54:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111b59:	74 19                	je     c0111b74 <sfs_fsync+0x70>
c0111b5b:	68 30 80 11 c0       	push   $0xc0118030
c0111b60:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111b65:	68 be 02 00 00       	push   $0x2be
c0111b6a:	68 77 7f 11 c0       	push   $0xc0117f77
c0111b6f:	e8 71 e9 fe ff       	call   c01004e5 <__panic>
c0111b74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0111b7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0111b81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b84:	8b 40 08             	mov    0x8(%eax),%eax
c0111b87:	85 c0                	test   %eax,%eax
c0111b89:	74 62                	je     c0111bed <sfs_fsync+0xe9>
        lock_sin(sin);
c0111b8b:	83 ec 0c             	sub    $0xc,%esp
c0111b8e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111b91:	e8 13 ec ff ff       	call   c01107a9 <lock_sin>
c0111b96:	83 c4 10             	add    $0x10,%esp
        {
            if (sin->dirty) {
c0111b99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0111b9f:	85 c0                	test   %eax,%eax
c0111ba1:	74 3c                	je     c0111bdf <sfs_fsync+0xdb>
                sin->dirty = 0;
c0111ba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111ba6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0111bad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111bb0:	8b 50 04             	mov    0x4(%eax),%edx
c0111bb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111bb6:	8b 00                	mov    (%eax),%eax
c0111bb8:	83 ec 0c             	sub    $0xc,%esp
c0111bbb:	6a 00                	push   $0x0
c0111bbd:	52                   	push   %edx
c0111bbe:	6a 40                	push   $0x40
c0111bc0:	50                   	push   %eax
c0111bc1:	ff 75 ec             	pushl  -0x14(%ebp)
c0111bc4:	e8 f6 18 00 00       	call   c01134bf <sfs_wbuf>
c0111bc9:	83 c4 20             	add    $0x20,%esp
c0111bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111bd3:	74 0a                	je     c0111bdf <sfs_fsync+0xdb>
                    sin->dirty = 1;
c0111bd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111bd8:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0111bdf:	83 ec 0c             	sub    $0xc,%esp
c0111be2:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111be5:	e8 da eb ff ff       	call   c01107c4 <unlock_sin>
c0111bea:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c0111bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111bf0:	c9                   	leave  
c0111bf1:	c3                   	ret    

c0111bf2 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0111bf2:	55                   	push   %ebp
c0111bf3:	89 e5                	mov    %esp,%ebp
c0111bf5:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0111bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111bfb:	8b 40 0c             	mov    0xc(%eax),%eax
c0111bfe:	83 f8 02             	cmp    $0x2,%eax
c0111c01:	76 19                	jbe    c0111c1c <sfs_namefile+0x2a>
c0111c03:	83 ec 0c             	sub    $0xc,%esp
c0111c06:	68 04 01 00 00       	push   $0x104
c0111c0b:	e8 40 3c ff ff       	call   c0105850 <kmalloc>
c0111c10:	83 c4 10             	add    $0x10,%esp
c0111c13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111c16:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111c1a:	75 0a                	jne    c0111c26 <sfs_namefile+0x34>
        return -E_NO_MEM;
c0111c1c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111c21:	e9 8d 02 00 00       	jmp    c0111eb3 <sfs_namefile+0x2c1>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0111c26:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c29:	8b 40 38             	mov    0x38(%eax),%eax
c0111c2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111c2f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111c33:	74 0a                	je     c0111c3f <sfs_namefile+0x4d>
c0111c35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c38:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111c3b:	85 c0                	test   %eax,%eax
c0111c3d:	74 19                	je     c0111c58 <sfs_namefile+0x66>
c0111c3f:	68 34 82 11 c0       	push   $0xc0118234
c0111c44:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111c49:	68 da 02 00 00       	push   $0x2da
c0111c4e:	68 77 7f 11 c0       	push   $0xc0117f77
c0111c53:	e8 8d e8 fe ff       	call   c01004e5 <__panic>
c0111c58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c61:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111c64:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0111c68:	74 0d                	je     c0111c77 <sfs_namefile+0x85>
c0111c6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111c6d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111c70:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111c75:	74 19                	je     c0111c90 <sfs_namefile+0x9e>
c0111c77:	68 30 80 11 c0       	push   $0xc0118030
c0111c7c:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111c81:	68 db 02 00 00       	push   $0x2db
c0111c86:	68 77 7f 11 c0       	push   $0xc0117f77
c0111c8b:	e8 55 e8 fe ff       	call   c01004e5 <__panic>
c0111c90:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111c93:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0111c96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c99:	8b 10                	mov    (%eax),%edx
c0111c9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c9e:	8b 40 0c             	mov    0xc(%eax),%eax
c0111ca1:	01 d0                	add    %edx,%eax
c0111ca3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0111ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111ca9:	8b 40 0c             	mov    0xc(%eax),%eax
c0111cac:	83 e8 02             	sub    $0x2,%eax
c0111caf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0111cb2:	83 ec 0c             	sub    $0xc,%esp
c0111cb5:	ff 75 08             	pushl  0x8(%ebp)
c0111cb8:	e8 69 d9 ff ff       	call   c010f626 <inode_ref_inc>
c0111cbd:	83 c4 10             	add    $0x10,%esp
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0111cc0:	83 ec 0c             	sub    $0xc,%esp
c0111cc3:	6a 00                	push   $0x0
c0111cc5:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0111cc8:	50                   	push   %eax
c0111cc9:	68 b8 82 11 c0       	push   $0xc01182b8
c0111cce:	ff 75 f4             	pushl  -0xc(%ebp)
c0111cd1:	ff 75 dc             	pushl  -0x24(%ebp)
c0111cd4:	e8 4a f8 ff ff       	call   c0111523 <sfs_lookup_once>
c0111cd9:	83 c4 20             	add    $0x20,%esp
c0111cdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111cdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ce3:	0f 85 a7 01 00 00    	jne    c0111e90 <sfs_namefile+0x29e>
            goto failed;
        }

        uint32_t ino = sin->ino;
c0111ce9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111cec:	8b 40 04             	mov    0x4(%eax),%eax
c0111cef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0111cf2:	83 ec 0c             	sub    $0xc,%esp
c0111cf5:	ff 75 08             	pushl  0x8(%ebp)
c0111cf8:	e8 43 d9 ff ff       	call   c010f640 <inode_ref_dec>
c0111cfd:	83 c4 10             	add    $0x10,%esp
        if (node == parent) {
c0111d00:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111d03:	39 45 08             	cmp    %eax,0x8(%ebp)
c0111d06:	75 77                	jne    c0111d7f <sfs_namefile+0x18d>
            vop_ref_dec(node);
c0111d08:	83 ec 0c             	sub    $0xc,%esp
c0111d0b:	ff 75 08             	pushl  0x8(%ebp)
c0111d0e:	e8 2d d9 ff ff       	call   c010f640 <inode_ref_dec>
c0111d13:	83 c4 10             	add    $0x10,%esp
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0111d16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d19:	8b 40 0c             	mov    0xc(%eax),%eax
c0111d1c:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0111d1f:	83 e8 02             	sub    $0x2,%eax
c0111d22:	89 45 cc             	mov    %eax,-0x34(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0111d25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d28:	8b 00                	mov    (%eax),%eax
c0111d2a:	83 c0 01             	add    $0x1,%eax
c0111d2d:	83 ec 04             	sub    $0x4,%esp
c0111d30:	ff 75 cc             	pushl  -0x34(%ebp)
c0111d33:	ff 75 ec             	pushl  -0x14(%ebp)
c0111d36:	50                   	push   %eax
c0111d37:	e8 14 1d 00 00       	call   c0113a50 <memmove>
c0111d3c:	83 c4 10             	add    $0x10,%esp
c0111d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0111d42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d45:	83 e8 01             	sub    $0x1,%eax
c0111d48:	c6 00 2f             	movb   $0x2f,(%eax)
c0111d4b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111d4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111d51:	01 d0                	add    %edx,%eax
c0111d53:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0111d56:	83 ec 08             	sub    $0x8,%esp
c0111d59:	ff 75 cc             	pushl  -0x34(%ebp)
c0111d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0111d5f:	e8 06 93 ff ff       	call   c010b06a <iobuf_skip>
c0111d64:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c0111d67:	83 ec 0c             	sub    $0xc,%esp
c0111d6a:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111d6d:	e8 f6 3a ff ff       	call   c0105868 <kfree>
c0111d72:	83 c4 10             	add    $0x10,%esp
    return 0;
c0111d75:	b8 00 00 00 00       	mov    $0x0,%eax
c0111d7a:	e9 34 01 00 00       	jmp    c0111eb3 <sfs_namefile+0x2c1>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0111d7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111d82:	89 45 08             	mov    %eax,0x8(%ebp)
c0111d85:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d88:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0111d8b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0111d8f:	74 0d                	je     c0111d9e <sfs_namefile+0x1ac>
c0111d91:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111d94:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111d97:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111d9c:	74 19                	je     c0111db7 <sfs_namefile+0x1c5>
c0111d9e:	68 30 80 11 c0       	push   $0xc0118030
c0111da3:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111da8:	68 ee 02 00 00       	push   $0x2ee
c0111dad:	68 77 7f 11 c0       	push   $0xc0117f77
c0111db2:	e8 2e e7 fe ff       	call   c01004e5 <__panic>
c0111db7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0111dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111dc0:	8b 40 04             	mov    0x4(%eax),%eax
c0111dc3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0111dc6:	74 0f                	je     c0111dd7 <sfs_namefile+0x1e5>
c0111dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111dcb:	8b 00                	mov    (%eax),%eax
c0111dcd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0111dd1:	66 83 f8 02          	cmp    $0x2,%ax
c0111dd5:	74 19                	je     c0111df0 <sfs_namefile+0x1fe>
c0111dd7:	68 bc 82 11 c0       	push   $0xc01182bc
c0111ddc:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111de1:	68 ef 02 00 00       	push   $0x2ef
c0111de6:	68 77 7f 11 c0       	push   $0xc0117f77
c0111deb:	e8 f5 e6 fe ff       	call   c01004e5 <__panic>

        lock_sin(sin);
c0111df0:	83 ec 0c             	sub    $0xc,%esp
c0111df3:	ff 75 f4             	pushl  -0xc(%ebp)
c0111df6:	e8 ae e9 ff ff       	call   c01107a9 <lock_sin>
c0111dfb:	83 c4 10             	add    $0x10,%esp
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0111dfe:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111e01:	ff 75 d4             	pushl  -0x2c(%ebp)
c0111e04:	ff 75 f4             	pushl  -0xc(%ebp)
c0111e07:	ff 75 dc             	pushl  -0x24(%ebp)
c0111e0a:	e8 b4 f6 ff ff       	call   c01114c3 <sfs_dirent_findino_nolock>
c0111e0f:	83 c4 10             	add    $0x10,%esp
c0111e12:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0111e15:	83 ec 0c             	sub    $0xc,%esp
c0111e18:	ff 75 f4             	pushl  -0xc(%ebp)
c0111e1b:	e8 a4 e9 ff ff       	call   c01107c4 <unlock_sin>
c0111e20:	83 c4 10             	add    $0x10,%esp

        if (ret != 0) {
c0111e23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111e27:	75 6a                	jne    c0111e93 <sfs_namefile+0x2a1>
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0111e29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e2c:	83 c0 04             	add    $0x4,%eax
c0111e2f:	83 ec 0c             	sub    $0xc,%esp
c0111e32:	50                   	push   %eax
c0111e33:	e8 7e 18 00 00       	call   c01136b6 <strlen>
c0111e38:	83 c4 10             	add    $0x10,%esp
c0111e3b:	83 c0 01             	add    $0x1,%eax
c0111e3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111e41:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111e44:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111e47:	77 3d                	ja     c0111e86 <sfs_namefile+0x294>
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0111e49:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111e4c:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0111e4f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111e52:	f7 d8                	neg    %eax
c0111e54:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0111e57:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111e5a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111e5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e60:	83 c0 04             	add    $0x4,%eax
c0111e63:	83 ec 04             	sub    $0x4,%esp
c0111e66:	52                   	push   %edx
c0111e67:	50                   	push   %eax
c0111e68:	ff 75 ec             	pushl  -0x14(%ebp)
c0111e6b:	e8 83 1c 00 00       	call   c0113af3 <memcpy>
c0111e70:	83 c4 10             	add    $0x10,%esp
        ptr[alen - 1] = '/';
c0111e73:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111e76:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111e79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e7c:	01 d0                	add    %edx,%eax
c0111e7e:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0111e81:	e9 3a fe ff ff       	jmp    c0111cc0 <sfs_namefile+0xce>
        if (ret != 0) {
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
c0111e86:	90                   	nop
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0111e87:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0111e8e:	eb 04                	jmp    c0111e94 <sfs_namefile+0x2a2>
    size_t alen, resid = iob->io_resid - 2;
    vop_ref_inc(node);
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
            goto failed;
c0111e90:	90                   	nop
c0111e91:	eb 01                	jmp    c0111e94 <sfs_namefile+0x2a2>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
        }
        unlock_sin(sin);

        if (ret != 0) {
            goto failed;
c0111e93:	90                   	nop
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0111e94:	83 ec 0c             	sub    $0xc,%esp
c0111e97:	ff 75 08             	pushl  0x8(%ebp)
c0111e9a:	e8 a1 d7 ff ff       	call   c010f640 <inode_ref_dec>
c0111e9f:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c0111ea2:	83 ec 0c             	sub    $0xc,%esp
c0111ea5:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111ea8:	e8 bb 39 ff ff       	call   c0105868 <kfree>
c0111ead:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111eb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0111eb3:	c9                   	leave  
c0111eb4:	c3                   	ret    

c0111eb5 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0111eb5:	55                   	push   %ebp
c0111eb6:	89 e5                	mov    %esp,%ebp
c0111eb8:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c0111ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111ebe:	8b 00                	mov    (%eax),%eax
c0111ec0:	8b 40 08             	mov    0x8(%eax),%eax
c0111ec3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0111ec6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111ecd:	eb 40                	jmp    c0111f0f <sfs_getdirentry_sub_nolock+0x5a>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0111ecf:	ff 75 14             	pushl  0x14(%ebp)
c0111ed2:	ff 75 f4             	pushl  -0xc(%ebp)
c0111ed5:	ff 75 0c             	pushl  0xc(%ebp)
c0111ed8:	ff 75 08             	pushl  0x8(%ebp)
c0111edb:	e8 fd f3 ff ff       	call   c01112dd <sfs_dirent_read_nolock>
c0111ee0:	83 c4 10             	add    $0x10,%esp
c0111ee3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111ee6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111eea:	74 05                	je     c0111ef1 <sfs_getdirentry_sub_nolock+0x3c>
            return ret;
c0111eec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111eef:	eb 2b                	jmp    c0111f1c <sfs_getdirentry_sub_nolock+0x67>
        }
        if (entry->ino != 0) {
c0111ef1:	8b 45 14             	mov    0x14(%ebp),%eax
c0111ef4:	8b 00                	mov    (%eax),%eax
c0111ef6:	85 c0                	test   %eax,%eax
c0111ef8:	74 11                	je     c0111f0b <sfs_getdirentry_sub_nolock+0x56>
            if (slot == 0) {
c0111efa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111efe:	75 07                	jne    c0111f07 <sfs_getdirentry_sub_nolock+0x52>
                return 0;
c0111f00:	b8 00 00 00 00       	mov    $0x0,%eax
c0111f05:	eb 15                	jmp    c0111f1c <sfs_getdirentry_sub_nolock+0x67>
            }
            slot --;
c0111f07:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0111f0b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111f0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0111f15:	7c b8                	jl     c0111ecf <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0111f17:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0111f1c:	c9                   	leave  
c0111f1d:	c3                   	ret    

c0111f1e <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0111f1e:	55                   	push   %ebp
c0111f1f:	89 e5                	mov    %esp,%ebp
c0111f21:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0111f24:	83 ec 0c             	sub    $0xc,%esp
c0111f27:	68 04 01 00 00       	push   $0x104
c0111f2c:	e8 1f 39 ff ff       	call   c0105850 <kmalloc>
c0111f31:	83 c4 10             	add    $0x10,%esp
c0111f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111f37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111f3b:	75 0a                	jne    c0111f47 <sfs_getdirentry+0x29>
        return -E_NO_MEM;
c0111f3d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111f42:	e9 49 01 00 00       	jmp    c0112090 <sfs_getdirentry+0x172>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0111f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f4a:	8b 40 38             	mov    0x38(%eax),%eax
c0111f4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111f50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111f54:	74 0a                	je     c0111f60 <sfs_getdirentry+0x42>
c0111f56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f59:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111f5c:	85 c0                	test   %eax,%eax
c0111f5e:	74 19                	je     c0111f79 <sfs_getdirentry+0x5b>
c0111f60:	68 34 82 11 c0       	push   $0xc0118234
c0111f65:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111f6a:	68 30 03 00 00       	push   $0x330
c0111f6f:	68 77 7f 11 c0       	push   $0xc0117f77
c0111f74:	e8 6c e5 fe ff       	call   c01004e5 <__panic>
c0111f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111f7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111f85:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111f89:	74 0d                	je     c0111f98 <sfs_getdirentry+0x7a>
c0111f8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111f8e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111f91:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111f96:	74 19                	je     c0111fb1 <sfs_getdirentry+0x93>
c0111f98:	68 30 80 11 c0       	push   $0xc0118030
c0111f9d:	68 df 7f 11 c0       	push   $0xc0117fdf
c0111fa2:	68 31 03 00 00       	push   $0x331
c0111fa7:	68 77 7f 11 c0       	push   $0xc0117f77
c0111fac:	e8 34 e5 fe ff       	call   c01004e5 <__panic>
c0111fb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111fb4:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0111fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111fba:	8b 40 04             	mov    0x4(%eax),%eax
c0111fbd:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0111fc0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111fc4:	78 0a                	js     c0111fd0 <sfs_getdirentry+0xb2>
c0111fc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111fc9:	0f b6 c0             	movzbl %al,%eax
c0111fcc:	85 c0                	test   %eax,%eax
c0111fce:	74 18                	je     c0111fe8 <sfs_getdirentry+0xca>
        kfree(entry);
c0111fd0:	83 ec 0c             	sub    $0xc,%esp
c0111fd3:	ff 75 f0             	pushl  -0x10(%ebp)
c0111fd6:	e8 8d 38 ff ff       	call   c0105868 <kfree>
c0111fdb:	83 c4 10             	add    $0x10,%esp
        return -E_INVAL;
c0111fde:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111fe3:	e9 a8 00 00 00       	jmp    c0112090 <sfs_getdirentry+0x172>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0111fe8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111feb:	c1 e8 08             	shr    $0x8,%eax
c0111fee:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111ff1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111ff4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ff7:	8b 00                	mov    (%eax),%eax
c0111ff9:	8b 40 08             	mov    0x8(%eax),%eax
c0111ffc:	39 c2                	cmp    %eax,%edx
c0111ffe:	76 15                	jbe    c0112015 <sfs_getdirentry+0xf7>
        kfree(entry);
c0112000:	83 ec 0c             	sub    $0xc,%esp
c0112003:	ff 75 f0             	pushl  -0x10(%ebp)
c0112006:	e8 5d 38 ff ff       	call   c0105868 <kfree>
c011200b:	83 c4 10             	add    $0x10,%esp
        return -E_NOENT;
c011200e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0112013:	eb 7b                	jmp    c0112090 <sfs_getdirentry+0x172>
    }
    lock_sin(sin);
c0112015:	83 ec 0c             	sub    $0xc,%esp
c0112018:	ff 75 e0             	pushl  -0x20(%ebp)
c011201b:	e8 89 e7 ff ff       	call   c01107a9 <lock_sin>
c0112020:	83 c4 10             	add    $0x10,%esp
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0112023:	ff 75 f0             	pushl  -0x10(%ebp)
c0112026:	ff 75 d8             	pushl  -0x28(%ebp)
c0112029:	ff 75 e0             	pushl  -0x20(%ebp)
c011202c:	ff 75 e8             	pushl  -0x18(%ebp)
c011202f:	e8 81 fe ff ff       	call   c0111eb5 <sfs_getdirentry_sub_nolock>
c0112034:	83 c4 10             	add    $0x10,%esp
c0112037:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011203a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011203e:	74 10                	je     c0112050 <sfs_getdirentry+0x132>
        unlock_sin(sin);
c0112040:	83 ec 0c             	sub    $0xc,%esp
c0112043:	ff 75 e0             	pushl  -0x20(%ebp)
c0112046:	e8 79 e7 ff ff       	call   c01107c4 <unlock_sin>
c011204b:	83 c4 10             	add    $0x10,%esp
        goto out;
c011204e:	eb 2f                	jmp    c011207f <sfs_getdirentry+0x161>
    }
    unlock_sin(sin);
c0112050:	83 ec 0c             	sub    $0xc,%esp
c0112053:	ff 75 e0             	pushl  -0x20(%ebp)
c0112056:	e8 69 e7 ff ff       	call   c01107c4 <unlock_sin>
c011205b:	83 c4 10             	add    $0x10,%esp
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c011205e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112061:	83 c0 04             	add    $0x4,%eax
c0112064:	83 ec 0c             	sub    $0xc,%esp
c0112067:	6a 00                	push   $0x0
c0112069:	6a 01                	push   $0x1
c011206b:	68 00 01 00 00       	push   $0x100
c0112070:	50                   	push   %eax
c0112071:	ff 75 0c             	pushl  0xc(%ebp)
c0112074:	e8 e9 8e ff ff       	call   c010af62 <iobuf_move>
c0112079:	83 c4 20             	add    $0x20,%esp
c011207c:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c011207f:	83 ec 0c             	sub    $0xc,%esp
c0112082:	ff 75 f0             	pushl  -0x10(%ebp)
c0112085:	e8 de 37 ff ff       	call   c0105868 <kfree>
c011208a:	83 c4 10             	add    $0x10,%esp
    return ret;
c011208d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112090:	c9                   	leave  
c0112091:	c3                   	ret    

c0112092 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0112092:	55                   	push   %ebp
c0112093:	89 e5                	mov    %esp,%ebp
c0112095:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112098:	8b 45 08             	mov    0x8(%ebp),%eax
c011209b:	8b 40 38             	mov    0x38(%eax),%eax
c011209e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01120a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01120a5:	74 0a                	je     c01120b1 <sfs_reclaim+0x1f>
c01120a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120aa:	8b 40 6c             	mov    0x6c(%eax),%eax
c01120ad:	85 c0                	test   %eax,%eax
c01120af:	74 19                	je     c01120ca <sfs_reclaim+0x38>
c01120b1:	68 34 82 11 c0       	push   $0xc0118234
c01120b6:	68 df 7f 11 c0       	push   $0xc0117fdf
c01120bb:	68 4e 03 00 00       	push   $0x34e
c01120c0:	68 77 7f 11 c0       	push   $0xc0117f77
c01120c5:	e8 1b e4 fe ff       	call   c01004e5 <__panic>
c01120ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01120d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01120d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01120d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01120da:	74 0d                	je     c01120e9 <sfs_reclaim+0x57>
c01120dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120df:	8b 40 2c             	mov    0x2c(%eax),%eax
c01120e2:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01120e7:	74 19                	je     c0112102 <sfs_reclaim+0x70>
c01120e9:	68 30 80 11 c0       	push   $0xc0118030
c01120ee:	68 df 7f 11 c0       	push   $0xc0117fdf
c01120f3:	68 4f 03 00 00       	push   $0x34f
c01120f8:	68 77 7f 11 c0       	push   $0xc0117f77
c01120fd:	e8 e3 e3 fe ff       	call   c01004e5 <__panic>
c0112102:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112105:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0112108:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c011210f:	83 ec 0c             	sub    $0xc,%esp
c0112112:	ff 75 ec             	pushl  -0x14(%ebp)
c0112115:	e8 18 e6 ff ff       	call   c0110732 <lock_sfs_fs>
c011211a:	83 c4 10             	add    $0x10,%esp
    assert(sin->reclaim_count > 0);
c011211d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112120:	8b 40 0c             	mov    0xc(%eax),%eax
c0112123:	85 c0                	test   %eax,%eax
c0112125:	7f 19                	jg     c0112140 <sfs_reclaim+0xae>
c0112127:	68 ee 82 11 c0       	push   $0xc01182ee
c011212c:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112131:	68 54 03 00 00       	push   $0x354
c0112136:	68 77 7f 11 c0       	push   $0xc0117f77
c011213b:	e8 a5 e3 fe ff       	call   c01004e5 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0112140:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112143:	8b 40 0c             	mov    0xc(%eax),%eax
c0112146:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112149:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011214c:	89 50 0c             	mov    %edx,0xc(%eax)
c011214f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112152:	8b 40 0c             	mov    0xc(%eax),%eax
c0112155:	85 c0                	test   %eax,%eax
c0112157:	0f 85 9b 01 00 00    	jne    c01122f8 <sfs_reclaim+0x266>
c011215d:	83 ec 0c             	sub    $0xc,%esp
c0112160:	ff 75 08             	pushl  0x8(%ebp)
c0112163:	e8 36 e6 ff ff       	call   c011079e <inode_ref_count>
c0112168:	83 c4 10             	add    $0x10,%esp
c011216b:	85 c0                	test   %eax,%eax
c011216d:	0f 85 85 01 00 00    	jne    c01122f8 <sfs_reclaim+0x266>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0112173:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112176:	8b 00                	mov    (%eax),%eax
c0112178:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011217c:	66 85 c0             	test   %ax,%ax
c011217f:	75 72                	jne    c01121f3 <sfs_reclaim+0x161>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0112181:	8b 45 08             	mov    0x8(%ebp),%eax
c0112184:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0112187:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011218b:	74 17                	je     c01121a4 <sfs_reclaim+0x112>
c011218d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112190:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112193:	85 c0                	test   %eax,%eax
c0112195:	74 0d                	je     c01121a4 <sfs_reclaim+0x112>
c0112197:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011219a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011219d:	8b 40 30             	mov    0x30(%eax),%eax
c01121a0:	85 c0                	test   %eax,%eax
c01121a2:	75 19                	jne    c01121bd <sfs_reclaim+0x12b>
c01121a4:	68 08 83 11 c0       	push   $0xc0118308
c01121a9:	68 df 7f 11 c0       	push   $0xc0117fdf
c01121ae:	68 59 03 00 00       	push   $0x359
c01121b3:	68 77 7f 11 c0       	push   $0xc0117f77
c01121b8:	e8 28 e3 fe ff       	call   c01004e5 <__panic>
c01121bd:	83 ec 08             	sub    $0x8,%esp
c01121c0:	68 59 83 11 c0       	push   $0xc0118359
c01121c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01121c8:	e8 2b d6 ff ff       	call   c010f7f8 <inode_check>
c01121cd:	83 c4 10             	add    $0x10,%esp
c01121d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121d3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01121d6:	8b 40 30             	mov    0x30(%eax),%eax
c01121d9:	83 ec 08             	sub    $0x8,%esp
c01121dc:	6a 00                	push   $0x0
c01121de:	ff 75 08             	pushl  0x8(%ebp)
c01121e1:	ff d0                	call   *%eax
c01121e3:	83 c4 10             	add    $0x10,%esp
c01121e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01121e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01121ed:	0f 85 01 01 00 00    	jne    c01122f4 <sfs_reclaim+0x262>
            goto failed_unlock;
        }
    }
    if (sin->dirty) {
c01121f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01121f6:	8b 40 08             	mov    0x8(%eax),%eax
c01121f9:	85 c0                	test   %eax,%eax
c01121fb:	74 70                	je     c011226d <sfs_reclaim+0x1db>
        if ((ret = vop_fsync(node)) != 0) {
c01121fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0112200:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112203:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112207:	74 17                	je     c0112220 <sfs_reclaim+0x18e>
c0112209:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011220c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011220f:	85 c0                	test   %eax,%eax
c0112211:	74 0d                	je     c0112220 <sfs_reclaim+0x18e>
c0112213:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112216:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112219:	8b 40 18             	mov    0x18(%eax),%eax
c011221c:	85 c0                	test   %eax,%eax
c011221e:	75 19                	jne    c0112239 <sfs_reclaim+0x1a7>
c0112220:	68 c4 81 11 c0       	push   $0xc01181c4
c0112225:	68 df 7f 11 c0       	push   $0xc0117fdf
c011222a:	68 5e 03 00 00       	push   $0x35e
c011222f:	68 77 7f 11 c0       	push   $0xc0117f77
c0112234:	e8 ac e2 fe ff       	call   c01004e5 <__panic>
c0112239:	83 ec 08             	sub    $0x8,%esp
c011223c:	68 12 82 11 c0       	push   $0xc0118212
c0112241:	ff 75 dc             	pushl  -0x24(%ebp)
c0112244:	e8 af d5 ff ff       	call   c010f7f8 <inode_check>
c0112249:	83 c4 10             	add    $0x10,%esp
c011224c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011224f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112252:	8b 40 18             	mov    0x18(%eax),%eax
c0112255:	83 ec 0c             	sub    $0xc,%esp
c0112258:	ff 75 08             	pushl  0x8(%ebp)
c011225b:	ff d0                	call   *%eax
c011225d:	83 c4 10             	add    $0x10,%esp
c0112260:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112263:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112267:	0f 85 8a 00 00 00    	jne    c01122f7 <sfs_reclaim+0x265>
            goto failed_unlock;
        }
    }
    sfs_remove_links(sin);
c011226d:	83 ec 0c             	sub    $0xc,%esp
c0112270:	ff 75 e4             	pushl  -0x1c(%ebp)
c0112273:	e8 99 e6 ff ff       	call   c0110911 <sfs_remove_links>
c0112278:	83 c4 10             	add    $0x10,%esp
    unlock_sfs_fs(sfs);
c011227b:	83 ec 0c             	sub    $0xc,%esp
c011227e:	ff 75 ec             	pushl  -0x14(%ebp)
c0112281:	e8 e2 e4 ff ff       	call   c0110768 <unlock_sfs_fs>
c0112286:	83 c4 10             	add    $0x10,%esp

    if (sin->din->nlinks == 0) {
c0112289:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011228c:	8b 00                	mov    (%eax),%eax
c011228e:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112292:	66 85 c0             	test   %ax,%ax
c0112295:	75 37                	jne    c01122ce <sfs_reclaim+0x23c>
        sfs_block_free(sfs, sin->ino);
c0112297:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011229a:	8b 40 04             	mov    0x4(%eax),%eax
c011229d:	83 ec 08             	sub    $0x8,%esp
c01122a0:	50                   	push   %eax
c01122a1:	ff 75 ec             	pushl  -0x14(%ebp)
c01122a4:	e8 c5 e7 ff ff       	call   c0110a6e <sfs_block_free>
c01122a9:	83 c4 10             	add    $0x10,%esp
        if ((ent = sin->din->indirect) != 0) {
c01122ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01122af:	8b 00                	mov    (%eax),%eax
c01122b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01122b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01122b7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01122bb:	74 11                	je     c01122ce <sfs_reclaim+0x23c>
            sfs_block_free(sfs, ent);
c01122bd:	83 ec 08             	sub    $0x8,%esp
c01122c0:	ff 75 d8             	pushl  -0x28(%ebp)
c01122c3:	ff 75 ec             	pushl  -0x14(%ebp)
c01122c6:	e8 a3 e7 ff ff       	call   c0110a6e <sfs_block_free>
c01122cb:	83 c4 10             	add    $0x10,%esp
        }
    }
    kfree(sin->din);
c01122ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01122d1:	8b 00                	mov    (%eax),%eax
c01122d3:	83 ec 0c             	sub    $0xc,%esp
c01122d6:	50                   	push   %eax
c01122d7:	e8 8c 35 ff ff       	call   c0105868 <kfree>
c01122dc:	83 c4 10             	add    $0x10,%esp
    vop_kill(node);
c01122df:	83 ec 0c             	sub    $0xc,%esp
c01122e2:	ff 75 08             	pushl  0x8(%ebp)
c01122e5:	e8 d8 d2 ff ff       	call   c010f5c2 <inode_kill>
c01122ea:	83 c4 10             	add    $0x10,%esp
    return 0;
c01122ed:	b8 00 00 00 00       	mov    $0x0,%eax
c01122f2:	eb 15                	jmp    c0112309 <sfs_reclaim+0x277>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
        if ((ret = vop_truncate(node, 0)) != 0) {
            goto failed_unlock;
c01122f4:	90                   	nop
c01122f5:	eb 01                	jmp    c01122f8 <sfs_reclaim+0x266>
        }
    }
    if (sin->dirty) {
        if ((ret = vop_fsync(node)) != 0) {
            goto failed_unlock;
c01122f7:	90                   	nop
    kfree(sin->din);
    vop_kill(node);
    return 0;

failed_unlock:
    unlock_sfs_fs(sfs);
c01122f8:	83 ec 0c             	sub    $0xc,%esp
c01122fb:	ff 75 ec             	pushl  -0x14(%ebp)
c01122fe:	e8 65 e4 ff ff       	call   c0110768 <unlock_sfs_fs>
c0112303:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112306:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112309:	c9                   	leave  
c011230a:	c3                   	ret    

c011230b <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c011230b:	55                   	push   %ebp
c011230c:	89 e5                	mov    %esp,%ebp
c011230e:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0112311:	8b 45 08             	mov    0x8(%ebp),%eax
c0112314:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112317:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011231b:	74 0d                	je     c011232a <sfs_gettype+0x1f>
c011231d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112320:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112323:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112328:	74 19                	je     c0112343 <sfs_gettype+0x38>
c011232a:	68 30 80 11 c0       	push   $0xc0118030
c011232f:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112334:	68 79 03 00 00       	push   $0x379
c0112339:	68 77 7f 11 c0       	push   $0xc0117f77
c011233e:	e8 a2 e1 fe ff       	call   c01004e5 <__panic>
c0112343:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112346:	8b 00                	mov    (%eax),%eax
c0112348:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c011234b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011234e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112352:	0f b7 c0             	movzwl %ax,%eax
c0112355:	83 f8 02             	cmp    $0x2,%eax
c0112358:	74 0c                	je     c0112366 <sfs_gettype+0x5b>
c011235a:	83 f8 03             	cmp    $0x3,%eax
c011235d:	74 27                	je     c0112386 <sfs_gettype+0x7b>
c011235f:	83 f8 01             	cmp    $0x1,%eax
c0112362:	74 12                	je     c0112376 <sfs_gettype+0x6b>
c0112364:	eb 30                	jmp    c0112396 <sfs_gettype+0x8b>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0112366:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112369:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c011236f:	b8 00 00 00 00       	mov    $0x0,%eax
c0112374:	eb 3f                	jmp    c01123b5 <sfs_gettype+0xaa>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0112376:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112379:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c011237f:	b8 00 00 00 00       	mov    $0x0,%eax
c0112384:	eb 2f                	jmp    c01123b5 <sfs_gettype+0xaa>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0112386:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112389:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c011238f:	b8 00 00 00 00       	mov    $0x0,%eax
c0112394:	eb 1f                	jmp    c01123b5 <sfs_gettype+0xaa>
    }
    panic("invalid file type %d.\n", din->type);
c0112396:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112399:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011239d:	0f b7 c0             	movzwl %ax,%eax
c01123a0:	50                   	push   %eax
c01123a1:	68 60 7f 11 c0       	push   $0xc0117f60
c01123a6:	68 85 03 00 00       	push   $0x385
c01123ab:	68 77 7f 11 c0       	push   $0xc0117f77
c01123b0:	e8 30 e1 fe ff       	call   c01004e5 <__panic>
}
c01123b5:	c9                   	leave  
c01123b6:	c3                   	ret    

c01123b7 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c01123b7:	55                   	push   %ebp
c01123b8:	89 e5                	mov    %esp,%ebp
c01123ba:	83 ec 18             	sub    $0x18,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c01123bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01123c1:	78 0a                	js     c01123cd <sfs_tryseek+0x16>
c01123c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123c6:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01123cb:	76 0a                	jbe    c01123d7 <sfs_tryseek+0x20>
        return -E_INVAL;
c01123cd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01123d2:	e9 b3 00 00 00       	jmp    c011248a <sfs_tryseek+0xd3>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01123d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01123da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01123dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01123e1:	74 0d                	je     c01123f0 <sfs_tryseek+0x39>
c01123e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123e6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01123e9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01123ee:	74 19                	je     c0112409 <sfs_tryseek+0x52>
c01123f0:	68 30 80 11 c0       	push   $0xc0118030
c01123f5:	68 df 7f 11 c0       	push   $0xc0117fdf
c01123fa:	68 90 03 00 00       	push   $0x390
c01123ff:	68 77 7f 11 c0       	push   $0xc0117f77
c0112404:	e8 dc e0 fe ff       	call   c01004e5 <__panic>
c0112409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011240c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c011240f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112412:	8b 00                	mov    (%eax),%eax
c0112414:	8b 10                	mov    (%eax),%edx
c0112416:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112419:	39 c2                	cmp    %eax,%edx
c011241b:	73 68                	jae    c0112485 <sfs_tryseek+0xce>
        return vop_truncate(node, pos);
c011241d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112420:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112423:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112427:	74 17                	je     c0112440 <sfs_tryseek+0x89>
c0112429:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011242c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011242f:	85 c0                	test   %eax,%eax
c0112431:	74 0d                	je     c0112440 <sfs_tryseek+0x89>
c0112433:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112436:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112439:	8b 40 30             	mov    0x30(%eax),%eax
c011243c:	85 c0                	test   %eax,%eax
c011243e:	75 19                	jne    c0112459 <sfs_tryseek+0xa2>
c0112440:	68 08 83 11 c0       	push   $0xc0118308
c0112445:	68 df 7f 11 c0       	push   $0xc0117fdf
c011244a:	68 92 03 00 00       	push   $0x392
c011244f:	68 77 7f 11 c0       	push   $0xc0117f77
c0112454:	e8 8c e0 fe ff       	call   c01004e5 <__panic>
c0112459:	83 ec 08             	sub    $0x8,%esp
c011245c:	68 59 83 11 c0       	push   $0xc0118359
c0112461:	ff 75 ec             	pushl  -0x14(%ebp)
c0112464:	e8 8f d3 ff ff       	call   c010f7f8 <inode_check>
c0112469:	83 c4 10             	add    $0x10,%esp
c011246c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011246f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112472:	8b 40 30             	mov    0x30(%eax),%eax
c0112475:	83 ec 08             	sub    $0x8,%esp
c0112478:	ff 75 0c             	pushl  0xc(%ebp)
c011247b:	ff 75 08             	pushl  0x8(%ebp)
c011247e:	ff d0                	call   *%eax
c0112480:	83 c4 10             	add    $0x10,%esp
c0112483:	eb 05                	jmp    c011248a <sfs_tryseek+0xd3>
    }
    return 0;
c0112485:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011248a:	c9                   	leave  
c011248b:	c3                   	ret    

c011248c <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c011248c:	55                   	push   %ebp
c011248d:	89 e5                	mov    %esp,%ebp
c011248f:	83 ec 38             	sub    $0x38,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0112492:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0112496:	78 0a                	js     c01124a2 <sfs_truncfile+0x16>
c0112498:	8b 45 0c             	mov    0xc(%ebp),%eax
c011249b:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01124a0:	76 0a                	jbe    c01124ac <sfs_truncfile+0x20>
        return -E_INVAL;
c01124a2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01124a7:	e9 9e 01 00 00       	jmp    c011264a <sfs_truncfile+0x1be>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01124ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01124af:	8b 40 38             	mov    0x38(%eax),%eax
c01124b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01124b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01124b9:	74 0a                	je     c01124c5 <sfs_truncfile+0x39>
c01124bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124be:	8b 40 6c             	mov    0x6c(%eax),%eax
c01124c1:	85 c0                	test   %eax,%eax
c01124c3:	74 19                	je     c01124de <sfs_truncfile+0x52>
c01124c5:	68 34 82 11 c0       	push   $0xc0118234
c01124ca:	68 df 7f 11 c0       	push   $0xc0117fdf
c01124cf:	68 9f 03 00 00       	push   $0x39f
c01124d4:	68 77 7f 11 c0       	push   $0xc0117f77
c01124d9:	e8 07 e0 fe ff       	call   c01004e5 <__panic>
c01124de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01124e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01124e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01124ea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01124ee:	74 0d                	je     c01124fd <sfs_truncfile+0x71>
c01124f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01124f3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01124f6:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01124fb:	74 19                	je     c0112516 <sfs_truncfile+0x8a>
c01124fd:	68 30 80 11 c0       	push   $0xc0118030
c0112502:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112507:	68 a0 03 00 00       	push   $0x3a0
c011250c:	68 77 7f 11 c0       	push   $0xc0117f77
c0112511:	e8 cf df fe ff       	call   c01004e5 <__panic>
c0112516:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112519:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c011251c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011251f:	8b 00                	mov    (%eax),%eax
c0112521:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0112524:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c011252b:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0112532:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112535:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112538:	01 d0                	add    %edx,%eax
c011253a:	83 e8 01             	sub    $0x1,%eax
c011253d:	ba 00 00 00 00       	mov    $0x0,%edx
c0112542:	f7 75 d8             	divl   -0x28(%ebp)
c0112545:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0112548:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011254b:	8b 10                	mov    (%eax),%edx
c011254d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112550:	39 c2                	cmp    %eax,%edx
c0112552:	75 2e                	jne    c0112582 <sfs_truncfile+0xf6>
        assert(tblks == din->blocks);
c0112554:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112557:	8b 40 08             	mov    0x8(%eax),%eax
c011255a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011255d:	74 19                	je     c0112578 <sfs_truncfile+0xec>
c011255f:	68 62 83 11 c0       	push   $0xc0118362
c0112564:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112569:	68 a7 03 00 00       	push   $0x3a7
c011256e:	68 77 7f 11 c0       	push   $0xc0117f77
c0112573:	e8 6d df fe ff       	call   c01004e5 <__panic>
        return 0;
c0112578:	b8 00 00 00 00       	mov    $0x0,%eax
c011257d:	e9 c8 00 00 00       	jmp    c011264a <sfs_truncfile+0x1be>
    }

    lock_sin(sin);
c0112582:	83 ec 0c             	sub    $0xc,%esp
c0112585:	ff 75 e0             	pushl  -0x20(%ebp)
c0112588:	e8 1c e2 ff ff       	call   c01107a9 <lock_sin>
c011258d:	83 c4 10             	add    $0x10,%esp
	// old number of disk blocks of file
    nblks = din->blocks;
c0112590:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112593:	8b 40 08             	mov    0x8(%eax),%eax
c0112596:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0112599:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011259c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011259f:	73 2c                	jae    c01125cd <sfs_truncfile+0x141>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c01125a1:	eb 20                	jmp    c01125c3 <sfs_truncfile+0x137>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c01125a3:	6a 00                	push   $0x0
c01125a5:	ff 75 f0             	pushl  -0x10(%ebp)
c01125a8:	ff 75 e0             	pushl  -0x20(%ebp)
c01125ab:	ff 75 e8             	pushl  -0x18(%ebp)
c01125ae:	e8 ea eb ff ff       	call   c011119d <sfs_bmap_load_nolock>
c01125b3:	83 c4 10             	add    $0x10,%esp
c01125b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01125bd:	75 76                	jne    c0112635 <sfs_truncfile+0x1a9>
                goto out_unlock;
            }
            nblks ++;
c01125bf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c01125c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125c6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01125c9:	75 d8                	jne    c01125a3 <sfs_truncfile+0x117>
c01125cb:	eb 30                	jmp    c01125fd <sfs_truncfile+0x171>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c01125cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01125d0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01125d3:	73 28                	jae    c01125fd <sfs_truncfile+0x171>
		// try to reduce the file size 
        while (tblks != nblks) {
c01125d5:	eb 1e                	jmp    c01125f5 <sfs_truncfile+0x169>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c01125d7:	83 ec 08             	sub    $0x8,%esp
c01125da:	ff 75 e0             	pushl  -0x20(%ebp)
c01125dd:	ff 75 e8             	pushl  -0x18(%ebp)
c01125e0:	e8 7e ec ff ff       	call   c0111263 <sfs_bmap_truncate_nolock>
c01125e5:	83 c4 10             	add    $0x10,%esp
c01125e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01125ef:	75 47                	jne    c0112638 <sfs_truncfile+0x1ac>
                goto out_unlock;
            }
            nblks --;
c01125f1:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c01125f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01125f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01125fb:	75 da                	jne    c01125d7 <sfs_truncfile+0x14b>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c01125fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112600:	8b 40 08             	mov    0x8(%eax),%eax
c0112603:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112606:	74 19                	je     c0112621 <sfs_truncfile+0x195>
c0112608:	68 77 83 11 c0       	push   $0xc0118377
c011260d:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112612:	68 c0 03 00 00       	push   $0x3c0
c0112617:	68 77 7f 11 c0       	push   $0xc0117f77
c011261c:	e8 c4 de fe ff       	call   c01004e5 <__panic>
    din->size = len;
c0112621:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112624:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112627:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0112629:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011262c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c0112633:	eb 04                	jmp    c0112639 <sfs_truncfile+0x1ad>
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
                goto out_unlock;
c0112635:	90                   	nop
c0112636:	eb 01                	jmp    c0112639 <sfs_truncfile+0x1ad>
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
                goto out_unlock;
c0112638:	90                   	nop
    assert(din->blocks == tblks);
    din->size = len;
    sin->dirty = 1;

out_unlock:
    unlock_sin(sin);
c0112639:	83 ec 0c             	sub    $0xc,%esp
c011263c:	ff 75 e0             	pushl  -0x20(%ebp)
c011263f:	e8 80 e1 ff ff       	call   c01107c4 <unlock_sin>
c0112644:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112647:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011264a:	c9                   	leave  
c011264b:	c3                   	ret    

c011264c <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c011264c:	55                   	push   %ebp
c011264d:	89 e5                	mov    %esp,%ebp
c011264f:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112652:	8b 45 08             	mov    0x8(%ebp),%eax
c0112655:	8b 40 38             	mov    0x38(%eax),%eax
c0112658:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011265b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011265f:	74 0a                	je     c011266b <sfs_lookup+0x1f>
c0112661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112664:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112667:	85 c0                	test   %eax,%eax
c0112669:	74 19                	je     c0112684 <sfs_lookup+0x38>
c011266b:	68 34 82 11 c0       	push   $0xc0118234
c0112670:	68 df 7f 11 c0       	push   $0xc0117fdf
c0112675:	68 d0 03 00 00       	push   $0x3d0
c011267a:	68 77 7f 11 c0       	push   $0xc0117f77
c011267f:	e8 61 de fe ff       	call   c01004e5 <__panic>
c0112684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112687:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011268a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011268d:	0f b6 00             	movzbl (%eax),%eax
c0112690:	84 c0                	test   %al,%al
c0112692:	74 0a                	je     c011269e <sfs_lookup+0x52>
c0112694:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112697:	0f b6 00             	movzbl (%eax),%eax
c011269a:	3c 2f                	cmp    $0x2f,%al
c011269c:	75 19                	jne    c01126b7 <sfs_lookup+0x6b>
c011269e:	68 8c 83 11 c0       	push   $0xc011838c
c01126a3:	68 df 7f 11 c0       	push   $0xc0117fdf
c01126a8:	68 d1 03 00 00       	push   $0x3d1
c01126ad:	68 77 7f 11 c0       	push   $0xc0117f77
c01126b2:	e8 2e de fe ff       	call   c01004e5 <__panic>
    vop_ref_inc(node);
c01126b7:	83 ec 0c             	sub    $0xc,%esp
c01126ba:	ff 75 08             	pushl  0x8(%ebp)
c01126bd:	e8 64 cf ff ff       	call   c010f626 <inode_ref_inc>
c01126c2:	83 c4 10             	add    $0x10,%esp
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01126c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01126c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01126cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01126cf:	74 0d                	je     c01126de <sfs_lookup+0x92>
c01126d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126d4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01126d7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01126dc:	74 19                	je     c01126f7 <sfs_lookup+0xab>
c01126de:	68 30 80 11 c0       	push   $0xc0118030
c01126e3:	68 df 7f 11 c0       	push   $0xc0117fdf
c01126e8:	68 d3 03 00 00       	push   $0x3d3
c01126ed:	68 77 7f 11 c0       	push   $0xc0117f77
c01126f2:	e8 ee dd fe ff       	call   c01004e5 <__panic>
c01126f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01126fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112700:	8b 00                	mov    (%eax),%eax
c0112702:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112706:	66 83 f8 02          	cmp    $0x2,%ax
c011270a:	74 15                	je     c0112721 <sfs_lookup+0xd5>
        vop_ref_dec(node);
c011270c:	83 ec 0c             	sub    $0xc,%esp
c011270f:	ff 75 08             	pushl  0x8(%ebp)
c0112712:	e8 29 cf ff ff       	call   c010f640 <inode_ref_dec>
c0112717:	83 c4 10             	add    $0x10,%esp
        return -E_NOTDIR;
c011271a:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011271f:	eb 43                	jmp    c0112764 <sfs_lookup+0x118>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0112721:	83 ec 0c             	sub    $0xc,%esp
c0112724:	6a 00                	push   $0x0
c0112726:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0112729:	50                   	push   %eax
c011272a:	ff 75 0c             	pushl  0xc(%ebp)
c011272d:	ff 75 e8             	pushl  -0x18(%ebp)
c0112730:	ff 75 f0             	pushl  -0x10(%ebp)
c0112733:	e8 eb ed ff ff       	call   c0111523 <sfs_lookup_once>
c0112738:	83 c4 20             	add    $0x20,%esp
c011273b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c011273e:	83 ec 0c             	sub    $0xc,%esp
c0112741:	ff 75 08             	pushl  0x8(%ebp)
c0112744:	e8 f7 ce ff ff       	call   c010f640 <inode_ref_dec>
c0112749:	83 c4 10             	add    $0x10,%esp
    if (ret != 0) {
c011274c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112750:	74 05                	je     c0112757 <sfs_lookup+0x10b>
        return ret;
c0112752:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112755:	eb 0d                	jmp    c0112764 <sfs_lookup+0x118>
    }
    *node_store = subnode;
c0112757:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011275a:	8b 45 10             	mov    0x10(%ebp),%eax
c011275d:	89 10                	mov    %edx,(%eax)
    return 0;
c011275f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112764:	c9                   	leave  
c0112765:	c3                   	ret    

c0112766 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0112766:	55                   	push   %ebp
c0112767:	89 e5                	mov    %esp,%ebp
c0112769:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011276c:	8b 45 08             	mov    0x8(%ebp),%eax
c011276f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112772:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112776:	74 0a                	je     c0112782 <sfs_sync+0x1c>
c0112778:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011277b:	8b 40 6c             	mov    0x6c(%eax),%eax
c011277e:	85 c0                	test   %eax,%eax
c0112780:	74 16                	je     c0112798 <sfs_sync+0x32>
c0112782:	68 ac 83 11 c0       	push   $0xc01183ac
c0112787:	68 d5 83 11 c0       	push   $0xc01183d5
c011278c:	6a 15                	push   $0x15
c011278e:	68 ea 83 11 c0       	push   $0xc01183ea
c0112793:	e8 4d dd fe ff       	call   c01004e5 <__panic>
c0112798:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011279b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c011279e:	83 ec 0c             	sub    $0xc,%esp
c01127a1:	ff 75 ec             	pushl  -0x14(%ebp)
c01127a4:	e8 89 df ff ff       	call   c0110732 <lock_sfs_fs>
c01127a9:	83 c4 10             	add    $0x10,%esp
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c01127ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127af:	83 c0 60             	add    $0x60,%eax
c01127b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01127b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01127b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01127bb:	eb 69                	jmp    c0112826 <sfs_sync+0xc0>
            struct sfs_inode *sin = le2sin(le, inode_link);
c01127bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127c0:	83 e8 1c             	sub    $0x1c,%eax
c01127c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c01127c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01127c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01127cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01127d0:	74 17                	je     c01127e9 <sfs_sync+0x83>
c01127d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01127d5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01127d8:	85 c0                	test   %eax,%eax
c01127da:	74 0d                	je     c01127e9 <sfs_sync+0x83>
c01127dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01127df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01127e2:	8b 40 18             	mov    0x18(%eax),%eax
c01127e5:	85 c0                	test   %eax,%eax
c01127e7:	75 16                	jne    c01127ff <sfs_sync+0x99>
c01127e9:	68 00 84 11 c0       	push   $0xc0118400
c01127ee:	68 d5 83 11 c0       	push   $0xc01183d5
c01127f3:	6a 1b                	push   $0x1b
c01127f5:	68 ea 83 11 c0       	push   $0xc01183ea
c01127fa:	e8 e6 dc fe ff       	call   c01004e5 <__panic>
c01127ff:	83 ec 08             	sub    $0x8,%esp
c0112802:	68 4e 84 11 c0       	push   $0xc011844e
c0112807:	ff 75 e0             	pushl  -0x20(%ebp)
c011280a:	e8 e9 cf ff ff       	call   c010f7f8 <inode_check>
c011280f:	83 c4 10             	add    $0x10,%esp
c0112812:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112815:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112818:	8b 40 18             	mov    0x18(%eax),%eax
c011281b:	83 ec 0c             	sub    $0xc,%esp
c011281e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0112821:	ff d0                	call   *%eax
c0112823:	83 c4 10             	add    $0x10,%esp
c0112826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112829:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011282c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011282f:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0112832:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112835:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112838:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011283b:	75 80                	jne    c01127bd <sfs_sync+0x57>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c011283d:	83 ec 0c             	sub    $0xc,%esp
c0112840:	ff 75 ec             	pushl  -0x14(%ebp)
c0112843:	e8 20 df ff ff       	call   c0110768 <unlock_sfs_fs>
c0112848:	83 c4 10             	add    $0x10,%esp

    int ret;
    if (sfs->super_dirty) {
c011284b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011284e:	8b 40 34             	mov    0x34(%eax),%eax
c0112851:	85 c0                	test   %eax,%eax
c0112853:	74 56                	je     c01128ab <sfs_sync+0x145>
        sfs->super_dirty = 0;
c0112855:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112858:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c011285f:	83 ec 0c             	sub    $0xc,%esp
c0112862:	ff 75 ec             	pushl  -0x14(%ebp)
c0112865:	e8 11 0d 00 00       	call   c011357b <sfs_sync_super>
c011286a:	83 c4 10             	add    $0x10,%esp
c011286d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112870:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112874:	74 0f                	je     c0112885 <sfs_sync+0x11f>
            sfs->super_dirty = 1;
c0112876:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112879:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0112880:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112883:	eb 2b                	jmp    c01128b0 <sfs_sync+0x14a>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0112885:	83 ec 0c             	sub    $0xc,%esp
c0112888:	ff 75 ec             	pushl  -0x14(%ebp)
c011288b:	e8 61 0d 00 00       	call   c01135f1 <sfs_sync_freemap>
c0112890:	83 c4 10             	add    $0x10,%esp
c0112893:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112896:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011289a:	74 0f                	je     c01128ab <sfs_sync+0x145>
            sfs->super_dirty = 1;
c011289c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011289f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c01128a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01128a9:	eb 05                	jmp    c01128b0 <sfs_sync+0x14a>
        }
    }
    return 0;
c01128ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01128b0:	c9                   	leave  
c01128b1:	c3                   	ret    

c01128b2 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c01128b2:	55                   	push   %ebp
c01128b3:	89 e5                	mov    %esp,%ebp
c01128b5:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c01128b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01128bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01128c2:	74 0a                	je     c01128ce <sfs_get_root+0x1c>
c01128c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128c7:	8b 40 6c             	mov    0x6c(%eax),%eax
c01128ca:	85 c0                	test   %eax,%eax
c01128cc:	74 16                	je     c01128e4 <sfs_get_root+0x32>
c01128ce:	68 ac 83 11 c0       	push   $0xc01183ac
c01128d3:	68 d5 83 11 c0       	push   $0xc01183d5
c01128d8:	6a 36                	push   $0x36
c01128da:	68 ea 83 11 c0       	push   $0xc01183ea
c01128df:	e8 01 dc fe ff       	call   c01004e5 <__panic>
c01128e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128e7:	83 ec 04             	sub    $0x4,%esp
c01128ea:	6a 01                	push   $0x1
c01128ec:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01128ef:	52                   	push   %edx
c01128f0:	50                   	push   %eax
c01128f1:	e8 2a e3 ff ff       	call   c0110c20 <sfs_load_inode>
c01128f6:	83 c4 10             	add    $0x10,%esp
c01128f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01128fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112900:	74 14                	je     c0112916 <sfs_get_root+0x64>
        panic("load sfs root failed: %e", ret);
c0112902:	ff 75 f0             	pushl  -0x10(%ebp)
c0112905:	68 54 84 11 c0       	push   $0xc0118454
c011290a:	6a 37                	push   $0x37
c011290c:	68 ea 83 11 c0       	push   $0xc01183ea
c0112911:	e8 cf db fe ff       	call   c01004e5 <__panic>
    }
    return node;
c0112916:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0112919:	c9                   	leave  
c011291a:	c3                   	ret    

c011291b <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c011291b:	55                   	push   %ebp
c011291c:	89 e5                	mov    %esp,%ebp
c011291e:	83 ec 18             	sub    $0x18,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0112921:	8b 45 08             	mov    0x8(%ebp),%eax
c0112924:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112927:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011292b:	74 0a                	je     c0112937 <sfs_unmount+0x1c>
c011292d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112930:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112933:	85 c0                	test   %eax,%eax
c0112935:	74 16                	je     c011294d <sfs_unmount+0x32>
c0112937:	68 ac 83 11 c0       	push   $0xc01183ac
c011293c:	68 d5 83 11 c0       	push   $0xc01183d5
c0112941:	6a 41                	push   $0x41
c0112943:	68 ea 83 11 c0       	push   $0xc01183ea
c0112948:	e8 98 db fe ff       	call   c01004e5 <__panic>
c011294d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112950:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0112953:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112956:	83 c0 60             	add    $0x60,%eax
c0112959:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011295f:	8b 40 04             	mov    0x4(%eax),%eax
c0112962:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0112965:	0f 94 c0             	sete   %al
c0112968:	0f b6 c0             	movzbl %al,%eax
c011296b:	85 c0                	test   %eax,%eax
c011296d:	75 07                	jne    c0112976 <sfs_unmount+0x5b>
        return -E_BUSY;
c011296f:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0112974:	eb 69                	jmp    c01129df <sfs_unmount+0xc4>
    }
    assert(!sfs->super_dirty);
c0112976:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112979:	8b 40 34             	mov    0x34(%eax),%eax
c011297c:	85 c0                	test   %eax,%eax
c011297e:	74 16                	je     c0112996 <sfs_unmount+0x7b>
c0112980:	68 6d 84 11 c0       	push   $0xc011846d
c0112985:	68 d5 83 11 c0       	push   $0xc01183d5
c011298a:	6a 45                	push   $0x45
c011298c:	68 ea 83 11 c0       	push   $0xc01183ea
c0112991:	e8 4f db fe ff       	call   c01004e5 <__panic>
    bitmap_destroy(sfs->freemap);
c0112996:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112999:	8b 40 30             	mov    0x30(%eax),%eax
c011299c:	83 ec 0c             	sub    $0xc,%esp
c011299f:	50                   	push   %eax
c01129a0:	e8 14 09 00 00       	call   c01132b9 <bitmap_destroy>
c01129a5:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->sfs_buffer);
c01129a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129ab:	8b 40 38             	mov    0x38(%eax),%eax
c01129ae:	83 ec 0c             	sub    $0xc,%esp
c01129b1:	50                   	push   %eax
c01129b2:	e8 b1 2e ff ff       	call   c0105868 <kfree>
c01129b7:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->hash_list);
c01129ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129bd:	8b 40 68             	mov    0x68(%eax),%eax
c01129c0:	83 ec 0c             	sub    $0xc,%esp
c01129c3:	50                   	push   %eax
c01129c4:	e8 9f 2e ff ff       	call   c0105868 <kfree>
c01129c9:	83 c4 10             	add    $0x10,%esp
    kfree(sfs);
c01129cc:	83 ec 0c             	sub    $0xc,%esp
c01129cf:	ff 75 f0             	pushl  -0x10(%ebp)
c01129d2:	e8 91 2e ff ff       	call   c0105868 <kfree>
c01129d7:	83 c4 10             	add    $0x10,%esp
    return 0;
c01129da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01129df:	c9                   	leave  
c01129e0:	c3                   	ret    

c01129e1 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c01129e1:	55                   	push   %ebp
c01129e2:	89 e5                	mov    %esp,%ebp
c01129e4:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01129e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01129ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01129f1:	74 0a                	je     c01129fd <sfs_cleanup+0x1c>
c01129f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129f6:	8b 40 6c             	mov    0x6c(%eax),%eax
c01129f9:	85 c0                	test   %eax,%eax
c01129fb:	74 16                	je     c0112a13 <sfs_cleanup+0x32>
c01129fd:	68 ac 83 11 c0       	push   $0xc01183ac
c0112a02:	68 d5 83 11 c0       	push   $0xc01183d5
c0112a07:	6a 54                	push   $0x54
c0112a09:	68 ea 83 11 c0       	push   $0xc01183ea
c0112a0e:	e8 d2 da fe ff       	call   c01004e5 <__panic>
c0112a13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a16:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0112a19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a1c:	8b 40 04             	mov    0x4(%eax),%eax
c0112a1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112a22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a25:	8b 40 08             	mov    0x8(%eax),%eax
c0112a28:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112a2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112a2e:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0112a31:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a34:	83 c2 0c             	add    $0xc,%edx
c0112a37:	83 ec 0c             	sub    $0xc,%esp
c0112a3a:	ff 75 e4             	pushl  -0x1c(%ebp)
c0112a3d:	ff 75 e0             	pushl  -0x20(%ebp)
c0112a40:	50                   	push   %eax
c0112a41:	52                   	push   %edx
c0112a42:	68 80 84 11 c0       	push   $0xc0118480
c0112a47:	e8 33 d9 fe ff       	call   c010037f <cprintf>
c0112a4c:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0112a4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112a56:	eb 1e                	jmp    c0112a76 <sfs_cleanup+0x95>
        if ((ret = fsop_sync(fs)) == 0) {
c0112a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a5b:	8b 40 70             	mov    0x70(%eax),%eax
c0112a5e:	83 ec 0c             	sub    $0xc,%esp
c0112a61:	ff 75 08             	pushl  0x8(%ebp)
c0112a64:	ff d0                	call   *%eax
c0112a66:	83 c4 10             	add    $0x10,%esp
c0112a69:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112a70:	74 0c                	je     c0112a7e <sfs_cleanup+0x9d>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0112a72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112a76:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0112a7a:	7e dc                	jle    c0112a58 <sfs_cleanup+0x77>
c0112a7c:	eb 01                	jmp    c0112a7f <sfs_cleanup+0x9e>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
c0112a7e:	90                   	nop
        }
    }
    if (ret != 0) {
c0112a7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112a83:	74 21                	je     c0112aa6 <sfs_cleanup+0xc5>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0112a85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a88:	83 c0 0c             	add    $0xc,%eax
c0112a8b:	83 ec 0c             	sub    $0xc,%esp
c0112a8e:	ff 75 f0             	pushl  -0x10(%ebp)
c0112a91:	50                   	push   %eax
c0112a92:	68 9f 84 11 c0       	push   $0xc011849f
c0112a97:	6a 5f                	push   $0x5f
c0112a99:	68 ea 83 11 c0       	push   $0xc01183ea
c0112a9e:	e8 c5 da fe ff       	call   c0100568 <__warn>
c0112aa3:	83 c4 20             	add    $0x20,%esp
    }
}
c0112aa6:	90                   	nop
c0112aa7:	c9                   	leave  
c0112aa8:	c3                   	ret    

c0112aa9 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0112aa9:	55                   	push   %ebp
c0112aaa:	89 e5                	mov    %esp,%ebp
c0112aac:	83 ec 28             	sub    $0x28,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0112aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ab2:	c1 e0 0c             	shl    $0xc,%eax
c0112ab5:	50                   	push   %eax
c0112ab6:	68 00 10 00 00       	push   $0x1000
c0112abb:	ff 75 10             	pushl  0x10(%ebp)
c0112abe:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0112ac1:	50                   	push   %eax
c0112ac2:	e8 6d 84 ff ff       	call   c010af34 <iobuf_init>
c0112ac7:	83 c4 10             	add    $0x10,%esp
c0112aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0112acd:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ad0:	8b 40 10             	mov    0x10(%eax),%eax
c0112ad3:	83 ec 04             	sub    $0x4,%esp
c0112ad6:	6a 00                	push   $0x0
c0112ad8:	ff 75 f4             	pushl  -0xc(%ebp)
c0112adb:	ff 75 08             	pushl  0x8(%ebp)
c0112ade:	ff d0                	call   *%eax
c0112ae0:	83 c4 10             	add    $0x10,%esp
}
c0112ae3:	c9                   	leave  
c0112ae4:	c3                   	ret    

c0112ae5 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0112ae5:	55                   	push   %ebp
c0112ae6:	89 e5                	mov    %esp,%ebp
c0112ae8:	83 ec 18             	sub    $0x18,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0112aeb:	83 ec 08             	sub    $0x8,%esp
c0112aee:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112af1:	50                   	push   %eax
c0112af2:	ff 75 0c             	pushl  0xc(%ebp)
c0112af5:	e8 e8 07 00 00       	call   c01132e2 <bitmap_getdata>
c0112afa:	83 c4 10             	add    $0x10,%esp
c0112afd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0112b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b04:	74 0f                	je     c0112b15 <sfs_init_freemap+0x30>
c0112b06:	8b 45 14             	mov    0x14(%ebp),%eax
c0112b09:	c1 e0 0c             	shl    $0xc,%eax
c0112b0c:	89 c2                	mov    %eax,%edx
c0112b0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b11:	39 c2                	cmp    %eax,%edx
c0112b13:	74 4a                	je     c0112b5f <sfs_init_freemap+0x7a>
c0112b15:	68 bc 84 11 c0       	push   $0xc01184bc
c0112b1a:	68 d5 83 11 c0       	push   $0xc01183d5
c0112b1f:	68 83 00 00 00       	push   $0x83
c0112b24:	68 ea 83 11 c0       	push   $0xc01183ea
c0112b29:	e8 b7 d9 fe ff       	call   c01004e5 <__panic>
    while (nblks != 0) {
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0112b2e:	83 ec 04             	sub    $0x4,%esp
c0112b31:	ff 75 f4             	pushl  -0xc(%ebp)
c0112b34:	ff 75 10             	pushl  0x10(%ebp)
c0112b37:	ff 75 08             	pushl  0x8(%ebp)
c0112b3a:	e8 6a ff ff ff       	call   c0112aa9 <sfs_init_read>
c0112b3f:	83 c4 10             	add    $0x10,%esp
c0112b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b45:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b49:	74 05                	je     c0112b50 <sfs_init_freemap+0x6b>
            return ret;
c0112b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b4e:	eb 1a                	jmp    c0112b6a <sfs_init_freemap+0x85>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0112b50:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0112b54:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0112b58:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0112b5f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b63:	75 c9                	jne    c0112b2e <sfs_init_freemap+0x49>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0112b65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b6a:	c9                   	leave  
c0112b6b:	c3                   	ret    

c0112b6c <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0112b6c:	55                   	push   %ebp
c0112b6d:	89 e5                	mov    %esp,%ebp
c0112b6f:	83 ec 58             	sub    $0x58,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0112b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b75:	8b 40 04             	mov    0x4(%eax),%eax
c0112b78:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0112b7d:	74 0a                	je     c0112b89 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0112b7f:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0112b84:	e9 d4 03 00 00       	jmp    c0112f5d <sfs_do_mount+0x3f1>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0112b89:	83 ec 0c             	sub    $0xc,%esp
c0112b8c:	6a 00                	push   $0x0
c0112b8e:	e8 27 cd ff ff       	call   c010f8ba <__alloc_fs>
c0112b93:	83 c4 10             	add    $0x10,%esp
c0112b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112b99:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112b9d:	75 0a                	jne    c0112ba9 <sfs_do_mount+0x3d>
        return -E_NO_MEM;
c0112b9f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112ba4:	e9 b4 03 00 00       	jmp    c0112f5d <sfs_do_mount+0x3f1>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0112ba9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112bac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112baf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112bb3:	74 0a                	je     c0112bbf <sfs_do_mount+0x53>
c0112bb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112bb8:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112bbb:	85 c0                	test   %eax,%eax
c0112bbd:	74 19                	je     c0112bd8 <sfs_do_mount+0x6c>
c0112bbf:	68 ac 83 11 c0       	push   $0xc01183ac
c0112bc4:	68 d5 83 11 c0       	push   $0xc01183d5
c0112bc9:	68 a3 00 00 00       	push   $0xa3
c0112bce:	68 ea 83 11 c0       	push   $0xc01183ea
c0112bd3:	e8 0d d9 fe ff       	call   c01004e5 <__panic>
c0112bd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112bdb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0112bde:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112be1:	8b 55 08             	mov    0x8(%ebp),%edx
c0112be4:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0112be7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0112bee:	83 ec 0c             	sub    $0xc,%esp
c0112bf1:	68 00 10 00 00       	push   $0x1000
c0112bf6:	e8 55 2c ff ff       	call   c0105850 <kmalloc>
c0112bfb:	83 c4 10             	add    $0x10,%esp
c0112bfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112c01:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112c04:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112c07:	89 50 38             	mov    %edx,0x38(%eax)
c0112c0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112c0d:	8b 40 38             	mov    0x38(%eax),%eax
c0112c10:	85 c0                	test   %eax,%eax
c0112c12:	0f 84 33 03 00 00    	je     c0112f4b <sfs_do_mount+0x3df>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0112c18:	83 ec 04             	sub    $0x4,%esp
c0112c1b:	ff 75 dc             	pushl  -0x24(%ebp)
c0112c1e:	6a 00                	push   $0x0
c0112c20:	ff 75 08             	pushl  0x8(%ebp)
c0112c23:	e8 81 fe ff ff       	call   c0112aa9 <sfs_init_read>
c0112c28:	83 c4 10             	add    $0x10,%esp
c0112c2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112c2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112c32:	0f 85 ff 02 00 00    	jne    c0112f37 <sfs_do_mount+0x3cb>
        goto failed_cleanup_sfs_buffer;
    }

    ret = -E_INVAL;
c0112c38:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0112c3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112c42:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0112c45:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c48:	8b 00                	mov    (%eax),%eax
c0112c4a:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0112c4f:	74 20                	je     c0112c71 <sfs_do_mount+0x105>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0112c51:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c54:	8b 00                	mov    (%eax),%eax
c0112c56:	83 ec 04             	sub    $0x4,%esp
c0112c59:	68 2a be 8d 2f       	push   $0x2f8dbe2a
c0112c5e:	50                   	push   %eax
c0112c5f:	68 e8 84 11 c0       	push   $0xc01184e8
c0112c64:	e8 16 d7 fe ff       	call   c010037f <cprintf>
c0112c69:	83 c4 10             	add    $0x10,%esp
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0112c6c:	e9 ca 02 00 00       	jmp    c0112f3b <sfs_do_mount+0x3cf>
    }
    if (super->blocks > dev->d_blocks) {
c0112c71:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c74:	8b 50 04             	mov    0x4(%eax),%edx
c0112c77:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c7a:	8b 00                	mov    (%eax),%eax
c0112c7c:	39 c2                	cmp    %eax,%edx
c0112c7e:	76 22                	jbe    c0112ca2 <sfs_do_mount+0x136>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0112c80:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c83:	8b 10                	mov    (%eax),%edx
c0112c85:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112c88:	8b 40 04             	mov    0x4(%eax),%eax
c0112c8b:	83 ec 04             	sub    $0x4,%esp
c0112c8e:	52                   	push   %edx
c0112c8f:	50                   	push   %eax
c0112c90:	68 20 85 11 c0       	push   $0xc0118520
c0112c95:	e8 e5 d6 fe ff       	call   c010037f <cprintf>
c0112c9a:	83 c4 10             	add    $0x10,%esp
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0112c9d:	e9 99 02 00 00       	jmp    c0112f3b <sfs_do_mount+0x3cf>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0112ca2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112ca5:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0112ca9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112cac:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0112caf:	8b 0a                	mov    (%edx),%ecx
c0112cb1:	89 08                	mov    %ecx,(%eax)
c0112cb3:	8b 4a 04             	mov    0x4(%edx),%ecx
c0112cb6:	89 48 04             	mov    %ecx,0x4(%eax)
c0112cb9:	8b 4a 08             	mov    0x8(%edx),%ecx
c0112cbc:	89 48 08             	mov    %ecx,0x8(%eax)
c0112cbf:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0112cc2:	89 48 0c             	mov    %ecx,0xc(%eax)
c0112cc5:	8b 4a 10             	mov    0x10(%edx),%ecx
c0112cc8:	89 48 10             	mov    %ecx,0x10(%eax)
c0112ccb:	8b 4a 14             	mov    0x14(%edx),%ecx
c0112cce:	89 48 14             	mov    %ecx,0x14(%eax)
c0112cd1:	8b 4a 18             	mov    0x18(%edx),%ecx
c0112cd4:	89 48 18             	mov    %ecx,0x18(%eax)
c0112cd7:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0112cda:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0112cdd:	8b 4a 20             	mov    0x20(%edx),%ecx
c0112ce0:	89 48 20             	mov    %ecx,0x20(%eax)
c0112ce3:	8b 4a 24             	mov    0x24(%edx),%ecx
c0112ce6:	89 48 24             	mov    %ecx,0x24(%eax)
c0112ce9:	8b 52 28             	mov    0x28(%edx),%edx
c0112cec:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0112cef:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0112cf6:	83 ec 0c             	sub    $0xc,%esp
c0112cf9:	68 00 20 00 00       	push   $0x2000
c0112cfe:	e8 4d 2b ff ff       	call   c0105850 <kmalloc>
c0112d03:	83 c4 10             	add    $0x10,%esp
c0112d06:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0112d09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d0c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0112d0f:	89 50 68             	mov    %edx,0x68(%eax)
c0112d12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d15:	8b 40 68             	mov    0x68(%eax),%eax
c0112d18:	85 c0                	test   %eax,%eax
c0112d1a:	0f 84 1a 02 00 00    	je     c0112f3a <sfs_do_mount+0x3ce>
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0112d20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112d27:	eb 2a                	jmp    c0112d53 <sfs_do_mount+0x1e7>
        list_init(hash_list + i);
c0112d29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d2c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0112d33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112d36:	01 d0                	add    %edx,%eax
c0112d38:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0112d3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112d3e:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112d41:	89 50 04             	mov    %edx,0x4(%eax)
c0112d44:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112d47:	8b 50 04             	mov    0x4(%eax),%edx
c0112d4a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112d4d:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0112d4f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112d53:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0112d5a:	76 cd                	jbe    c0112d29 <sfs_do_mount+0x1bd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0112d5c:	c7 45 cc 00 80 00 00 	movl   $0x8000,-0x34(%ebp)
c0112d63:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112d66:	8b 50 04             	mov    0x4(%eax),%edx
c0112d69:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112d6c:	01 d0                	add    %edx,%eax
c0112d6e:	83 e8 01             	sub    $0x1,%eax
c0112d71:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0112d74:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112d77:	ba 00 00 00 00       	mov    $0x0,%edx
c0112d7c:	f7 75 cc             	divl   -0x34(%ebp)
c0112d7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112d82:	29 d0                	sub    %edx,%eax
c0112d84:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0112d87:	83 ec 0c             	sub    $0xc,%esp
c0112d8a:	ff 75 c4             	pushl  -0x3c(%ebp)
c0112d8d:	e8 e8 01 00 00       	call   c0112f7a <bitmap_create>
c0112d92:	83 c4 10             	add    $0x10,%esp
c0112d95:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0112d98:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d9b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0112d9e:	89 50 30             	mov    %edx,0x30(%eax)
c0112da1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112da4:	8b 40 30             	mov    0x30(%eax),%eax
c0112da7:	85 c0                	test   %eax,%eax
c0112da9:	0f 84 77 01 00 00    	je     c0112f26 <sfs_do_mount+0x3ba>
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0112daf:	c7 45 bc 00 80 00 00 	movl   $0x8000,-0x44(%ebp)
c0112db6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112db9:	8b 50 04             	mov    0x4(%eax),%edx
c0112dbc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0112dbf:	01 d0                	add    %edx,%eax
c0112dc1:	83 e8 01             	sub    $0x1,%eax
c0112dc4:	ba 00 00 00 00       	mov    $0x0,%edx
c0112dc9:	f7 75 bc             	divl   -0x44(%ebp)
c0112dcc:	89 45 b8             	mov    %eax,-0x48(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0112dcf:	83 ec 0c             	sub    $0xc,%esp
c0112dd2:	ff 75 dc             	pushl  -0x24(%ebp)
c0112dd5:	ff 75 b8             	pushl  -0x48(%ebp)
c0112dd8:	6a 02                	push   $0x2
c0112dda:	ff 75 c0             	pushl  -0x40(%ebp)
c0112ddd:	ff 75 08             	pushl  0x8(%ebp)
c0112de0:	e8 00 fd ff ff       	call   c0112ae5 <sfs_init_freemap>
c0112de5:	83 c4 20             	add    $0x20,%esp
c0112de8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112deb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112def:	0f 85 20 01 00 00    	jne    c0112f15 <sfs_do_mount+0x3a9>
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0112df5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112df8:	8b 40 04             	mov    0x4(%eax),%eax
c0112dfb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0112dfe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0112e05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112e0c:	eb 1d                	jmp    c0112e2b <sfs_do_mount+0x2bf>
        if (bitmap_test(freemap, i)) {
c0112e0e:	83 ec 08             	sub    $0x8,%esp
c0112e11:	ff 75 f0             	pushl  -0x10(%ebp)
c0112e14:	ff 75 c0             	pushl  -0x40(%ebp)
c0112e17:	e8 23 04 00 00       	call   c011323f <bitmap_test>
c0112e1c:	83 c4 10             	add    $0x10,%esp
c0112e1f:	85 c0                	test   %eax,%eax
c0112e21:	74 04                	je     c0112e27 <sfs_do_mount+0x2bb>
            unused_blocks ++;
c0112e23:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0112e27:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e2e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0112e31:	72 db                	jb     c0112e0e <sfs_do_mount+0x2a2>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0112e33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e36:	8b 40 08             	mov    0x8(%eax),%eax
c0112e39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0112e3c:	74 19                	je     c0112e57 <sfs_do_mount+0x2eb>
c0112e3e:	68 50 85 11 c0       	push   $0xc0118550
c0112e43:	68 d5 83 11 c0       	push   $0xc01183d5
c0112e48:	68 e0 00 00 00       	push   $0xe0
c0112e4d:	68 ea 83 11 c0       	push   $0xc01183ea
c0112e52:	e8 8e d6 fe ff       	call   c01004e5 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0112e57:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e5a:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112e61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e64:	83 c0 3c             	add    $0x3c,%eax
c0112e67:	83 ec 08             	sub    $0x8,%esp
c0112e6a:	6a 01                	push   $0x1
c0112e6c:	50                   	push   %eax
c0112e6d:	e8 d0 66 ff ff       	call   c0109542 <sem_init>
c0112e72:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->io_sem), 1);
c0112e75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e78:	83 c0 48             	add    $0x48,%eax
c0112e7b:	83 ec 08             	sub    $0x8,%esp
c0112e7e:	6a 01                	push   $0x1
c0112e80:	50                   	push   %eax
c0112e81:	e8 bc 66 ff ff       	call   c0109542 <sem_init>
c0112e86:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->mutex_sem), 1);
c0112e89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e8c:	83 c0 54             	add    $0x54,%eax
c0112e8f:	83 ec 08             	sub    $0x8,%esp
c0112e92:	6a 01                	push   $0x1
c0112e94:	50                   	push   %eax
c0112e95:	e8 a8 66 ff ff       	call   c0109542 <sem_init>
c0112e9a:	83 c4 10             	add    $0x10,%esp
    list_init(&(sfs->inode_list));
c0112e9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112ea0:	83 c0 60             	add    $0x60,%eax
c0112ea3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112ea6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112ea9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0112eac:	89 50 04             	mov    %edx,0x4(%eax)
c0112eaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112eb2:	8b 50 04             	mov    0x4(%eax),%edx
c0112eb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112eb8:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112eba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0112ebd:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0112ec0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0112ec3:	83 c2 0c             	add    $0xc,%edx
c0112ec6:	83 ec 0c             	sub    $0xc,%esp
c0112ec9:	ff 75 b4             	pushl  -0x4c(%ebp)
c0112ecc:	ff 75 ec             	pushl  -0x14(%ebp)
c0112ecf:	50                   	push   %eax
c0112ed0:	52                   	push   %edx
c0112ed1:	68 7a 85 11 c0       	push   $0xc011857a
c0112ed6:	e8 a4 d4 fe ff       	call   c010037f <cprintf>
c0112edb:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0112ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ee1:	c7 40 70 66 27 11 c0 	movl   $0xc0112766,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0112ee8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112eeb:	c7 40 74 b2 28 11 c0 	movl   $0xc01128b2,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c0112ef2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ef5:	c7 40 78 1b 29 11 c0 	movl   $0xc011291b,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0112efc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112eff:	c7 40 7c e1 29 11 c0 	movl   $0xc01129e1,0x7c(%eax)
    *fs_store = fs;
c0112f06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f09:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112f0c:	89 10                	mov    %edx,(%eax)
    return 0;
c0112f0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0112f13:	eb 48                	jmp    c0112f5d <sfs_do_mount+0x3f1>
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
c0112f15:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0112f16:	83 ec 0c             	sub    $0xc,%esp
c0112f19:	ff 75 c0             	pushl  -0x40(%ebp)
c0112f1c:	e8 98 03 00 00       	call   c01132b9 <bitmap_destroy>
c0112f21:	83 c4 10             	add    $0x10,%esp
c0112f24:	eb 01                	jmp    c0112f27 <sfs_do_mount+0x3bb>

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
c0112f26:	90                   	nop
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c0112f27:	83 ec 0c             	sub    $0xc,%esp
c0112f2a:	ff 75 d4             	pushl  -0x2c(%ebp)
c0112f2d:	e8 36 29 ff ff       	call   c0105868 <kfree>
c0112f32:	83 c4 10             	add    $0x10,%esp
c0112f35:	eb 04                	jmp    c0112f3b <sfs_do_mount+0x3cf>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
        goto failed_cleanup_sfs_buffer;
c0112f37:	90                   	nop
c0112f38:	eb 01                	jmp    c0112f3b <sfs_do_mount+0x3cf>
    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
c0112f3a:	90                   	nop
failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0112f3b:	83 ec 0c             	sub    $0xc,%esp
c0112f3e:	ff 75 dc             	pushl  -0x24(%ebp)
c0112f41:	e8 22 29 ff ff       	call   c0105868 <kfree>
c0112f46:	83 c4 10             	add    $0x10,%esp
c0112f49:	eb 01                	jmp    c0112f4c <sfs_do_mount+0x3e0>

    int ret = -E_NO_MEM;

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
        goto failed_cleanup_fs;
c0112f4b:	90                   	nop
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
failed_cleanup_fs:
    kfree(fs);
c0112f4c:	83 ec 0c             	sub    $0xc,%esp
c0112f4f:	ff 75 e8             	pushl  -0x18(%ebp)
c0112f52:	e8 11 29 ff ff       	call   c0105868 <kfree>
c0112f57:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112f5d:	c9                   	leave  
c0112f5e:	c3                   	ret    

c0112f5f <sfs_mount>:

int
sfs_mount(const char *devname) {
c0112f5f:	55                   	push   %ebp
c0112f60:	89 e5                	mov    %esp,%ebp
c0112f62:	83 ec 08             	sub    $0x8,%esp
    return vfs_mount(devname, sfs_do_mount);
c0112f65:	83 ec 08             	sub    $0x8,%esp
c0112f68:	68 6c 2b 11 c0       	push   $0xc0112b6c
c0112f6d:	ff 75 08             	pushl  0x8(%ebp)
c0112f70:	e8 f6 b9 ff ff       	call   c010e96b <vfs_mount>
c0112f75:	83 c4 10             	add    $0x10,%esp
}
c0112f78:	c9                   	leave  
c0112f79:	c3                   	ret    

c0112f7a <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0112f7a:	55                   	push   %ebp
c0112f7b:	89 e5                	mov    %esp,%ebp
c0112f7d:	56                   	push   %esi
c0112f7e:	53                   	push   %ebx
c0112f7f:	83 ec 20             	sub    $0x20,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0112f82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0112f86:	74 0b                	je     c0112f93 <bitmap_create+0x19>
c0112f88:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f8b:	83 c0 20             	add    $0x20,%eax
c0112f8e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0112f91:	77 16                	ja     c0112fa9 <bitmap_create+0x2f>
c0112f93:	68 98 85 11 c0       	push   $0xc0118598
c0112f98:	68 c0 85 11 c0       	push   $0xc01185c0
c0112f9d:	6a 15                	push   $0x15
c0112f9f:	68 d5 85 11 c0       	push   $0xc01185d5
c0112fa4:	e8 3c d5 fe ff       	call   c01004e5 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0112fa9:	83 ec 0c             	sub    $0xc,%esp
c0112fac:	6a 0c                	push   $0xc
c0112fae:	e8 9d 28 ff ff       	call   c0105850 <kmalloc>
c0112fb3:	83 c4 10             	add    $0x10,%esp
c0112fb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112fb9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112fbd:	75 0a                	jne    c0112fc9 <bitmap_create+0x4f>
        return NULL;
c0112fbf:	b8 00 00 00 00       	mov    $0x0,%eax
c0112fc4:	e9 28 01 00 00       	jmp    c01130f1 <bitmap_create+0x177>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c0112fc9:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0112fd0:	8b 55 08             	mov    0x8(%ebp),%edx
c0112fd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112fd6:	01 d0                	add    %edx,%eax
c0112fd8:	83 e8 01             	sub    $0x1,%eax
c0112fdb:	ba 00 00 00 00       	mov    $0x0,%edx
c0112fe0:	f7 75 ec             	divl   -0x14(%ebp)
c0112fe3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0112fe6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112fe9:	c1 e0 02             	shl    $0x2,%eax
c0112fec:	83 ec 0c             	sub    $0xc,%esp
c0112fef:	50                   	push   %eax
c0112ff0:	e8 5b 28 ff ff       	call   c0105850 <kmalloc>
c0112ff5:	83 c4 10             	add    $0x10,%esp
c0112ff8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112ffb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112fff:	75 18                	jne    c0113019 <bitmap_create+0x9f>
        kfree(bitmap);
c0113001:	83 ec 0c             	sub    $0xc,%esp
c0113004:	ff 75 f0             	pushl  -0x10(%ebp)
c0113007:	e8 5c 28 ff ff       	call   c0105868 <kfree>
c011300c:	83 c4 10             	add    $0x10,%esp
        return NULL;
c011300f:	b8 00 00 00 00       	mov    $0x0,%eax
c0113014:	e9 d8 00 00 00       	jmp    c01130f1 <bitmap_create+0x177>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c0113019:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011301c:	8b 55 08             	mov    0x8(%ebp),%edx
c011301f:	89 10                	mov    %edx,(%eax)
c0113021:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113024:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113027:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c011302a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011302d:	c1 e0 02             	shl    $0x2,%eax
c0113030:	83 ec 04             	sub    $0x4,%esp
c0113033:	50                   	push   %eax
c0113034:	6a ff                	push   $0xffffffff
c0113036:	ff 75 e4             	pushl  -0x1c(%ebp)
c0113039:	e8 d2 09 00 00       	call   c0113a10 <memset>
c011303e:	83 c4 10             	add    $0x10,%esp
c0113041:	89 c2                	mov    %eax,%edx
c0113043:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113046:	89 50 08             	mov    %edx,0x8(%eax)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c0113049:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011304c:	c1 e0 05             	shl    $0x5,%eax
c011304f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0113052:	0f 84 96 00 00 00    	je     c01130ee <bitmap_create+0x174>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c0113058:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011305b:	83 e8 01             	sub    $0x1,%eax
c011305e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113061:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113064:	c1 e0 05             	shl    $0x5,%eax
c0113067:	89 c2                	mov    %eax,%edx
c0113069:	8b 45 08             	mov    0x8(%ebp),%eax
c011306c:	29 d0                	sub    %edx,%eax
c011306e:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0113071:	8b 45 08             	mov    0x8(%ebp),%eax
c0113074:	c1 e8 05             	shr    $0x5,%eax
c0113077:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c011307a:	74 16                	je     c0113092 <bitmap_create+0x118>
c011307c:	68 ea 85 11 c0       	push   $0xc01185ea
c0113081:	68 c0 85 11 c0       	push   $0xc01185c0
c0113086:	6a 2a                	push   $0x2a
c0113088:	68 d5 85 11 c0       	push   $0xc01185d5
c011308d:	e8 53 d4 fe ff       	call   c01004e5 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0113092:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113096:	74 06                	je     c011309e <bitmap_create+0x124>
c0113098:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011309c:	76 4a                	jbe    c01130e8 <bitmap_create+0x16e>
c011309e:	68 04 86 11 c0       	push   $0xc0118604
c01130a3:	68 c0 85 11 c0       	push   $0xc01185c0
c01130a8:	6a 2b                	push   $0x2b
c01130aa:	68 d5 85 11 c0       	push   $0xc01185d5
c01130af:	e8 31 d4 fe ff       	call   c01004e5 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
            bitmap->map[ix] ^= (1 << overbits);
c01130b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01130b7:	8b 40 08             	mov    0x8(%eax),%eax
c01130ba:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01130bd:	c1 e2 02             	shl    $0x2,%edx
c01130c0:	01 c2                	add    %eax,%edx
c01130c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01130c5:	8b 40 08             	mov    0x8(%eax),%eax
c01130c8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01130cb:	c1 e1 02             	shl    $0x2,%ecx
c01130ce:	01 c8                	add    %ecx,%eax
c01130d0:	8b 18                	mov    (%eax),%ebx
c01130d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130d5:	be 01 00 00 00       	mov    $0x1,%esi
c01130da:	89 c1                	mov    %eax,%ecx
c01130dc:	d3 e6                	shl    %cl,%esi
c01130de:	89 f0                	mov    %esi,%eax
c01130e0:	31 d8                	xor    %ebx,%eax
c01130e2:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c01130e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01130e8:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01130ec:	76 c6                	jbe    c01130b4 <bitmap_create+0x13a>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01130ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01130f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01130f4:	5b                   	pop    %ebx
c01130f5:	5e                   	pop    %esi
c01130f6:	5d                   	pop    %ebp
c01130f7:	c3                   	ret    

c01130f8 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01130f8:	55                   	push   %ebp
c01130f9:	89 e5                	mov    %esp,%ebp
c01130fb:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *map = bitmap->map;
c01130fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0113101:	8b 40 08             	mov    0x8(%eax),%eax
c0113104:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c0113107:	8b 45 08             	mov    0x8(%ebp),%eax
c011310a:	8b 40 04             	mov    0x4(%eax),%eax
c011310d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0113110:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113117:	e9 ad 00 00 00       	jmp    c01131c9 <bitmap_alloc+0xd1>
        if (map[ix] != 0) {
c011311c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011311f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0113126:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113129:	01 d0                	add    %edx,%eax
c011312b:	8b 00                	mov    (%eax),%eax
c011312d:	85 c0                	test   %eax,%eax
c011312f:	0f 84 90 00 00 00    	je     c01131c5 <bitmap_alloc+0xcd>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0113135:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011313c:	eb 6b                	jmp    c01131a9 <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c011313e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113141:	ba 01 00 00 00       	mov    $0x1,%edx
c0113146:	89 c1                	mov    %eax,%ecx
c0113148:	d3 e2                	shl    %cl,%edx
c011314a:	89 d0                	mov    %edx,%eax
c011314c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c011314f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113152:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0113159:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011315c:	01 d0                	add    %edx,%eax
c011315e:	8b 00                	mov    (%eax),%eax
c0113160:	23 45 e4             	and    -0x1c(%ebp),%eax
c0113163:	85 c0                	test   %eax,%eax
c0113165:	74 3e                	je     c01131a5 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c0113167:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011316a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0113171:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113174:	01 c2                	add    %eax,%edx
c0113176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113179:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0113180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113183:	01 c8                	add    %ecx,%eax
c0113185:	8b 00                	mov    (%eax),%eax
c0113187:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011318a:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c011318c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011318f:	c1 e0 05             	shl    $0x5,%eax
c0113192:	89 c2                	mov    %eax,%edx
c0113194:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113197:	01 c2                	add    %eax,%edx
c0113199:	8b 45 0c             	mov    0xc(%ebp),%eax
c011319c:	89 10                	mov    %edx,(%eax)
                    return 0;
c011319e:	b8 00 00 00 00       	mov    $0x0,%eax
c01131a3:	eb 35                	jmp    c01131da <bitmap_alloc+0xe2>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01131a5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01131a9:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01131ad:	76 8f                	jbe    c011313e <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c01131af:	68 29 86 11 c0       	push   $0xc0118629
c01131b4:	68 c0 85 11 c0       	push   $0xc01185c0
c01131b9:	6a 43                	push   $0x43
c01131bb:	68 d5 85 11 c0       	push   $0xc01185d5
c01131c0:	e8 20 d3 fe ff       	call   c01004e5 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c01131c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01131c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131cc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01131cf:	0f 82 47 ff ff ff    	jb     c011311c <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c01131d5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01131da:	c9                   	leave  
c01131db:	c3                   	ret    

c01131dc <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01131dc:	55                   	push   %ebp
c01131dd:	89 e5                	mov    %esp,%ebp
c01131df:	83 ec 18             	sub    $0x18,%esp
    assert(index < bitmap->nbits);
c01131e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01131e5:	8b 00                	mov    (%eax),%eax
c01131e7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01131ea:	77 16                	ja     c0113202 <bitmap_translate+0x26>
c01131ec:	68 2b 86 11 c0       	push   $0xc011862b
c01131f1:	68 c0 85 11 c0       	push   $0xc01185c0
c01131f6:	6a 4c                	push   $0x4c
c01131f8:	68 d5 85 11 c0       	push   $0xc01185d5
c01131fd:	e8 e3 d2 fe ff       	call   c01004e5 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0113202:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113205:	c1 e8 05             	shr    $0x5,%eax
c0113208:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011320b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011320e:	83 e0 1f             	and    $0x1f,%eax
c0113211:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0113214:	8b 45 08             	mov    0x8(%ebp),%eax
c0113217:	8b 40 08             	mov    0x8(%eax),%eax
c011321a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011321d:	c1 e2 02             	shl    $0x2,%edx
c0113220:	01 c2                	add    %eax,%edx
c0113222:	8b 45 10             	mov    0x10(%ebp),%eax
c0113225:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0113227:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011322a:	ba 01 00 00 00       	mov    $0x1,%edx
c011322f:	89 c1                	mov    %eax,%ecx
c0113231:	d3 e2                	shl    %cl,%edx
c0113233:	89 d0                	mov    %edx,%eax
c0113235:	89 c2                	mov    %eax,%edx
c0113237:	8b 45 14             	mov    0x14(%ebp),%eax
c011323a:	89 10                	mov    %edx,(%eax)
}
c011323c:	90                   	nop
c011323d:	c9                   	leave  
c011323e:	c3                   	ret    

c011323f <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c011323f:	55                   	push   %ebp
c0113240:	89 e5                	mov    %esp,%ebp
c0113242:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0113245:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113248:	50                   	push   %eax
c0113249:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011324c:	50                   	push   %eax
c011324d:	ff 75 0c             	pushl  0xc(%ebp)
c0113250:	ff 75 08             	pushl  0x8(%ebp)
c0113253:	e8 84 ff ff ff       	call   c01131dc <bitmap_translate>
c0113258:	83 c4 10             	add    $0x10,%esp
    return (*word & mask);
c011325b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011325e:	8b 10                	mov    (%eax),%edx
c0113260:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113263:	21 d0                	and    %edx,%eax
}
c0113265:	c9                   	leave  
c0113266:	c3                   	ret    

c0113267 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0113267:	55                   	push   %ebp
c0113268:	89 e5                	mov    %esp,%ebp
c011326a:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c011326d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113270:	50                   	push   %eax
c0113271:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0113274:	50                   	push   %eax
c0113275:	ff 75 0c             	pushl  0xc(%ebp)
c0113278:	ff 75 08             	pushl  0x8(%ebp)
c011327b:	e8 5c ff ff ff       	call   c01131dc <bitmap_translate>
c0113280:	83 c4 10             	add    $0x10,%esp
    assert(!(*word & mask));
c0113283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113286:	8b 10                	mov    (%eax),%edx
c0113288:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011328b:	21 d0                	and    %edx,%eax
c011328d:	85 c0                	test   %eax,%eax
c011328f:	74 16                	je     c01132a7 <bitmap_free+0x40>
c0113291:	68 41 86 11 c0       	push   $0xc0118641
c0113296:	68 c0 85 11 c0       	push   $0xc01185c0
c011329b:	6a 5f                	push   $0x5f
c011329d:	68 d5 85 11 c0       	push   $0xc01185d5
c01132a2:	e8 3e d2 fe ff       	call   c01004e5 <__panic>
    *word |= mask;
c01132a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01132ad:	8b 0a                	mov    (%edx),%ecx
c01132af:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01132b2:	09 ca                	or     %ecx,%edx
c01132b4:	89 10                	mov    %edx,(%eax)
}
c01132b6:	90                   	nop
c01132b7:	c9                   	leave  
c01132b8:	c3                   	ret    

c01132b9 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c01132b9:	55                   	push   %ebp
c01132ba:	89 e5                	mov    %esp,%ebp
c01132bc:	83 ec 08             	sub    $0x8,%esp
    kfree(bitmap->map);
c01132bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01132c2:	8b 40 08             	mov    0x8(%eax),%eax
c01132c5:	83 ec 0c             	sub    $0xc,%esp
c01132c8:	50                   	push   %eax
c01132c9:	e8 9a 25 ff ff       	call   c0105868 <kfree>
c01132ce:	83 c4 10             	add    $0x10,%esp
    kfree(bitmap);
c01132d1:	83 ec 0c             	sub    $0xc,%esp
c01132d4:	ff 75 08             	pushl  0x8(%ebp)
c01132d7:	e8 8c 25 ff ff       	call   c0105868 <kfree>
c01132dc:	83 c4 10             	add    $0x10,%esp
}
c01132df:	90                   	nop
c01132e0:	c9                   	leave  
c01132e1:	c3                   	ret    

c01132e2 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c01132e2:	55                   	push   %ebp
c01132e3:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c01132e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01132e9:	74 12                	je     c01132fd <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c01132eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01132ee:	8b 40 04             	mov    0x4(%eax),%eax
c01132f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01132f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132fb:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c01132fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0113300:	8b 40 08             	mov    0x8(%eax),%eax
}
c0113303:	5d                   	pop    %ebp
c0113304:	c3                   	ret    

c0113305 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0113305:	55                   	push   %ebp
c0113306:	89 e5                	mov    %esp,%ebp
c0113308:	83 ec 28             	sub    $0x28,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c011330b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011330f:	75 06                	jne    c0113317 <sfs_rwblock_nolock+0x12>
c0113311:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113315:	75 0b                	jne    c0113322 <sfs_rwblock_nolock+0x1d>
c0113317:	8b 45 08             	mov    0x8(%ebp),%eax
c011331a:	8b 40 04             	mov    0x4(%eax),%eax
c011331d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0113320:	77 16                	ja     c0113338 <sfs_rwblock_nolock+0x33>
c0113322:	68 54 86 11 c0       	push   $0xc0118654
c0113327:	68 88 86 11 c0       	push   $0xc0118688
c011332c:	6a 15                	push   $0x15
c011332e:	68 9d 86 11 c0       	push   $0xc011869d
c0113333:	e8 ad d1 fe ff       	call   c01004e5 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0113338:	8b 45 10             	mov    0x10(%ebp),%eax
c011333b:	c1 e0 0c             	shl    $0xc,%eax
c011333e:	50                   	push   %eax
c011333f:	68 00 10 00 00       	push   $0x1000
c0113344:	ff 75 0c             	pushl  0xc(%ebp)
c0113347:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011334a:	50                   	push   %eax
c011334b:	e8 e4 7b ff ff       	call   c010af34 <iobuf_init>
c0113350:	83 c4 10             	add    $0x10,%esp
c0113353:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0113356:	8b 45 08             	mov    0x8(%ebp),%eax
c0113359:	8b 40 2c             	mov    0x2c(%eax),%eax
c011335c:	8b 40 10             	mov    0x10(%eax),%eax
c011335f:	8b 55 08             	mov    0x8(%ebp),%edx
c0113362:	8b 52 2c             	mov    0x2c(%edx),%edx
c0113365:	83 ec 04             	sub    $0x4,%esp
c0113368:	ff 75 14             	pushl  0x14(%ebp)
c011336b:	ff 75 f4             	pushl  -0xc(%ebp)
c011336e:	52                   	push   %edx
c011336f:	ff d0                	call   *%eax
c0113371:	83 c4 10             	add    $0x10,%esp
}
c0113374:	c9                   	leave  
c0113375:	c3                   	ret    

c0113376 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0113376:	55                   	push   %ebp
c0113377:	89 e5                	mov    %esp,%ebp
c0113379:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c011337c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0113383:	83 ec 0c             	sub    $0xc,%esp
c0113386:	ff 75 08             	pushl  0x8(%ebp)
c0113389:	e8 bf d3 ff ff       	call   c011074d <lock_sfs_io>
c011338e:	83 c4 10             	add    $0x10,%esp
    {
        while (nblks != 0) {
c0113391:	eb 31                	jmp    c01133c4 <sfs_rwblock+0x4e>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0113393:	83 ec 0c             	sub    $0xc,%esp
c0113396:	6a 01                	push   $0x1
c0113398:	ff 75 18             	pushl  0x18(%ebp)
c011339b:	ff 75 10             	pushl  0x10(%ebp)
c011339e:	ff 75 0c             	pushl  0xc(%ebp)
c01133a1:	ff 75 08             	pushl  0x8(%ebp)
c01133a4:	e8 5c ff ff ff       	call   c0113305 <sfs_rwblock_nolock>
c01133a9:	83 c4 20             	add    $0x20,%esp
c01133ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01133af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01133b3:	75 17                	jne    c01133cc <sfs_rwblock+0x56>
                break;
            }
            blkno ++, nblks --;
c01133b5:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01133b9:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01133bd:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01133c4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01133c8:	75 c9                	jne    c0113393 <sfs_rwblock+0x1d>
c01133ca:	eb 01                	jmp    c01133cd <sfs_rwblock+0x57>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
                break;
c01133cc:	90                   	nop
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c01133cd:	83 ec 0c             	sub    $0xc,%esp
c01133d0:	ff 75 08             	pushl  0x8(%ebp)
c01133d3:	e8 ab d3 ff ff       	call   c0110783 <unlock_sfs_io>
c01133d8:	83 c4 10             	add    $0x10,%esp
    return ret;
c01133db:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01133de:	c9                   	leave  
c01133df:	c3                   	ret    

c01133e0 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01133e0:	55                   	push   %ebp
c01133e1:	89 e5                	mov    %esp,%ebp
c01133e3:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c01133e6:	83 ec 0c             	sub    $0xc,%esp
c01133e9:	6a 00                	push   $0x0
c01133eb:	ff 75 14             	pushl  0x14(%ebp)
c01133ee:	ff 75 10             	pushl  0x10(%ebp)
c01133f1:	ff 75 0c             	pushl  0xc(%ebp)
c01133f4:	ff 75 08             	pushl  0x8(%ebp)
c01133f7:	e8 7a ff ff ff       	call   c0113376 <sfs_rwblock>
c01133fc:	83 c4 20             	add    $0x20,%esp
}
c01133ff:	c9                   	leave  
c0113400:	c3                   	ret    

c0113401 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0113401:	55                   	push   %ebp
c0113402:	89 e5                	mov    %esp,%ebp
c0113404:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0113407:	83 ec 0c             	sub    $0xc,%esp
c011340a:	6a 01                	push   $0x1
c011340c:	ff 75 14             	pushl  0x14(%ebp)
c011340f:	ff 75 10             	pushl  0x10(%ebp)
c0113412:	ff 75 0c             	pushl  0xc(%ebp)
c0113415:	ff 75 08             	pushl  0x8(%ebp)
c0113418:	e8 59 ff ff ff       	call   c0113376 <sfs_rwblock>
c011341d:	83 c4 20             	add    $0x20,%esp
}
c0113420:	c9                   	leave  
c0113421:	c3                   	ret    

c0113422 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0113422:	55                   	push   %ebp
c0113423:	89 e5                	mov    %esp,%ebp
c0113425:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0113428:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011342c:	78 18                	js     c0113446 <sfs_rbuf+0x24>
c011342e:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0113435:	7f 0f                	jg     c0113446 <sfs_rbuf+0x24>
c0113437:	8b 55 18             	mov    0x18(%ebp),%edx
c011343a:	8b 45 10             	mov    0x10(%ebp),%eax
c011343d:	01 d0                	add    %edx,%eax
c011343f:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0113444:	76 16                	jbe    c011345c <sfs_rbuf+0x3a>
c0113446:	68 b4 86 11 c0       	push   $0xc01186b4
c011344b:	68 88 86 11 c0       	push   $0xc0118688
c0113450:	6a 55                	push   $0x55
c0113452:	68 9d 86 11 c0       	push   $0xc011869d
c0113457:	e8 89 d0 fe ff       	call   c01004e5 <__panic>
    int ret;
    lock_sfs_io(sfs);
c011345c:	83 ec 0c             	sub    $0xc,%esp
c011345f:	ff 75 08             	pushl  0x8(%ebp)
c0113462:	e8 e6 d2 ff ff       	call   c011074d <lock_sfs_io>
c0113467:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011346a:	8b 45 08             	mov    0x8(%ebp),%eax
c011346d:	8b 40 38             	mov    0x38(%eax),%eax
c0113470:	83 ec 0c             	sub    $0xc,%esp
c0113473:	6a 01                	push   $0x1
c0113475:	6a 00                	push   $0x0
c0113477:	ff 75 14             	pushl  0x14(%ebp)
c011347a:	50                   	push   %eax
c011347b:	ff 75 08             	pushl  0x8(%ebp)
c011347e:	e8 82 fe ff ff       	call   c0113305 <sfs_rwblock_nolock>
c0113483:	83 c4 20             	add    $0x20,%esp
c0113486:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113489:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011348d:	75 1d                	jne    c01134ac <sfs_rbuf+0x8a>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c011348f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113492:	8b 50 38             	mov    0x38(%eax),%edx
c0113495:	8b 45 18             	mov    0x18(%ebp),%eax
c0113498:	01 d0                	add    %edx,%eax
c011349a:	83 ec 04             	sub    $0x4,%esp
c011349d:	ff 75 10             	pushl  0x10(%ebp)
c01134a0:	50                   	push   %eax
c01134a1:	ff 75 0c             	pushl  0xc(%ebp)
c01134a4:	e8 4a 06 00 00       	call   c0113af3 <memcpy>
c01134a9:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sfs_io(sfs);
c01134ac:	83 ec 0c             	sub    $0xc,%esp
c01134af:	ff 75 08             	pushl  0x8(%ebp)
c01134b2:	e8 cc d2 ff ff       	call   c0110783 <unlock_sfs_io>
c01134b7:	83 c4 10             	add    $0x10,%esp
    return ret;
c01134ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01134bd:	c9                   	leave  
c01134be:	c3                   	ret    

c01134bf <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01134bf:	55                   	push   %ebp
c01134c0:	89 e5                	mov    %esp,%ebp
c01134c2:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01134c5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01134c9:	78 18                	js     c01134e3 <sfs_wbuf+0x24>
c01134cb:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01134d2:	7f 0f                	jg     c01134e3 <sfs_wbuf+0x24>
c01134d4:	8b 55 18             	mov    0x18(%ebp),%edx
c01134d7:	8b 45 10             	mov    0x10(%ebp),%eax
c01134da:	01 d0                	add    %edx,%eax
c01134dc:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01134e1:	76 16                	jbe    c01134f9 <sfs_wbuf+0x3a>
c01134e3:	68 b4 86 11 c0       	push   $0xc01186b4
c01134e8:	68 88 86 11 c0       	push   $0xc0118688
c01134ed:	6a 6b                	push   $0x6b
c01134ef:	68 9d 86 11 c0       	push   $0xc011869d
c01134f4:	e8 ec cf fe ff       	call   c01004e5 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01134f9:	83 ec 0c             	sub    $0xc,%esp
c01134fc:	ff 75 08             	pushl  0x8(%ebp)
c01134ff:	e8 49 d2 ff ff       	call   c011074d <lock_sfs_io>
c0113504:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0113507:	8b 45 08             	mov    0x8(%ebp),%eax
c011350a:	8b 40 38             	mov    0x38(%eax),%eax
c011350d:	83 ec 0c             	sub    $0xc,%esp
c0113510:	6a 01                	push   $0x1
c0113512:	6a 00                	push   $0x0
c0113514:	ff 75 14             	pushl  0x14(%ebp)
c0113517:	50                   	push   %eax
c0113518:	ff 75 08             	pushl  0x8(%ebp)
c011351b:	e8 e5 fd ff ff       	call   c0113305 <sfs_rwblock_nolock>
c0113520:	83 c4 20             	add    $0x20,%esp
c0113523:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011352a:	75 3c                	jne    c0113568 <sfs_wbuf+0xa9>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c011352c:	8b 45 08             	mov    0x8(%ebp),%eax
c011352f:	8b 50 38             	mov    0x38(%eax),%edx
c0113532:	8b 45 18             	mov    0x18(%ebp),%eax
c0113535:	01 d0                	add    %edx,%eax
c0113537:	83 ec 04             	sub    $0x4,%esp
c011353a:	ff 75 10             	pushl  0x10(%ebp)
c011353d:	ff 75 0c             	pushl  0xc(%ebp)
c0113540:	50                   	push   %eax
c0113541:	e8 ad 05 00 00       	call   c0113af3 <memcpy>
c0113546:	83 c4 10             	add    $0x10,%esp
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c0113549:	8b 45 08             	mov    0x8(%ebp),%eax
c011354c:	8b 40 38             	mov    0x38(%eax),%eax
c011354f:	83 ec 0c             	sub    $0xc,%esp
c0113552:	6a 01                	push   $0x1
c0113554:	6a 01                	push   $0x1
c0113556:	ff 75 14             	pushl  0x14(%ebp)
c0113559:	50                   	push   %eax
c011355a:	ff 75 08             	pushl  0x8(%ebp)
c011355d:	e8 a3 fd ff ff       	call   c0113305 <sfs_rwblock_nolock>
c0113562:	83 c4 20             	add    $0x20,%esp
c0113565:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0113568:	83 ec 0c             	sub    $0xc,%esp
c011356b:	ff 75 08             	pushl  0x8(%ebp)
c011356e:	e8 10 d2 ff ff       	call   c0110783 <unlock_sfs_io>
c0113573:	83 c4 10             	add    $0x10,%esp
    return ret;
c0113576:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113579:	c9                   	leave  
c011357a:	c3                   	ret    

c011357b <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c011357b:	55                   	push   %ebp
c011357c:	89 e5                	mov    %esp,%ebp
c011357e:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c0113581:	83 ec 0c             	sub    $0xc,%esp
c0113584:	ff 75 08             	pushl  0x8(%ebp)
c0113587:	e8 c1 d1 ff ff       	call   c011074d <lock_sfs_io>
c011358c:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c011358f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113592:	8b 40 38             	mov    0x38(%eax),%eax
c0113595:	83 ec 04             	sub    $0x4,%esp
c0113598:	68 00 10 00 00       	push   $0x1000
c011359d:	6a 00                	push   $0x0
c011359f:	50                   	push   %eax
c01135a0:	e8 6b 04 00 00       	call   c0113a10 <memset>
c01135a5:	83 c4 10             	add    $0x10,%esp
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c01135a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01135ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01135ae:	8b 40 38             	mov    0x38(%eax),%eax
c01135b1:	83 ec 04             	sub    $0x4,%esp
c01135b4:	6a 2c                	push   $0x2c
c01135b6:	52                   	push   %edx
c01135b7:	50                   	push   %eax
c01135b8:	e8 36 05 00 00       	call   c0113af3 <memcpy>
c01135bd:	83 c4 10             	add    $0x10,%esp
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c01135c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01135c3:	8b 40 38             	mov    0x38(%eax),%eax
c01135c6:	83 ec 0c             	sub    $0xc,%esp
c01135c9:	6a 00                	push   $0x0
c01135cb:	6a 01                	push   $0x1
c01135cd:	6a 00                	push   $0x0
c01135cf:	50                   	push   %eax
c01135d0:	ff 75 08             	pushl  0x8(%ebp)
c01135d3:	e8 2d fd ff ff       	call   c0113305 <sfs_rwblock_nolock>
c01135d8:	83 c4 20             	add    $0x20,%esp
c01135db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c01135de:	83 ec 0c             	sub    $0xc,%esp
c01135e1:	ff 75 08             	pushl  0x8(%ebp)
c01135e4:	e8 9a d1 ff ff       	call   c0110783 <unlock_sfs_io>
c01135e9:	83 c4 10             	add    $0x10,%esp
    return ret;
c01135ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01135ef:	c9                   	leave  
c01135f0:	c3                   	ret    

c01135f1 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c01135f1:	55                   	push   %ebp
c01135f2:	89 e5                	mov    %esp,%ebp
c01135f4:	83 ec 18             	sub    $0x18,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01135f7:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01135fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0113601:	8b 50 04             	mov    0x4(%eax),%edx
c0113604:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113607:	01 d0                	add    %edx,%eax
c0113609:	83 e8 01             	sub    $0x1,%eax
c011360c:	ba 00 00 00 00       	mov    $0x0,%edx
c0113611:	f7 75 f4             	divl   -0xc(%ebp)
c0113614:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0113617:	8b 45 08             	mov    0x8(%ebp),%eax
c011361a:	8b 40 30             	mov    0x30(%eax),%eax
c011361d:	83 ec 08             	sub    $0x8,%esp
c0113620:	6a 00                	push   $0x0
c0113622:	50                   	push   %eax
c0113623:	e8 ba fc ff ff       	call   c01132e2 <bitmap_getdata>
c0113628:	83 c4 10             	add    $0x10,%esp
c011362b:	ff 75 f0             	pushl  -0x10(%ebp)
c011362e:	6a 02                	push   $0x2
c0113630:	50                   	push   %eax
c0113631:	ff 75 08             	pushl  0x8(%ebp)
c0113634:	e8 c8 fd ff ff       	call   c0113401 <sfs_wblock>
c0113639:	83 c4 10             	add    $0x10,%esp
}
c011363c:	c9                   	leave  
c011363d:	c3                   	ret    

c011363e <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c011363e:	55                   	push   %ebp
c011363f:	89 e5                	mov    %esp,%ebp
c0113641:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c0113644:	83 ec 0c             	sub    $0xc,%esp
c0113647:	ff 75 08             	pushl  0x8(%ebp)
c011364a:	e8 fe d0 ff ff       	call   c011074d <lock_sfs_io>
c011364f:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0113652:	8b 45 08             	mov    0x8(%ebp),%eax
c0113655:	8b 40 38             	mov    0x38(%eax),%eax
c0113658:	83 ec 04             	sub    $0x4,%esp
c011365b:	68 00 10 00 00       	push   $0x1000
c0113660:	6a 00                	push   $0x0
c0113662:	50                   	push   %eax
c0113663:	e8 a8 03 00 00       	call   c0113a10 <memset>
c0113668:	83 c4 10             	add    $0x10,%esp
        while (nblks != 0) {
c011366b:	eb 2d                	jmp    c011369a <sfs_clear_block+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c011366d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113670:	8b 40 38             	mov    0x38(%eax),%eax
c0113673:	83 ec 0c             	sub    $0xc,%esp
c0113676:	6a 01                	push   $0x1
c0113678:	6a 01                	push   $0x1
c011367a:	ff 75 0c             	pushl  0xc(%ebp)
c011367d:	50                   	push   %eax
c011367e:	ff 75 08             	pushl  0x8(%ebp)
c0113681:	e8 7f fc ff ff       	call   c0113305 <sfs_rwblock_nolock>
c0113686:	83 c4 20             	add    $0x20,%esp
c0113689:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011368c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113690:	75 10                	jne    c01136a2 <sfs_clear_block+0x64>
                break;
            }
            blkno ++, nblks --;
c0113692:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0113696:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c011369a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011369e:	75 cd                	jne    c011366d <sfs_clear_block+0x2f>
c01136a0:	eb 01                	jmp    c01136a3 <sfs_clear_block+0x65>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
                break;
c01136a2:	90                   	nop
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c01136a3:	83 ec 0c             	sub    $0xc,%esp
c01136a6:	ff 75 08             	pushl  0x8(%ebp)
c01136a9:	e8 d5 d0 ff ff       	call   c0110783 <unlock_sfs_io>
c01136ae:	83 c4 10             	add    $0x10,%esp
    return ret;
c01136b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01136b4:	c9                   	leave  
c01136b5:	c3                   	ret    

c01136b6 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01136b6:	55                   	push   %ebp
c01136b7:	89 e5                	mov    %esp,%ebp
c01136b9:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01136bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01136c3:	eb 04                	jmp    c01136c9 <strlen+0x13>
        cnt ++;
c01136c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c01136c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01136cc:	8d 50 01             	lea    0x1(%eax),%edx
c01136cf:	89 55 08             	mov    %edx,0x8(%ebp)
c01136d2:	0f b6 00             	movzbl (%eax),%eax
c01136d5:	84 c0                	test   %al,%al
c01136d7:	75 ec                	jne    c01136c5 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01136d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01136dc:	c9                   	leave  
c01136dd:	c3                   	ret    

c01136de <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c01136de:	55                   	push   %ebp
c01136df:	89 e5                	mov    %esp,%ebp
c01136e1:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01136e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c01136eb:	eb 04                	jmp    c01136f1 <strnlen+0x13>
        cnt ++;
c01136ed:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c01136f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01136f4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01136f7:	73 10                	jae    c0113709 <strnlen+0x2b>
c01136f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01136fc:	8d 50 01             	lea    0x1(%eax),%edx
c01136ff:	89 55 08             	mov    %edx,0x8(%ebp)
c0113702:	0f b6 00             	movzbl (%eax),%eax
c0113705:	84 c0                	test   %al,%al
c0113707:	75 e4                	jne    c01136ed <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0113709:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c011370c:	c9                   	leave  
c011370d:	c3                   	ret    

c011370e <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c011370e:	55                   	push   %ebp
c011370f:	89 e5                	mov    %esp,%ebp
c0113711:	83 ec 08             	sub    $0x8,%esp
    return strcpy(dst + strlen(dst), src);
c0113714:	ff 75 08             	pushl  0x8(%ebp)
c0113717:	e8 9a ff ff ff       	call   c01136b6 <strlen>
c011371c:	83 c4 04             	add    $0x4,%esp
c011371f:	89 c2                	mov    %eax,%edx
c0113721:	8b 45 08             	mov    0x8(%ebp),%eax
c0113724:	01 d0                	add    %edx,%eax
c0113726:	83 ec 08             	sub    $0x8,%esp
c0113729:	ff 75 0c             	pushl  0xc(%ebp)
c011372c:	50                   	push   %eax
c011372d:	e8 05 00 00 00       	call   c0113737 <strcpy>
c0113732:	83 c4 10             	add    $0x10,%esp
}
c0113735:	c9                   	leave  
c0113736:	c3                   	ret    

c0113737 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0113737:	55                   	push   %ebp
c0113738:	89 e5                	mov    %esp,%ebp
c011373a:	57                   	push   %edi
c011373b:	56                   	push   %esi
c011373c:	83 ec 20             	sub    $0x20,%esp
c011373f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113742:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113745:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113748:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c011374b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011374e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113751:	89 d1                	mov    %edx,%ecx
c0113753:	89 c2                	mov    %eax,%edx
c0113755:	89 ce                	mov    %ecx,%esi
c0113757:	89 d7                	mov    %edx,%edi
c0113759:	ac                   	lods   %ds:(%esi),%al
c011375a:	aa                   	stos   %al,%es:(%edi)
c011375b:	84 c0                	test   %al,%al
c011375d:	75 fa                	jne    c0113759 <strcpy+0x22>
c011375f:	89 fa                	mov    %edi,%edx
c0113761:	89 f1                	mov    %esi,%ecx
c0113763:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0113766:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0113769:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c011376c:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c011376f:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0113770:	83 c4 20             	add    $0x20,%esp
c0113773:	5e                   	pop    %esi
c0113774:	5f                   	pop    %edi
c0113775:	5d                   	pop    %ebp
c0113776:	c3                   	ret    

c0113777 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0113777:	55                   	push   %ebp
c0113778:	89 e5                	mov    %esp,%ebp
c011377a:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c011377d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113780:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0113783:	eb 21                	jmp    c01137a6 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c0113785:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113788:	0f b6 10             	movzbl (%eax),%edx
c011378b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011378e:	88 10                	mov    %dl,(%eax)
c0113790:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113793:	0f b6 00             	movzbl (%eax),%eax
c0113796:	84 c0                	test   %al,%al
c0113798:	74 04                	je     c011379e <strncpy+0x27>
            src ++;
c011379a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c011379e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01137a2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01137a6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01137aa:	75 d9                	jne    c0113785 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01137ac:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01137af:	c9                   	leave  
c01137b0:	c3                   	ret    

c01137b1 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01137b1:	55                   	push   %ebp
c01137b2:	89 e5                	mov    %esp,%ebp
c01137b4:	57                   	push   %edi
c01137b5:	56                   	push   %esi
c01137b6:	83 ec 20             	sub    $0x20,%esp
c01137b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01137bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01137bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01137c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01137c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137cb:	89 d1                	mov    %edx,%ecx
c01137cd:	89 c2                	mov    %eax,%edx
c01137cf:	89 ce                	mov    %ecx,%esi
c01137d1:	89 d7                	mov    %edx,%edi
c01137d3:	ac                   	lods   %ds:(%esi),%al
c01137d4:	ae                   	scas   %es:(%edi),%al
c01137d5:	75 08                	jne    c01137df <strcmp+0x2e>
c01137d7:	84 c0                	test   %al,%al
c01137d9:	75 f8                	jne    c01137d3 <strcmp+0x22>
c01137db:	31 c0                	xor    %eax,%eax
c01137dd:	eb 04                	jmp    c01137e3 <strcmp+0x32>
c01137df:	19 c0                	sbb    %eax,%eax
c01137e1:	0c 01                	or     $0x1,%al
c01137e3:	89 fa                	mov    %edi,%edx
c01137e5:	89 f1                	mov    %esi,%ecx
c01137e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01137ea:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01137ed:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c01137f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c01137f3:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c01137f4:	83 c4 20             	add    $0x20,%esp
c01137f7:	5e                   	pop    %esi
c01137f8:	5f                   	pop    %edi
c01137f9:	5d                   	pop    %ebp
c01137fa:	c3                   	ret    

c01137fb <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c01137fb:	55                   	push   %ebp
c01137fc:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c01137fe:	eb 0c                	jmp    c011380c <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0113800:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0113804:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0113808:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c011380c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113810:	74 1a                	je     c011382c <strncmp+0x31>
c0113812:	8b 45 08             	mov    0x8(%ebp),%eax
c0113815:	0f b6 00             	movzbl (%eax),%eax
c0113818:	84 c0                	test   %al,%al
c011381a:	74 10                	je     c011382c <strncmp+0x31>
c011381c:	8b 45 08             	mov    0x8(%ebp),%eax
c011381f:	0f b6 10             	movzbl (%eax),%edx
c0113822:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113825:	0f b6 00             	movzbl (%eax),%eax
c0113828:	38 c2                	cmp    %al,%dl
c011382a:	74 d4                	je     c0113800 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c011382c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113830:	74 18                	je     c011384a <strncmp+0x4f>
c0113832:	8b 45 08             	mov    0x8(%ebp),%eax
c0113835:	0f b6 00             	movzbl (%eax),%eax
c0113838:	0f b6 d0             	movzbl %al,%edx
c011383b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011383e:	0f b6 00             	movzbl (%eax),%eax
c0113841:	0f b6 c0             	movzbl %al,%eax
c0113844:	29 c2                	sub    %eax,%edx
c0113846:	89 d0                	mov    %edx,%eax
c0113848:	eb 05                	jmp    c011384f <strncmp+0x54>
c011384a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011384f:	5d                   	pop    %ebp
c0113850:	c3                   	ret    

c0113851 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0113851:	55                   	push   %ebp
c0113852:	89 e5                	mov    %esp,%ebp
c0113854:	83 ec 04             	sub    $0x4,%esp
c0113857:	8b 45 0c             	mov    0xc(%ebp),%eax
c011385a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c011385d:	eb 14                	jmp    c0113873 <strchr+0x22>
        if (*s == c) {
c011385f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113862:	0f b6 00             	movzbl (%eax),%eax
c0113865:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0113868:	75 05                	jne    c011386f <strchr+0x1e>
            return (char *)s;
c011386a:	8b 45 08             	mov    0x8(%ebp),%eax
c011386d:	eb 13                	jmp    c0113882 <strchr+0x31>
        }
        s ++;
c011386f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0113873:	8b 45 08             	mov    0x8(%ebp),%eax
c0113876:	0f b6 00             	movzbl (%eax),%eax
c0113879:	84 c0                	test   %al,%al
c011387b:	75 e2                	jne    c011385f <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c011387d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113882:	c9                   	leave  
c0113883:	c3                   	ret    

c0113884 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0113884:	55                   	push   %ebp
c0113885:	89 e5                	mov    %esp,%ebp
c0113887:	83 ec 04             	sub    $0x4,%esp
c011388a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011388d:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0113890:	eb 0f                	jmp    c01138a1 <strfind+0x1d>
        if (*s == c) {
c0113892:	8b 45 08             	mov    0x8(%ebp),%eax
c0113895:	0f b6 00             	movzbl (%eax),%eax
c0113898:	3a 45 fc             	cmp    -0x4(%ebp),%al
c011389b:	74 10                	je     c01138ad <strfind+0x29>
            break;
        }
        s ++;
c011389d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01138a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01138a4:	0f b6 00             	movzbl (%eax),%eax
c01138a7:	84 c0                	test   %al,%al
c01138a9:	75 e7                	jne    c0113892 <strfind+0xe>
c01138ab:	eb 01                	jmp    c01138ae <strfind+0x2a>
        if (*s == c) {
            break;
c01138ad:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c01138ae:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01138b1:	c9                   	leave  
c01138b2:	c3                   	ret    

c01138b3 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01138b3:	55                   	push   %ebp
c01138b4:	89 e5                	mov    %esp,%ebp
c01138b6:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01138b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01138c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01138c7:	eb 04                	jmp    c01138cd <strtol+0x1a>
        s ++;
c01138c9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01138cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01138d0:	0f b6 00             	movzbl (%eax),%eax
c01138d3:	3c 20                	cmp    $0x20,%al
c01138d5:	74 f2                	je     c01138c9 <strtol+0x16>
c01138d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01138da:	0f b6 00             	movzbl (%eax),%eax
c01138dd:	3c 09                	cmp    $0x9,%al
c01138df:	74 e8                	je     c01138c9 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c01138e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01138e4:	0f b6 00             	movzbl (%eax),%eax
c01138e7:	3c 2b                	cmp    $0x2b,%al
c01138e9:	75 06                	jne    c01138f1 <strtol+0x3e>
        s ++;
c01138eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01138ef:	eb 15                	jmp    c0113906 <strtol+0x53>
    }
    else if (*s == '-') {
c01138f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01138f4:	0f b6 00             	movzbl (%eax),%eax
c01138f7:	3c 2d                	cmp    $0x2d,%al
c01138f9:	75 0b                	jne    c0113906 <strtol+0x53>
        s ++, neg = 1;
c01138fb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01138ff:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0113906:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011390a:	74 06                	je     c0113912 <strtol+0x5f>
c011390c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0113910:	75 24                	jne    c0113936 <strtol+0x83>
c0113912:	8b 45 08             	mov    0x8(%ebp),%eax
c0113915:	0f b6 00             	movzbl (%eax),%eax
c0113918:	3c 30                	cmp    $0x30,%al
c011391a:	75 1a                	jne    c0113936 <strtol+0x83>
c011391c:	8b 45 08             	mov    0x8(%ebp),%eax
c011391f:	83 c0 01             	add    $0x1,%eax
c0113922:	0f b6 00             	movzbl (%eax),%eax
c0113925:	3c 78                	cmp    $0x78,%al
c0113927:	75 0d                	jne    c0113936 <strtol+0x83>
        s += 2, base = 16;
c0113929:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c011392d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0113934:	eb 2a                	jmp    c0113960 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0113936:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011393a:	75 17                	jne    c0113953 <strtol+0xa0>
c011393c:	8b 45 08             	mov    0x8(%ebp),%eax
c011393f:	0f b6 00             	movzbl (%eax),%eax
c0113942:	3c 30                	cmp    $0x30,%al
c0113944:	75 0d                	jne    c0113953 <strtol+0xa0>
        s ++, base = 8;
c0113946:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011394a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0113951:	eb 0d                	jmp    c0113960 <strtol+0xad>
    }
    else if (base == 0) {
c0113953:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113957:	75 07                	jne    c0113960 <strtol+0xad>
        base = 10;
c0113959:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0113960:	8b 45 08             	mov    0x8(%ebp),%eax
c0113963:	0f b6 00             	movzbl (%eax),%eax
c0113966:	3c 2f                	cmp    $0x2f,%al
c0113968:	7e 1b                	jle    c0113985 <strtol+0xd2>
c011396a:	8b 45 08             	mov    0x8(%ebp),%eax
c011396d:	0f b6 00             	movzbl (%eax),%eax
c0113970:	3c 39                	cmp    $0x39,%al
c0113972:	7f 11                	jg     c0113985 <strtol+0xd2>
            dig = *s - '0';
c0113974:	8b 45 08             	mov    0x8(%ebp),%eax
c0113977:	0f b6 00             	movzbl (%eax),%eax
c011397a:	0f be c0             	movsbl %al,%eax
c011397d:	83 e8 30             	sub    $0x30,%eax
c0113980:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113983:	eb 48                	jmp    c01139cd <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c0113985:	8b 45 08             	mov    0x8(%ebp),%eax
c0113988:	0f b6 00             	movzbl (%eax),%eax
c011398b:	3c 60                	cmp    $0x60,%al
c011398d:	7e 1b                	jle    c01139aa <strtol+0xf7>
c011398f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113992:	0f b6 00             	movzbl (%eax),%eax
c0113995:	3c 7a                	cmp    $0x7a,%al
c0113997:	7f 11                	jg     c01139aa <strtol+0xf7>
            dig = *s - 'a' + 10;
c0113999:	8b 45 08             	mov    0x8(%ebp),%eax
c011399c:	0f b6 00             	movzbl (%eax),%eax
c011399f:	0f be c0             	movsbl %al,%eax
c01139a2:	83 e8 57             	sub    $0x57,%eax
c01139a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01139a8:	eb 23                	jmp    c01139cd <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01139aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01139ad:	0f b6 00             	movzbl (%eax),%eax
c01139b0:	3c 40                	cmp    $0x40,%al
c01139b2:	7e 3c                	jle    c01139f0 <strtol+0x13d>
c01139b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01139b7:	0f b6 00             	movzbl (%eax),%eax
c01139ba:	3c 5a                	cmp    $0x5a,%al
c01139bc:	7f 32                	jg     c01139f0 <strtol+0x13d>
            dig = *s - 'A' + 10;
c01139be:	8b 45 08             	mov    0x8(%ebp),%eax
c01139c1:	0f b6 00             	movzbl (%eax),%eax
c01139c4:	0f be c0             	movsbl %al,%eax
c01139c7:	83 e8 37             	sub    $0x37,%eax
c01139ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01139cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139d0:	3b 45 10             	cmp    0x10(%ebp),%eax
c01139d3:	7d 1a                	jge    c01139ef <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c01139d5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01139d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01139dc:	0f af 45 10          	imul   0x10(%ebp),%eax
c01139e0:	89 c2                	mov    %eax,%edx
c01139e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139e5:	01 d0                	add    %edx,%eax
c01139e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c01139ea:	e9 71 ff ff ff       	jmp    c0113960 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c01139ef:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c01139f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01139f4:	74 08                	je     c01139fe <strtol+0x14b>
        *endptr = (char *) s;
c01139f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01139f9:	8b 55 08             	mov    0x8(%ebp),%edx
c01139fc:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c01139fe:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0113a02:	74 07                	je     c0113a0b <strtol+0x158>
c0113a04:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113a07:	f7 d8                	neg    %eax
c0113a09:	eb 03                	jmp    c0113a0e <strtol+0x15b>
c0113a0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0113a0e:	c9                   	leave  
c0113a0f:	c3                   	ret    

c0113a10 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0113a10:	55                   	push   %ebp
c0113a11:	89 e5                	mov    %esp,%ebp
c0113a13:	57                   	push   %edi
c0113a14:	83 ec 24             	sub    $0x24,%esp
c0113a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a1a:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0113a1d:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0113a21:	8b 55 08             	mov    0x8(%ebp),%edx
c0113a24:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0113a27:	88 45 f7             	mov    %al,-0x9(%ebp)
c0113a2a:	8b 45 10             	mov    0x10(%ebp),%eax
c0113a2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0113a30:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0113a33:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0113a37:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0113a3a:	89 d7                	mov    %edx,%edi
c0113a3c:	f3 aa                	rep stos %al,%es:(%edi)
c0113a3e:	89 fa                	mov    %edi,%edx
c0113a40:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0113a43:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0113a46:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113a49:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0113a4a:	83 c4 24             	add    $0x24,%esp
c0113a4d:	5f                   	pop    %edi
c0113a4e:	5d                   	pop    %ebp
c0113a4f:	c3                   	ret    

c0113a50 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0113a50:	55                   	push   %ebp
c0113a51:	89 e5                	mov    %esp,%ebp
c0113a53:	57                   	push   %edi
c0113a54:	56                   	push   %esi
c0113a55:	53                   	push   %ebx
c0113a56:	83 ec 30             	sub    $0x30,%esp
c0113a59:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113a5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113a65:	8b 45 10             	mov    0x10(%ebp),%eax
c0113a68:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0113a6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113a6e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0113a71:	73 42                	jae    c0113ab5 <memmove+0x65>
c0113a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113a76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113a79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113a7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113a82:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0113a85:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113a88:	c1 e8 02             	shr    $0x2,%eax
c0113a8b:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0113a8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113a90:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113a93:	89 d7                	mov    %edx,%edi
c0113a95:	89 c6                	mov    %eax,%esi
c0113a97:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0113a99:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0113a9c:	83 e1 03             	and    $0x3,%ecx
c0113a9f:	74 02                	je     c0113aa3 <memmove+0x53>
c0113aa1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113aa3:	89 f0                	mov    %esi,%eax
c0113aa5:	89 fa                	mov    %edi,%edx
c0113aa7:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0113aaa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0113aad:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0113ab0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c0113ab3:	eb 36                	jmp    c0113aeb <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0113ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ab8:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113abe:	01 c2                	add    %eax,%edx
c0113ac0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ac3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0113ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ac9:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0113acc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113acf:	89 c1                	mov    %eax,%ecx
c0113ad1:	89 d8                	mov    %ebx,%eax
c0113ad3:	89 d6                	mov    %edx,%esi
c0113ad5:	89 c7                	mov    %eax,%edi
c0113ad7:	fd                   	std    
c0113ad8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113ada:	fc                   	cld    
c0113adb:	89 f8                	mov    %edi,%eax
c0113add:	89 f2                	mov    %esi,%edx
c0113adf:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0113ae2:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0113ae5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0113ae8:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0113aeb:	83 c4 30             	add    $0x30,%esp
c0113aee:	5b                   	pop    %ebx
c0113aef:	5e                   	pop    %esi
c0113af0:	5f                   	pop    %edi
c0113af1:	5d                   	pop    %ebp
c0113af2:	c3                   	ret    

c0113af3 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0113af3:	55                   	push   %ebp
c0113af4:	89 e5                	mov    %esp,%ebp
c0113af6:	57                   	push   %edi
c0113af7:	56                   	push   %esi
c0113af8:	83 ec 20             	sub    $0x20,%esp
c0113afb:	8b 45 08             	mov    0x8(%ebp),%eax
c0113afe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113b01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b07:	8b 45 10             	mov    0x10(%ebp),%eax
c0113b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0113b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b10:	c1 e8 02             	shr    $0x2,%eax
c0113b13:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0113b15:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b1b:	89 d7                	mov    %edx,%edi
c0113b1d:	89 c6                	mov    %eax,%esi
c0113b1f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0113b21:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0113b24:	83 e1 03             	and    $0x3,%ecx
c0113b27:	74 02                	je     c0113b2b <memcpy+0x38>
c0113b29:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113b2b:	89 f0                	mov    %esi,%eax
c0113b2d:	89 fa                	mov    %edi,%edx
c0113b2f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0113b32:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0113b35:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0113b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c0113b3b:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0113b3c:	83 c4 20             	add    $0x20,%esp
c0113b3f:	5e                   	pop    %esi
c0113b40:	5f                   	pop    %edi
c0113b41:	5d                   	pop    %ebp
c0113b42:	c3                   	ret    

c0113b43 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0113b43:	55                   	push   %ebp
c0113b44:	89 e5                	mov    %esp,%ebp
c0113b46:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0113b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0113b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b52:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0113b55:	eb 30                	jmp    c0113b87 <memcmp+0x44>
        if (*s1 != *s2) {
c0113b57:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113b5a:	0f b6 10             	movzbl (%eax),%edx
c0113b5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113b60:	0f b6 00             	movzbl (%eax),%eax
c0113b63:	38 c2                	cmp    %al,%dl
c0113b65:	74 18                	je     c0113b7f <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0113b67:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113b6a:	0f b6 00             	movzbl (%eax),%eax
c0113b6d:	0f b6 d0             	movzbl %al,%edx
c0113b70:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113b73:	0f b6 00             	movzbl (%eax),%eax
c0113b76:	0f b6 c0             	movzbl %al,%eax
c0113b79:	29 c2                	sub    %eax,%edx
c0113b7b:	89 d0                	mov    %edx,%eax
c0113b7d:	eb 1a                	jmp    c0113b99 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0113b7f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0113b83:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c0113b87:	8b 45 10             	mov    0x10(%ebp),%eax
c0113b8a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113b8d:	89 55 10             	mov    %edx,0x10(%ebp)
c0113b90:	85 c0                	test   %eax,%eax
c0113b92:	75 c3                	jne    c0113b57 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0113b94:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113b99:	c9                   	leave  
c0113b9a:	c3                   	ret    

c0113b9b <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0113b9b:	55                   	push   %ebp
c0113b9c:	89 e5                	mov    %esp,%ebp
c0113b9e:	83 ec 38             	sub    $0x38,%esp
c0113ba1:	8b 45 14             	mov    0x14(%ebp),%eax
c0113ba4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113ba7:	8b 45 18             	mov    0x18(%ebp),%eax
c0113baa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0113bad:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113bb0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0113bb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113bb6:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0113bb9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113bbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113bbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113bc2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113bc5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113bc8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0113bcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113bd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113bd5:	74 1c                	je     c0113bf3 <printnum+0x58>
c0113bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113bda:	ba 00 00 00 00       	mov    $0x0,%edx
c0113bdf:	f7 75 e4             	divl   -0x1c(%ebp)
c0113be2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0113be5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113be8:	ba 00 00 00 00       	mov    $0x0,%edx
c0113bed:	f7 75 e4             	divl   -0x1c(%ebp)
c0113bf0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113bf3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113bf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113bf9:	f7 75 e4             	divl   -0x1c(%ebp)
c0113bfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113bff:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0113c02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c05:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113c08:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113c0b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0113c0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c11:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0113c14:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113c17:	ba 00 00 00 00       	mov    $0x0,%edx
c0113c1c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0113c1f:	77 44                	ja     c0113c65 <printnum+0xca>
c0113c21:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0113c24:	72 05                	jb     c0113c2b <printnum+0x90>
c0113c26:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0113c29:	77 3a                	ja     c0113c65 <printnum+0xca>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0113c2b:	8b 45 20             	mov    0x20(%ebp),%eax
c0113c2e:	83 e8 01             	sub    $0x1,%eax
c0113c31:	ff 75 24             	pushl  0x24(%ebp)
c0113c34:	50                   	push   %eax
c0113c35:	ff 75 1c             	pushl  0x1c(%ebp)
c0113c38:	ff 75 ec             	pushl  -0x14(%ebp)
c0113c3b:	ff 75 e8             	pushl  -0x18(%ebp)
c0113c3e:	ff 75 10             	pushl  0x10(%ebp)
c0113c41:	ff 75 0c             	pushl  0xc(%ebp)
c0113c44:	ff 75 08             	pushl  0x8(%ebp)
c0113c47:	e8 4f ff ff ff       	call   c0113b9b <printnum>
c0113c4c:	83 c4 20             	add    $0x20,%esp
c0113c4f:	eb 1e                	jmp    c0113c6f <printnum+0xd4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0113c51:	83 ec 04             	sub    $0x4,%esp
c0113c54:	ff 75 0c             	pushl  0xc(%ebp)
c0113c57:	ff 75 10             	pushl  0x10(%ebp)
c0113c5a:	ff 75 24             	pushl  0x24(%ebp)
c0113c5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c60:	ff d0                	call   *%eax
c0113c62:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0113c65:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0113c69:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0113c6d:	7f e2                	jg     c0113c51 <printnum+0xb6>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0113c6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113c72:	05 04 89 11 c0       	add    $0xc0118904,%eax
c0113c77:	0f b6 00             	movzbl (%eax),%eax
c0113c7a:	0f be c0             	movsbl %al,%eax
c0113c7d:	83 ec 04             	sub    $0x4,%esp
c0113c80:	ff 75 0c             	pushl  0xc(%ebp)
c0113c83:	ff 75 10             	pushl  0x10(%ebp)
c0113c86:	50                   	push   %eax
c0113c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c8a:	ff d0                	call   *%eax
c0113c8c:	83 c4 10             	add    $0x10,%esp
}
c0113c8f:	90                   	nop
c0113c90:	c9                   	leave  
c0113c91:	c3                   	ret    

c0113c92 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0113c92:	55                   	push   %ebp
c0113c93:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0113c95:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0113c99:	7e 14                	jle    c0113caf <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0113c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c9e:	8b 00                	mov    (%eax),%eax
c0113ca0:	8d 48 08             	lea    0x8(%eax),%ecx
c0113ca3:	8b 55 08             	mov    0x8(%ebp),%edx
c0113ca6:	89 0a                	mov    %ecx,(%edx)
c0113ca8:	8b 50 04             	mov    0x4(%eax),%edx
c0113cab:	8b 00                	mov    (%eax),%eax
c0113cad:	eb 30                	jmp    c0113cdf <getuint+0x4d>
    }
    else if (lflag) {
c0113caf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113cb3:	74 16                	je     c0113ccb <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0113cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cb8:	8b 00                	mov    (%eax),%eax
c0113cba:	8d 48 04             	lea    0x4(%eax),%ecx
c0113cbd:	8b 55 08             	mov    0x8(%ebp),%edx
c0113cc0:	89 0a                	mov    %ecx,(%edx)
c0113cc2:	8b 00                	mov    (%eax),%eax
c0113cc4:	ba 00 00 00 00       	mov    $0x0,%edx
c0113cc9:	eb 14                	jmp    c0113cdf <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0113ccb:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cce:	8b 00                	mov    (%eax),%eax
c0113cd0:	8d 48 04             	lea    0x4(%eax),%ecx
c0113cd3:	8b 55 08             	mov    0x8(%ebp),%edx
c0113cd6:	89 0a                	mov    %ecx,(%edx)
c0113cd8:	8b 00                	mov    (%eax),%eax
c0113cda:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0113cdf:	5d                   	pop    %ebp
c0113ce0:	c3                   	ret    

c0113ce1 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0113ce1:	55                   	push   %ebp
c0113ce2:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0113ce4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0113ce8:	7e 14                	jle    c0113cfe <getint+0x1d>
        return va_arg(*ap, long long);
c0113cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ced:	8b 00                	mov    (%eax),%eax
c0113cef:	8d 48 08             	lea    0x8(%eax),%ecx
c0113cf2:	8b 55 08             	mov    0x8(%ebp),%edx
c0113cf5:	89 0a                	mov    %ecx,(%edx)
c0113cf7:	8b 50 04             	mov    0x4(%eax),%edx
c0113cfa:	8b 00                	mov    (%eax),%eax
c0113cfc:	eb 28                	jmp    c0113d26 <getint+0x45>
    }
    else if (lflag) {
c0113cfe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113d02:	74 12                	je     c0113d16 <getint+0x35>
        return va_arg(*ap, long);
c0113d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d07:	8b 00                	mov    (%eax),%eax
c0113d09:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d0f:	89 0a                	mov    %ecx,(%edx)
c0113d11:	8b 00                	mov    (%eax),%eax
c0113d13:	99                   	cltd   
c0113d14:	eb 10                	jmp    c0113d26 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0113d16:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d19:	8b 00                	mov    (%eax),%eax
c0113d1b:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d1e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d21:	89 0a                	mov    %ecx,(%edx)
c0113d23:	8b 00                	mov    (%eax),%eax
c0113d25:	99                   	cltd   
    }
}
c0113d26:	5d                   	pop    %ebp
c0113d27:	c3                   	ret    

c0113d28 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0113d28:	55                   	push   %ebp
c0113d29:	89 e5                	mov    %esp,%ebp
c0113d2b:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c0113d2e:	8d 45 18             	lea    0x18(%ebp),%eax
c0113d31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0113d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d37:	83 ec 0c             	sub    $0xc,%esp
c0113d3a:	50                   	push   %eax
c0113d3b:	ff 75 14             	pushl  0x14(%ebp)
c0113d3e:	ff 75 10             	pushl  0x10(%ebp)
c0113d41:	ff 75 0c             	pushl  0xc(%ebp)
c0113d44:	ff 75 08             	pushl  0x8(%ebp)
c0113d47:	e8 06 00 00 00       	call   c0113d52 <vprintfmt>
c0113d4c:	83 c4 20             	add    $0x20,%esp
    va_end(ap);
}
c0113d4f:	90                   	nop
c0113d50:	c9                   	leave  
c0113d51:	c3                   	ret    

c0113d52 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0113d52:	55                   	push   %ebp
c0113d53:	89 e5                	mov    %esp,%ebp
c0113d55:	56                   	push   %esi
c0113d56:	53                   	push   %ebx
c0113d57:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0113d5a:	eb 1a                	jmp    c0113d76 <vprintfmt+0x24>
            if (ch == '\0') {
c0113d5c:	85 db                	test   %ebx,%ebx
c0113d5e:	0f 84 be 03 00 00    	je     c0114122 <vprintfmt+0x3d0>
                return;
            }
            putch(ch, putdat, fd);
c0113d64:	83 ec 04             	sub    $0x4,%esp
c0113d67:	ff 75 0c             	pushl  0xc(%ebp)
c0113d6a:	ff 75 10             	pushl  0x10(%ebp)
c0113d6d:	53                   	push   %ebx
c0113d6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d71:	ff d0                	call   *%eax
c0113d73:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0113d76:	8b 45 14             	mov    0x14(%ebp),%eax
c0113d79:	8d 50 01             	lea    0x1(%eax),%edx
c0113d7c:	89 55 14             	mov    %edx,0x14(%ebp)
c0113d7f:	0f b6 00             	movzbl (%eax),%eax
c0113d82:	0f b6 d8             	movzbl %al,%ebx
c0113d85:	83 fb 25             	cmp    $0x25,%ebx
c0113d88:	75 d2                	jne    c0113d5c <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0113d8a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0113d8e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0113d95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d98:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0113d9b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0113da2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113da5:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0113da8:	8b 45 14             	mov    0x14(%ebp),%eax
c0113dab:	8d 50 01             	lea    0x1(%eax),%edx
c0113dae:	89 55 14             	mov    %edx,0x14(%ebp)
c0113db1:	0f b6 00             	movzbl (%eax),%eax
c0113db4:	0f b6 d8             	movzbl %al,%ebx
c0113db7:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0113dba:	83 f8 55             	cmp    $0x55,%eax
c0113dbd:	0f 87 2f 03 00 00    	ja     c01140f2 <vprintfmt+0x3a0>
c0113dc3:	8b 04 85 28 89 11 c0 	mov    -0x3fee76d8(,%eax,4),%eax
c0113dca:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0113dcc:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0113dd0:	eb d6                	jmp    c0113da8 <vprintfmt+0x56>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0113dd2:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0113dd6:	eb d0                	jmp    c0113da8 <vprintfmt+0x56>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0113dd8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0113ddf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113de2:	89 d0                	mov    %edx,%eax
c0113de4:	c1 e0 02             	shl    $0x2,%eax
c0113de7:	01 d0                	add    %edx,%eax
c0113de9:	01 c0                	add    %eax,%eax
c0113deb:	01 d8                	add    %ebx,%eax
c0113ded:	83 e8 30             	sub    $0x30,%eax
c0113df0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0113df3:	8b 45 14             	mov    0x14(%ebp),%eax
c0113df6:	0f b6 00             	movzbl (%eax),%eax
c0113df9:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0113dfc:	83 fb 2f             	cmp    $0x2f,%ebx
c0113dff:	7e 39                	jle    c0113e3a <vprintfmt+0xe8>
c0113e01:	83 fb 39             	cmp    $0x39,%ebx
c0113e04:	7f 34                	jg     c0113e3a <vprintfmt+0xe8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0113e06:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0113e0a:	eb d3                	jmp    c0113ddf <vprintfmt+0x8d>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c0113e0c:	8b 45 18             	mov    0x18(%ebp),%eax
c0113e0f:	8d 50 04             	lea    0x4(%eax),%edx
c0113e12:	89 55 18             	mov    %edx,0x18(%ebp)
c0113e15:	8b 00                	mov    (%eax),%eax
c0113e17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0113e1a:	eb 1f                	jmp    c0113e3b <vprintfmt+0xe9>

        case '.':
            if (width < 0)
c0113e1c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113e20:	79 86                	jns    c0113da8 <vprintfmt+0x56>
                width = 0;
c0113e22:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0113e29:	e9 7a ff ff ff       	jmp    c0113da8 <vprintfmt+0x56>

        case '#':
            altflag = 1;
c0113e2e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0113e35:	e9 6e ff ff ff       	jmp    c0113da8 <vprintfmt+0x56>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c0113e3a:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c0113e3b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113e3f:	0f 89 63 ff ff ff    	jns    c0113da8 <vprintfmt+0x56>
                width = precision, precision = -1;
c0113e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e48:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113e4b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0113e52:	e9 51 ff ff ff       	jmp    c0113da8 <vprintfmt+0x56>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0113e57:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0113e5b:	e9 48 ff ff ff       	jmp    c0113da8 <vprintfmt+0x56>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0113e60:	8b 45 18             	mov    0x18(%ebp),%eax
c0113e63:	8d 50 04             	lea    0x4(%eax),%edx
c0113e66:	89 55 18             	mov    %edx,0x18(%ebp)
c0113e69:	8b 00                	mov    (%eax),%eax
c0113e6b:	83 ec 04             	sub    $0x4,%esp
c0113e6e:	ff 75 0c             	pushl  0xc(%ebp)
c0113e71:	ff 75 10             	pushl  0x10(%ebp)
c0113e74:	50                   	push   %eax
c0113e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e78:	ff d0                	call   *%eax
c0113e7a:	83 c4 10             	add    $0x10,%esp
            break;
c0113e7d:	e9 9b 02 00 00       	jmp    c011411d <vprintfmt+0x3cb>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0113e82:	8b 45 18             	mov    0x18(%ebp),%eax
c0113e85:	8d 50 04             	lea    0x4(%eax),%edx
c0113e88:	89 55 18             	mov    %edx,0x18(%ebp)
c0113e8b:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0113e8d:	85 db                	test   %ebx,%ebx
c0113e8f:	79 02                	jns    c0113e93 <vprintfmt+0x141>
                err = -err;
c0113e91:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0113e93:	83 fb 18             	cmp    $0x18,%ebx
c0113e96:	7f 0b                	jg     c0113ea3 <vprintfmt+0x151>
c0113e98:	8b 34 9d a0 88 11 c0 	mov    -0x3fee7760(,%ebx,4),%esi
c0113e9f:	85 f6                	test   %esi,%esi
c0113ea1:	75 1f                	jne    c0113ec2 <vprintfmt+0x170>
                printfmt(putch, fd, putdat, "error %d", err);
c0113ea3:	83 ec 0c             	sub    $0xc,%esp
c0113ea6:	53                   	push   %ebx
c0113ea7:	68 15 89 11 c0       	push   $0xc0118915
c0113eac:	ff 75 10             	pushl  0x10(%ebp)
c0113eaf:	ff 75 0c             	pushl  0xc(%ebp)
c0113eb2:	ff 75 08             	pushl  0x8(%ebp)
c0113eb5:	e8 6e fe ff ff       	call   c0113d28 <printfmt>
c0113eba:	83 c4 20             	add    $0x20,%esp
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0113ebd:	e9 5b 02 00 00       	jmp    c011411d <vprintfmt+0x3cb>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0113ec2:	83 ec 0c             	sub    $0xc,%esp
c0113ec5:	56                   	push   %esi
c0113ec6:	68 1e 89 11 c0       	push   $0xc011891e
c0113ecb:	ff 75 10             	pushl  0x10(%ebp)
c0113ece:	ff 75 0c             	pushl  0xc(%ebp)
c0113ed1:	ff 75 08             	pushl  0x8(%ebp)
c0113ed4:	e8 4f fe ff ff       	call   c0113d28 <printfmt>
c0113ed9:	83 c4 20             	add    $0x20,%esp
            }
            break;
c0113edc:	e9 3c 02 00 00       	jmp    c011411d <vprintfmt+0x3cb>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0113ee1:	8b 45 18             	mov    0x18(%ebp),%eax
c0113ee4:	8d 50 04             	lea    0x4(%eax),%edx
c0113ee7:	89 55 18             	mov    %edx,0x18(%ebp)
c0113eea:	8b 30                	mov    (%eax),%esi
c0113eec:	85 f6                	test   %esi,%esi
c0113eee:	75 05                	jne    c0113ef5 <vprintfmt+0x1a3>
                p = "(null)";
c0113ef0:	be 21 89 11 c0       	mov    $0xc0118921,%esi
            }
            if (width > 0 && padc != '-') {
c0113ef5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113ef9:	7e 7f                	jle    c0113f7a <vprintfmt+0x228>
c0113efb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0113eff:	74 79                	je     c0113f7a <vprintfmt+0x228>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0113f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f04:	83 ec 08             	sub    $0x8,%esp
c0113f07:	50                   	push   %eax
c0113f08:	56                   	push   %esi
c0113f09:	e8 d0 f7 ff ff       	call   c01136de <strnlen>
c0113f0e:	83 c4 10             	add    $0x10,%esp
c0113f11:	89 c2                	mov    %eax,%edx
c0113f13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f16:	29 d0                	sub    %edx,%eax
c0113f18:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113f1b:	eb 1a                	jmp    c0113f37 <vprintfmt+0x1e5>
                    putch(padc, putdat, fd);
c0113f1d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0113f21:	83 ec 04             	sub    $0x4,%esp
c0113f24:	ff 75 0c             	pushl  0xc(%ebp)
c0113f27:	ff 75 10             	pushl  0x10(%ebp)
c0113f2a:	50                   	push   %eax
c0113f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f2e:	ff d0                	call   *%eax
c0113f30:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0113f33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0113f37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113f3b:	7f e0                	jg     c0113f1d <vprintfmt+0x1cb>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0113f3d:	eb 3b                	jmp    c0113f7a <vprintfmt+0x228>
                if (altflag && (ch < ' ' || ch > '~')) {
c0113f3f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113f43:	74 1f                	je     c0113f64 <vprintfmt+0x212>
c0113f45:	83 fb 1f             	cmp    $0x1f,%ebx
c0113f48:	7e 05                	jle    c0113f4f <vprintfmt+0x1fd>
c0113f4a:	83 fb 7e             	cmp    $0x7e,%ebx
c0113f4d:	7e 15                	jle    c0113f64 <vprintfmt+0x212>
                    putch('?', putdat, fd);
c0113f4f:	83 ec 04             	sub    $0x4,%esp
c0113f52:	ff 75 0c             	pushl  0xc(%ebp)
c0113f55:	ff 75 10             	pushl  0x10(%ebp)
c0113f58:	6a 3f                	push   $0x3f
c0113f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f5d:	ff d0                	call   *%eax
c0113f5f:	83 c4 10             	add    $0x10,%esp
c0113f62:	eb 12                	jmp    c0113f76 <vprintfmt+0x224>
                }
                else {
                    putch(ch, putdat, fd);
c0113f64:	83 ec 04             	sub    $0x4,%esp
c0113f67:	ff 75 0c             	pushl  0xc(%ebp)
c0113f6a:	ff 75 10             	pushl  0x10(%ebp)
c0113f6d:	53                   	push   %ebx
c0113f6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f71:	ff d0                	call   *%eax
c0113f73:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0113f76:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0113f7a:	89 f0                	mov    %esi,%eax
c0113f7c:	8d 70 01             	lea    0x1(%eax),%esi
c0113f7f:	0f b6 00             	movzbl (%eax),%eax
c0113f82:	0f be d8             	movsbl %al,%ebx
c0113f85:	85 db                	test   %ebx,%ebx
c0113f87:	74 29                	je     c0113fb2 <vprintfmt+0x260>
c0113f89:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113f8d:	78 b0                	js     c0113f3f <vprintfmt+0x1ed>
c0113f8f:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0113f93:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113f97:	79 a6                	jns    c0113f3f <vprintfmt+0x1ed>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0113f99:	eb 17                	jmp    c0113fb2 <vprintfmt+0x260>
                putch(' ', putdat, fd);
c0113f9b:	83 ec 04             	sub    $0x4,%esp
c0113f9e:	ff 75 0c             	pushl  0xc(%ebp)
c0113fa1:	ff 75 10             	pushl  0x10(%ebp)
c0113fa4:	6a 20                	push   $0x20
c0113fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fa9:	ff d0                	call   *%eax
c0113fab:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0113fae:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0113fb2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113fb6:	7f e3                	jg     c0113f9b <vprintfmt+0x249>
                putch(' ', putdat, fd);
            }
            break;
c0113fb8:	e9 60 01 00 00       	jmp    c011411d <vprintfmt+0x3cb>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0113fbd:	83 ec 08             	sub    $0x8,%esp
c0113fc0:	ff 75 e0             	pushl  -0x20(%ebp)
c0113fc3:	8d 45 18             	lea    0x18(%ebp),%eax
c0113fc6:	50                   	push   %eax
c0113fc7:	e8 15 fd ff ff       	call   c0113ce1 <getint>
c0113fcc:	83 c4 10             	add    $0x10,%esp
c0113fcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113fd2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0113fd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113fdb:	85 d2                	test   %edx,%edx
c0113fdd:	79 26                	jns    c0114005 <vprintfmt+0x2b3>
                putch('-', putdat, fd);
c0113fdf:	83 ec 04             	sub    $0x4,%esp
c0113fe2:	ff 75 0c             	pushl  0xc(%ebp)
c0113fe5:	ff 75 10             	pushl  0x10(%ebp)
c0113fe8:	6a 2d                	push   $0x2d
c0113fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fed:	ff d0                	call   *%eax
c0113fef:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c0113ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113ff8:	f7 d8                	neg    %eax
c0113ffa:	83 d2 00             	adc    $0x0,%edx
c0113ffd:	f7 da                	neg    %edx
c0113fff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114002:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114005:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c011400c:	e9 a8 00 00 00       	jmp    c01140b9 <vprintfmt+0x367>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114011:	83 ec 08             	sub    $0x8,%esp
c0114014:	ff 75 e0             	pushl  -0x20(%ebp)
c0114017:	8d 45 18             	lea    0x18(%ebp),%eax
c011401a:	50                   	push   %eax
c011401b:	e8 72 fc ff ff       	call   c0113c92 <getuint>
c0114020:	83 c4 10             	add    $0x10,%esp
c0114023:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114026:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0114029:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114030:	e9 84 00 00 00       	jmp    c01140b9 <vprintfmt+0x367>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114035:	83 ec 08             	sub    $0x8,%esp
c0114038:	ff 75 e0             	pushl  -0x20(%ebp)
c011403b:	8d 45 18             	lea    0x18(%ebp),%eax
c011403e:	50                   	push   %eax
c011403f:	e8 4e fc ff ff       	call   c0113c92 <getuint>
c0114044:	83 c4 10             	add    $0x10,%esp
c0114047:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011404a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c011404d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114054:	eb 63                	jmp    c01140b9 <vprintfmt+0x367>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114056:	83 ec 04             	sub    $0x4,%esp
c0114059:	ff 75 0c             	pushl  0xc(%ebp)
c011405c:	ff 75 10             	pushl  0x10(%ebp)
c011405f:	6a 30                	push   $0x30
c0114061:	8b 45 08             	mov    0x8(%ebp),%eax
c0114064:	ff d0                	call   *%eax
c0114066:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat, fd);
c0114069:	83 ec 04             	sub    $0x4,%esp
c011406c:	ff 75 0c             	pushl  0xc(%ebp)
c011406f:	ff 75 10             	pushl  0x10(%ebp)
c0114072:	6a 78                	push   $0x78
c0114074:	8b 45 08             	mov    0x8(%ebp),%eax
c0114077:	ff d0                	call   *%eax
c0114079:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c011407c:	8b 45 18             	mov    0x18(%ebp),%eax
c011407f:	8d 50 04             	lea    0x4(%eax),%edx
c0114082:	89 55 18             	mov    %edx,0x18(%ebp)
c0114085:	8b 00                	mov    (%eax),%eax
c0114087:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011408a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0114091:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114098:	eb 1f                	jmp    c01140b9 <vprintfmt+0x367>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c011409a:	83 ec 08             	sub    $0x8,%esp
c011409d:	ff 75 e0             	pushl  -0x20(%ebp)
c01140a0:	8d 45 18             	lea    0x18(%ebp),%eax
c01140a3:	50                   	push   %eax
c01140a4:	e8 e9 fb ff ff       	call   c0113c92 <getuint>
c01140a9:	83 c4 10             	add    $0x10,%esp
c01140ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01140af:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c01140b2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c01140b9:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c01140bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140c0:	52                   	push   %edx
c01140c1:	ff 75 e8             	pushl  -0x18(%ebp)
c01140c4:	50                   	push   %eax
c01140c5:	ff 75 f4             	pushl  -0xc(%ebp)
c01140c8:	ff 75 f0             	pushl  -0x10(%ebp)
c01140cb:	ff 75 10             	pushl  0x10(%ebp)
c01140ce:	ff 75 0c             	pushl  0xc(%ebp)
c01140d1:	ff 75 08             	pushl  0x8(%ebp)
c01140d4:	e8 c2 fa ff ff       	call   c0113b9b <printnum>
c01140d9:	83 c4 20             	add    $0x20,%esp
            break;
c01140dc:	eb 3f                	jmp    c011411d <vprintfmt+0x3cb>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01140de:	83 ec 04             	sub    $0x4,%esp
c01140e1:	ff 75 0c             	pushl  0xc(%ebp)
c01140e4:	ff 75 10             	pushl  0x10(%ebp)
c01140e7:	53                   	push   %ebx
c01140e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01140eb:	ff d0                	call   *%eax
c01140ed:	83 c4 10             	add    $0x10,%esp
            break;
c01140f0:	eb 2b                	jmp    c011411d <vprintfmt+0x3cb>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c01140f2:	83 ec 04             	sub    $0x4,%esp
c01140f5:	ff 75 0c             	pushl  0xc(%ebp)
c01140f8:	ff 75 10             	pushl  0x10(%ebp)
c01140fb:	6a 25                	push   $0x25
c01140fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114100:	ff d0                	call   *%eax
c0114102:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114105:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114109:	eb 04                	jmp    c011410f <vprintfmt+0x3bd>
c011410b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011410f:	8b 45 14             	mov    0x14(%ebp),%eax
c0114112:	83 e8 01             	sub    $0x1,%eax
c0114115:	0f b6 00             	movzbl (%eax),%eax
c0114118:	3c 25                	cmp    $0x25,%al
c011411a:	75 ef                	jne    c011410b <vprintfmt+0x3b9>
                /* do nothing */;
            break;
c011411c:	90                   	nop
        }
    }
c011411d:	e9 38 fc ff ff       	jmp    c0113d5a <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c0114122:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114123:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0114126:	5b                   	pop    %ebx
c0114127:	5e                   	pop    %esi
c0114128:	5d                   	pop    %ebp
c0114129:	c3                   	ret    

c011412a <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c011412a:	55                   	push   %ebp
c011412b:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c011412d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114130:	8b 40 08             	mov    0x8(%eax),%eax
c0114133:	8d 50 01             	lea    0x1(%eax),%edx
c0114136:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114139:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c011413c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011413f:	8b 10                	mov    (%eax),%edx
c0114141:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114144:	8b 40 04             	mov    0x4(%eax),%eax
c0114147:	39 c2                	cmp    %eax,%edx
c0114149:	73 12                	jae    c011415d <sprintputch+0x33>
        *b->buf ++ = ch;
c011414b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011414e:	8b 00                	mov    (%eax),%eax
c0114150:	8d 48 01             	lea    0x1(%eax),%ecx
c0114153:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114156:	89 0a                	mov    %ecx,(%edx)
c0114158:	8b 55 08             	mov    0x8(%ebp),%edx
c011415b:	88 10                	mov    %dl,(%eax)
    }
}
c011415d:	90                   	nop
c011415e:	5d                   	pop    %ebp
c011415f:	c3                   	ret    

c0114160 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0114160:	55                   	push   %ebp
c0114161:	89 e5                	mov    %esp,%ebp
c0114163:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0114166:	8d 45 14             	lea    0x14(%ebp),%eax
c0114169:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c011416c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011416f:	50                   	push   %eax
c0114170:	ff 75 10             	pushl  0x10(%ebp)
c0114173:	ff 75 0c             	pushl  0xc(%ebp)
c0114176:	ff 75 08             	pushl  0x8(%ebp)
c0114179:	e8 0b 00 00 00       	call   c0114189 <vsnprintf>
c011417e:	83 c4 10             	add    $0x10,%esp
c0114181:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0114184:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114187:	c9                   	leave  
c0114188:	c3                   	ret    

c0114189 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0114189:	55                   	push   %ebp
c011418a:	89 e5                	mov    %esp,%ebp
c011418c:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c011418f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114192:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114195:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114198:	8d 50 ff             	lea    -0x1(%eax),%edx
c011419b:	8b 45 08             	mov    0x8(%ebp),%eax
c011419e:	01 d0                	add    %edx,%eax
c01141a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01141a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01141aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01141ae:	74 0a                	je     c01141ba <vsnprintf+0x31>
c01141b0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01141b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141b6:	39 c2                	cmp    %eax,%edx
c01141b8:	76 07                	jbe    c01141c1 <vsnprintf+0x38>
        return -E_INVAL;
c01141ba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01141bf:	eb 28                	jmp    c01141e9 <vsnprintf+0x60>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01141c1:	83 ec 0c             	sub    $0xc,%esp
c01141c4:	ff 75 14             	pushl  0x14(%ebp)
c01141c7:	ff 75 10             	pushl  0x10(%ebp)
c01141ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01141cd:	50                   	push   %eax
c01141ce:	68 d9 6a ff ff       	push   $0xffff6ad9
c01141d3:	68 2a 41 11 c0       	push   $0xc011412a
c01141d8:	e8 75 fb ff ff       	call   c0113d52 <vprintfmt>
c01141dd:	83 c4 20             	add    $0x20,%esp
    // null terminate the buffer
    *b.buf = '\0';
c01141e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141e3:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c01141e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01141e9:	c9                   	leave  
c01141ea:	c3                   	ret    

c01141eb <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c01141eb:	55                   	push   %ebp
c01141ec:	89 e5                	mov    %esp,%ebp
c01141ee:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01141f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01141f4:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01141fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01141fd:	b8 20 00 00 00       	mov    $0x20,%eax
c0114202:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114205:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114208:	89 c1                	mov    %eax,%ecx
c011420a:	d3 ea                	shr    %cl,%edx
c011420c:	89 d0                	mov    %edx,%eax
}
c011420e:	c9                   	leave  
c011420f:	c3                   	ret    

c0114210 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0114210:	55                   	push   %ebp
c0114211:	89 e5                	mov    %esp,%ebp
c0114213:	57                   	push   %edi
c0114214:	56                   	push   %esi
c0114215:	53                   	push   %ebx
c0114216:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0114219:	a1 a8 ee 14 c0       	mov    0xc014eea8,%eax
c011421e:	8b 15 ac ee 14 c0    	mov    0xc014eeac,%edx
c0114224:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c011422a:	6b f0 05             	imul   $0x5,%eax,%esi
c011422d:	01 fe                	add    %edi,%esi
c011422f:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c0114234:	f7 e7                	mul    %edi
c0114236:	01 d6                	add    %edx,%esi
c0114238:	89 f2                	mov    %esi,%edx
c011423a:	83 c0 0b             	add    $0xb,%eax
c011423d:	83 d2 00             	adc    $0x0,%edx
c0114240:	89 c7                	mov    %eax,%edi
c0114242:	83 e7 ff             	and    $0xffffffff,%edi
c0114245:	89 f9                	mov    %edi,%ecx
c0114247:	0f b7 da             	movzwl %dx,%ebx
c011424a:	89 0d a8 ee 14 c0    	mov    %ecx,0xc014eea8
c0114250:	89 1d ac ee 14 c0    	mov    %ebx,0xc014eeac
    unsigned long long result = (next >> 12);
c0114256:	a1 a8 ee 14 c0       	mov    0xc014eea8,%eax
c011425b:	8b 15 ac ee 14 c0    	mov    0xc014eeac,%edx
c0114261:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0114265:	c1 ea 0c             	shr    $0xc,%edx
c0114268:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011426b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c011426e:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0114275:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114278:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011427b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011427e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0114281:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114284:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114287:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011428b:	74 1c                	je     c01142a9 <rand+0x99>
c011428d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114290:	ba 00 00 00 00       	mov    $0x0,%edx
c0114295:	f7 75 dc             	divl   -0x24(%ebp)
c0114298:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011429b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011429e:	ba 00 00 00 00       	mov    $0x0,%edx
c01142a3:	f7 75 dc             	divl   -0x24(%ebp)
c01142a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01142a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01142ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01142af:	f7 75 dc             	divl   -0x24(%ebp)
c01142b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01142b5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01142b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01142bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01142be:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01142c1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01142c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01142c7:	83 c4 24             	add    $0x24,%esp
c01142ca:	5b                   	pop    %ebx
c01142cb:	5e                   	pop    %esi
c01142cc:	5f                   	pop    %edi
c01142cd:	5d                   	pop    %ebp
c01142ce:	c3                   	ret    

c01142cf <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01142cf:	55                   	push   %ebp
c01142d0:	89 e5                	mov    %esp,%ebp
    next = seed;
c01142d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01142d5:	ba 00 00 00 00       	mov    $0x0,%edx
c01142da:	a3 a8 ee 14 c0       	mov    %eax,0xc014eea8
c01142df:	89 15 ac ee 14 c0    	mov    %edx,0xc014eeac
}
c01142e5:	90                   	nop
c01142e6:	5d                   	pop    %ebp
c01142e7:	c3                   	ret    
